#!/usr/bin/env python3
"""
Script to analyze New Brunswick government appointment data (2013-2024)
to identify reappointment trends by government branch.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_and_combine_data():
    """
    Load all 12 CSV files (2013-2024) and combine them into a single DataFrame.
    """
    # Define paths
    base_path = Path("raw_data")
    output_dir = Path("scripts/claudeopus4/version1/execution2/analysis_data")
    
    # Create output directory if it doesn't exist
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # Initialize list to store DataFrames
    all_dataframes = []
    
    # Years to process
    years = range(2013, 2025)
    
    print("Loading appointment data files...")
    
    for year in years:
        filename = f"appointments_{year}.csv"
        filepath = base_path / filename
        
        try:
            # Load CSV file
            df = pd.read_csv(filepath, encoding='utf-8')
            
            # Add year column
            df['year'] = year
            
            # Append to list
            all_dataframes.append(df)
            
            print(f"✓ Loaded {filename}: {len(df)} rows")
            
        except FileNotFoundError:
            print(f"✗ Warning: {filename} not found, skipping...")
            continue
        except Exception as e:
            print(f"✗ Error loading {filename}: {str(e)}")
            continue
    
    if not all_dataframes:
        print("Error: No data files could be loaded.")
        sys.exit(1)
    
    # Combine all DataFrames
    print("\nCombining all datasets...")
    combined_df = pd.concat(all_dataframes, ignore_index=True)
    
    # Save combined dataset
    output_path = output_dir / "step1_combined_appointments.csv"
    combined_df.to_csv(output_path, index=False, encoding='utf-8')
    print(f"\n✓ Combined dataset saved to: {output_path}")
    
    return combined_df

def print_dataset_info(df):
    """
    Print basic information about the combined dataset.
    """
    print("\n" + "="*50)
    print("COMBINED DATASET INFORMATION")
    print("="*50)
    
    print(f"\nDataset shape: {df.shape}")
    print(f"Total appointments: {len(df):,}")
    print(f"Number of columns: {df.shape[1]}")
    
    print("\nColumn names:")
    for i, col in enumerate(df.columns, 1):
        print(f"  {i:2d}. {col}")
    
    print("\nData types:")
    print(df.dtypes)
    
    print("\nYear distribution:")
    year_counts = df['year'].value_counts().sort_index()
    for year, count in year_counts.items():
        print(f"  {year}: {count:,} appointments")
    
    print("\nMissing values per column:")
    missing = df.isnull().sum()
    for col, count in missing[missing > 0].items():
        print(f"  {col}: {count:,} ({count/len(df)*100:.1f}%)")
    
    print("\nReappointment statistics:")
    reappointed_count = df['reappointed'].sum()
    reappointed_pct = (reappointed_count / len(df)) * 100
    print(f"  Total reappointments: {reappointed_count:,} ({reappointed_pct:.1f}%)")
    
    # Check if 'org' column exists (organization/branch)
    if 'org' in df.columns:
        print("\nUnique organizations/branches: ", df['org'].nunique())
        print("\nTop 10 organizations by appointment count:")
        top_orgs = df['org'].value_counts().head(10)
        for org, count in top_orgs.items():
            print(f"  {org}: {count:,}")

def main():
    """
    Main execution function.
    """
    print("New Brunswick Government Appointments Analysis")
    print("Processing appointment data from 2013-2024")
    print("-" * 50)
    
    try:
        # Load and combine data
        combined_df = load_and_combine_data()
        
        # Print dataset information
        print_dataset_info(combined_df)
        
        print("\n✓ Script completed successfully!")
        
    except Exception as e:
        print(f"\n✗ Fatal error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()