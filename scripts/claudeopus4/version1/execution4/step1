#!/usr/bin/env python3
"""
Script to analyze New Brunswick government appointment data (2013-2024).
Combines 12 years of appointment CSV files and prepares for analysis.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_and_combine_appointments():
    """
    Load all appointment CSV files from 2013-2024 and combine them into a single DataFrame.
    """
    # Define years range
    years = range(2013, 2025)  # 2013 to 2024 inclusive
    
    # List to store all dataframes
    dfs = []
    
    # Process each year's file
    for year in years:
        filename = f"raw_data/appointments_{year}.csv"
        
        try:
            # Read CSV file
            df = pd.read_csv(filename)
            
            # Add year column
            df['year'] = year
            
            # Append to list
            dfs.append(df)
            
            print(f"Successfully loaded {filename}: {len(df)} rows")
            
        except FileNotFoundError:
            print(f"Warning: File {filename} not found. Skipping year {year}.")
            continue
        except Exception as e:
            print(f"Error loading {filename}: {str(e)}")
            continue
    
    if not dfs:
        print("Error: No CSV files could be loaded.")
        sys.exit(1)
    
    # Combine all dataframes
    combined_df = pd.concat(dfs, ignore_index=True)
    
    return combined_df

def save_combined_data(df):
    """
    Save the combined dataset to the analysis_data directory.
    """
    # Create output directory if it doesn't exist
    output_dir = Path("scripts/claudeopus4/version1/execution4/analysis_data")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # Save combined dataset
    output_path = output_dir / "step1_combined_appointments.csv"
    df.to_csv(output_path, index=False)
    
    print(f"\nCombined dataset saved to: {output_path}")
    
    return output_path

def main():
    """
    Main function to execute the data loading and combining process.
    """
    print("Starting New Brunswick Government Appointments Data Processing...")
    print("=" * 60)
    
    # Load and combine all appointment files
    combined_df = load_and_combine_appointments()
    
    # Save the combined dataset
    output_path = save_combined_data(combined_df)
    
    # Print summary information
    print("\n" + "=" * 60)
    print("COMBINED DATASET SUMMARY")
    print("=" * 60)
    print(f"Shape: {combined_df.shape} (rows, columns)")
    print(f"Total appointments: {len(combined_df)}")
    print(f"Number of columns: {len(combined_df.columns)}")
    print(f"Years covered: {combined_df['year'].min()} - {combined_df['year'].max()}")
    
    print("\nColumn names:")
    for col in combined_df.columns:
        print(f"  - {col}")
    
    print("\nData types:")
    print(combined_df.dtypes)
    
    print("\nMemory usage:")
    print(combined_df.memory_usage(deep=True))
    
    print("\nBasic statistics for numeric columns:")
    print(combined_df.describe())
    
    print("\nNumber of appointments per year:")
    year_counts = combined_df['year'].value_counts().sort_index()
    for year, count in year_counts.items():
        print(f"  {year}: {count} appointments")
    
    print("\nMissing values per column:")
    missing_values = combined_df.isnull().sum()
    for col, missing in missing_values.items():
        if missing > 0:
            print(f"  {col}: {missing} ({missing/len(combined_df)*100:.1f}%)")
    
    print("\n" + "=" * 60)
    print("Data processing completed successfully!")

if __name__ == "__main__":
    main()