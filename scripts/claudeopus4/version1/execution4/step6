#!/usr/bin/env python3
"""
Script to calculate reappointment rates by merging employee counts and reappointment counts.
Creates a comprehensive table with reappointment rates for each organization/year combination.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_counts_data():
    """
    Load both employee counts and reappointment counts datasets.
    """
    employee_path = Path("scripts/claudeopus4/version1/execution4/analysis_data/step4_employee_counts.csv")
    reappointment_path = Path("scripts/claudeopus4/version1/execution4/analysis_data/step5_reappointment_counts.csv")
    
    try:
        # Load employee counts
        employee_counts = pd.read_csv(employee_path, index_col=0)
        print(f"Successfully loaded employee counts from: {employee_path}")
        print(f"Appointment counts shape: {employee_counts.shape}")
        
        # Load reappointment counts
        reappointment_counts = pd.read_csv(reappointment_path, index_col=0)
        print(f"Successfully loaded reappointment counts from: {reappointment_path}")
        print(f"Reappointment counts shape: {reappointment_counts.shape}")
        
        return employee_counts, reappointment_counts
        
    except FileNotFoundError as e:
        print(f"Error: Could not find file - {e}")
        sys.exit(1)
    except Exception as e:
        print(f"Error loading files: {str(e)}")
        sys.exit(1)

def prepare_data_for_merge(employee_counts, reappointment_counts):
    """
    Prepare the data for merging by converting to long format.
    """
    print("\nPreparing data for merge...")
    print("-" * 60)
    
    # Get year columns (excluding summary columns)
    summary_cols = ['Total', 'Average', 'Min', 'Max']
    
    # Appointment counts - convert to long format
    year_cols_emp = [col for col in employee_counts.columns if col not in summary_cols]
    employee_long = employee_counts[year_cols_emp].reset_index()
    employee_long = employee_long.melt(id_vars=['org'], var_name='year', value_name='total_employees')
    employee_long['year'] = employee_long['year'].astype(int)
    
    # Reappointment counts - convert to long format
    year_cols_reapp = [col for col in reappointment_counts.columns if col not in summary_cols]
    reappointment_long = reappointment_counts[year_cols_reapp].reset_index()
    reappointment_long = reappointment_long.melt(id_vars=['org'], var_name='year', value_name='reappointments')
    reappointment_long['year'] = reappointment_long['year'].astype(int)
    
    print(f"Appointment counts in long format: {employee_long.shape}")
    print(f"Reappointment counts in long format: {reappointment_long.shape}")
    
    # Show sample data
    print("\nSample of employee counts (long format):")
    print(employee_long.head())
    print("\nSample of reappointment counts (long format):")
    print(reappointment_long.head())
    
    return employee_long, reappointment_long

def merge_and_calculate_rates(employee_long, reappointment_long):
    """
    Merge the datasets and calculate reappointment rates.
    """
    print("\nMerging datasets and calculating rates...")
    print("-" * 60)
    
    # Merge on organization and year
    merged = pd.merge(
        employee_long,
        reappointment_long,
        on=['org', 'year'],
        how='outer'
    )
    
    # Fill missing values with 0
    merged['total_employees'] = merged['total_employees'].fillna(0).astype(int)
    merged['reappointments'] = merged['reappointments'].fillna(0).astype(int)
    
    # Calculate reappointment rate with division by zero handling
    merged['reappointment_rate'] = np.where(
        merged['total_employees'] > 0,
        merged['reappointments'] / merged['total_employees'],
        0.0
    )
    
    # Round rate to 4 decimal places
    merged['reappointment_rate'] = merged['reappointment_rate'].round(4)
    
    # Sort by organization and year
    merged = merged.sort_values(['org', 'year'])
    
    # Validate data
    print(f"Merged dataset shape: {merged.shape}")
    print(f"Organizations with data: {merged['org'].nunique()}")
    print(f"Years covered: {sorted(merged['year'].unique())}")
    
    # Check for data issues
    print("\nData validation:")
    print(f"  Rows with zero employees: {(merged['total_employees'] == 0).sum()}")
    print(f"  Rows with reappointments > employees: {(merged['reappointments'] > merged['total_employees']).sum()}")
    print(f"  Maximum reappointment rate: {merged['reappointment_rate'].max():.4f}")
    
    # Fix any cases where reappointments > employees (data error)
    if (merged['reappointments'] > merged['total_employees']).any():
        print("\nWARNING: Found cases where reappointments exceed total employees. Capping rate at 1.0")
        merged.loc[merged['reappointments'] > merged['total_employees'], 'reappointment_rate'] = 1.0
    
    return merged

def analyze_reappointment_rates(merged):
    """
    Analyze and print organizations with highest reappointment rates.
    """
    print("\n" + "=" * 60)
    print("REAPPOINTMENT RATE ANALYSIS")
    print("=" * 60)
    
    # Calculate average reappointment rate by organization
    org_avg_rates = merged.groupby('org').agg({
        'total_employees': 'sum',
        'reappointments': 'sum',
        'reappointment_rate': 'mean'
    }).reset_index()
    
    # Calculate overall rate (total reappointments / total employees)
    org_avg_rates['overall_rate'] = np.where(
        org_avg_rates['total_employees'] > 0,
        org_avg_rates['reappointments'] / org_avg_rates['total_employees'],
        0.0
    )
    
    # Sort by overall rate
    org_avg_rates = org_avg_rates.sort_values('overall_rate', ascending=False)
    
    # Print top organizations by reappointment rate
    print("\nTop 20 Organizations by Overall Reappointment Rate:")
    print("(Minimum 10 total employees)")
    print("-" * 80)
    print(f"{'Organization':40} | {'Total Emp':>9} | {'Reapp':>6} | {'Rate':>6}")
    print("-" * 80)
    
    # Filter for organizations with at least 10 employees
    significant_orgs = org_avg_rates[org_avg_rates['total_employees'] >= 10]
    
    for idx, row in significant_orgs.head(20).iterrows():
        org_display = row['org'][:40] if len(row['org']) > 40 else row['org']
        print(f"{org_display:40} | {row['total_employees']:>9} | {row['reappointments']:>6} | {row['overall_rate']:>6.2%}")
    
    # Year-by-year analysis
    print("\nReappointment Rates by Year:")
    print("-" * 40)
    year_stats = merged.groupby('year').agg({
        'total_employees': 'sum',
        'reappointments': 'sum'
    })
    year_stats['rate'] = year_stats['reappointments'] / year_stats['total_employees']
    
    for year, row in year_stats.iterrows():
        print(f"{year}: {row['reappointments']:>4} / {row['total_employees']:>4} = {row['rate']:>6.2%}")
    
    # Overall statistics
    print("\nOverall Statistics:")
    print("-" * 40)
    total_employees = merged['total_employees'].sum()
    total_reappointments = merged['reappointments'].sum()
    overall_rate = total_reappointments / total_employees if total_employees > 0 else 0
    
    print(f"Total employees across all years: {total_employees}")
    print(f"Total reappointments: {total_reappointments}")
    print(f"Overall reappointment rate: {overall_rate:.2%}")
    
    # Distribution of rates
    print("\nReappointment Rate Distribution:")
    print("-" * 40)
    rate_bins = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
    rate_labels = ['0-10%', '10-20%', '20-30%', '30-40%', '40-50%', 
                   '50-60%', '60-70%', '70-80%', '80-90%', '90-100%']
    
    # Only consider org-years with employees
    active_records = merged[merged['total_employees'] > 0].copy()
    active_records['rate_bin'] = pd.cut(active_records['reappointment_rate'], 
                                        bins=rate_bins, labels=rate_labels, include_lowest=True)
    rate_dist = active_records['rate_bin'].value_counts().sort_index()
    
    for rate_range, count in rate_dist.items():
        print(f"{rate_range}: {count} org-year combinations")

def save_rates_data(merged):
    """
    Save the comprehensive reappointment rates data.
    """
    output_path = Path("scripts/claudeopus4/version1/execution4/analysis_data/step6_reappointment_rates.csv")
    
    # Ensure output directory exists
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    # Save the data
    merged.to_csv(output_path, index=False)
    print(f"\nReappointment rates saved to: {output_path}")
    
    return output_path

def print_sample_data(merged):
    """
    Print a sample of the merged data.
    """
    print("\n" + "=" * 60)
    print("SAMPLE OF REAPPOINTMENT RATES DATA")
    print("=" * 60)
    
    # Show organizations with highest rates
    high_rate_sample = merged[merged['reappointment_rate'] > 0.5].head(10)
    if len(high_rate_sample) > 0:
        print("\nSample of high reappointment rates (>50%):")
        print("-" * 80)
        print(high_rate_sample[['org', 'year', 'total_employees', 'reappointments', 'reappointment_rate']])
    
    # Show a general sample
    print("\nGeneral sample of data:")
    print("-" * 80)
    print(merged.head(10)[['org', 'year', 'total_employees', 'reappointments', 'reappointment_rate']])

def main():
    """
    Main function to execute the reappointment rate calculation.
    """
    print("Starting Reappointment Rate Calculation...")
    print("=" * 60)
    
    # Load both datasets
    employee_counts, reappointment_counts = load_counts_data()
    
    # Prepare data for merging
    employee_long, reappointment_long = prepare_data_for_merge(employee_counts, reappointment_counts)
    
    # Merge and calculate rates
    merged = merge_and_calculate_rates(employee_long, reappointment_long)
    
    # Print sample data
    print_sample_data(merged)
    
    # Analyze reappointment rates
    analyze_reappointment_rates(merged)
    
    # Save the results
    output_path = save_rates_data(merged)
    
    # Final summary
    print("\n" + "=" * 60)
    print("PROCESSING COMPLETE")
    print("=" * 60)
    print(f"Total records created: {len(merged)}")
    print(f"Organizations processed: {merged['org'].nunique()}")
    print(f"Years covered: {merged['year'].min()} - {merged['year'].max()}")
    print(f"Output saved to: {output_path}")

if __name__ == "__main__":
    main()