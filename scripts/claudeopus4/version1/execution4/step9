#!/usr/bin/env python3
"""
Script to perform comprehensive regression analysis on government-wide reappointment proportions.
Determines if the trend is statistically significant and whether it's increasing or decreasing.
"""

import pandas as pd
import numpy as np
from scipy import stats
from scipy.stats import linregress
import os
from pathlib import Path
import sys
from datetime import datetime

def load_annual_proportions():
    """
    Load the annual government-wide proportions from step 8.
    
    Returns:
        pd.DataFrame: DataFrame containing annual proportions data
    """
    input_path = Path("scripts/claudeopus4/version1/execution4/analysis_data/step8_annual_proportions.csv")
    
    try:
        df = pd.read_csv(input_path)
        print(f"Successfully loaded annual proportions from: {input_path}")
        print(f"Dataset shape: {df.shape}")
        return df
    except FileNotFoundError:
        print(f"Error: Could not find file at {input_path}")
        sys.exit(1)
    except Exception as e:
        print(f"Error loading file: {str(e)}")
        sys.exit(1)

def prepare_regression_data(df):
    """
    Prepare data for regression analysis.
    X = year, Y = government-wide reappointment proportion
    
    Args:
        df (pd.DataFrame): DataFrame with annual proportions
        
    Returns:
        tuple: (X array, Y array, sorted DataFrame)
    """
    print("\nPreparing data for regression analysis...")
    print("-" * 60)
    
    # Ensure required columns exist
    required_columns = ['year', 'reappointment_proportion']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        print(f"Error: Missing required columns: {missing_columns}")
        print(f"Available columns: {df.columns.tolist()}")
        sys.exit(1)
    
    # Sort by year
    df = df.sort_values('year').copy()
    
    # Extract X (year) and Y (proportion)
    X = df['year'].values
    Y = df['reappointment_proportion'].values
    
    # Data validation
    if len(X) == 0:
        print("Error: No data points available for regression")
        sys.exit(1)
    
    if len(X) != len(Y):
        print("Error: X and Y arrays have different lengths")
        sys.exit(1)
    
    print(f"Years included: {X.min()} to {X.max()}")
    print(f"Number of data points: {len(X)}")
    print(f"Proportion range: {Y.min():.4f} to {Y.max():.4f}")
    
    return X, Y, df

def perform_regression_analysis(X, Y):
    """
    Perform comprehensive linear regression analysis.
    
    Args:
        X (np.array): Independent variable (years)
        Y (np.array): Dependent variable (proportions)
        
    Returns:
        dict: Dictionary containing all regression results
    """
    print("\n" + "=" * 60)
    print("LINEAR REGRESSION ANALYSIS")
    print("=" * 60)
    
    # Perform linear regression
    slope, intercept, r_value, p_value, std_err = linregress(X, Y)
    
    # Calculate additional statistics
    n = len(X)
    df_resid = n - 2  # degrees of freedom for residuals
    
    # Calculate predicted values and residuals
    Y_pred = slope * X + intercept
    residuals = Y - Y_pred
    
    # Calculate R-squared
    r_squared = r_value ** 2
    
    # Calculate confidence intervals for slope (95%)
    t_critical = stats.t.ppf(0.975, df_resid)  # two-tailed test
    slope_ci_lower = slope - t_critical * std_err
    slope_ci_upper = slope + t_critical * std_err
    
    # Calculate standard error of the regression
    sse = np.sum(residuals ** 2)  # sum of squared errors
    mse = sse / df_resid  # mean squared error
    se_regression = np.sqrt(mse)
    
    # Print regression results
    print(f"\nRegression Equation:")
    print(f"  Y = {slope:.6f} * X + {intercept:.6f}")
    print(f"\nCoefficients:")
    print(f"  Slope (β₁): {slope:.6f}")
    print(f"  Intercept (β₀): {intercept:.6f}")
    print(f"\nStatistical Measures:")
    print(f"  R-squared: {r_squared:.4f}")
    print(f"  Correlation coefficient (r): {r_value:.4f}")
    print(f"  P-value: {p_value:.6f}")
    print(f"  Standard error of slope: {std_err:.6f}")
    print(f"  Standard error of regression: {se_regression:.6f}")
    print(f"\n95% Confidence Interval for Slope:")
    print(f"  Lower bound: {slope_ci_lower:.6f}")
    print(f"  Upper bound: {slope_ci_upper:.6f}")
    
    return {
        'slope': slope,
        'intercept': intercept,
        'r_value': r_value,
        'r_squared': r_squared,
        'p_value': p_value,
        'std_err': std_err,
        'se_regression': se_regression,
        'slope_ci_lower': slope_ci_lower,
        'slope_ci_upper': slope_ci_upper,
        'Y_pred': Y_pred,
        'residuals': residuals,
        'sse': sse,
        'mse': mse,
        'df_resid': df_resid,
        'n': n
    }

def perform_regression_diagnostics(X, Y, regression_results):
    """
    Perform regression diagnostics including Durbin-Watson test and outlier detection.
    
    Args:
        X (np.array): Independent variable (years)
        Y (np.array): Dependent variable (proportions)
        regression_results (dict): Results from regression analysis
        
    Returns:
        dict: Dictionary containing diagnostic results
    """
    print("\n" + "=" * 60)
    print("REGRESSION DIAGNOSTICS")
    print("=" * 60)
    
    residuals = regression_results['residuals']
    se_regression = regression_results['se_regression']
    
    # Durbin-Watson test for autocorrelation
    # DW = sum((e_t - e_t-1)^2) / sum(e_t^2)
    if len(residuals) > 1:
        diff_residuals = np.diff(residuals)
        dw_statistic = np.sum(diff_residuals ** 2) / np.sum(residuals ** 2)
    else:
        dw_statistic = np.nan
    
    print(f"\nDurbin-Watson Statistic: {dw_statistic:.4f}")
    print("  (Values around 2 indicate no autocorrelation)")
    print("  (Values < 2 indicate positive autocorrelation)")
    print("  (Values > 2 indicate negative autocorrelation)")
    
    # Outlier detection using standardized residuals
    if se_regression > 0:
        standardized_residuals = residuals / se_regression
    else:
        standardized_residuals = np.zeros_like(residuals)
    
    outliers = []
    
    print(f"\nStandardized Residuals:")
    for i, (year, std_res) in enumerate(zip(X, standardized_residuals)):
        outlier_flag = abs(std_res) > 2  # Common threshold for outliers
        if outlier_flag:
            outliers.append((year, std_res))
        print(f"  Year {int(year)}: {std_res:>7.3f} {'*' if outlier_flag else ''}")
    
    if outliers:
        print(f"\nPotential outliers detected (|standardized residual| > 2):")
        for year, std_res in outliers:
            print(f"  Year {int(year)}: {std_res:.3f}")
    else:
        print(f"\nNo significant outliers detected.")
    
    # Normality test of residuals (Shapiro-Wilk)
    if len(residuals) >= 3:  # Shapiro-Wilk requires at least 3 observations
        shapiro_stat, shapiro_p = stats.shapiro(residuals)
        print(f"\nShapiro-Wilk test for normality of residuals:")
        print(f"  Statistic: {shapiro_stat:.4f}")
        print(f"  P-value: {shapiro_p:.4f}")
        print(f"  Residuals are {'normally' if shapiro_p > 0.05 else 'not normally'} distributed (α = 0.05)")
    else:
        shapiro_stat, shapiro_p = np.nan, np.nan
        print("\nInsufficient data for Shapiro-Wilk test")
    
    return {
        'dw_statistic': dw_statistic,
        'outliers': outliers,
        'shapiro_stat': shapiro_stat,
        'shapiro_p': shapiro_p,
        'standardized_residuals': standardized_residuals
    }

def interpret_results(regression_results, diagnostic_results):
    """
    Interpret the regression results and determine trend significance.
    
    Args:
        regression_results (dict): Results from regression analysis
        diagnostic_results (dict): Results from diagnostic tests
        
    Returns:
        dict: Dictionary containing interpretation results
    """
    print("\n" + "=" * 60)
    print("INTERPRETATION OF RESULTS")
    print("=" * 60)
    
    slope = regression_results['slope']
    p_value = regression_results['p_value']
    r_squared = regression_results['r_squared']
    
    # Statistical significance
    is_significant = p_value < 0.05
    significance_level = "statistically significant" if is_significant else "not statistically significant"
    
    # Trend direction
    trend_direction = "INCREASING" if slope > 0 else "DECREASING"
    
    # Calculate annual change in percentage points
    annual_change_pp = slope * 100  # Convert to percentage points
    
    # Calculate total change over 12 years (2013-2024)
    total_years = 11  # 11 years of change from 2013 to 2024
    total_change_pp = annual_change_pp * total_years
    
    print(f"\nTrend Analysis:")
    print(f"  Direction: {trend_direction}")
    print(f"  Statistical significance: {significance_level} (p = {p_value:.6f})")
    print(f"  Annual change: {annual_change_pp:.3f} percentage points per year")
    print(f"  Total change (2013-2024): {total_change_pp:.2f} percentage points")
    
    print(f"\nModel Quality:")
    print(f"  R-squared: {r_squared:.4f} ({r_squared*100:.1f}% of variation explained)")
    
    if r_squared > 0.7:
        model_fit = "Good"
    elif r_squared > 0.5:
        model_fit = "Moderate"
    else:
        model_fit = "Weak"
    print(f"  Model fit: {model_fit}")
    
    # Final conclusion
    print(f"\n" + "=" * 60)
    print("FINAL ANSWER")
    print("=" * 60)
    
    if is_significant:
        print(f"The government-wide reappointment proportion trend is {trend_direction} ")
        print(f"over the 12-year period (2013-2024) and IS STATISTICALLY SIGNIFICANT (p = {p_value:.6f}).")
        print(f"\nThe reappointment proportion changes by {annual_change_pp:.3f} percentage points per year,")
        print(f"resulting in a total change of {total_change_pp:.2f} percentage points over the period.")
    else:
        print(f"The government-wide reappointment proportion trend appears to be {trend_direction} ")
        print(f"over the 12-year period (2013-2024) but is NOT STATISTICALLY SIGNIFICANT (p = {p_value:.6f}).")
        print(f"\nThere is insufficient evidence to conclude a significant trend.")
    
    return {
        'trend_direction': trend_direction,
        'is_significant': is_significant,
        'significance_level': significance_level,
        'annual_change_pp': annual_change_pp,
        'total_change_pp': total_change_pp,
        'model_fit': model_fit
    }

def save_results(df, regression_results, diagnostic_results, interpretation):
    """
    Save comprehensive results to a text file.
    
    Args:
        df (pd.DataFrame): Original data
        regression_results (dict): Regression analysis results
        diagnostic_results (dict): Diagnostic test results
        interpretation (dict): Interpretation of results
    """
    output_path = Path("scripts/claudeopus4/version1/execution4/analysis_data/step9_regression_results.txt")
    
    try:
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_path, 'w') as f:
            f.write("=" * 80 + "\n")
            f.write("STATISTICAL REGRESSION ANALYSIS OF GOVERNMENT-WIDE REAPPOINTMENT TRENDS\n")
            f.write("New Brunswick Government (2013-2024)\n")
            f.write(f"Analysis Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write("=" * 80 + "\n\n")
            
            # Data Summary
            f.write("DATA SUMMARY\n")
            f.write("-" * 40 + "\n")
            for _, row in df.iterrows():
                f.write(f"Year {int(row['year'])}: {row['reappointment_proportion']:.4f} "
                       f"({int(row['total_reappointments'])}/{int(row['total_appointments'])})\n")
            
            # Regression Results
            f.write("\n\nREGRESSION ANALYSIS RESULTS\n")
            f.write("-" * 40 + "\n")
            f.write(f"Regression Equation: Y = {regression_results['slope']:.6f} * X + {regression_results['intercept']:.6f}\n\n")
            f.write(f"Slope (β₁): {regression_results['slope']:.6f}\n")
            f.write(f"Intercept (β₀): {regression_results['intercept']:.6f}\n")
            f.write(f"R-squared: {regression_results['r_squared']:.4f}\n")
            f.write(f"Correlation coefficient (r): {regression_results['r_value']:.4f}\n")
            f.write(f"P-value: {regression_results['p_value']:.6f}\n")
            f.write(f"Standard error of slope: {regression_results['std_err']:.6f}\n")
            f.write(f"Standard error of regression: {regression_results['se_regression']:.6f}\n")
            f.write(f"95% CI for slope: [{regression_results['slope_ci_lower']:.6f}, {regression_results['slope_ci_upper']:.6f}]\n")
            f.write(f"Degrees of freedom: {regression_results['df_resid']}\n")
            f.write(f"Sample size: {regression_results['n']}\n")
            
            # Diagnostic Results
            f.write("\n\nREGRESSION DIAGNOSTICS\n")
            f.write("-" * 40 + "\n")
            f.write(f"Durbin-Watson statistic: {diagnostic_results['dw_statistic']:.4f}\n")
            
            if not np.isnan(diagnostic_results['shapiro_stat']):
                f.write(f"Shapiro-Wilk test: statistic = {diagnostic_results['shapiro_stat']:.4f}, p = {diagnostic_results['shapiro_p']:.4f}\n")
            else:
                f.write("Shapiro-Wilk test: Not performed (insufficient data)\n")
                
            if diagnostic_results['outliers']:
                f.write(f"Outliers detected: {len(diagnostic_results['outliers'])}\n")
                for year, std_res in diagnostic_results['outliers']:
                    f.write(f"  Year {int(year)}: standardized residual = {std_res:.3f}\n")
            else:
                f.write("No significant outliers detected\n")
            
            # Interpretation
            f.write("\n\nINTERPRETATION\n")
            f.write("-" * 40 + "\n")
            f.write(f"Trend Direction: {interpretation['trend_direction']}\n")
            f.write(f"Statistical Significance: {interpretation['significance_level']}\n")
            f.write(f"Annual Change: {interpretation['annual_change_pp']:.3f} percentage points per year\n")
            f.write(f"Total Change (2013-2024): {interpretation['total_change_pp']:.2f} percentage points\n")
            f.write(f"Model Fit: {interpretation['model_fit']} (R-squared = {regression_results['r_squared']:.4f})\n")
            
            # Conclusion
            f.write("\n\nCONCLUSION\n")
            f.write("-" * 40 + "\n")
            if interpretation['is_significant']:
                f.write(f"The government-wide reappointment proportion trend is {interpretation['trend_direction']} ")
                f.write(f"and IS STATISTICALLY SIGNIFICANT (p = {regression_results['p_value']:.6f}).\n")
                f.write(f"\nThe reappointment rate changes by {interpretation['annual_change_pp']:.3f} percentage points per year, ")
                f.write(f"with a total change of {interpretation['total_change_pp']:.2f} percentage points from 2013 to 2024.\n")
            else:
                f.write(f"The government-wide reappointment proportion trend appears to be {interpretation['trend_direction']} ")
                f.write(f"but is NOT STATISTICALLY SIGNIFICANT (p = {regression_results['p_value']:.6f}).\n")
                f.write("\nThere is insufficient statistical evidence to conclude a significant trend in reappointment rates.\n")
        
        print(f"\nDetailed results saved to: {output_path}")
        
    except Exception as e:
        print(f"Error saving results: {str(e)}")

def main():
    """
    Main function to execute the regression analysis.
    """
    print("Starting Statistical Regression Analysis...")
    print("=" * 60)
    
    # Load data
    df = load_annual_proportions()
    
    # Prepare regression data
    X, Y, df = prepare_regression_data(df)
    
    # Perform regression analysis
    regression_results = perform_regression_analysis(X, Y)
    
    # Perform diagnostics
    diagnostic_results = perform_regression_diagnostics(X, Y, regression_results)
    
    # Interpret results
    interpretation = interpret_results(regression_results, diagnostic_results)
    
    # Save comprehensive results
    save_results(df, regression_results, diagnostic_results, interpretation)
    
    print("\n" + "=" * 80)
    print("ANALYSIS COMPLETE")
    print("=" * 80)

if __name__ == "__main__":
    main()