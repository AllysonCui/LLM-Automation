#!/usr/bin/env python3
"""
Script to calculate annual government-wide reappointment proportions
for NB government appointments data from 2013-2024.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import sys

def main():
    # Define paths
    input_file = Path("scripts/claudeopus4/version1/execution8/analysis_data/step3_repeats_marked.csv")
    output_file = Path("scripts/claudeopus4/version1/execution8/analysis_data/step8_annual_proportions.csv")
    plot_file = Path("scripts/claudeopus4/version1/execution8/analysis_data/step8_annual_reappointment_proportions.png")
    
    # Load the dataset from step 3
    try:
        print(f"Loading data from: {input_file}")
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"Successfully loaded dataset with shape: {df.shape}")
    except FileNotFoundError:
        print(f"Error: File {input_file} not found")
        sys.exit(1)
    except Exception as e:
        print(f"Error loading file: {e}")
        sys.exit(1)
    
    # Verify required columns exist
    required_columns = ['year', 'reappointed']
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        print(f"Error: Missing required columns: {missing_columns}")
        print(f"Available columns: {df.columns.tolist()}")
        sys.exit(1)
    
    # Ensure year is integer
    df['year'] = df['year'].astype(int)
    
    # Get year range
    years = sorted(df['year'].unique())
    print(f"\nYears in dataset: {years}")
    print(f"Year range: {min(years)} - {max(years)}")
    
    # Calculate annual proportions
    annual_data = []
    
    for year in years:
        # Filter data for the year
        year_data = df[df['year'] == year]
        
        # Count total appointments and reappointments
        total_appointments = len(year_data)
        total_reappointments = year_data['reappointed'].sum()
        
        # Calculate proportion
        if total_appointments > 0:
            reappointment_proportion = total_reappointments / total_appointments
        else:
            reappointment_proportion = 0.0
        
        annual_data.append({
            'year': year,
            'total_appointments': total_appointments,
            'total_reappointments': total_reappointments,
            'reappointment_proportion': reappointment_proportion
        })
    
    # Create DataFrame from results
    results_df = pd.DataFrame(annual_data)
    
    # Save results
    try:
        results_df.to_csv(output_file, index=False, encoding='utf-8')
        print(f"\nResults saved to: {output_file}")
    except Exception as e:
        print(f"Error saving file: {e}")
        sys.exit(1)
    
    # Create visualization
    print("\nCreating visualization...")
    
    # Set up the figure with a clean style
    plt.style.use('default')
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # Plot the reappointment proportion trend
    x = results_df['year']
    y = results_df['reappointment_proportion'] * 100  # Convert to percentage
    
    # Main line plot
    ax.plot(x, y, 'b-o', linewidth=3, markersize=10, label='Reappointment Rate')
    
    # Add a trend line
    z = np.polyfit(x, y, 1)
    p = np.poly1d(z)
    ax.plot(x, p(x), 'r--', alpha=0.8, linewidth=2, label=f'Trend Line (slope: {z[0]:.2f}% per year)')
    
    # Customize the plot
    ax.set_title('Government-wide Reappointment Proportion Over Time\nNew Brunswick Government (2013-2024)', 
                fontsize=16, fontweight='bold', pad=20)
    ax.set_xlabel('Year', fontsize=14, fontweight='bold')
    ax.set_ylabel('Reappointment Proportion (%)', fontsize=14, fontweight='bold')
    
    # Set y-axis limits and grid
    ax.set_ylim(0, max(y) * 1.1)  # Add 10% headroom
    ax.grid(True, alpha=0.3, linestyle='-', linewidth=0.5)
    
    # Add value labels on each point
    for i, (year, prop) in enumerate(zip(x, y)):
        ax.annotate(f'{prop:.1f}%', 
                   (year, prop), 
                   textcoords="offset points", 
                   xytext=(0, 10), 
                   ha='center',
                   fontsize=10,
                   fontweight='bold')
    
    # Add average line
    avg_prop = y.mean()
    ax.axhline(y=avg_prop, color='green', linestyle=':', linewidth=2, alpha=0.7)
    ax.text(x.iloc[-1] + 0.1, avg_prop, f'Average: {avg_prop:.1f}%', 
            va='center', ha='left', fontsize=10, color='green', fontweight='bold')
    
    # Customize x-axis
    ax.set_xticks(x)
    ax.set_xticklabels(x, rotation=45, ha='right')
    
    # Add legend
    ax.legend(loc='upper left', fontsize=12, framealpha=0.9)
    
    # Add a subtle background color
    ax.set_facecolor('#f8f9fa')
    fig.patch.set_facecolor('white')
    
    # Tight layout
    plt.tight_layout()
    
    # Save plot
    try:
        plt.savefig(plot_file, dpi=300, bbox_inches='tight', facecolor='white', edgecolor='none')
        print(f"Visualization saved to: {plot_file}")
    except Exception as e:
        print(f"Error saving plot: {e}")
    
    plt.close()
    
    # Print year-by-year proportions
    print("\n" + "="*70)
    print("YEAR-BY-YEAR GOVERNMENT-WIDE REAPPOINTMENT PROPORTIONS")
    print("="*70)
    print(f"{'Year':<6} {'Total Appointments':<20} {'Reappointments':<15} {'Proportion':<12}")
    print("-"*70)
    
    for _, row in results_df.iterrows():
        prop_pct = row['reappointment_proportion'] * 100
        print(f"{row['year']:<6} {row['total_appointments']:<20} {row['total_reappointments']:<15} {prop_pct:>6.2f}%")
    
    print("-"*70)
    
    # Summary statistics
    total_all_years = results_df['total_appointments'].sum()
    reapp_all_years = results_df['total_reappointments'].sum()
    overall_proportion = reapp_all_years / total_all_years if total_all_years > 0 else 0
    
    print(f"\nTOTAL: {total_all_years:<20} {reapp_all_years:<15} {overall_proportion*100:>6.2f}%")
    
    print("\n" + "="*60)
    print("SUMMARY ANALYSIS")
    print("="*60)
    
    # Calculate statistics
    proportions_pct = results_df['reappointment_proportion'] * 100
    
    print(f"\nReappointment Proportion Statistics:")
    print(f"  - Minimum: {proportions_pct.min():.2f}% (Year {results_df.loc[proportions_pct.idxmin(), 'year']})")
    print(f"  - Maximum: {proportions_pct.max():.2f}% (Year {results_df.loc[proportions_pct.idxmax(), 'year']})")
    print(f"  - Average: {proportions_pct.mean():.2f}%")
    print(f"  - Median: {proportions_pct.median():.2f}%")
    print(f"  - Standard Deviation: {proportions_pct.std():.2f}%")
    
    # Trend analysis
    if len(results_df) > 1:
        correlation = np.corrcoef(results_df['year'], proportions_pct)[0, 1]
        
        print(f"\nTrend Analysis:")
        print(f"  - Correlation coefficient: {correlation:.3f}")
        
        if abs(correlation) < 0.3:
            trend = "no significant trend"
        elif correlation > 0:
            trend = "increasing trend"
        else:
            trend = "decreasing trend"
        
        print(f"  - Overall pattern: {trend}")
        
        # Calculate year-over-year changes
        print(f"\nYear-over-Year Changes:")
        for i in range(1, len(results_df)):
            prev_year = results_df.iloc[i-1]
            curr_year = results_df.iloc[i]
            change = (curr_year['reappointment_proportion'] - prev_year['reappointment_proportion']) * 100
            print(f"  - {prev_year['year']} to {curr_year['year']}: {change:+.2f} percentage points")
    
    print("\nScript completed successfully!")

if __name__ == "__main__":
    main()