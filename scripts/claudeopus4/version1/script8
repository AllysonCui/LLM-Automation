#!/usr/bin/env python3
"""
Script to calculate annual government-wide reappointment proportions
Calculates overall reappointment rate across all organizations for each year
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from pathlib import Path
import sys

def calculate_annual_proportions():
    """
    Calculate government-wide reappointment proportions for each year
    """
    # Define paths
    data_dir = Path("scripts/claudeopus4/version1/analysis_data")
    input_file = data_dir / "step3_repeats_marked.csv"
    output_csv = data_dir / "step8_annual_proportions.csv"
    output_png = data_dir / "step8_annual_reappointment_proportions.png"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"ERROR: Input file {input_file} not found!")
        sys.exit(1)
    
    # Load the dataset
    print(f"Loading dataset from {input_file}...")
    try:
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"Successfully loaded {len(df)} records")
    except Exception as e:
        print(f"ERROR loading file: {str(e)}")
        sys.exit(1)
    
    # Validate required columns
    if 'year' not in df.columns:
        print("ERROR: 'year' column not found in dataset!")
        sys.exit(1)
    if 'reappointed' not in df.columns:
        print("ERROR: 'reappointed' column not found in dataset!")
        sys.exit(1)
    
    # Convert year to integer
    df['year'] = pd.to_numeric(df['year'], errors='coerce').astype('Int64')
    
    # Remove records with invalid years
    invalid_years = df['year'].isna().sum()
    if invalid_years > 0:
        print(f"WARNING: Removing {invalid_years} records with invalid years")
        df = df[df['year'].notna()]
    
    # Convert year to regular int after filtering
    df['year'] = df['year'].astype(int)
    
    # Ensure reappointed is boolean
    df['reappointed'] = df['reappointed'].astype(bool)
    
    # Get year range
    min_year = df['year'].min()
    max_year = df['year'].max()
    print(f"\nYear range in data: {min_year} to {max_year}")
    
    # Calculate annual proportions
    print("\nCalculating annual reappointment proportions...")
    
    annual_stats = []
    
    for year in range(2013, 2025):  # 2013-2024 as specified
        year_data = df[df['year'] == year]
        
        if len(year_data) == 0:
            print(f"WARNING: No data for year {year}")
            continue
        
        total_appointments = len(year_data)
        total_reappointments = year_data['reappointed'].sum()
        reappointment_proportion = total_reappointments / total_appointments if total_appointments > 0 else 0
        
        annual_stats.append({
            'year': year,
            'total_appointments': total_appointments,
            'total_reappointments': total_reappointments,
            'reappointment_proportion': reappointment_proportion
        })
    
    # Create DataFrame from results
    results_df = pd.DataFrame(annual_stats)
    
    # Save results to CSV
    print(f"\nSaving annual proportions to {output_csv}...")
    results_df.to_csv(output_csv, index=False, encoding='utf-8')
    
    # Print year-by-year proportions
    print("\n" + "="*70)
    print("ANNUAL GOVERNMENT-WIDE REAPPOINTMENT PROPORTIONS")
    print("="*70)
    print(f"{'Year':<6} {'Total Appointments':<20} {'Reappointments':<16} {'Proportion':<12}")
    print("-"*70)
    
    for _, row in results_df.iterrows():
        print(f"{row['year']:<6} {row['total_appointments']:<20} "
              f"{row['total_reappointments']:<16} {row['reappointment_proportion']:>10.1%}")
    
    # Calculate overall statistics
    total_all_years = results_df['total_appointments'].sum()
    reapp_all_years = results_df['total_reappointments'].sum()
    overall_proportion = reapp_all_years / total_all_years if total_all_years > 0 else 0
    
    print("-"*70)
    print(f"{'TOTAL':<6} {total_all_years:<20} {reapp_all_years:<16} {overall_proportion:>10.1%}")
    
    # Create visualization
    print(f"\nCreating visualization...")
    
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
    
    # Top plot: Reappointment proportion trend
    ax1.plot(results_df['year'], results_df['reappointment_proportion'] * 100, 
             marker='o', linewidth=2.5, markersize=10, color='darkblue', label='Reappointment Rate')
    
    # Add percentage labels on points
    for _, row in results_df.iterrows():
        ax1.annotate(f"{row['reappointment_proportion']:.1%}", 
                     xy=(row['year'], row['reappointment_proportion'] * 100),
                     xytext=(0, 10), textcoords='offset points',
                     ha='center', fontsize=9)
    
    # Add average line
    avg_proportion = results_df['reappointment_proportion'].mean()
    ax1.axhline(y=avg_proportion * 100, color='red', linestyle='--', alpha=0.7, 
                label=f'Average: {avg_proportion:.1%}')
    
    ax1.set_title('New Brunswick Government-wide Reappointment Proportion by Year', 
                  fontsize=16, fontweight='bold', pad=20)
    ax1.set_xlabel('Year', fontsize=12)
    ax1.set_ylabel('Reappointment Proportion (%)', fontsize=12)
    ax1.set_ylim(0, max(results_df['reappointment_proportion'] * 100) * 1.2)
    ax1.grid(True, alpha=0.3)
    ax1.legend()
    
    # Format x-axis
    ax1.set_xticks(results_df['year'])
    ax1.set_xticklabels(results_df['year'], rotation=45)
    
    # Bottom plot: Appointment counts
    width = 0.35
    x = np.arange(len(results_df))
    
    bars1 = ax2.bar(x - width/2, results_df['total_appointments'], width, 
                     label='Total Appointments', color='lightblue', edgecolor='darkblue')
    bars2 = ax2.bar(x + width/2, results_df['total_reappointments'], width,
                     label='Reappointments', color='darkgreen', alpha=0.7)
    
    # Add value labels on bars
    for bar in bars1:
        height = bar.get_height()
        ax2.annotate(f'{int(height)}',
                     xy=(bar.get_x() + bar.get_width() / 2, height),
                     xytext=(0, 3), textcoords="offset points",
                     ha='center', va='bottom', fontsize=8)
    
    for bar in bars2:
        height = bar.get_height()
        ax2.annotate(f'{int(height)}',
                     xy=(bar.get_x() + bar.get_width() / 2, height),
                     xytext=(0, 3), textcoords="offset points",
                     ha='center', va='bottom', fontsize=8)
    
    ax2.set_title('Appointment Counts by Year', fontsize=14, fontweight='bold')
    ax2.set_xlabel('Year', fontsize=12)
    ax2.set_ylabel('Number of Appointments', fontsize=12)
    ax2.set_xticks(x)
    ax2.set_xticklabels(results_df['year'], rotation=45)
    ax2.legend()
    ax2.grid(True, alpha=0.3, axis='y')
    
    plt.tight_layout()
    plt.savefig(output_png, dpi=300, bbox_inches='tight')
    print(f"Visualization saved to {output_png}")
    
    # Summary statistics
    print("\n" + "="*70)
    print("SUMMARY STATISTICS")
    print("="*70)
    print(f"Years analyzed: {results_df['year'].min()} to {results_df['year'].max()}")
    print(f"Total appointments (2013-2024): {total_all_years:,}")
    print(f"Total reappointments (2013-2024): {reapp_all_years:,}")
    print(f"Overall reappointment proportion: {overall_proportion:.1%}")
    print(f"Average annual proportion: {avg_proportion:.1%}")
    print(f"Highest proportion: {results_df['reappointment_proportion'].max():.1%} "
          f"in {results_df.loc[results_df['reappointment_proportion'].idxmax(), 'year']}")
    print(f"Lowest proportion: {results_df['reappointment_proportion'].min():.1%} "
          f"in {results_df.loc[results_df['reappointment_proportion'].idxmin(), 'year']}")
    
    # Trend analysis
    if len(results_df) > 1:
        # Simple linear trend
        years_numeric = results_df['year'] - results_df['year'].min()
        correlation = np.corrcoef(years_numeric, results_df['reappointment_proportion'])[0, 1]
        print(f"\nTrend correlation: {correlation:.3f} "
              f"({'increasing' if correlation > 0 else 'decreasing'} trend)")
    
    print(f"\nResults saved successfully to: {output_csv}")
    print(f"Visualization saved to: {output_png}")
    
    return results_df

if __name__ == "__main__":
    # Run the main function
    try:
        proportions_df = calculate_annual_proportions()
        print("\nScript completed successfully!")
    except Exception as e:
        print(f"\nERROR: Script failed with error: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)