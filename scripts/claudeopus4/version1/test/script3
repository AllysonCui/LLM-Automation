#!/usr/bin/env python3
"""
step to identify and mark repeat appointments based on name, position, and organization
Marks all occurrences except the first (chronologically) as reappointments
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def normalize_text(text):
    """
    Normalize text for better matching:
    - Convert to lowercase
    - Strip whitespace
    - Replace multiple spaces with single space
    """
    if pd.isna(text):
        return ''
    return ' '.join(str(text).lower().strip().split())

def mark_repeat_appointments():
    """
    Load dataset and mark repeat appointments based on name-position-org combinations
    """
    # Define paths
    data_dir = Path("steps/claudeopus4/version1/analysis_data")
    input_file = data_dir / "step2_key_columns_data.csv"
    output_file = data_dir / "step3_repeats_marked.csv"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"ERROR: Input file {input_file} not found!")
        sys.exit(1)
    
    # Load the dataset
    print(f"Loading dataset from {input_file}...")
    try:
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"Successfully loaded {len(df)} records")
    except Exception as e:
        print(f"ERROR loading file: {str(e)}")
        sys.exit(1)
    
    # Validate required columns
    required_columns = ['name', 'position', 'org', 'year', 'reappointed']
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        print(f"ERROR: Missing required columns: {missing_columns}")
        sys.exit(1)
    
    # Convert year to numeric for proper sorting
    df['year'] = pd.to_numeric(df['year'], errors='coerce')
    
    # Check for invalid years
    invalid_years = df['year'].isna().sum()
    if invalid_years > 0:
        print(f"WARNING: {invalid_years} records have invalid year values")
    
    # Ensure reappointed is boolean
    df['reappointed'] = df['reappointed'].astype(bool)
    
    # Store original reappointed values for comparison
    original_reappointed = df['reappointed'].copy()
    original_count = original_reappointed.sum()
    
    print(f"\nInitial reappointments: {original_count} ({original_count/len(df)*100:.2f}%)")
    
    # Create normalized versions of key columns for matching
    print("\nNormalizing text fields for better matching...")
    df['name_normalized'] = df['name'].apply(normalize_text)
    df['position_normalized'] = df['position'].apply(normalize_text)
    df['org_normalized'] = df['org'].apply(normalize_text)
    
    # Create a unique identifier for each name-position-org combination
    df['combo_key'] = df['name_normalized'] + '|' + df['position_normalized'] + '|' + df['org_normalized']
    
    # Remove rows with empty combo keys (all fields are missing)
    empty_combos = (df['combo_key'] == '||').sum()
    if empty_combos > 0:
        print(f"WARNING: {empty_combos} records have no name, position, or org data")
    
    # Sort by combo_key and year to ensure chronological order
    print("\nSorting records chronologically...")
    df = df.sort_values(['combo_key', 'year'], kind='stable').reset_index(drop=True)
    
    # Process each unique combination
    print("\nIdentifying repeat appointments...")
    
    # Group by the combination key
    grouped = df.groupby('combo_key', group_keys=False)
    
    # Count unique combinations and their occurrences
    combo_counts = grouped.size()
    combos_with_repeats = (combo_counts > 1).sum()
    total_repeat_records = (combo_counts[combo_counts > 1] - 1).sum()
    
    print(f"Found {len(combo_counts)} unique name-position-org combinations")
    print(f"Found {combos_with_repeats} combinations with multiple occurrences")
    print(f"Total potential repeat appointments: {total_repeat_records}")
    
    # Mark all but the first occurrence as reappointments
    def mark_repeats(group):
        """Mark all records except the first as reappointments"""
        if len(group) > 1:
            # Get indices of all records except the first
            indices_to_mark = group.index.tolist()[1:]
            # Use .loc to update the reappointed column
            df.loc[indices_to_mark, 'reappointed'] = True
        return group
    
    # Apply the marking function to each group
    grouped.apply(mark_repeats)
    
    # Calculate statistics
    new_reappointed_count = df['reappointed'].sum()
    newly_marked = new_reappointed_count - original_count
    
    # Find which records were newly marked
    newly_marked_mask = df['reappointed'] & ~original_reappointed
    
    print(f"\nResults:")
    print(f"  Previously marked reappointments: {original_count}")
    print(f"  Newly identified reappointments: {newly_marked}")
    print(f"  Total reappointments: {new_reappointed_count} ({new_reappointed_count/len(df)*100:.2f}%)")
    
    # Show examples of newly marked reappointments
    if newly_marked > 0:
        print("\nExamples of newly identified repeat appointments:")
        examples = df[newly_marked_mask][['name', 'position', 'org', 'year']].head(10)
        for idx, (_, row) in enumerate(examples.iterrows()):
            print(f"  {idx+1}. {row['name']} - {row['position']} at {row['org']} ({row['year']})")
        
        if newly_marked > 10:
            print(f"  ... and {newly_marked - 10} more")
    
    # Show statistics on combinations with most repeats
    print("\nTop 5 most repeated appointments:")
    top_combos = combo_counts.nlargest(5)
    for i, (combo_key, count) in enumerate(top_combos.items()):
        if combo_key != '||':  # Skip empty combinations
            # Get the first occurrence of this combination for display
            first_occurrence = df[df['combo_key'] == combo_key].iloc[0]
            print(f"  {i+1}. {first_occurrence['name']} - {first_occurrence['position']} at {first_occurrence['org']}")
            print(f"     Appeared {count} times")
    
    # Remove temporary columns before saving
    df = df.drop(columns=['name_normalized', 'position_normalized', 'org_normalized', 'combo_key'])
    
    # Save the updated dataset
    print(f"\nSaving updated dataset to {output_file}...")
    df.to_csv(output_file, index=False, encoding='utf-8')
    
    # Final summary
    print("\n" + "="*50)
    print("SUMMARY")
    print("="*50)
    print(f"Total records processed: {len(df)}")
    print(f"Unique name-position-org combinations: {len(combo_counts)}")
    print(f"Combinations with repeats: {combos_with_repeats}")
    print(f"Records newly marked as reappointments: {newly_marked}")
    print(f"Final reappointment rate: {df['reappointed'].sum()/len(df)*100:.2f}%")
    
    print(f"\nUpdated dataset saved successfully to: {output_file}")
    
    return df

if __name__ == "__main__":
    # Run the main function
    try:
        updated_df = mark_repeat_appointments()
        print("\nstep completed successfully!")
    except Exception as e:
        print(f"\nERROR: step failed with error: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)