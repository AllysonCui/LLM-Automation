#!/usr/bin/env python3
"""
step to create a summary table of reappointment counts by organization and year
Filters for reappointed=True records and creates a pivot table
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def create_reappointment_counts():
    """
    Load dataset and create summary table of reappointment counts by organization and year
    """
    # Define paths
    data_dir = Path("steps/claudeopus4/version1/analysis_data")
    input_file = data_dir / "step3_repeats_marked.csv"
    output_file = data_dir / "step5_reappointment_counts.csv"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"ERROR: Input file {input_file} not found!")
        sys.exit(1)
    
    # Load the dataset
    print(f"Loading dataset from {input_file}...")
    try:
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"Successfully loaded {len(df)} records")
    except Exception as e:
        print(f"ERROR loading file: {str(e)}")
        sys.exit(1)
    
    # Validate required columns
    required_columns = ['org', 'year', 'reappointed']
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        print(f"ERROR: Missing required columns: {missing_columns}")
        sys.exit(1)
    
    # Convert year to integer
    df['year'] = pd.to_numeric(df['year'], errors='coerce').astype('Int64')
    
    # Check for invalid years
    invalid_years = df['year'].isna().sum()
    if invalid_years > 0:
        print(f"WARNING: {invalid_years} records have invalid year values - these will be excluded")
        df = df[df['year'].notna()]
    
    # Convert year to regular int after filtering
    df['year'] = df['year'].astype(int)
    
    # Ensure reappointed is boolean
    df['reappointed'] = df['reappointed'].astype(bool)
    
    # Handle missing organization names
    missing_orgs = df['org'].isna().sum()
    if missing_orgs > 0:
        print(f"WARNING: {missing_orgs} records have missing organization names")
        df['org'] = df['org'].fillna('[No Organization Listed]')
    
    # Initial statistics
    total_reappointments = df['reappointed'].sum()
    print(f"\nTotal reappointments in dataset: {total_reappointments} ({total_reappointments/len(df)*100:.2f}%)")
    
    # Filter for reappointments only
    print("\nFiltering for reappointed records...")
    reappointed_df = df[df['reappointed'] == True].copy()
    print(f"Found {len(reappointed_df)} reappointment records")
    
    if len(reappointed_df) == 0:
        print("ERROR: No reappointment records found!")
        sys.exit(1)
    
    # Group by organization and year
    print("\nGrouping reappointments by organization and year...")
    grouped = reappointed_df.groupby(['org', 'year']).size().reset_index(name='reappointment_count')
    
    # DEBUG: Show sample of grouped data
    print("\nDEBUG - Sample of grouped data (first 10 rows):")
    print(grouped.head(10))
    print(f"\nDEBUG - Grouped data shape: {grouped.shape}")
    print(f"DEBUG - Unique organizations with reappointments: {grouped['org'].nunique()}")
    print(f"DEBUG - Year range: {grouped['year'].min()} to {grouped['year'].max()}")
    
    # Validate that we have actual counts
    if grouped['reappointment_count'].sum() == 0:
        print("ERROR: All reappointment counts are zero!")
        sys.exit(1)
    
    print(f"\nDEBUG - Total reappointments in grouped data: {grouped['reappointment_count'].sum()}")
    print(f"DEBUG - Average reappointments per org/year: {grouped['reappointment_count'].mean():.2f}")
    
    # Create pivot table
    print("\nCreating pivot table...")
    pivot_table = grouped.pivot(index='org', columns='year', values='reappointment_count')
    
    # Fill missing values with 0 (no reappointments that year)
    pivot_table = pivot_table.fillna(0).astype(int)
    
    # Add total column
    pivot_table['Total'] = pivot_table.sum(axis=1)
    
    # Sort by total reappointments (descending)
    pivot_table = pivot_table.sort_values('Total', ascending=False)
    
    # Validate pivot table
    pivot_sum = pivot_table.drop('Total', axis=1).sum().sum()
    print(f"\nDEBUG - Sum of all values in pivot table: {pivot_sum}")
    if pivot_sum != grouped['reappointment_count'].sum():
        print("WARNING: Pivot table sum doesn't match grouped data sum!")
    
    # Save the pivot table
    print(f"\nSaving reappointment counts to {output_file}...")
    pivot_table.to_csv(output_file, encoding='utf-8')
    
    # Print summary statistics
    print("\n" + "="*70)
    print("REAPPOINTMENT COUNTS SUMMARY")
    print("="*70)
    print(f"Total organizations with reappointments: {len(pivot_table)}")
    print(f"Years covered: {sorted([col for col in pivot_table.columns if col != 'Total'])}")
    print(f"Total reappointments across all years: {int(pivot_table['Total'].sum())}")
    
    # Top organizations by reappointments
    print("\nTop 10 organizations by total reappointments:")
    top_10 = pivot_table.head(10)
    for idx, (org, row) in enumerate(top_10.iterrows()):
        print(f"{idx+1:2d}. {org}: {int(row['Total'])} reappointments")
    
    # Organizations with highest single-year reappointments
    print("\nTop 5 highest single-year reappointment counts:")
    year_columns = [col for col in pivot_table.columns if col != 'Total']
    for idx, row in enumerate(grouped.nlargest(5, 'reappointment_count').itertuples()):
        print(f"{idx+1}. {row.org}: {row.reappointment_count} reappointments in {row.year}")
    
    # Yearly reappointment trends
    print("\nReappointments by year:")
    yearly_totals = grouped.groupby('year')['reappointment_count'].sum().sort_index()
    for year, total in yearly_totals.items():
        print(f"  {year}: {total} reappointments")
    
    # Reappointment rates
    print("\nReappointment rate analysis:")
    # Get total appointments per year from original data
    total_by_year = df.groupby('year').size()
    reapp_by_year = reappointed_df.groupby('year').size()
    
    print("Year | Total Appointments | Reappointments | Rate")
    print("-" * 50)
    for year in sorted(total_by_year.index):
        total = total_by_year.get(year, 0)
        reapp = reapp_by_year.get(year, 0)
        rate = (reapp / total * 100) if total > 0 else 0
        print(f"{year} | {total:17d} | {reapp:14d} | {rate:4.1f}%")
    
    # Organizations with zero reappointments
    all_orgs = df['org'].unique()
    orgs_with_reapp = pivot_table.index.tolist()
    orgs_without_reapp = [org for org in all_orgs if org not in orgs_with_reapp]
    
    print(f"\nOrganizations with no reappointments: {len(orgs_without_reapp)}")
    if len(orgs_without_reapp) > 0 and len(orgs_without_reapp) <= 10:
        print("Organizations with no reappointments:")
        for org in orgs_without_reapp[:10]:
            print(f"  - {org}")
    
    # Show sample of pivot table
    print("\nSample of reappointment counts table (first 5 orgs):")
    print(pivot_table.head())
    
    print(f"\nReappointment counts saved successfully to: {output_file}")
    
    return pivot_table

if __name__ == "__main__":
    # Run the main function
    try:
        reapp_counts_table = create_reappointment_counts()
        print("\nstep completed successfully!")
    except Exception as e:
        print(f"\nERROR: step failed with error: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)