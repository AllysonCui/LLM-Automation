#!/usr/bin/env python3
"""
step to perform regression analysis on government-wide reappointment proportions
Tests for statistically significant trends over the 12-year period
"""

import pandas as pd
import numpy as np
from scipy import stats
from statsmodels.stats.stattools import durbin_watson
import os
from pathlib import Path
import sys

def perform_regression_analysis():
    """
    Perform comprehensive regression analysis on annual reappointment proportions
    """
    # Define paths
    data_dir = Path("steps/claudeopus4/version1/analysis_data")
    input_file = data_dir / "step8_annual_proportions.csv"
    output_file = data_dir / "step9_regression_results.txt"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"ERROR: Input file {input_file} not found!")
        sys.exit(1)
    
    # Load the data
    print(f"Loading annual proportions from {input_file}...")
    try:
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"Successfully loaded {len(df)} years of data")
    except Exception as e:
        print(f"ERROR loading file: {str(e)}")
        sys.exit(1)
    
    # Validate required columns
    required_columns = ['year', 'reappointment_proportion']
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        print(f"ERROR: Missing required columns: {missing_columns}")
        sys.exit(1)
    
    # Sort by year to ensure chronological order
    df = df.sort_values('year')
    
    # Prepare data for regression
    print("\nPreparing data for regression...")
    X = df['year'].values
    Y = df['reappointment_proportion'].values * 100  # Convert to percentage
    n = len(X)
    
    # Basic data validation
    if n < 3:
        print("ERROR: Insufficient data points for regression analysis (need at least 3)")
        sys.exit(1)
    
    print(f"X (years): {X}")
    print(f"Y (proportions %): {[f'{y:.2f}' for y in Y]}")
    
    # Perform linear regression using scipy
    print("\nPerforming linear regression...")
    slope, intercept, r_value, p_value, std_err = stats.linregress(X, Y)
    
    # Calculate R-squared
    r_squared = r_value ** 2
    
    # Calculate predicted values and residuals
    Y_pred = slope * X + intercept
    residuals = Y - Y_pred
    
    # Calculate 95% confidence intervals for slope
    # Degrees of freedom
    df_resid = n - 2
    # t-value for 95% confidence
    t_value = stats.t.ppf(0.975, df_resid)
    # Confidence interval
    ci_lower = slope - t_value * std_err
    ci_upper = slope + t_value * std_err
    
    # Regression diagnostics
    print("\nPerforming regression diagnostics...")
    
    # 1. Durbin-Watson test for autocorrelation
    dw_statistic = durbin_watson(residuals)
    
    # 2. Outlier detection using standardized residuals
    residual_std = np.std(residuals, ddof=2)
    standardized_residuals = residuals / residual_std
    outliers = []
    for i, (year, std_res) in enumerate(zip(X, standardized_residuals)):
        if abs(std_res) > 2:  # Common threshold for outliers
            outliers.append((year, Y[i], std_res))
    
    # 3. Test for statistical significance
    is_significant = p_value < 0.05
    trend_direction = "increasing" if slope > 0 else "decreasing"
    
    # Calculate changes
    annual_change_pct = slope  # Change per year in percentage points
    total_change_pct = slope * (X[-1] - X[0])  # Total change over period
    
    # Prepare results text
    results = []
    results.append("="*70)
    results.append("REGRESSION ANALYSIS RESULTS")
    results.append("Government-wide Reappointment Proportion Trend Analysis")
    results.append("="*70)
    results.append("")
    
    # Data summary
    results.append("DATA SUMMARY:")
    results.append(f"Period analyzed: {X[0]} to {X[-1]} ({n} years)")
    results.append(f"Reappointment proportion range: {Y.min():.2f}% to {Y.max():.2f}%")
    results.append(f"Mean proportion: {Y.mean():.2f}%")
    results.append(f"Standard deviation: {Y.std():.2f}%")
    results.append("")
    
    # Regression equation
    results.append("REGRESSION EQUATION:")
    results.append(f"Y = {slope:.4f} * X + {intercept:.4f}")
    results.append(f"Where Y = Reappointment proportion (%) and X = Year")
    results.append("")
    
    # Statistical results
    results.append("STATISTICAL RESULTS:")
    results.append(f"Slope (annual change): {slope:.4f} percentage points per year")
    results.append(f"Intercept: {intercept:.4f}")
    results.append(f"R-squared: {r_squared:.4f} ({r_squared*100:.2f}% of variance explained)")
    results.append(f"Correlation coefficient (r): {r_value:.4f}")
    results.append(f"P-value: {p_value:.6f}")
    results.append(f"Standard error: {std_err:.4f}")
    results.append(f"95% Confidence interval for slope: [{ci_lower:.4f}, {ci_upper:.4f}]")
    results.append("")
    
    # Hypothesis test
    results.append("HYPOTHESIS TEST:")
    results.append("H0: No trend in reappointment proportion (slope = 0)")
    results.append("H1: There is a trend in reappointment proportion (slope ≠ 0)")
    results.append(f"Test statistic: t = {slope/std_err:.4f}")
    results.append(f"P-value: {p_value:.6f}")
    results.append(f"Significance level: α = 0.05")
    results.append(f"Decision: {'REJECT H0' if is_significant else 'FAIL TO REJECT H0'}")
    results.append("")
    
    # Regression diagnostics
    results.append("REGRESSION DIAGNOSTICS:")
    results.append(f"Durbin-Watson statistic: {dw_statistic:.4f}")
    dw_interpretation = "positive autocorrelation" if dw_statistic < 1.5 else \
                       "negative autocorrelation" if dw_statistic > 2.5 else \
                       "no significant autocorrelation"
    results.append(f"  Interpretation: {dw_interpretation}")
    results.append("")
    
    if outliers:
        results.append("Potential outliers detected (|standardized residual| > 2):")
        for year, value, std_res in outliers:
            results.append(f"  Year {year}: {value:.2f}% (std. residual: {std_res:.2f})")
    else:
        results.append("No significant outliers detected")
    results.append("")
    
    # Trend analysis
    results.append("TREND ANALYSIS:")
    results.append(f"Trend direction: {trend_direction.upper()}")
    results.append(f"Annual change: {annual_change_pct:.4f} percentage points per year")
    results.append(f"Total change over {X[-1]-X[0]} years: {total_change_pct:.2f} percentage points")
    results.append(f"Statistical significance: {'YES' if is_significant else 'NO'} (p = {p_value:.6f})")
    results.append("")
    
    # Year-by-year data with predictions
    results.append("YEAR-BY-YEAR DATA:")
    results.append(f"{'Year':<6} {'Actual %':<10} {'Predicted %':<12} {'Residual':<10}")
    results.append("-"*40)
    for i, (year, actual, predicted) in enumerate(zip(X, Y, Y_pred)):
        results.append(f"{year:<6} {actual:<10.2f} {predicted:<12.2f} {residuals[i]:<10.2f}")
    results.append("")
    
    # Conclusions
    results.append("="*70)
    results.append("CONCLUSIONS:")
    results.append("="*70)
    
    if is_significant:
        results.append(f"1. The government-wide reappointment proportion shows a statistically significant")
        results.append(f"   {trend_direction.upper()} trend over the 12-year period (p = {p_value:.6f} < 0.05).")
        results.append("")
        results.append(f"2. The proportion is {trend_direction} by approximately {abs(annual_change_pct):.3f}")
        results.append(f"   percentage points per year.")
        results.append("")
        results.append(f"3. The model explains {r_squared*100:.1f}% of the variance in reappointment proportions.")
    else:
        results.append(f"1. The government-wide reappointment proportion shows NO statistically significant")
        results.append(f"   trend over the 12-year period (p = {p_value:.6f} > 0.05).")
        results.append("")
        results.append(f"2. While the data suggests a {trend_direction} pattern ({annual_change_pct:.3f}")
        results.append(f"   percentage points per year), this could be due to random variation.")
        results.append("")
        results.append(f"3. The model explains {r_squared*100:.1f}% of the variance in reappointment proportions.")
    
    results.append("")
    results.append(f"4. With 95% confidence, the true annual change is between {ci_lower:.3f}")
    results.append(f"   and {ci_upper:.3f} percentage points per year.")
    
    # Save results to file
    print(f"\nSaving detailed results to {output_file}...")
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(results))
    
    # Print final answer
    print("\n" + "="*70)
    print("FINAL ANSWER:")
    print("="*70)
    
    if is_significant:
        print(f"The government-wide reappointment proportion trend is {trend_direction.upper()}")
        print(f"over the 12-year period and IS STATISTICALLY SIGNIFICANT (p = {p_value:.6f}).")
        print(f"\nThe proportion changes by {annual_change_pct:.3f} percentage points per year,")
        print(f"resulting in a total change of {total_change_pct:.2f} percentage points from {X[0]} to {X[-1]}.")
    else:
        print(f"The government-wide reappointment proportion shows a {trend_direction} pattern")
        print(f"over the 12-year period but is NOT STATISTICALLY SIGNIFICANT (p = {p_value:.6f}).")
        print(f"\nThe observed change of {annual_change_pct:.3f} percentage points per year")
        print("could be due to random variation rather than a true underlying trend.")
    
    print(f"\nDetailed statistical results saved to: {output_file}")
    
    return {
        'trend_direction': trend_direction,
        'is_significant': is_significant,
        'p_value': p_value,
        'annual_change': annual_change_pct,
        'r_squared': r_squared
    }

if __name__ == "__main__":
    # Run the main function
    try:
        results = perform_regression_analysis()
        print("\nstep completed successfully!")
    except Exception as e:
        print(f"\nERROR: step failed with error: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)