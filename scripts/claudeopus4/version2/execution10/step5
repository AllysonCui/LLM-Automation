#!/usr/bin/env python3
"""
Step 5: Count reappointments by organization and year
This script counts how many times each "org" appears with "reappointed" marked as true for each year.
"""

import pandas as pd
import numpy as np
from pathlib import Path
import sys

def main():
    """Main function to count reappointments by organization and year."""
    
    # Define paths
    input_dir = Path("scripts/claudeopus4/version2/execution10/analysis_data")
    output_dir = input_dir  # Same directory for output
    
    # Input and output files
    input_file = input_dir / "step3_repeats_marked.csv"
    output_file = output_dir / "step5_reappointment_counts.csv"
    
    print("\n" + "="*60)
    print("STEP 5: COUNTING REAPPOINTMENTS BY ORGANIZATION AND YEAR")
    print("="*60 + "\n")
    
    # Check if input file exists
    if not input_file.exists():
        print(f"❌ ERROR: Input file not found: {input_file}")
        print("Please run Step 3 first to mark repeated appointments.")
        sys.exit(1)
    
    try:
        # Load the data
        print(f"Loading data from: {input_file}")
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"✓ Loaded {len(df)} rows and {len(df.columns)} columns")
        
        # Verify required columns exist
        required_columns = ['org', 'year', 'reappointed']
        missing_required = [col for col in required_columns if col not in df.columns]
        
        if missing_required:
            print(f"\n❌ ERROR: Required columns missing: {missing_required}")
            print(f"Available columns: {list(df.columns)}")
            sys.exit(1)
        
        # Data quality check
        print("\nData quality analysis:")
        print(f"  - Missing org values: {df['org'].isna().sum()}")
        print(f"  - Missing year values: {df['year'].isna().sum()}")
        print(f"  - Missing reappointed values: {df['reappointed'].isna().sum()}")
        
        # Handle missing values
        if df['org'].isna().sum() > 0:
            print("  - Filling missing org values with 'Unknown Organization'")
            df['org'] = df['org'].fillna('Unknown Organization')
        
        if df['year'].isna().sum() > 0:
            print("  - Dropping rows with missing year values")
            df = df.dropna(subset=['year'])
            print(f"  - Rows after dropping missing years: {len(df)}")
        
        # Convert year to integer for consistency
        df['year'] = df['year'].astype(int)
        
        # Analyze reappointed column
        print("\nReappointed column analysis:")
        print(f"  - Data type: {df['reappointed'].dtype}")
        print(f"  - Unique values: {df['reappointed'].unique()}")
        
        # Ensure reappointed is boolean
        if df['reappointed'].dtype != 'bool':
            print("  - Converting reappointed to boolean...")
            # Handle various representations
            df['reappointed'] = df['reappointed'].fillna(False)
            if df['reappointed'].dtype == 'object':
                df['reappointed'] = df['reappointed'].isin([True, 'True', 'true', 'TRUE', 'Yes', 'yes', 'YES', 'Y', 'y', '1', 1])
            else:
                df['reappointed'] = df['reappointed'].astype(bool)
        
        # Overall reappointment statistics
        total_reappointments = df['reappointed'].sum()
        reappointment_rate = (total_reappointments / len(df)) * 100
        print(f"\nOverall statistics:")
        print(f"  - Total appointments: {len(df)}")
        print(f"  - Total reappointments: {total_reappointments}")
        print(f"  - Overall reappointment rate: {reappointment_rate:.2f}%")
        
        # Count reappointments by organization and year
        print("\nCounting reappointments by organization and year...")
        
        # Filter for reappointments only
        reappointments_df = df[df['reappointed'] == True]
        
        # Count reappointments by org and year
        reappointment_counts = reappointments_df.groupby(['org', 'year']).size().reset_index(name='reappointment_count')
        
        print(f"✓ Found reappointments for {len(reappointment_counts)} org-year combinations")
        
        # Also count total appointments for context (from Step 4 logic)
        total_counts = df.groupby(['org', 'year']).size().reset_index(name='total_appointments')
        
        # Merge reappointment counts with total counts
        merged_counts = pd.merge(
            total_counts,
            reappointment_counts,
            on=['org', 'year'],
            how='left'
        )
        
        # Fill missing reappointment counts with 0
        merged_counts['reappointment_count'] = merged_counts['reappointment_count'].fillna(0).astype(int)
        
        # Calculate reappointment rate
        merged_counts['reappointment_rate'] = (
            merged_counts['reappointment_count'] / merged_counts['total_appointments'] * 100
        ).round(2)
        
        # Add rank within year for reappointment count
        merged_counts['reappointment_rank_in_year'] = merged_counts.groupby('year')['reappointment_count'].rank(
            ascending=False, method='min'
        )
        
        # Summary statistics
        print("\nSummary statistics:")
        print(f"  - Total unique organizations: {merged_counts['org'].nunique()}")
        print(f"  - Year range: {merged_counts['year'].min()} - {merged_counts['year'].max()}")
        print(f"  - Org-year combinations with reappointments: {(merged_counts['reappointment_count'] > 0).sum()}")
        print(f"  - Org-year combinations without reappointments: {(merged_counts['reappointment_count'] == 0).sum()}")
        
        # Top organizations by total reappointments across all years
        print("\nTop 10 organizations by total reappointments (all years):")
        org_totals = merged_counts.groupby('org')['reappointment_count'].sum().sort_values(ascending=False)
        for org, total in org_totals.head(10).items():
            org_rate = merged_counts[merged_counts['org'] == org]['reappointment_rate'].mean()
            print(f"  - {org}: {total} reappointments (avg rate: {org_rate:.1f}%)")
        
        # Organizations with highest reappointment rates (minimum 10 total appointments)
        print("\nTop 10 organizations by reappointment rate (min 10 total appointments):")
        org_stats = merged_counts.groupby('org').agg({
            'total_appointments': 'sum',
            'reappointment_count': 'sum'
        })
        org_stats['overall_rate'] = (org_stats['reappointment_count'] / org_stats['total_appointments'] * 100).round(2)
        
        # Filter for organizations with at least 10 appointments
        qualified_orgs = org_stats[org_stats['total_appointments'] >= 10].sort_values('overall_rate', ascending=False)
        
        for org in qualified_orgs.head(10).index:
            stats = qualified_orgs.loc[org]
            print(f"  - {org}: {stats['overall_rate']:.1f}% "
                  f"({stats['reappointment_count']}/{stats['total_appointments']})")
        
        # Year-wise analysis
        print("\nYear-wise reappointment analysis:")
        yearly_stats = merged_counts.groupby('year').agg({
            'reappointment_count': 'sum',
            'total_appointments': 'sum',
            'org': 'nunique'
        })
        yearly_stats['reappointment_rate'] = (
            yearly_stats['reappointment_count'] / yearly_stats['total_appointments'] * 100
        ).round(2)
        yearly_stats.columns = ['reappointments', 'total', 'unique_orgs', 'rate_pct']
        print(yearly_stats)
        
        # Analyze year-over-year trends
        print("\nAnalyzing reappointment trends...")
        
        # Pivot data for trend analysis
        pivot_reappointments = merged_counts.pivot(
            index='org', 
            columns='year', 
            values='reappointment_count'
        ).fillna(0)
        
        # Calculate year-over-year changes
        years_sorted = sorted(pivot_reappointments.columns)
        
        if len(years_sorted) > 1:
            print("\nOrganizations with largest increases in reappointments:")
            
            # Compare first and last year
            first_year = years_sorted[0]
            last_year = years_sorted[-1]
            
            change = pivot_reappointments[last_year] - pivot_reappointments[first_year]
            top_increases = change.nlargest(5)
            
            for org, increase in top_increases.items():
                if increase > 0:
                    first_val = pivot_reappointments.loc[org, first_year]
                    last_val = pivot_reappointments.loc[org, last_year]
                    print(f"  - {org}: {first_val:.0f} → {last_val:.0f} (+{increase:.0f})")
        
        # Organizations with most consistent reappointments
        print("\nOrganizations with most consistent reappointments:")
        consistency_stats = merged_counts[merged_counts['reappointment_count'] > 0].groupby('org').agg({
            'year': 'count',
            'reappointment_count': ['mean', 'std', 'sum']
        })
        consistency_stats.columns = ['years_with_reappointments', 'avg_reappointments', 'std_reappointments', 'total_reappointments']
        
        # Calculate coefficient of variation (lower = more consistent)
        consistency_stats['consistency_score'] = (
            consistency_stats['std_reappointments'] / consistency_stats['avg_reappointments']
        ).fillna(0)
        
        # Filter for organizations with reappointments in multiple years
        consistent_orgs = consistency_stats[
            consistency_stats['years_with_reappointments'] >= 5
        ].sort_values('consistency_score')
        
        print("  (Organizations with reappointments in 5+ years, sorted by consistency)")
        for org in consistent_orgs.head(10).index:
            stats = consistent_orgs.loc[org]
            print(f"  - {org}: avg {stats['avg_reappointments']:.1f} reappointments/year "
                  f"(total: {stats['total_reappointments']:.0f})")
        
        # Distribution analysis
        print("\nReappointment count distribution:")
        count_dist = merged_counts['reappointment_count'].value_counts().sort_index()
        print("  Reappointments | Org-Year Combinations")
        print("  " + "-" * 35)
        for count, freq in count_dist.head(10).items():
            print(f"  {count:13d} | {freq:20d}")
        
        # Sort the output by org and year for readability
        merged_counts = merged_counts.sort_values(['org', 'year'])
        
        # Save the results
        print(f"\nSaving reappointment counts to: {output_file}")
        merged_counts.to_csv(output_file, index=False, encoding='utf-8')
        print(f"✓ Successfully saved {len(merged_counts)} org-year combinations")
        
        # Create a summary pivot table for reappointments
        summary_pivot_file = output_dir / "step5_reappointment_counts_pivot.csv"
        print(f"\nCreating reappointment pivot table: {summary_pivot_file}")
        
        # Create pivot with organizations as rows and years as columns
        pivot_summary = merged_counts.pivot(
            index='org', 
            columns='year', 
            values='reappointment_count'
        ).fillna(0).astype(int)
        
        # Add row totals
        pivot_summary['Total'] = pivot_summary.sum(axis=1)
        pivot_summary = pivot_summary.sort_values('Total', ascending=False)
        
        # Save pivot table
        pivot_summary.to_csv(summary_pivot_file, encoding='utf-8')
        print(f"✓ Pivot table saved")
        
        # Create a rate pivot table as well
        rate_pivot_file = output_dir / "step5_reappointment_rates_pivot.csv"
        print(f"\nCreating reappointment rate pivot table: {rate_pivot_file}")
        
        rate_pivot = merged_counts.pivot(
            index='org', 
            columns='year', 
            values='reappointment_rate'
        ).round(1)
        
        # Calculate overall rate for sorting
        org_overall_rates = merged_counts.groupby('org').apply(
            lambda x: (x['reappointment_count'].sum() / x['total_appointments'].sum() * 100)
        ).round(1)
        rate_pivot['Overall_Rate'] = org_overall_rates
        rate_pivot = rate_pivot.sort_values('Overall_Rate', ascending=False)
        
        # Save rate pivot table
        rate_pivot.to_csv(rate_pivot_file, encoding='utf-8')
        print(f"✓ Rate pivot table saved")
        
        # Final summary
        print("\n" + "="*60)
        print("SUMMARY")
        print("="*60)
        print(f"Input file: {input_file}")
        print(f"Output file: {output_file}")
        print(f"Reappointment pivot: {summary_pivot_file}")
        print(f"Rate pivot: {rate_pivot_file}")
        print(f"Total appointments processed: {len(df)}")
        print(f"Total reappointments: {total_reappointments}")
        print(f"Overall reappointment rate: {reappointment_rate:.2f}%")
        print(f"Organizations analyzed: {merged_counts['org'].nunique()}")
        print("\n✓ Step 5 completed successfully!")
        
        return merged_counts
        
    except Exception as e:
        print(f"\n❌ Fatal error: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    # Run the main function
    reappointment_count_data = main()