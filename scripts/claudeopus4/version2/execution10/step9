#!/usr/bin/env python3
"""
Step 9: Linear regression analysis
This script runs a linear regression on the annual reappointment proportions 
to assess trend direction and significance.
"""

import pandas as pd
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import sys

def main():
    """Main function to run linear regression on annual reappointment proportions."""
    
    # Define paths
    input_dir = Path("scripts/claudeopus4/version2/execution10/analysis_data")
    output_dir = input_dir  # Same directory for output
    
    # Input and output files
    input_file = input_dir / "step8_annual_proportions.csv"
    output_file = output_dir / "step9_regression_results.txt"
    plot_file = output_dir / "step9_regression_analysis.png"
    
    print("\n" + "="*60)
    print("STEP 9: LINEAR REGRESSION ANALYSIS")
    print("="*60 + "\n")
    
    # Check if input file exists
    if not input_file.exists():
        print(f"❌ ERROR: Input file not found: {input_file}")
        print("Please run Step 8 first to compute annual proportions.")
        sys.exit(1)
    
    try:
        # Load the data
        print(f"Loading data from: {input_file}")
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"✓ Loaded {len(df)} years of data")
        
        # Verify required columns
        required_columns = ['year', 'reappointment_percentage', 'total_appointments', 'reappointments']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"\n❌ ERROR: Missing required columns: {missing_columns}")
            print(f"Available columns: {list(df.columns)}")
            sys.exit(1)
        
        print("✓ All required columns present")
        
        # Prepare data for regression
        print("\nPreparing data for regression analysis...")
        
        # Create year index (0, 1, 2, ...) for regression
        df['year_index'] = df['year'] - df['year'].min()
        
        # Extract variables
        X = df['year_index'].values
        y = df['reappointment_percentage'].values
        n = len(X)
        
        print(f"  - Independent variable (X): Year index (0 to {X.max()})")
        print(f"  - Dependent variable (y): Reappointment percentage")
        print(f"  - Number of observations: {n}")
        
        # Run linear regression using scipy.stats
        print("\nRunning linear regression...")
        slope, intercept, r_value, p_value, std_err = stats.linregress(X, y)
        
        # Calculate additional statistics
        y_pred = slope * X + intercept
        residuals = y - y_pred
        ss_res = np.sum(residuals**2)
        ss_tot = np.sum((y - np.mean(y))**2)
        r_squared = 1 - (ss_res / ss_tot)
        
        # Calculate confidence intervals for slope
        t_stat = stats.t.ppf(0.975, n-2)  # 95% confidence interval
        slope_ci_lower = slope - t_stat * std_err
        slope_ci_upper = slope + t_stat * std_err
        
        # Calculate prediction intervals
        x_mean = np.mean(X)
        se_pred = np.sqrt(ss_res / (n-2) * (1 + 1/n + (X - x_mean)**2 / np.sum((X - x_mean)**2)))
        pred_lower = y_pred - t_stat * se_pred
        pred_upper = y_pred + t_stat * se_pred
        
        # Display regression results
        print("\n" + "="*60)
        print("REGRESSION RESULTS")
        print("="*60)
        
        print(f"\nModel: Reappointment_Percentage = {intercept:.4f} + {slope:.4f} * Year_Index")
        print(f"\nCoefficients:")
        print(f"  - Intercept: {intercept:.4f}")
        print(f"  - Slope: {slope:.4f}")
        print(f"  - Slope 95% CI: [{slope_ci_lower:.4f}, {slope_ci_upper:.4f}]")
        
        print(f"\nModel Statistics:")
        print(f"  - R-squared: {r_squared:.4f}")
        print(f"  - Correlation coefficient (r): {r_value:.4f}")
        print(f"  - Standard error: {std_err:.4f}")
        print(f"  - p-value: {p_value:.4e}")
        
        # Interpret results
        print(f"\nInterpretation:")
        
        # Trend direction
        if slope > 0:
            trend_direction = "INCREASING"
            trend_description = f"increasing by {slope:.4f} percentage points per year"
        elif slope < 0:
            trend_direction = "DECREASING"
            trend_description = f"decreasing by {abs(slope):.4f} percentage points per year"
        else:
            trend_direction = "FLAT"
            trend_description = "showing no change"
        
        print(f"  - Trend Direction: {trend_direction}")
        print(f"  - The reappointment rate is {trend_description}")
        
        # Statistical significance
        alpha = 0.05
        if p_value < alpha:
            significance = "STATISTICALLY SIGNIFICANT"
            sig_description = f"The trend is statistically significant at the {alpha} level (p = {p_value:.4e})"
        else:
            significance = "NOT STATISTICALLY SIGNIFICANT"
            sig_description = f"The trend is not statistically significant at the {alpha} level (p = {p_value:.4e})"
        
        print(f"  - Statistical Significance: {significance}")
        print(f"  - {sig_description}")
        
        # Effect size interpretation
        print(f"\n  - Effect Size:")
        if abs(r_value) < 0.3:
            effect_size = "weak"
        elif abs(r_value) < 0.5:
            effect_size = "moderate"
        else:
            effect_size = "strong"
        print(f"    The correlation is {effect_size} (r = {r_value:.4f})")
        
        # Practical significance
        total_change = slope * (X.max() - X.min())
        print(f"\n  - Practical Significance:")
        print(f"    Over the {int(X.max())} year period, the reappointment rate changed by {total_change:.2f} percentage points")
        print(f"    From {y[0]:.2f}% to {y[-1]:.2f}% (actual change: {y[-1] - y[0]:.2f} percentage points)")
        
        # Run additional diagnostic tests
        print("\n" + "="*60)
        print("DIAGNOSTIC TESTS")
        print("="*60)
        
        # Durbin-Watson test for autocorrelation
        dw_stat = np.sum(np.diff(residuals)**2) / ss_res
        print(f"\nDurbin-Watson statistic: {dw_stat:.4f}")
        if dw_stat < 1.5:
            print("  - Indicates positive autocorrelation")
        elif dw_stat > 2.5:
            print("  - Indicates negative autocorrelation")
        else:
            print("  - No significant autocorrelation detected")
        
        # Shapiro-Wilk test for normality of residuals
        shapiro_stat, shapiro_p = stats.shapiro(residuals)
        print(f"\nShapiro-Wilk test for normality of residuals:")
        print(f"  - Statistic: {shapiro_stat:.4f}")
        print(f"  - p-value: {shapiro_p:.4f}")
        if shapiro_p > 0.05:
            print("  - Residuals appear to be normally distributed")
        else:
            print("  - Residuals may not be normally distributed")
        
        # Create visualization
        print("\nCreating regression analysis visualization...")
        
        # Set up the plot
        fig, axes = plt.subplots(2, 2, figsize=(14, 12))
        
        # Plot 1: Main regression plot
        ax1 = axes[0, 0]
        ax1.scatter(df['year'], y, s=100, alpha=0.7, color='blue', edgecolor='black', 
                   linewidth=1, label='Actual Data', zorder=3)
        ax1.plot(df['year'], y_pred, 'r-', linewidth=2.5, label='Regression Line', zorder=2)
        
        # Add confidence band
        ax1.fill_between(df['year'], pred_lower, pred_upper, alpha=0.2, color='red', 
                        label='95% Prediction Interval', zorder=1)
        
        # Add regression equation
        equation_text = f'y = {intercept:.3f} + {slope:.3f}x\n$R^2$ = {r_squared:.3f}\np = {p_value:.3e}'
        ax1.text(0.05, 0.95, equation_text, transform=ax1.transAxes, 
                fontsize=11, verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.5))
        
        ax1.set_title('Linear Regression: Reappointment Rate over Time', fontsize=14, fontweight='bold')
        ax1.set_xlabel('Year', fontsize=12)
        ax1.set_ylabel('Reappointment Percentage (%)', fontsize=12)
        ax1.legend(loc='best')
        ax1.grid(True, alpha=0.3)
        
        # Plot 2: Residuals vs Fitted
        ax2 = axes[0, 1]
        ax2.scatter(y_pred, residuals, alpha=0.7, color='green', edgecolor='black', linewidth=1)
        ax2.axhline(y=0, color='red', linestyle='--', linewidth=2)
        ax2.set_title('Residuals vs Fitted Values', fontsize=14, fontweight='bold')
        ax2.set_xlabel('Fitted Values', fontsize=12)
        ax2.set_ylabel('Residuals', fontsize=12)
        ax2.grid(True, alpha=0.3)
        
        # Plot 3: Q-Q plot
        ax3 = axes[1, 0]
        stats.probplot(residuals, dist="norm", plot=ax3)
        ax3.set_title('Q-Q Plot of Residuals', fontsize=14, fontweight='bold')
        ax3.grid(True, alpha=0.3)
        
        # Plot 4: Residuals over time
        ax4 = axes[1, 1]
        ax4.scatter(df['year'], residuals, alpha=0.7, color='orange', edgecolor='black', linewidth=1)
        ax4.axhline(y=0, color='red', linestyle='--', linewidth=2)
        ax4.set_title('Residuals over Time', fontsize=14, fontweight='bold')
        ax4.set_xlabel('Year', fontsize=12)
        ax4.set_ylabel('Residuals', fontsize=12)
        ax4.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(plot_file, dpi=300, bbox_inches='tight')
        print(f"✓ Visualization saved to: {plot_file}")
        plt.close()
        
        # Save detailed results to text file
        print(f"\nSaving detailed results to: {output_file}")
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("STEP 9: LINEAR REGRESSION ANALYSIS RESULTS\n")
            f.write("="*60 + "\n\n")
            
            f.write("RESEARCH QUESTION:\n")
            f.write("Is the trend in government-wide reappointment rates increasing or declining?\n\n")
            
            f.write("DATA SUMMARY:\n")
            f.write(f"  Period analyzed: {df['year'].min()} - {df['year'].max()}\n")
            f.write(f"  Number of years: {n}\n")
            f.write(f"  Starting rate: {y[0]:.2f}%\n")
            f.write(f"  Ending rate: {y[-1]:.2f}%\n")
            f.write(f"  Mean rate: {np.mean(y):.2f}%\n")
            f.write(f"  Standard deviation: {np.std(y):.2f}%\n\n")
            
            f.write("REGRESSION MODEL:\n")
            f.write(f"  Reappointment_Percentage = {intercept:.4f} + {slope:.4f} * Year_Index\n\n")
            
            f.write("MODEL COEFFICIENTS:\n")
            f.write(f"  Intercept: {intercept:.4f}\n")
            f.write(f"  Slope: {slope:.4f}\n")
            f.write(f"  Slope 95% CI: [{slope_ci_lower:.4f}, {slope_ci_upper:.4f}]\n")
            f.write(f"  Standard Error: {std_err:.4f}\n\n")
            
            f.write("MODEL PERFORMANCE:\n")
            f.write(f"  R-squared: {r_squared:.4f}\n")
            f.write(f"  Correlation coefficient (r): {r_value:.4f}\n")
            f.write(f"  p-value: {p_value:.4e}\n\n")
            
            f.write("HYPOTHESIS TEST:\n")
            f.write(f"  Null hypothesis (H0): No trend in reappointment rates (slope = 0)\n")
            f.write(f"  Alternative hypothesis (H1): There is a trend in reappointment rates (slope ≠ 0)\n")
            f.write(f"  Significance level: α = {alpha}\n")
            f.write(f"  Decision: {'Reject H0' if p_value < alpha else 'Fail to reject H0'}\n\n")
            
            f.write("INTERPRETATION:\n")
            f.write(f"  1. Trend Direction: {trend_direction}\n")
            f.write(f"     - The reappointment rate is {trend_description}\n")
            f.write(f"  2. Statistical Significance: {significance}\n")
            f.write(f"     - {sig_description}\n")
            f.write(f"  3. Effect Size: {effect_size.upper()}\n")
            f.write(f"     - Correlation coefficient r = {r_value:.4f}\n")
            f.write(f"  4. Practical Significance:\n")
            f.write(f"     - Total change over period: {total_change:.2f} percentage points\n")
            f.write(f"     - Average annual change: {slope:.4f} percentage points\n\n")
            
            f.write("DIAGNOSTIC TESTS:\n")
            f.write(f"  1. Durbin-Watson statistic: {dw_stat:.4f}\n")
            f.write(f"     - Interpretation: {'Positive autocorrelation' if dw_stat < 1.5 else ('Negative autocorrelation' if dw_stat > 2.5 else 'No significant autocorrelation')}\n")
            f.write(f"  2. Shapiro-Wilk test for normality:\n")
            f.write(f"     - Statistic: {shapiro_stat:.4f}\n")
            f.write(f"     - p-value: {shapiro_p:.4f}\n")
            f.write(f"     - Interpretation: {'Residuals appear normally distributed' if shapiro_p > 0.05 else 'Residuals may not be normally distributed'}\n\n")
            
            f.write("CONCLUSION:\n")
            if p_value < alpha:
                if slope > 0:
                    conclusion = "The analysis provides strong statistical evidence that the government-wide reappointment rate is INCREASING over time."
                else:
                    conclusion = "The analysis provides strong statistical evidence that the government-wide reappointment rate is DECREASING over time."
            else:
                conclusion = "The analysis does not provide sufficient statistical evidence to conclude that there is a significant trend in the government-wide reappointment rate."
            
            f.write(f"{conclusion}\n\n")
            
            # Add year-by-year predictions
            f.write("YEAR-BY-YEAR ANALYSIS:\n")
            f.write("-"*60 + "\n")
            f.write(f"{'Year':<6} {'Actual':<10} {'Predicted':<10} {'Residual':<10}\n")
            f.write("-"*60 + "\n")
            for i, (year, actual, pred, resid) in enumerate(zip(df['year'], y, y_pred, residuals)):
                f.write(f"{int(year):<6} {actual:>9.2f}% {pred:>9.2f}% {resid:>+9.2f}\n")
        
        print("✓ Detailed results saved")
        
        # Final summary
        print("\n" + "="*60)
        print("SUMMARY")
        print("="*60)
        print(f"Input file: {input_file}")
        print(f"Output file: {output_file}")
        print(f"Visualization: {plot_file}")
        print(f"\nKEY FINDING: The reappointment trend is {trend_direction}")
        print(f"Statistical significance: {significance} (p = {p_value:.4e})")
        print(f"Annual change: {slope:.4f} percentage points per year")
        print(f"Total change over {int(X.max())} years: {total_change:.2f} percentage points")
        print("\n✓ Step 9 completed successfully!")
        
        # Return key results
        return {
            'slope': slope,
            'intercept': intercept,
            'r_squared': r_squared,
            'p_value': p_value,
            'trend_direction': trend_direction,
            'significance': significance
        }
        
    except Exception as e:
        print(f"\n❌ Fatal error: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    # Run the main function
    regression_results = main()