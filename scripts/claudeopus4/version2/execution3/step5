#!/usr/bin/env python3
"""
Step 5: Count reappointments by organization and year
This script counts how many times each "org" appears with "reappointed" marked as true for each year.
"""

import pandas as pd
import numpy as np
from pathlib import Path
import sys

def main():
    """Main function to count reappointments by organization and year"""
    
    # Define paths
    input_path = Path("scripts/claudeopus4/version2/execution3/analysis_data")
    output_path = Path("scripts/claudeopus4/version2/execution3/analysis_data")
    
    # Define input and output files
    input_file = input_path / "step3_repeats_marked.csv"
    output_file = output_path / "step5_reappointment_counts.csv"
    
    print("=== Step 5: Count Reappointments by Organization and Year ===")
    print(f"Input file: {input_file}")
    print(f"Output file: {output_file}")
    
    # Check if input file exists
    if not input_file.exists():
        print(f"❌ ERROR: Input file not found: {input_file}")
        print("Please run step3_mark_repeats.py first.")
        sys.exit(1)
    
    # Read the dataset with marked repeats
    try:
        print("\nReading dataset with marked repeats...")
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"✅ Successfully loaded data: {len(df)} rows, {len(df.columns)} columns")
        print(f"Columns: {', '.join(df.columns)}")
    except Exception as e:
        print(f"❌ Error reading input file: {str(e)}")
        sys.exit(1)
    
    # Validate required columns
    required_cols = ['org', 'year', 'reappointed']
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        print(f"❌ ERROR: Missing required columns: {', '.join(missing_cols)}")
        sys.exit(1)
    
    # Initial data overview
    print("\n=== Data Overview ===")
    print(f"Total records: {len(df)}")
    print(f"Year range: {df['year'].min()} to {df['year'].max()}")
    print(f"Total reappointments: {df['reappointed'].sum()}")
    print(f"Overall reappointment rate: {df['reappointed'].sum() / len(df) * 100:.2f}%")
    
    # Filter to only reappointed records with valid org and year
    print("\n=== Filtering Reappointment Records ===")
    reappointed_df = df[(df['reappointed'] == True) & 
                       df['org'].notna() & 
                       df['year'].notna()].copy()
    
    print(f"Records with reappointed=True and valid org/year: {len(reappointed_df)}")
    
    if len(reappointed_df) == 0:
        print("⚠️  Warning: No reappointment records found!")
        # Create empty output
        reappointment_counts = pd.DataFrame(columns=['org', 'year', 'reappointment_count'])
    else:
        # Count reappointments by org and year
        print("\n=== Calculating Reappointment Counts ===")
        reappointment_counts = reappointed_df.groupby(['org', 'year']).size().reset_index(
            name='reappointment_count')
        
        print(f"✅ Created reappointment count table with {len(reappointment_counts)} org-year combinations")
    
    # Add zero counts for org-year combinations with no reappointments
    print("\n=== Adding Zero Counts for Complete Data ===")
    
    # Get all unique org-year combinations from the original data
    all_combinations = df[df['org'].notna() & df['year'].notna()][['org', 'year']].drop_duplicates()
    
    # Merge with reappointment counts, filling missing values with 0
    complete_counts = all_combinations.merge(
        reappointment_counts,
        on=['org', 'year'],
        how='left'
    )
    complete_counts['reappointment_count'] = complete_counts['reappointment_count'].fillna(0).astype(int)
    
    # Sort by org and year
    complete_counts = complete_counts.sort_values(['org', 'year']).reset_index(drop=True)
    
    print(f"✅ Complete reappointment count table with {len(complete_counts)} org-year combinations")
    print(f"   - Combinations with reappointments: {(complete_counts['reappointment_count'] > 0).sum()}")
    print(f"   - Combinations with zero reappointments: {(complete_counts['reappointment_count'] == 0).sum()}")
    
    # Add total appointments for context (merge with step4 data if available)
    step4_file = input_path / "step4_employee_counts.csv"
    if step4_file.exists():
        print("\n=== Merging with Appointment Count Data ===")
        try:
            employee_counts = pd.read_csv(step4_file)
            complete_counts = complete_counts.merge(
                employee_counts[['org', 'year', 'employee_count']],
                on=['org', 'year'],
                how='left'
            )
            
            # Calculate reappointment rate
            complete_counts['reappointment_rate'] = np.where(
                complete_counts['employee_count'] > 0,
                (complete_counts['reappointment_count'] / complete_counts['employee_count'] * 100).round(2),
                0
            )
            print("✅ Added employee counts and reappointment rates")
        except Exception as e:
            print(f"⚠️  Could not merge with employee counts: {str(e)}")
    
    # Summary statistics
    print("\n=== Summary Statistics ===")
    print(f"Total org-year combinations: {len(complete_counts)}")
    print(f"Total reappointments across all orgs and years: {complete_counts['reappointment_count'].sum()}")
    print(f"Average reappointments per org-year: {complete_counts['reappointment_count'].mean():.2f}")
    print(f"Max reappointments in single org-year: {complete_counts['reappointment_count'].max()}")
    
    # Organizations with most total reappointments
    print("\n=== Top 15 Organizations by Total Reappointments (All Years) ===")
    org_totals = complete_counts.groupby('org')['reappointment_count'].sum().sort_values(
        ascending=False).head(15)
    
    for i, (org, total) in enumerate(org_totals.items(), 1):
        years_with_reappointments = (complete_counts[(complete_counts['org'] == org) & 
                                                    (complete_counts['reappointment_count'] > 0)]['year'].nunique())
        total_years = complete_counts[complete_counts['org'] == org]['year'].nunique()
        print(f"{i:2d}. {org}: {total} total reappointments "
              f"(active in {years_with_reappointments}/{total_years} years)")
    
    # Year-by-year analysis
    print("\n=== Yearly Reappointment Totals ===")
    yearly_totals = complete_counts.groupby('year')['reappointment_count'].agg([
        'sum', 'mean', 'std', 'max'
    ]).round(2)
    yearly_totals.columns = ['Total', 'Average', 'Std_Dev', 'Max']
    print(yearly_totals)
    
    # Find organizations with consistent reappointments
    print("\n=== Organizations with Most Consistent Reappointments ===")
    org_consistency = complete_counts.groupby('org').agg({
        'reappointment_count': ['sum', 'mean', 'std'],
        'year': 'count'
    }).round(2)
    org_consistency.columns = ['total_reappointments', 'avg_per_year', 'std_dev', 'years_present']
    
    # Filter orgs with at least 5 years of data and some reappointments
    consistent_orgs = org_consistency[
        (org_consistency['years_present'] >= 5) & 
        (org_consistency['total_reappointments'] > 0)
    ].sort_values('avg_per_year', ascending=False).head(10)
    
    print("Organizations with 5+ years of data, ranked by average reappointments per year:")
    for i, (org, row) in enumerate(consistent_orgs.iterrows(), 1):
        consistency_score = row['avg_per_year'] / (row['std_dev'] + 1)  # Higher score = more consistent
        print(f"{i:2d}. {org}: Avg {row['avg_per_year']:.1f} reappointments/year "
              f"(Total: {int(row['total_reappointments'])}, Consistency: {consistency_score:.2f})")
    
    # Identify trends over time
    print("\n=== Reappointment Trends Over Time ===")
    
    # Calculate year-over-year changes for top organizations
    top_orgs = org_totals.head(10).index
    
    for org in top_orgs[:5]:  # Show trends for top 5
        org_data = complete_counts[complete_counts['org'] == org].sort_values('year')
        if len(org_data) >= 3:  # Need at least 3 years for meaningful trend
            years = org_data['year'].values
            counts = org_data['reappointment_count'].values
            
            # Simple linear regression for trend
            from scipy import stats
            slope, intercept, r_value, p_value, std_err = stats.linregress(years, counts)
            
            print(f"\n{org}:")
            print(f"  - Years active: {years[0]} to {years[-1]}")
            print(f"  - Trend: {'↑ Increasing' if slope > 0.1 else '↓ Decreasing' if slope < -0.1 else '→ Stable'}")
            print(f"  - Average change per year: {slope:.2f}")
            print(f"  - R-squared: {r_value**2:.3f}")
    
    # Identify organizations with sudden changes
    print("\n=== Organizations with Notable Changes in Reappointments ===")
    
    for org in complete_counts['org'].unique():
        org_data = complete_counts[complete_counts['org'] == org].sort_values('year')
        if len(org_data) >= 2:
            # Calculate year-over-year changes
            org_data['change'] = org_data['reappointment_count'].diff()
            
            # Find largest increase and decrease
            max_increase = org_data['change'].max()
            max_decrease = org_data['change'].min()
            
            if max_increase >= 5:  # Significant increase
                year_of_increase = org_data[org_data['change'] == max_increase]['year'].iloc[0]
                print(f"  ↑ {org}: +{int(max_increase)} reappointments in {int(year_of_increase)}")
            
            if max_decrease <= -5:  # Significant decrease
                year_of_decrease = org_data[org_data['change'] == max_decrease]['year'].iloc[0]
                print(f"  ↓ {org}: {int(max_decrease)} reappointments in {int(year_of_decrease)}")
    
    # Save the reappointment counts dataset
    print(f"\n=== Saving Reappointment Counts Dataset ===")
    
    # Select columns to save based on what's available
    save_columns = ['org', 'year', 'reappointment_count']
    if 'employee_count' in complete_counts.columns:
        save_columns.extend(['employee_count', 'reappointment_rate'])
    
    output_df = complete_counts[save_columns]
    
    try:
        output_df.to_csv(output_file, index=False, encoding='utf-8')
        print(f"✅ Successfully saved reappointment counts")
        print(f"  - Output file: {output_file}")
        print(f"  - File size: {output_file.stat().st_size / 1024:.2f} KB")
        print(f"  - Total rows: {len(output_df)}")
        print(f"  - Columns: {', '.join(output_df.columns)}")
    except Exception as e:
        print(f"❌ Error saving file: {str(e)}")
        sys.exit(1)
    
    # Display sample of the reappointment counts
    print("\n=== Sample of Reappointment Counts (First 20 rows) ===")
    print(output_df.head(20).to_string(index=False))
    
    # Display organizations with highest reappointment counts in most recent year
    most_recent_year = complete_counts['year'].max()
    print(f"\n=== Top Organizations by Reappointments in {int(most_recent_year)} ===")
    recent_top = complete_counts[
        (complete_counts['year'] == most_recent_year) & 
        (complete_counts['reappointment_count'] > 0)
    ].nlargest(10, 'reappointment_count')[save_columns]
    
    if not recent_top.empty:
        print(recent_top.to_string(index=False))
    else:
        print("No reappointments found in the most recent year.")
    
    print("\n✅ Step 5 completed successfully!")
    print(f"Next step: Run step 6 to calculate reappointment rates")

if __name__ == "__main__":
    main()