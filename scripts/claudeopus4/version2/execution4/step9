#!/usr/bin/env python3
"""
Step 9: Linear regression analysis on annual reappointment proportions
This script performs comprehensive regression analysis to assess trend direction 
and significance in government-wide reappointment proportions over time.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error
import statsmodels.api as sm
from pathlib import Path
import sys

def main():
    """Main function to perform linear regression analysis on annual proportions."""
    
    # Define paths
    input_dir = Path("scripts/claudeopus4/version2/execution4/analysis_data")
    input_file = input_dir / "step8_annual_proportions.csv"
    output_file = input_dir / "step9_regression_results.txt"
    
    print("\n" + "="*60)
    print("STEP 9: LINEAR REGRESSION ANALYSIS")
    print("="*60 + "\n")
    
    # Check if input file exists
    if not input_file.exists():
        print(f"ERROR: Input file not found: {input_file}")
        print("Please run step8_compute_annual_proportions.py first!")
        sys.exit(1)
    
    print(f"Loading data from: {input_file}")
    
    try:
        # Read the annual proportions data
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"SUCCESS: Loaded {len(df)} years of data")
        
    except Exception as e:
        print(f"ERROR loading file: {str(e)}")
        sys.exit(1)
    
    # Prepare data for regression
    print("\n" + "-"*60)
    print("PREPARING DATA FOR REGRESSION ANALYSIS:")
    
    # Extract year and proportion data
    X = df['year'].values.reshape(-1, 1)
    y = df['govt_wide_proportion'].values
    
    # Create normalized year variable (0 to n-1) for interpretation
    X_normalized = X - X.min()
    
    print(f"- Years analyzed: {int(X.min())} to {int(X.max())}")
    print(f"- Number of data points: {len(X)}")
    print(f"- Dependent variable: Government-wide reappointment proportion (%)")
    
    # Basic statistics
    print(f"\nBasic statistics for reappointment proportions:")
    print(f"- Mean: {y.mean():.2f}%")
    print(f"- Std Dev: {y.std():.2f}%")
    print(f"- Min: {y.min():.2f}%")
    print(f"- Max: {y.max():.2f}%")
    print(f"- Range: {y.max() - y.min():.2f}%")
    
    # Perform simple linear regression using scipy
    print("\n" + "-"*60)
    print("SIMPLE LINEAR REGRESSION (scipy.stats):")
    
    slope, intercept, r_value, p_value, std_err = stats.linregress(X.flatten(), y)
    
    print(f"\nRegression equation: Proportion = {intercept:.3f} + {slope:.3f} × Year")
    print(f"\nKey statistics:")
    print(f"- Slope: {slope:.4f}% per year")
    print(f"- Intercept: {intercept:.3f}%")
    print(f"- R-squared: {r_value**2:.4f}")
    print(f"- Correlation coefficient (R): {r_value:.4f}")
    print(f"- P-value: {p_value:.4f}")
    print(f"- Standard error: {std_err:.4f}")
    
    # Interpret the slope
    print(f"\nInterpretation:")
    print(f"- Each year, the reappointment proportion changes by {slope:.3f}%")
    print(f"- Over the 12-year period, total change: {slope * 12:.2f}%")
    
    if p_value < 0.05:
        direction = "INCREASING" if slope > 0 else "DECREASING"
        print(f"- Statistical significance: YES (p < 0.05)")
        print(f"- Trend direction: {direction}")
    else:
        print(f"- Statistical significance: NO (p >= 0.05)")
        print(f"- No significant trend detected")
    
    # Perform regression using sklearn for additional metrics
    print("\n" + "-"*60)
    print("DETAILED REGRESSION ANALYSIS (sklearn):")
    
    model = LinearRegression()
    model.fit(X, y)
    y_pred = model.predict(X)
    
    # Calculate additional metrics
    mse = mean_squared_error(y, y_pred)
    rmse = np.sqrt(mse)
    mae = np.mean(np.abs(y - y_pred))
    
    print(f"\nModel performance metrics:")
    print(f"- Mean Squared Error (MSE): {mse:.4f}")
    print(f"- Root Mean Squared Error (RMSE): {rmse:.4f}")
    print(f"- Mean Absolute Error (MAE): {mae:.4f}")
    
    # Calculate residuals
    residuals = y - y_pred
    
    print(f"\nResidual analysis:")
    print(f"- Mean residual: {residuals.mean():.4f}")
    print(f"- Std dev of residuals: {residuals.std():.4f}")
    print(f"- Max positive residual: {residuals.max():.4f}")
    print(f"- Max negative residual: {residuals.min():.4f}")
    
    # Perform regression using statsmodels for comprehensive statistics
    print("\n" + "-"*60)
    print("COMPREHENSIVE REGRESSION ANALYSIS (statsmodels):")
    
    # Add constant to X for statsmodels
    X_with_const = sm.add_constant(X)
    
    # Fit the model
    model_sm = sm.OLS(y, X_with_const).fit()
    
    # Print summary statistics
    print("\nRegression Summary:")
    print(model_sm.summary())
    
    # Extract confidence intervals
    conf_int = model_sm.conf_int(alpha=0.05)
    
    print(f"\n95% Confidence Intervals:")
    print(f"- Intercept: [{conf_int[0][0]:.3f}, {conf_int[0][1]:.3f}]")
    print(f"- Slope: [{conf_int[1][0]:.4f}, {conf_int[1][1]:.4f}]")
    
    # Test for autocorrelation (important for time series)
    print("\n" + "-"*60)
    print("AUTOCORRELATION TEST (Durbin-Watson):")
    
    from statsmodels.stats.stattools import durbin_watson
    dw = durbin_watson(residuals)
    
    print(f"Durbin-Watson statistic: {dw:.3f}")
    if dw < 1.5:
        print("Indication of positive autocorrelation")
    elif dw > 2.5:
        print("Indication of negative autocorrelation")
    else:
        print("No significant autocorrelation detected")
    
    # Prediction and extrapolation
    print("\n" + "-"*60)
    print("PREDICTIONS AND EXTRAPOLATION:")
    
    # Predict for next 3 years
    future_years = np.array([[2025], [2026], [2027]])
    future_predictions = model.predict(future_years)
    
    print("\nProjected reappointment proportions:")
    for year, pred in zip(future_years.flatten(), future_predictions):
        print(f"- Year {year}: {pred:.2f}%")
    
    # Calculate when proportion might reach certain thresholds
    if slope > 0:
        current_rate = y[-1]  # Most recent rate
        years_to_25 = (25 - current_rate) / slope if current_rate < 25 else 0
        years_to_30 = (30 - current_rate) / slope if current_rate < 30 else 0
        
        print(f"\nProjected milestones (if trend continues):")
        if years_to_25 > 0:
            print(f"- Reach 25%: ~{2024 + years_to_25:.0f}")
        if years_to_30 > 0:
            print(f"- Reach 30%: ~{2024 + years_to_30:.0f}")
    
    # Create comprehensive visualization
    print("\n" + "-"*60)
    print("CREATING REGRESSION VISUALIZATION...")
    
    # Set up the plot
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    
    # Plot 1: Regression line with confidence interval
    ax1 = axes[0, 0]
    ax1.scatter(X, y, color='blue', s=50, alpha=0.6, label='Actual data')
    ax1.plot(X, y_pred, color='red', linewidth=2, label='Regression line')
    
    # Add confidence interval
    predict_mean_se = np.sqrt(mse * (1/len(X) + (X - X.mean())**2 / np.sum((X - X.mean())**2)))
    margin = 1.96 * predict_mean_se.flatten()
    ax1.fill_between(X.flatten(), y_pred - margin, y_pred + margin, 
                     color='red', alpha=0.2, label='95% CI')
    
    # Add equation
    ax1.text(0.05, 0.95, f'y = {intercept:.2f} + {slope:.3f}x\nR² = {r_value**2:.3f}\np = {p_value:.4f}',
             transform=ax1.transAxes, fontsize=10, verticalalignment='top',
             bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.5))
    
    ax1.set_xlabel('Year', fontsize=12)
    ax1.set_ylabel('Reappointment Proportion (%)', fontsize=12)
    ax1.set_title('Linear Regression: Reappointment Proportion vs Year', fontsize=14, fontweight='bold')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Plot 2: Residuals plot
    ax2 = axes[0, 1]
    ax2.scatter(X, residuals, color='green', alpha=0.6)
    ax2.axhline(y=0, color='red', linestyle='--', linewidth=1)
    ax2.set_xlabel('Year', fontsize=12)
    ax2.set_ylabel('Residuals', fontsize=12)
    ax2.set_title('Residual Plot', fontsize=14, fontweight='bold')
    ax2.grid(True, alpha=0.3)
    
    # Add horizontal lines at ±2 standard deviations
    ax2.axhline(y=2*residuals.std(), color='orange', linestyle=':', alpha=0.5)
    ax2.axhline(y=-2*residuals.std(), color='orange', linestyle=':', alpha=0.5)
    
    # Plot 3: Q-Q plot for normality check
    ax3 = axes[1, 0]
    stats.probplot(residuals, dist="norm", plot=ax3)
    ax3.set_title('Q-Q Plot (Normality Check)', fontsize=14, fontweight='bold')
    ax3.grid(True, alpha=0.3)
    
    # Plot 4: Year-over-year changes with trend
    ax4 = axes[1, 1]
    yoy_changes = df['govt_wide_proportion'].diff()[1:]
    years_yoy = df['year'][1:]
    
    colors = ['green' if x > 0 else 'red' for x in yoy_changes]
    ax4.bar(years_yoy, yoy_changes, color=colors, alpha=0.6)
    ax4.axhline(y=0, color='black', linewidth=0.5)
    
    # Add average change line
    avg_change = yoy_changes.mean()
    ax4.axhline(y=avg_change, color='blue', linestyle='--', 
                label=f'Avg change: {avg_change:.2f}%/year')
    
    ax4.set_xlabel('Year', fontsize=12)
    ax4.set_ylabel('Year-over-Year Change (%)', fontsize=12)
    ax4.set_title('Year-over-Year Changes in Proportion', fontsize=14, fontweight='bold')
    ax4.legend()
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig(input_dir / 'step9_regression_analysis.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print("SUCCESS: Visualization saved to step9_regression_analysis.png")
    
    # Save detailed results to text file
    print("\n" + "-"*60)
    print(f"SAVING DETAILED RESULTS TO: {output_file}")
    
    with open(output_file, 'w') as f:
        f.write("="*60 + "\n")
        f.write("LINEAR REGRESSION ANALYSIS RESULTS\n")
        f.write("Government-wide Reappointment Proportions (2013-2024)\n")
        f.write("="*60 + "\n\n")
        
        f.write("SUMMARY OF FINDINGS:\n")
        f.write("-"*40 + "\n")
        f.write(f"Time period analyzed: {int(X.min())} - {int(X.max())}\n")
        f.write(f"Number of years: {len(X)}\n")
        f.write(f"Average proportion: {y.mean():.2f}%\n")
        f.write(f"Trend direction: {'INCREASING' if slope > 0 else 'DECREASING'}\n")
        f.write(f"Statistical significance: {'YES' if p_value < 0.05 else 'NO'} (p = {p_value:.4f})\n\n")
        
        f.write("REGRESSION STATISTICS:\n")
        f.write("-"*40 + "\n")
        f.write(f"Slope: {slope:.4f}% per year\n")
        f.write(f"Intercept: {intercept:.3f}%\n")
        f.write(f"R-squared: {r_value**2:.4f}\n")
        f.write(f"P-value: {p_value:.4f}\n")
        f.write(f"Standard error: {std_err:.4f}\n\n")
        
        f.write("INTERPRETATION:\n")
        f.write("-"*40 + "\n")
        f.write(f"- The reappointment proportion changes by {slope:.3f}% each year\n")
        f.write(f"- Over the 12-year period, total change: {slope * 12:.2f}%\n")
        if p_value < 0.05:
            f.write(f"- This trend is statistically significant at the 0.05 level\n")
            f.write(f"- We can reject the null hypothesis of no trend\n")
        else:
            f.write(f"- This trend is NOT statistically significant at the 0.05 level\n")
            f.write(f"- We cannot reject the null hypothesis of no trend\n")
        
        f.write("\n95% CONFIDENCE INTERVALS:\n")
        f.write("-"*40 + "\n")
        f.write(f"Slope: [{conf_int[1][0]:.4f}, {conf_int[1][1]:.4f}]\n")
        f.write(f"Intercept: [{conf_int[0][0]:.3f}, {conf_int[0][1]:.3f}]\n\n")
        
        f.write("MODEL PERFORMANCE:\n")
        f.write("-"*40 + "\n")
        f.write(f"RMSE: {rmse:.4f}\n")
        f.write(f"MAE: {mae:.4f}\n")
        f.write(f"Durbin-Watson: {dw:.3f}\n\n")
        
        f.write("FUTURE PROJECTIONS (if trend continues):\n")
        f.write("-"*40 + "\n")
        for year, pred in zip(future_years.flatten(), future_predictions):
            f.write(f"Year {year}: {pred:.2f}%\n")
        
        f.write("\n" + "="*60 + "\n")
        f.write("DETAILED STATSMODELS OUTPUT:\n")
        f.write("="*60 + "\n")
        f.write(str(model_sm.summary()))
    
    print("SUCCESS: Detailed results saved!")
    
    # Final summary
    print("\n" + "="*60)
    print("STEP 9 COMPLETED SUCCESSFULLY!")
    print("="*60)
    print("\nFINAL CONCLUSION:")
    
    if p_value < 0.05:
        direction = "INCREASING" if slope > 0 else "DECREASING"
        print(f"The government-wide reappointment proportion shows a statistically")
        print(f"significant {direction} trend over the 12-year period (2013-2024).")
        print(f"\nKey findings:")
        print(f"- Annual change: {slope:.3f}% per year")
        print(f"- Total change over period: {slope * 12:.2f}%")
        print(f"- Statistical significance: p = {p_value:.4f}")
        print(f"- Model explains {r_value**2 * 100:.1f}% of the variance")
    else:
        print(f"The government-wide reappointment proportion shows NO statistically")
        print(f"significant trend over the 12-year period (2013-2024).")
        print(f"\nThe apparent {'increase' if slope > 0 else 'decrease'} of {slope:.3f}% per year")
        print(f"is not statistically significant (p = {p_value:.4f}).")
    
    print("\n" + "="*60 + "\n")
    
    return {
        'slope': slope,
        'p_value': p_value,
        'r_squared': r_value**2,
        'trend_direction': 'increasing' if slope > 0 else 'decreasing',
        'is_significant': p_value < 0.05
    }

if __name__ == "__main__":
    # Run the main function
    regression_results = main()