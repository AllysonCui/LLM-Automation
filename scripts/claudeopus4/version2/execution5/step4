#!/usr/bin/env python3
"""
Step 4: Count total number of employees for each organization in each year
This script aggregates appointment data to count employees by organization and year.
"""

import pandas as pd
import numpy as np
from pathlib import Path
import sys
from datetime import datetime

# Define paths
INPUT_DIR = Path("scripts/claudeopus4/version2/execution5/analysis_data")
INPUT_FILE = INPUT_DIR / "step3_repeats_marked.csv"
OUTPUT_FILE = INPUT_DIR / "step4_employee_counts.csv"

def load_marked_data():
    """Load the marked dataset from step 3"""
    print(f"Loading marked data from: {INPUT_FILE}")
    
    if not INPUT_FILE.exists():
        print(f"✗ ERROR: Input file not found: {INPUT_FILE}")
        print("  Please run step 3 first to create the marked dataset.")
        sys.exit(1)
    
    try:
        df = pd.read_csv(INPUT_FILE, encoding='utf-8')
        print(f"✓ Successfully loaded dataset")
        print(f"  • Total rows: {len(df):,}")
        print(f"  • Columns: {list(df.columns)}")
        
        # Convert reappointed to boolean type if needed
        if 'reappointed' in df.columns and df['reappointed'].dtype == 'object':
            df['reappointed'] = df['reappointed'].map({'True': True, 'False': False, 'true': True, 'false': False})
        
        return df
    
    except Exception as e:
        print(f"✗ ERROR loading file: {str(e)}")
        sys.exit(1)

def validate_data_quality(df):
    """Validate data quality for counting"""
    print("\nValidating data quality...")
    
    # Check for missing values in critical columns
    missing_org = df['org'].isnull().sum()
    missing_year = df['year'].isnull().sum()
    
    print(f"  • Records with missing organization: {missing_org:,}")
    print(f"  • Records with missing year: {missing_year:,}")
    
    if missing_org > 0:
        print(f"    ⚠ Warning: {missing_org} records will be excluded from counts due to missing organization")
    
    if missing_year > 0:
        print(f"    ⚠ Warning: {missing_year} records will be excluded from counts due to missing year")
    
    # Check year range
    year_min = df['year'].min()
    year_max = df['year'].max()
    print(f"  • Year range: {year_min} - {year_max}")
    
    # Check unique organizations
    unique_orgs = df['org'].nunique()
    print(f"  • Unique organizations: {unique_orgs:,}")
    
    return df

def count_employees_by_org_year(df):
    """Count total employees for each organization in each year"""
    print("\nCounting employees by organization and year...")
    
    # Remove records with missing org or year
    df_clean = df.dropna(subset=['org', 'year']).copy()
    records_dropped = len(df) - len(df_clean)
    
    if records_dropped > 0:
        print(f"  • Dropped {records_dropped:,} records with missing org or year")
    
    # Method 1: Count all appointments (including reappointments)
    # This gives us the total number of appointments per org per year
    total_appointments = df_clean.groupby(['org', 'year']).size().reset_index(name='total_appointments')
    
    # Method 2: Count unique employees per org per year
    # This gives us the number of distinct people appointed
    unique_employees = df_clean.groupby(['org', 'year'])['name'].nunique().reset_index(name='unique_employees')
    
    # Method 3: Count new appointments (not reappointed)
    new_appointments = df_clean[df_clean['reappointed'] == False].groupby(['org', 'year']).size().reset_index(name='new_appointments')
    
    # Method 4: Count reappointments
    reappointments = df_clean[df_clean['reappointed'] == True].groupby(['org', 'year']).size().reset_index(name='reappointments')
    
    # Merge all counts
    employee_counts = total_appointments.merge(unique_employees, on=['org', 'year'], how='left')
    employee_counts = employee_counts.merge(new_appointments, on=['org', 'year'], how='left')
    employee_counts = employee_counts.merge(reappointments, on=['org', 'year'], how='left')
    
    # Fill NaN values with 0 (for organizations with no new appointments or reappointments in a year)
    employee_counts['new_appointments'] = employee_counts['new_appointments'].fillna(0).astype(int)
    employee_counts['reappointments'] = employee_counts['reappointments'].fillna(0).astype(int)
    
    # Calculate additional metrics
    employee_counts['reappointment_rate'] = (
        employee_counts['reappointments'] / employee_counts['total_appointments'] * 100
    ).round(2)
    
    # Sort by organization and year
    employee_counts = employee_counts.sort_values(['org', 'year'])
    
    print(f"✓ Counted employees for {len(employee_counts):,} organization-year combinations")
    
    return employee_counts

def analyze_employee_counts(employee_counts):
    """Analyze the employee count results"""
    print("\n" + "="*50)
    print("EMPLOYEE COUNT ANALYSIS")
    print("="*50)
    
    # Overall statistics
    print("\nOverall statistics:")
    print(f"  • Total organization-year combinations: {len(employee_counts):,}")
    print(f"  • Total appointments across all years: {employee_counts['total_appointments'].sum():,}")
    print(f"  • Total unique employees across all organizations: {employee_counts['unique_employees'].sum():,}")
    print(f"  • Total new appointments: {employee_counts['new_appointments'].sum():,}")
    print(f"  • Total reappointments: {employee_counts['reappointments'].sum():,}")
    
    # Year-by-year summary
    yearly_summary = employee_counts.groupby('year').agg({
        'total_appointments': 'sum',
        'unique_employees': 'sum',
        'new_appointments': 'sum',
        'reappointments': 'sum'
    }).astype(int)
    
    yearly_summary['reappointment_rate'] = (
        yearly_summary['reappointments'] / yearly_summary['total_appointments'] * 100
    ).round(2)
    
    print("\nYearly summary:")
    print(yearly_summary.to_string())
    
    # Top organizations by total appointments
    org_totals = employee_counts.groupby('org').agg({
        'total_appointments': 'sum',
        'unique_employees': 'sum',
        'reappointments': 'sum'
    }).sort_values('total_appointments', ascending=False)
    
    print("\nTop 15 organizations by total appointments (all years):")
    for org, stats in org_totals.head(15).iterrows():
        reapp_rate = (stats['reappointments'] / stats['total_appointments'] * 100)
        print(f"  • {org}")
        print(f"    - Total appointments: {stats['total_appointments']:,}")
        print(f"    - Unique employees: {stats['unique_employees']:,}")
        print(f"    - Reappointments: {stats['reappointments']:,}")
        print(f"    - Reappointment rate: {reapp_rate:.1f}%")

def analyze_organization_trends(employee_counts):
    """Analyze trends for specific organizations"""
    print("\nAnalyzing trends for organizations with most appointments...")
    
    # Get top 5 organizations by total appointments
    top_orgs = employee_counts.groupby('org')['total_appointments'].sum().nlargest(5).index
    
    for org in top_orgs:
        print(f"\n{org}:")
        org_data = employee_counts[employee_counts['org'] == org].sort_values('year')
        
        # Calculate year-over-year changes
        org_data['yoy_change'] = org_data['total_appointments'].pct_change() * 100
        
        print("  Year | Total | New | Reapp | Rate% | YoY%")
        print("  " + "-" * 45)
        
        for _, row in org_data.iterrows():
            yoy = f"{row['yoy_change']:+.1f}" if not pd.isna(row['yoy_change']) else "  -  "
            print(f"  {row['year']} | {row['total_appointments']:5d} | {row['new_appointments']:3d} | "
                  f"{row['reappointments']:5d} | {row['reappointment_rate']:5.1f} | {yoy}")
        
        # Summary statistics for this organization
        avg_appointments = org_data['total_appointments'].mean()
        avg_reapp_rate = org_data['reappointment_rate'].mean()
        trend = "increasing" if org_data['total_appointments'].iloc[-1] > org_data['total_appointments'].iloc[0] else "decreasing"
        
        print(f"\n  Summary:")
        print(f"    - Average appointments per year: {avg_appointments:.1f}")
        print(f"    - Average reappointment rate: {avg_reapp_rate:.1f}%")
        print(f"    - Overall trend: {trend}")

def identify_high_reappointment_orgs(employee_counts):
    """Identify organizations with high reappointment rates"""
    print("\nOrganizations with highest reappointment rates (min 50 total appointments):")
    
    # Filter organizations with at least 50 total appointments
    org_summary = employee_counts.groupby('org').agg({
        'total_appointments': 'sum',
        'reappointments': 'sum'
    })
    
    org_summary = org_summary[org_summary['total_appointments'] >= 50]
    org_summary['overall_reapp_rate'] = (
        org_summary['reappointments'] / org_summary['total_appointments'] * 100
    ).round(2)
    
    # Get top 10 by reappointment rate
    top_reapp_orgs = org_summary.sort_values('overall_reapp_rate', ascending=False).head(10)
    
    for org, stats in top_reapp_orgs.iterrows():
        print(f"  • {org}")
        print(f"    - Total appointments: {stats['total_appointments']:,}")
        print(f"    - Reappointments: {stats['reappointments']:,}")
        print(f"    - Reappointment rate: {stats['overall_reapp_rate']:.1f}%")

def save_employee_counts(employee_counts):
    """Save the employee count data"""
    print(f"\nSaving employee counts to: {OUTPUT_FILE}")
    
    try:
        employee_counts.to_csv(OUTPUT_FILE, index=False, encoding='utf-8')
        print(f"✓ Successfully saved employee counts")
        print(f"  • File size: {OUTPUT_FILE.stat().st_size / 1024:.2f} KB")
        print(f"  • Total records: {len(employee_counts):,}")
        
        # Display first few rows as preview
        print("\nPreview of output data:")
        print(employee_counts.head(10).to_string(index=False))
        
    except Exception as e:
        print(f"✗ ERROR saving file: {str(e)}")
        sys.exit(1)

def main():
    """Main execution function"""
    print("="*50)
    print("STEP 4: COUNT EMPLOYEES BY ORGANIZATION AND YEAR")
    print("="*50)
    print(f"Start time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Load data
    df = load_marked_data()
    
    # Validate data quality
    df_validated = validate_data_quality(df)
    
    # Count employees by organization and year
    employee_counts = count_employees_by_org_year(df_validated)
    
    # Analyze results
    analyze_employee_counts(employee_counts)
    analyze_organization_trends(employee_counts)
    identify_high_reappointment_orgs(employee_counts)
    
    # Save results
    save_employee_counts(employee_counts)
    
    # Final summary
    print("\n" + "="*50)
    print("STEP 4 COMPLETED SUCCESSFULLY")
    print("="*50)
    print(f"✓ Processed {len(df):,} appointment records")
    print(f"✓ Generated counts for {len(employee_counts):,} organization-year combinations")
    print(f"✓ Output saved to: {OUTPUT_FILE}")
    print(f"\nEnd time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()