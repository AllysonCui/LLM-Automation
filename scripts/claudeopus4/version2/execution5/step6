#!/usr/bin/env python3
"""
Step 6: Calculate reappointment rates for each organization-year pair
This script calculates the reappointment rate as reappointments divided by total employees.
"""

import pandas as pd
import numpy as np
from pathlib import Path
import sys
from datetime import datetime

# Define paths
INPUT_DIR = Path("scripts/claudeopus4/version2/execution5/analysis_data")
EMPLOYEE_COUNTS_FILE = INPUT_DIR / "step4_employee_counts.csv"
REAPPOINTMENT_COUNTS_FILE = INPUT_DIR / "step5_reappointment_counts.csv"
OUTPUT_FILE = INPUT_DIR / "step6_reappointment_rates.csv"

def load_input_data():
    """Load employee counts and reappointment counts from previous steps"""
    print("Loading input data...")
    
    # Load employee counts from step 4
    if not EMPLOYEE_COUNTS_FILE.exists():
        print(f"✗ ERROR: Appointment counts file not found: {EMPLOYEE_COUNTS_FILE}")
        print("  Please run step 4 first.")
        sys.exit(1)
    
    # Load reappointment counts from step 5
    if not REAPPOINTMENT_COUNTS_FILE.exists():
        print(f"✗ ERROR: Reappointment counts file not found: {REAPPOINTMENT_COUNTS_FILE}")
        print("  Please run step 5 first.")
        sys.exit(1)
    
    try:
        # Load employee counts
        employee_counts = pd.read_csv(EMPLOYEE_COUNTS_FILE, encoding='utf-8')
        print(f"✓ Loaded employee counts: {len(employee_counts):,} org-year combinations")
        
        # Load reappointment counts
        reappointment_counts = pd.read_csv(REAPPOINTMENT_COUNTS_FILE, encoding='utf-8')
        print(f"✓ Loaded reappointment counts: {len(reappointment_counts):,} org-year combinations")
        
        return employee_counts, reappointment_counts
        
    except Exception as e:
        print(f"✗ ERROR loading files: {str(e)}")
        sys.exit(1)

def validate_data_consistency(employee_counts, reappointment_counts):
    """Validate consistency between the two datasets"""
    print("\nValidating data consistency...")
    
    # Check column availability
    print("\nAppointment counts columns:", list(employee_counts.columns))
    print("Reappointment counts columns:", list(reappointment_counts.columns))
    
    # Check if we have the necessary columns
    required_emp_cols = ['org', 'year', 'total_appointments', 'unique_employees']
    required_reapp_cols = ['org', 'year', 'reappointment_count']
    
    missing_emp_cols = set(required_emp_cols) - set(employee_counts.columns)
    missing_reapp_cols = set(required_reapp_cols) - set(reappointment_counts.columns)
    
    if missing_emp_cols:
        print(f"✗ ERROR: Missing columns in employee counts: {missing_emp_cols}")
        sys.exit(1)
    
    if missing_reapp_cols:
        print(f"✗ ERROR: Missing columns in reappointment counts: {missing_reapp_cols}")
        sys.exit(1)
    
    # Check org-year combinations
    emp_combos = set(zip(employee_counts['org'], employee_counts['year']))
    reapp_combos = set(zip(reappointment_counts['org'], reappointment_counts['year']))
    
    only_in_emp = emp_combos - reapp_combos
    only_in_reapp = reapp_combos - emp_combos
    
    print(f"\nOrg-year combinations:")
    print(f"  • In employee counts: {len(emp_combos):,}")
    print(f"  • In reappointment counts: {len(reapp_combos):,}")
    print(f"  • Common combinations: {len(emp_combos & reapp_combos):,}")
    
    if only_in_emp:
        print(f"  ⚠ {len(only_in_emp)} combinations only in employee counts")
    if only_in_reapp:
        print(f"  ⚠ {len(only_in_reapp)} combinations only in reappointment counts")
    
    return True

def calculate_reappointment_rates(employee_counts, reappointment_counts):
    """Calculate reappointment rates for each org-year pair"""
    print("\nCalculating reappointment rates...")
    
    # Merge the datasets on org and year
    merged_data = employee_counts.merge(
        reappointment_counts[['org', 'year', 'reappointment_count']], 
        on=['org', 'year'], 
        how='outer',
        indicator=True
    )
    
    # Check merge results
    merge_summary = merged_data['_merge'].value_counts()
    print("\nMerge results:")
    for category, count in merge_summary.items():
        print(f"  • {category}: {count:,}")
    
    # Fill NaN values with 0 for missing reappointment counts
    merged_data['reappointment_count'] = merged_data['reappointment_count'].fillna(0)
    
    # Calculate different rate metrics
    print("\nCalculating rate metrics...")
    
    # Rate 1: Reappointments / Total Appointments (percentage of appointments that are reappointments)
    merged_data['rate_per_total_appointments'] = (
        merged_data['reappointment_count'] / merged_data['total_appointments'] * 100
    ).round(2)
    
    # Rate 2: Reappointments / Unique Appointments (how many times on average each employee is reappointed)
    merged_data['rate_per_unique_employee'] = (
        merged_data['reappointment_count'] / merged_data['unique_employees']
    ).round(3)
    
    # Rate 3: Reappointments / New Appointments (ratio of reappointments to new appointments)
    merged_data['reappointment_to_new_ratio'] = (
        merged_data['reappointment_count'] / merged_data['new_appointments']
    ).round(3)
    
    # Handle division by zero and infinity
    merged_data['rate_per_unique_employee'] = merged_data['rate_per_unique_employee'].replace([np.inf, -np.inf], np.nan)
    merged_data['reappointment_to_new_ratio'] = merged_data['reappointment_to_new_ratio'].replace([np.inf, -np.inf], np.nan)
    
    # Select and order columns for output
    output_columns = [
        'org', 'year', 
        'total_appointments', 'unique_employees', 'new_appointments', 'reappointment_count',
        'rate_per_total_appointments', 'rate_per_unique_employee', 'reappointment_to_new_ratio'
    ]
    
    # Filter to only rows that were in both datasets or left_only (from employee counts)
    result = merged_data[merged_data['_merge'] != 'right_only'][output_columns].copy()
    
    # Sort by organization and year
    result = result.sort_values(['org', 'year'])
    
    print(f"✓ Calculated rates for {len(result):,} org-year combinations")
    
    return result

def analyze_rate_distributions(rate_data):
    """Analyze the distribution of reappointment rates"""
    print("\n" + "="*50)
    print("REAPPOINTMENT RATE ANALYSIS")
    print("="*50)
    
    # Overall statistics
    print("\nOverall Rate Statistics:")
    
    # Rate per total appointments
    rate_stats = rate_data['rate_per_total_appointments'].describe()
    print("\nRate per Total Appointments (%):")
    print(f"  • Mean: {rate_stats['mean']:.2f}%")
    print(f"  • Median: {rate_stats['50%']:.2f}%")
    print(f"  • Std Dev: {rate_stats['std']:.2f}%")
    print(f"  • Min: {rate_stats['min']:.2f}%")
    print(f"  • Max: {rate_stats['max']:.2f}%")
    
    # Rate per unique employee
    employee_rate_stats = rate_data['rate_per_unique_employee'].describe()
    print("\nRate per Unique Appointment:")
    print(f"  • Mean: {employee_rate_stats['mean']:.3f}")
    print(f"  • Median: {employee_rate_stats['50%']:.3f}")
    print(f"  • Max: {employee_rate_stats['max']:.3f}")
    
    # Distribution buckets
    print("\nReappointment Rate Distribution (% of total appointments):")
    bins = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
    rate_data['rate_bucket'] = pd.cut(rate_data['rate_per_total_appointments'], bins=bins, include_lowest=True)
    bucket_counts = rate_data['rate_bucket'].value_counts().sort_index()
    
    for bucket, count in bucket_counts.items():
        pct = (count / len(rate_data)) * 100
        print(f"  • {bucket}: {count:,} org-years ({pct:.1f}%)")

def identify_high_rate_organizations(rate_data):
    """Identify organizations with consistently high reappointment rates"""
    print("\nOrganizations with Highest Average Reappointment Rates:")
    
    # Calculate average rates by organization (requiring at least 5 years of data)
    org_summary = rate_data.groupby('org').agg({
        'rate_per_total_appointments': ['mean', 'std', 'count'],
        'reappointment_count': 'sum',
        'total_appointments': 'sum'
    })
    
    # Flatten column names
    org_summary.columns = ['avg_rate', 'std_rate', 'years_count', 'total_reappointments', 'total_appointments']
    
    # Filter organizations with at least 5 years of data
    qualified_orgs = org_summary[org_summary['years_count'] >= 5].copy()
    
    # Calculate overall rate
    qualified_orgs['overall_rate'] = (
        qualified_orgs['total_reappointments'] / qualified_orgs['total_appointments'] * 100
    ).round(2)
    
    # Sort by average rate
    top_orgs = qualified_orgs.sort_values('avg_rate', ascending=False).head(15)
    
    print("\n(Organizations with at least 5 years of data)")
    for org, stats in top_orgs.iterrows():
        print(f"\n  {org}:")
        print(f"    • Average rate: {stats['avg_rate']:.1f}% (±{stats['std_rate']:.1f}%)")
        print(f"    • Overall rate: {stats['overall_rate']:.1f}%")
        print(f"    • Total reappointments: {stats['total_reappointments']:,}")
        print(f"    • Years active: {stats['years_count']}")

def analyze_temporal_trends(rate_data):
    """Analyze temporal trends in reappointment rates"""
    print("\nTemporal Trends in Reappointment Rates:")
    
    # Calculate yearly averages
    yearly_stats = rate_data.groupby('year').agg({
        'rate_per_total_appointments': ['mean', 'std'],
        'reappointment_count': 'sum',
        'total_appointments': 'sum',
        'org': 'nunique'
    })
    
    # Flatten column names
    yearly_stats.columns = ['avg_rate', 'std_rate', 'total_reappointments', 'total_appointments', 'num_orgs']
    
    # Calculate overall yearly rate
    yearly_stats['overall_rate'] = (
        yearly_stats['total_reappointments'] / yearly_stats['total_appointments'] * 100
    ).round(2)
    
    print("\nYear | Avg Rate | Overall Rate | Total Reapp. | Active Orgs")
    print("-" * 60)
    
    for year, stats in yearly_stats.iterrows():
        print(f"{year} | {stats['avg_rate']:7.1f}% | {stats['overall_rate']:11.1f}% | "
              f"{stats['total_reappointments']:11,} | {stats['num_orgs']:11}")
    
    # Calculate trend
    years = yearly_stats.index.values
    rates = yearly_stats['overall_rate'].values
    
    if len(years) > 1:
        # Simple linear regression for trend
        from scipy import stats as scipy_stats
        slope, intercept, r_value, p_value, std_err = scipy_stats.linregress(years, rates)
        
        print(f"\nTrend Analysis:")
        print(f"  • Annual change: {slope:+.2f} percentage points per year")
        print(f"  • R-squared: {r_value**2:.3f}")
        print(f"  • P-value: {p_value:.4f}")
        
        if p_value < 0.05:
            direction = "increasing" if slope > 0 else "decreasing"
            print(f"  • Trend: Statistically significant {direction} trend")
        else:
            print(f"  • Trend: No statistically significant trend")

def find_volatile_organizations(rate_data):
    """Find organizations with high variability in reappointment rates"""
    print("\nOrganizations with Most Variable Reappointment Rates:")
    
    # Calculate variability metrics
    org_variability = rate_data.groupby('org').agg({
        'rate_per_total_appointments': ['std', 'min', 'max', 'count'],
        'total_appointments': 'sum'
    })
    
    # Flatten columns
    org_variability.columns = ['std_rate', 'min_rate', 'max_rate', 'years_count', 'total_appointments']
    
    # Calculate range
    org_variability['rate_range'] = org_variability['max_rate'] - org_variability['min_rate']
    
    # Filter for organizations with at least 5 years and 100 total appointments
    qualified = org_variability[
        (org_variability['years_count'] >= 5) & 
        (org_variability['total_appointments'] >= 100)
    ]
    
    # Sort by standard deviation
    most_volatile = qualified.sort_values('std_rate', ascending=False).head(10)
    
    print("\n(Organizations with at least 5 years of data and 100 appointments)")
    for org, stats in most_volatile.iterrows():
        print(f"\n  {org}:")
        print(f"    • Std deviation: {stats['std_rate']:.1f}%")
        print(f"    • Rate range: {stats['min_rate']:.1f}% - {stats['max_rate']:.1f}%")
        print(f"    • Years active: {stats['years_count']}")

def save_reappointment_rates(rate_data):
    """Save the reappointment rate data"""
    print(f"\nSaving reappointment rates to: {OUTPUT_FILE}")
    
    try:
        rate_data.to_csv(OUTPUT_FILE, index=False, encoding='utf-8')
        print(f"✓ Successfully saved reappointment rates")
        print(f"  • File size: {OUTPUT_FILE.stat().st_size / 1024:.2f} KB")
        print(f"  • Total records: {len(rate_data):,}")
        
        # Display sample of output
        print("\nSample of output data (first 10 rows):")
        display_cols = ['org', 'year', 'total_appointments', 'reappointment_count', 'rate_per_total_appointments']
        print(rate_data[display_cols].head(10).to_string(index=False))
        
    except Exception as e:
        print(f"✗ ERROR saving file: {str(e)}")
        sys.exit(1)

def main():
    """Main execution function"""
    print("="*50)
    print("STEP 6: CALCULATE REAPPOINTMENT RATES")
    print("="*50)
    print(f"Start time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Load input data
    employee_counts, reappointment_counts = load_input_data()
    
    # Validate data consistency
    validate_data_consistency(employee_counts, reappointment_counts)
    
    # Calculate reappointment rates
    reappointment_rates = calculate_reappointment_rates(employee_counts, reappointment_counts)
    
    # Perform analyses
    analyze_rate_distributions(reappointment_rates)
    identify_high_rate_organizations(reappointment_rates)
    analyze_temporal_trends(reappointment_rates)
    find_volatile_organizations(reappointment_rates)
    
    # Save results
    save_reappointment_rates(reappointment_rates)
    
    # Final summary
    print("\n" + "="*50)
    print("STEP 6 COMPLETED SUCCESSFULLY")
    print("="*50)
    print(f"✓ Calculated rates for {len(reappointment_rates):,} org-year combinations")
    print(f"✓ Output saved to: {OUTPUT_FILE}")
    print(f"\nEnd time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()