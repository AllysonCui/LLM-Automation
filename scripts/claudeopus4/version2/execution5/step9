#!/usr/bin/env python3
"""
Step 9: Linear regression analysis on annual reappointment proportions
This script performs comprehensive regression analysis to assess trend direction 
and statistical significance of reappointment patterns over time.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import sys
from datetime import datetime
from scipy import stats as scipy_stats
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error
import statsmodels.api as sm

# Define paths
INPUT_DIR = Path("scripts/claudeopus4/version2/execution5/analysis_data")
ANNUAL_PROPORTIONS_FILE = INPUT_DIR / "step8_annual_proportions.csv"
OUTPUT_FILE = INPUT_DIR / "step9_regression_results.txt"
OUTPUT_PLOT = INPUT_DIR / "step9_regression_analysis.png"

# Set plotting style
try:
    plt.style.use('seaborn-v0_8-whitegrid')
except:
    try:
        plt.style.use('seaborn-whitegrid')
    except:
        plt.style.use('default')

sns.set_palette("deep")

def load_annual_proportions():
    """Load annual proportions data from step 8"""
    print(f"Loading annual proportions from: {ANNUAL_PROPORTIONS_FILE}")
    
    if not ANNUAL_PROPORTIONS_FILE.exists():
        print(f"✗ ERROR: Annual proportions file not found: {ANNUAL_PROPORTIONS_FILE}")
        print("  Please run step 8 first.")
        sys.exit(1)
    
    try:
        df = pd.read_csv(ANNUAL_PROPORTIONS_FILE, encoding='utf-8')
        print(f"✓ Successfully loaded annual proportions")
        print(f"  • Years covered: {df['year'].min()} - {df['year'].max()}")
        print(f"  • Number of years: {len(df)}")
        
        return df
        
    except Exception as e:
        print(f"✗ ERROR loading file: {str(e)}")
        sys.exit(1)

def prepare_regression_data(df):
    """Prepare data for regression analysis"""
    print("\nPreparing data for regression analysis...")
    
    # Extract year and proportion columns
    X = df['year'].values.reshape(-1, 1)
    y = df['reappointment_proportion'].values
    
    # Convert years to years since start for easier interpretation
    years_since_start = X - X.min()
    
    # Print basic statistics
    print(f"\nData summary:")
    print(f"  • Years: {X.min()} to {X.max()}")
    print(f"  • Proportion range: {y.min():.2f}% to {y.max():.2f}%")
    print(f"  • Mean proportion: {y.mean():.2f}%")
    print(f"  • Standard deviation: {y.std():.2f}%")
    
    return X, y, years_since_start

def perform_simple_linear_regression(X, y, years_since_start):
    """Perform simple linear regression using multiple methods"""
    print("\n" + "="*50)
    print("SIMPLE LINEAR REGRESSION ANALYSIS")
    print("="*50)
    
    results = {}
    
    # Method 1: SciPy linear regression
    print("\nMethod 1: SciPy Linear Regression")
    slope, intercept, r_value, p_value, std_err = scipy_stats.linregress(X.flatten(), y)
    
    results['scipy'] = {
        'slope': slope,
        'intercept': intercept,
        'r_value': r_value,
        'r_squared': r_value**2,
        'p_value': p_value,
        'std_err': std_err
    }
    
    print(f"  • Slope: {slope:.4f} percentage points per year")
    print(f"  • Intercept: {intercept:.2f}%")
    print(f"  • R-squared: {r_value**2:.4f}")
    print(f"  • P-value: {p_value:.4f}")
    print(f"  • Standard error: {std_err:.4f}")
    
    # Method 2: Scikit-learn
    print("\nMethod 2: Scikit-learn Linear Regression")
    model_sklearn = LinearRegression()
    model_sklearn.fit(X, y)
    y_pred_sklearn = model_sklearn.predict(X)
    
    results['sklearn'] = {
        'slope': model_sklearn.coef_[0],
        'intercept': model_sklearn.intercept_,
        'r_squared': r2_score(y, y_pred_sklearn),
        'mse': mean_squared_error(y, y_pred_sklearn),
        'rmse': np.sqrt(mean_squared_error(y, y_pred_sklearn))
    }
    
    print(f"  • Slope: {model_sklearn.coef_[0]:.4f} percentage points per year")
    print(f"  • Intercept: {model_sklearn.intercept_:.2f}%")
    print(f"  • R-squared: {r2_score(y, y_pred_sklearn):.4f}")
    print(f"  • RMSE: {results['sklearn']['rmse']:.4f}")
    
    # Method 3: Statsmodels OLS for detailed statistics
    print("\nMethod 3: Statsmodels OLS Regression")
    X_with_const = sm.add_constant(X)
    model_sm = sm.OLS(y, X_with_const)
    results_sm = model_sm.fit()
    
    results['statsmodels'] = {
        'summary': results_sm.summary(),
        'params': results_sm.params,
        'pvalues': results_sm.pvalues,
        'conf_int': results_sm.conf_int(),
        'aic': results_sm.aic,
        'bic': results_sm.bic,
        'f_statistic': results_sm.fvalue,
        'f_pvalue': results_sm.f_pvalue
    }
    
    print(f"  • Slope: {results_sm.params[1]:.4f} (95% CI: [{results_sm.conf_int()[1][0]:.4f}, {results_sm.conf_int()[1][1]:.4f}])")
    print(f"  • Intercept: {results_sm.params[0]:.2f}% (95% CI: [{results_sm.conf_int()[0][0]:.2f}, {results_sm.conf_int()[0][1]:.2f}])")
    print(f"  • R-squared: {results_sm.rsquared:.4f}")
    print(f"  • Adjusted R-squared: {results_sm.rsquared_adj:.4f}")
    print(f"  • F-statistic: {results_sm.fvalue:.2f} (p={results_sm.f_pvalue:.4f})")
    
    return results, y_pred_sklearn, results_sm

def analyze_residuals(X, y, y_pred, results_sm):
    """Analyze regression residuals for model validity"""
    print("\n" + "="*50)
    print("RESIDUAL ANALYSIS")
    print("="*50)
    
    residuals = y - y_pred
    
    # Basic residual statistics
    print("\nResidual Statistics:")
    print(f"  • Mean: {residuals.mean():.4f}")
    print(f"  • Standard deviation: {residuals.std():.4f}")
    print(f"  • Min: {residuals.min():.4f}")
    print(f"  • Max: {residuals.max():.4f}")
    
    # Normality tests
    print("\nNormality Tests:")
    
    # Shapiro-Wilk test
    shapiro_stat, shapiro_p = scipy_stats.shapiro(residuals)
    print(f"  • Shapiro-Wilk test: W={shapiro_stat:.4f}, p={shapiro_p:.4f}")
    
    # Jarque-Bera test
    jb_stat, jb_p = scipy_stats.jarque_bera(residuals)
    print(f"  • Jarque-Bera test: JB={jb_stat:.4f}, p={jb_p:.4f}")
    
    # Autocorrelation (Durbin-Watson)
    from statsmodels.stats.stattools import durbin_watson
    dw_stat = durbin_watson(residuals)
    print(f"\nAutocorrelation:")
    print(f"  • Durbin-Watson statistic: {dw_stat:.4f}")
    print(f"    (Values near 2 indicate no autocorrelation)")
    
    # Heteroscedasticity test (Breusch-Pagan)
    from statsmodels.stats.diagnostic import het_breuschpagan
    bp_stat, bp_p, _, _ = het_breuschpagan(residuals, results_sm.model.exog)
    print(f"\nHeteroscedasticity:")
    print(f"  • Breusch-Pagan test: LM={bp_stat:.4f}, p={bp_p:.4f}")
    
    return residuals

def interpret_results(results, df):
    """Interpret regression results in context"""
    print("\n" + "="*50)
    print("INTERPRETATION OF RESULTS")
    print("="*50)
    
    slope = results['scipy']['slope']
    p_value = results['scipy']['p_value']
    r_squared = results['scipy']['r_squared']
    
    # Statistical significance
    alpha = 0.05
    if p_value < alpha:
        print(f"\n✓ The trend is STATISTICALLY SIGNIFICANT (p={p_value:.4f} < {alpha})")
        
        if slope > 0:
            print(f"  • Reappointment proportions are INCREASING over time")
            print(f"  • Rate of increase: {slope:.3f} percentage points per year")
        else:
            print(f"  • Reappointment proportions are DECREASING over time")
            print(f"  • Rate of decrease: {abs(slope):.3f} percentage points per year")
    else:
        print(f"\n✗ The trend is NOT statistically significant (p={p_value:.4f} >= {alpha})")
        print(f"  • Cannot conclude there is a meaningful trend over time")
    
    # Effect size
    print(f"\nEffect Size:")
    print(f"  • R-squared: {r_squared:.4f}")
    print(f"  • This means {r_squared*100:.1f}% of the variation in reappointment proportions")
    print(f"    can be explained by the passage of time")
    
    # Practical significance
    total_years = df['year'].max() - df['year'].min()
    total_change = slope * total_years
    
    print(f"\nPractical Significance:")
    print(f"  • Total change over {total_years} years: {total_change:.2f} percentage points")
    print(f"  • Starting proportion ({df['year'].min()}): {df.iloc[0]['reappointment_proportion']:.2f}%")
    print(f"  • Ending proportion ({df['year'].max()}): {df.iloc[-1]['reappointment_proportion']:.2f}%")
    print(f"  • Actual change: {df.iloc[-1]['reappointment_proportion'] - df.iloc[0]['reappointment_proportion']:.2f} percentage points")
    
    # Future projections
    if p_value < alpha:
        print(f"\nFuture Projections (based on current trend):")
        intercept = results['scipy']['intercept']
        for years_ahead in [1, 3, 5]:
            future_year = df['year'].max() + years_ahead
            projected = slope * future_year + intercept
            print(f"  • {future_year}: {projected:.2f}%")

def create_regression_plots(X, y, y_pred, residuals, df, results):
    """Create comprehensive regression analysis plots"""
    print("\nCreating regression analysis plots...")
    
    fig = plt.figure(figsize=(16, 12))
    
    # Plot 1: Main regression plot
    ax1 = plt.subplot(2, 3, 1)
    ax1.scatter(X, y, color='blue', s=100, alpha=0.6, edgecolors='black', label='Actual')
    ax1.plot(X, y_pred, color='red', linewidth=3, label='Regression Line')
    
    # Add confidence interval
    from scipy import stats
    predict_mean_se = np.sqrt(np.sum((y - y_pred)**2) / (len(y) - 2))
    margin = 1.96 * predict_mean_se
    ax1.fill_between(X.flatten(), y_pred - margin, y_pred + margin, 
                     color='red', alpha=0.2, label='95% Confidence Interval')
    
    ax1.set_xlabel('Year', fontsize=12)
    ax1.set_ylabel('Reappointment Proportion (%)', fontsize=12)
    ax1.set_title('Linear Regression: Reappointment Trends', fontsize=14, fontweight='bold')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Add equation to plot
    slope = results['scipy']['slope']
    intercept = results['scipy']['intercept']
    r_squared = results['scipy']['r_squared']
    p_value = results['scipy']['p_value']
    equation = f'y = {slope:.4f}x + {intercept:.2f}\nR² = {r_squared:.4f}, p = {p_value:.4f}'
    ax1.text(0.05, 0.95, equation, transform=ax1.transAxes, 
             fontsize=11, verticalalignment='top',
             bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.5))
    
    # Plot 2: Residuals vs Fitted
    ax2 = plt.subplot(2, 3, 2)
    ax2.scatter(y_pred, residuals, color='green', alpha=0.6, edgecolors='black')
    ax2.axhline(y=0, color='red', linestyle='--', linewidth=2)
    ax2.set_xlabel('Fitted Values', fontsize=12)
    ax2.set_ylabel('Residuals', fontsize=12)
    ax2.set_title('Residuals vs Fitted Values', fontsize=14, fontweight='bold')
    ax2.grid(True, alpha=0.3)
    
    # Plot 3: Q-Q plot
    ax3 = plt.subplot(2, 3, 3)
    scipy_stats.probplot(residuals, dist="norm", plot=ax3)
    ax3.set_title('Normal Q-Q Plot', fontsize=14, fontweight='bold')
    ax3.grid(True, alpha=0.3)
    
    # Plot 4: Histogram of residuals
    ax4 = plt.subplot(2, 3, 4)
    n, bins, _ = ax4.hist(residuals, bins=10, color='skyblue', edgecolor='black', alpha=0.7)
    
    # Add normal distribution overlay
    mu, sigma = residuals.mean(), residuals.std()
    x = np.linspace(residuals.min(), residuals.max(), 100)
    ax4.plot(x, len(residuals) * np.diff(bins)[0] * scipy_stats.norm.pdf(x, mu, sigma), 
             'r-', linewidth=2, label='Normal Distribution')
    ax4.set_xlabel('Residuals', fontsize=12)
    ax4.set_ylabel('Frequency', fontsize=12)
    ax4.set_title('Distribution of Residuals', fontsize=14, fontweight='bold')
    ax4.legend()
    ax4.grid(True, alpha=0.3, axis='y')
    
    # Plot 5: Residuals over time
    ax5 = plt.subplot(2, 3, 5)
    ax5.scatter(X, residuals, color='purple', alpha=0.6, edgecolors='black')
    ax5.axhline(y=0, color='red', linestyle='--', linewidth=2)
    ax5.set_xlabel('Year', fontsize=12)
    ax5.set_ylabel('Residuals', fontsize=12)
    ax5.set_title('Residuals Over Time', fontsize=14, fontweight='bold')
    ax5.grid(True, alpha=0.3)
    
    # Plot 6: Actual vs Predicted
    ax6 = plt.subplot(2, 3, 6)
    ax6.scatter(y, y_pred, color='orange', s=100, alpha=0.6, edgecolors='black')
    
    # Add perfect prediction line
    min_val = min(y.min(), y_pred.min())
    max_val = max(y.max(), y_pred.max())
    ax6.plot([min_val, max_val], [min_val, max_val], 'k--', linewidth=2, label='Perfect Prediction')
    
    ax6.set_xlabel('Actual Proportion (%)', fontsize=12)
    ax6.set_ylabel('Predicted Proportion (%)', fontsize=12)
    ax6.set_title('Actual vs Predicted Values', fontsize=14, fontweight='bold')
    ax6.legend()
    ax6.grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    # Save the plot
    plt.savefig(OUTPUT_PLOT, dpi=300, bbox_inches='tight')
    print(f"✓ Saved regression plots to: {OUTPUT_PLOT}")

def save_regression_results(results, df, residual_stats):
    """Save comprehensive regression results to text file"""
    print(f"\nSaving regression results to: {OUTPUT_FILE}")
    
    try:
        with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
            f.write("="*70 + "\n")
            f.write("LINEAR REGRESSION ANALYSIS OF REAPPOINTMENT TRENDS\n")
            f.write(f"Analysis Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write("="*70 + "\n\n")
            
            # Data summary
            f.write("DATA SUMMARY\n")
            f.write("-"*30 + "\n")
            f.write(f"Years analyzed: {df['year'].min()} - {df['year'].max()}\n")
            f.write(f"Number of observations: {len(df)}\n")
            f.write(f"Proportion range: {df['reappointment_proportion'].min():.2f}% - {df['reappointment_proportion'].max():.2f}%\n")
            f.write(f"Mean proportion: {df['reappointment_proportion'].mean():.2f}%\n")
            f.write(f"Standard deviation: {df['reappointment_proportion'].std():.2f}%\n\n")
            
            # Regression results
            f.write("REGRESSION RESULTS\n")
            f.write("-"*30 + "\n")
            
            scipy_results = results['scipy']
            f.write(f"Slope: {scipy_results['slope']:.6f} percentage points per year\n")
            f.write(f"Intercept: {scipy_results['intercept']:.4f}%\n")
            f.write(f"R-squared: {scipy_results['r_squared']:.4f}\n")
            f.write(f"P-value: {scipy_results['p_value']:.6f}\n")
            f.write(f"Standard error: {scipy_results['std_err']:.6f}\n\n")
            
            # Statistical significance
            f.write("STATISTICAL SIGNIFICANCE\n")
            f.write("-"*30 + "\n")
            if scipy_results['p_value'] < 0.05:
                f.write("✓ The trend is STATISTICALLY SIGNIFICANT at α = 0.05\n")
                direction = "INCREASING" if scipy_results['slope'] > 0 else "DECREASING"
                f.write(f"✓ Reappointment proportions are {direction} over time\n")
            else:
                f.write("✗ The trend is NOT statistically significant at α = 0.05\n")
            f.write(f"\nF-statistic: {results['statsmodels']['f_statistic']:.2f}\n")
            f.write(f"F-test p-value: {results['statsmodels']['f_pvalue']:.6f}\n\n")
            
            # Confidence intervals
            f.write("CONFIDENCE INTERVALS (95%)\n")
            f.write("-"*30 + "\n")
            conf_int = results['statsmodels']['conf_int']
            f.write(f"Slope: [{conf_int[1][0]:.6f}, {conf_int[1][1]:.6f}]\n")
            f.write(f"Intercept: [{conf_int[0][0]:.4f}, {conf_int[0][1]:.4f}]\n\n")
            
            # Model diagnostics
            f.write("MODEL DIAGNOSTICS\n")
            f.write("-"*30 + "\n")
            f.write(f"AIC: {results['statsmodels']['aic']:.2f}\n")
            f.write(f"BIC: {results['statsmodels']['bic']:.2f}\n")
            f.write(f"RMSE: {results['sklearn']['rmse']:.4f}\n\n")
            
            # Statsmodels full summary
            f.write("DETAILED STATSMODELS OUTPUT\n")
            f.write("-"*30 + "\n")
            f.write(str(results['statsmodels']['summary']))
            f.write("\n\n")
            
            # Interpretation
            f.write("INTERPRETATION\n")
            f.write("-"*30 + "\n")
            total_years = df['year'].max() - df['year'].min()
            total_change = scipy_results['slope'] * total_years
            f.write(f"Over the {total_years}-year period:\n")
            f.write(f"- Total predicted change: {total_change:.2f} percentage points\n")
            f.write(f"- Annual rate of change: {scipy_results['slope']:.3f} percentage points per year\n")
            f.write(f"- Model explains {scipy_results['r_squared']*100:.1f}% of the variation\n")
            
        print(f"✓ Successfully saved regression results")
        print(f"  • File size: {OUTPUT_FILE.stat().st_size / 1024:.2f} KB")
        
    except Exception as e:
        print(f"✗ ERROR saving file: {str(e)}")
        sys.exit(1)

def main():
    """Main execution function"""
    print("="*50)
    print("STEP 9: LINEAR REGRESSION ANALYSIS")
    print("="*50)
    print(f"Start time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Load data
    df = load_annual_proportions()
    
    # Prepare regression data
    X, y, years_since_start = prepare_regression_data(df)
    
    # Perform regression analyses
    results, y_pred, results_sm = perform_simple_linear_regression(X, y, years_since_start)
    
    # Analyze residuals
    residuals = analyze_residuals(X, y, y_pred, results_sm)
    
    # Interpret results
    interpret_results(results, df)
    
    # Create visualizations
    create_regression_plots(X, y, y_pred, residuals, df, results)
    
    # Save results
    residual_stats = {
        'mean': residuals.mean(),
        'std': residuals.std(),
        'min': residuals.min(),
        'max': residuals.max()
    }
    save_regression_results(results, df, residual_stats)
    
    # Final summary
    print("\n" + "="*50)
    print("STEP 9 COMPLETED SUCCESSFULLY")
    print("="*50)
    print(f"✓ Performed comprehensive regression analysis")
    print(f"✓ Created diagnostic plots")
    print(f"✓ Output saved to:")
    print(f"   - Results: {OUTPUT_FILE}")
    print(f"   - Plots: {OUTPUT_PLOT}")
    
    # Key finding summary
    slope = results['scipy']['slope']
    p_value = results['scipy']['p_value']
    if p_value < 0.05:
        direction = "increasing" if slope > 0 else "decreasing"
        print(f"\n📊 KEY FINDING: Reappointment rates are {direction} by {abs(slope):.3f}% per year (p={p_value:.4f})")
    else:
        print(f"\n📊 KEY FINDING: No significant trend in reappointment rates (p={p_value:.4f})")
    
    print(f"\nEnd time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()