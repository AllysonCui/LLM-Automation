#!/usr/bin/env python3
"""
Step 8: Compute government-wide reappointment proportions
This script calculates the overall reappointment proportion for the entire
government for each year (total reappointments / total appointments).
Output: step8_annual_proportions.csv and step8_annual_reappointment_proportions.png
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
from scipy import stats
import sys

# Set style for better-looking plots
try:
    plt.style.use('seaborn-v0_8-darkgrid')
except:
    try:
        plt.style.use('seaborn-darkgrid')
    except:
        plt.style.use('ggplot')  # Fallback to a commonly available style

sns.set_palette("husl")

def load_data_files():
    """Load necessary data files from previous steps."""
    print("üìÇ Loading data files...")
    
    files_loaded = {}
    
    # Load reappointment rates (has all the counts we need)
    rates_path = Path("scripts/claudeopus4/version2/execution6/analysis_data/step6_reappointment_rates.csv")
    try:
        rates_df = pd.read_csv(rates_path, encoding='utf-8')
        files_loaded['rates'] = rates_df
        print(f"  ‚úì Loaded reappointment rates: {len(rates_df)} records")
    except Exception as e:
        print(f"  ‚úó Error loading reappointment rates: {e}")
        return None
    
    # Load yearly max rates for comparison
    max_rates_path = Path("scripts/claudeopus4/version2/execution6/analysis_data/step7_yearly_max_rates.csv")
    try:
        max_rates_df = pd.read_csv(max_rates_path, encoding='utf-8')
        files_loaded['max_rates'] = max_rates_df
        print(f"  ‚úì Loaded yearly max rates: {len(max_rates_df)} records")
    except Exception as e:
        print(f"  ‚ö†Ô∏è  Could not load yearly max rates (non-critical): {e}")
        files_loaded['max_rates'] = None
    
    return files_loaded

def compute_annual_proportions(rates_df):
    """Compute government-wide reappointment proportions for each year."""
    print("\nüìä Computing annual government-wide proportions...")
    
    # Group by year and sum the counts
    annual_stats = rates_df.groupby('year').agg({
        'employee_count': 'sum',
        'reappointment_count': 'sum'
    }).reset_index()
    
    # Calculate the proportion
    annual_stats['reappointment_proportion'] = (
        annual_stats['reappointment_count'] / annual_stats['employee_count']
    ).round(4)
    
    # Add additional statistics
    annual_stats['total_appointments'] = annual_stats['employee_count']
    annual_stats['new_appointments'] = annual_stats['employee_count'] - annual_stats['reappointment_count']
    annual_stats['new_appointment_proportion'] = 1 - annual_stats['reappointment_proportion']
    
    # Sort by year
    annual_stats = annual_stats.sort_values('year')
    
    print(f"  ‚úì Computed proportions for {len(annual_stats)} years")
    
    # Display the results
    print("\n  Government-wide reappointment proportions by year:")
    for _, row in annual_stats.iterrows():
        print(f"    {row['year']}: {row['reappointment_proportion']:.1%} "
              f"({row['reappointment_count']:,}/{row['total_appointments']:,} appointments)")
    
    return annual_stats

def analyze_trends(annual_stats):
    """Analyze trends in government-wide reappointment proportions."""
    print("\nüìà Analyzing trends in government-wide proportions...")
    
    # Basic statistics
    prop_mean = annual_stats['reappointment_proportion'].mean()
    prop_std = annual_stats['reappointment_proportion'].std()
    prop_min = annual_stats['reappointment_proportion'].min()
    prop_max = annual_stats['reappointment_proportion'].max()
    
    print(f"\n  Overall statistics:")
    print(f"    - Mean proportion: {prop_mean:.1%}")
    print(f"    - Standard deviation: {prop_std:.1%}")
    print(f"    - Range: {prop_min:.1%} to {prop_max:.1%}")
    
    # Linear regression
    years = annual_stats['year'].values
    proportions = annual_stats['reappointment_proportion'].values
    
    slope, intercept, r_value, p_value, std_err = stats.linregress(years, proportions)
    
    print(f"\n  Linear regression analysis:")
    print(f"    - Slope: {slope:.4f} ({slope*100:.2f}% per year)")
    print(f"    - R-squared: {r_value**2:.3f}")
    print(f"    - P-value: {p_value:.4f}")
    
    if p_value < 0.05:
        if slope > 0:
            print(f"    - ‚úì Significant INCREASING trend in reappointment proportion")
            print(f"    - Annual increase: {slope*100:.2f} percentage points")
        else:
            print(f"    - ‚úì Significant DECREASING trend in reappointment proportion")
            print(f"    - Annual decrease: {abs(slope)*100:.2f} percentage points")
    else:
        print(f"    - No statistically significant trend (p > 0.05)")
    
    # Compare first and last years
    first_year = annual_stats.iloc[0]
    last_year = annual_stats.iloc[-1]
    
    print(f"\n  First vs Last year comparison:")
    print(f"    - {first_year['year']}: {first_year['reappointment_proportion']:.1%}")
    print(f"    - {last_year['year']}: {last_year['reappointment_proportion']:.1%}")
    print(f"    - Total change: {(last_year['reappointment_proportion'] - first_year['reappointment_proportion'])*100:.1f} percentage points")
    
    # Year-over-year changes
    annual_stats['yoy_change'] = annual_stats['reappointment_proportion'].diff() * 100
    
    largest_increase = annual_stats.loc[annual_stats['yoy_change'].idxmax()]
    largest_decrease = annual_stats.loc[annual_stats['yoy_change'].idxmin()]
    
    print(f"\n  Year-over-year changes:")
    print(f"    - Largest increase: {largest_increase['year']} "
          f"(+{largest_increase['yoy_change']:.1f} percentage points)")
    print(f"    - Largest decrease: {largest_decrease['year']} "
          f"({largest_decrease['yoy_change']:.1f} percentage points)")
    
    return slope, intercept, r_value, p_value

def calculate_organization_diversity(rates_df, annual_stats):
    """Calculate diversity metrics for organizations with reappointments."""
    print("\nüìä Calculating organization diversity metrics...")
    
    # Count unique organizations with reappointments each year
    org_diversity = rates_df[rates_df['reappointment_count'] > 0].groupby('year').agg({
        'org_standardized': 'nunique',
        'reappointment_count': 'sum'
    }).reset_index()
    
    org_diversity.columns = ['year', 'orgs_with_reappointments', 'total_reappointments']
    
    # Merge with annual stats
    annual_stats = annual_stats.merge(org_diversity[['year', 'orgs_with_reappointments']], 
                                      on='year', how='left')
    
    # Calculate average reappointments per organization
    annual_stats['avg_reappointments_per_org'] = (
        annual_stats['reappointment_count'] / annual_stats['orgs_with_reappointments']
    ).round(2)
    
    print("\n  Organizations with reappointments by year:")
    for _, row in annual_stats.iterrows():
        if pd.notna(row['orgs_with_reappointments']):
            print(f"    {row['year']}: {row['orgs_with_reappointments']:.0f} organizations "
                  f"(avg {row['avg_reappointments_per_org']:.1f} reappointments each)")
    
    return annual_stats

def create_visualizations(annual_stats, slope, intercept, r_value, p_value, output_path):
    """Create comprehensive visualizations of annual proportions."""
    print("\nüìà Creating visualizations...")
    
    # Create figure with subplots
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('New Brunswick Government-wide Reappointment Analysis', fontsize=16, y=0.98)
    
    # 1. Main trend line with regression
    ax1 = axes[0, 0]
    years = annual_stats['year'].values
    proportions = annual_stats['reappointment_proportion'].values * 100
    
    # Plot actual data
    ax1.plot(years, proportions, marker='o', markersize=8, linewidth=2, 
             color='darkblue', label='Actual Proportion')
    
    # Add regression line
    regression_line = slope * years + intercept
    ax1.plot(years, regression_line * 100, '--', color='red', linewidth=2, 
             label=f'Trend Line (R¬≤={r_value**2:.3f})')
    
    # Formatting
    ax1.set_xlabel('Year', fontsize=12)
    ax1.set_ylabel('Reappointment Proportion (%)', fontsize=12)
    ax1.set_title('Government-wide Reappointment Proportion Over Time', fontsize=14)
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Add value labels
    for year, prop in zip(years, proportions):
        ax1.annotate(f'{prop:.1f}%', (year, prop), 
                    textcoords="offset points", xytext=(0, 5), 
                    ha='center', fontsize=9)
    
    # 2. Bar chart of appointments vs reappointments
    ax2 = axes[0, 1]
    
    width = 0.35
    x_pos = np.arange(len(years))
    
    bars1 = ax2.bar(x_pos - width/2, annual_stats['new_appointments'], width, 
                     label='New Appointments', color='lightgreen')
    bars2 = ax2.bar(x_pos + width/2, annual_stats['reappointment_count'], width, 
                     label='Reappointments', color='lightcoral')
    
    ax2.set_xlabel('Year', fontsize=12)
    ax2.set_ylabel('Number of Appointments', fontsize=12)
    ax2.set_title('New Appointments vs. Reappointments by Year', fontsize=14)
    ax2.set_xticks(x_pos)
    ax2.set_xticklabels(years, rotation=45)
    ax2.legend()
    ax2.grid(True, alpha=0.3, axis='y')
    
    # 3. Year-over-year change
    ax3 = axes[1, 0]
    
    yoy_changes = annual_stats['yoy_change'].dropna()
    yoy_years = annual_stats['year'][1:].values  # Skip first year
    
    colors = ['green' if x > 0 else 'red' for x in yoy_changes]
    bars = ax3.bar(yoy_years, yoy_changes, color=colors, alpha=0.7, edgecolor='black')
    
    ax3.axhline(y=0, color='black', linestyle='-', linewidth=0.5)
    ax3.set_xlabel('Year', fontsize=12)
    ax3.set_ylabel('Year-over-Year Change (percentage points)', fontsize=12)
    ax3.set_title('Annual Change in Reappointment Proportion', fontsize=14)
    ax3.grid(True, alpha=0.3, axis='y')
    
    # Add value labels
    for bar, value in zip(bars, yoy_changes):
        height = bar.get_height()
        ax3.annotate(f'{value:.1f}',
                    xy=(bar.get_x() + bar.get_width()/2, height),
                    xytext=(0, 3 if height > 0 else -15),
                    textcoords="offset points",
                    ha='center', va='bottom' if height > 0 else 'top',
                    fontsize=9)
    
    # 4. Organizations with reappointments
    ax4 = axes[1, 1]
    
    if 'orgs_with_reappointments' in annual_stats.columns:
        ax4_twin = ax4.twinx()
        
        # Bar chart for number of organizations
        bars = ax4.bar(years, annual_stats['orgs_with_reappointments'], 
                       alpha=0.6, color='skyblue', label='Organizations')
        
        # Line for average reappointments per org
        line = ax4_twin.plot(years, annual_stats['avg_reappointments_per_org'], 
                            'ro-', linewidth=2, markersize=8, 
                            label='Avg Reappointments/Org')
        
        ax4.set_xlabel('Year', fontsize=12)
        ax4.set_ylabel('Number of Organizations', fontsize=12, color='blue')
        ax4_twin.set_ylabel('Avg Reappointments per Org', fontsize=12, color='red')
        ax4.set_title('Organization Participation in Reappointments', fontsize=14)
        ax4.tick_params(axis='y', labelcolor='blue')
        ax4_twin.tick_params(axis='y', labelcolor='red')
        ax4.grid(True, alpha=0.3)
        
        # Combine legends
        h1, l1 = ax4.get_legend_handles_labels()
        h2, l2 = ax4_twin.get_legend_handles_labels()
        ax4.legend(h1 + h2, l1 + l2, loc='upper left')
    else:
        # Fallback visualization
        ax4.text(0.5, 0.5, 'Organization diversity data not available', 
                ha='center', va='center', transform=ax4.transAxes)
    
    # Adjust layout and save
    plt.tight_layout()
    
    # Save the figure
    plot_path = output_path.parent / "step8_annual_reappointment_proportions.png"
    plt.savefig(plot_path, dpi=300, bbox_inches='tight')
    print(f"  ‚úì Visualization saved to: {plot_path}")
    
    # Close the plot
    plt.close()

def save_annual_proportions(annual_stats, output_path):
    """Save the annual proportion data."""
    try:
        # Select columns for output
        output_columns = [
            'year',
            'total_appointments',
            'reappointment_count',
            'new_appointments',
            'reappointment_proportion',
            'new_appointment_proportion'
        ]
        
        # Add optional columns if they exist
        if 'orgs_with_reappointments' in annual_stats.columns:
            output_columns.extend(['orgs_with_reappointments', 'avg_reappointments_per_org'])
        
        output_data = annual_stats[output_columns].copy()
        
        # Round proportions for cleaner output
        output_data['reappointment_proportion'] = output_data['reappointment_proportion'].round(4)
        output_data['new_appointment_proportion'] = output_data['new_appointment_proportion'].round(4)
        
        # Save to CSV
        output_data.to_csv(output_path, index=False, encoding='utf-8')
        print(f"\n‚úÖ Annual proportions saved to: {output_path}")
        print(f"   File size: {output_path.stat().st_size / 1024:.2f} KB")
        
        return True
        
    except Exception as e:
        print(f"\n‚úó Error saving file: {e}")
        return False

def main():
    """Main execution function."""
    print("=" * 60)
    print("STEP 8: Compute Government-wide Annual Reappointment Proportions")
    print("=" * 60)
    
    # Define output path
    output_path = Path("scripts/claudeopus4/version2/execution6/analysis_data/step8_annual_proportions.csv")
    
    # Load necessary data files
    data_files = load_data_files()
    if data_files is None:
        print("\n‚úó Failed to load required data files!")
        sys.exit(1)
    
    rates_df = data_files['rates']
    
    # Compute annual proportions
    annual_stats = compute_annual_proportions(rates_df)
    
    # Analyze trends
    slope, intercept, r_value, p_value = analyze_trends(annual_stats)
    
    # Calculate organization diversity
    annual_stats = calculate_organization_diversity(rates_df, annual_stats)
    
    # Create visualizations
    create_visualizations(annual_stats, slope, intercept, r_value, p_value, output_path)
    
    # Save the results
    if not save_annual_proportions(annual_stats, output_path):
        sys.exit(1)
    
    # Print final summary
    print("\nüìã Final Summary - Government-wide Reappointment Analysis:")
    print(f"  - Years analyzed: {annual_stats['year'].min()} to {annual_stats['year'].max()}")
    print(f"  - Average annual proportion: {annual_stats['reappointment_proportion'].mean():.1%}")
    print(f"  - Total appointments: {annual_stats['total_appointments'].sum():,}")
    print(f"  - Total reappointments: {annual_stats['reappointment_count'].sum():,}")
    print(f"  - Overall reappointment rate: "
          f"{annual_stats['reappointment_count'].sum() / annual_stats['total_appointments'].sum():.1%}")
    
    if p_value < 0.05:
        trend_direction = "INCREASING" if slope > 0 else "DECREASING"
        print(f"  - Trend: {trend_direction} ({abs(slope)*100:.2f}% per year, p={p_value:.4f})")
    else:
        print(f"  - Trend: No significant trend detected (p={p_value:.4f})")
    
    print("\n‚úÖ Step 8 completed successfully!")
    print("=" * 60)

if __name__ == "__main__":
    main()