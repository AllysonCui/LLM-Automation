#!/usr/bin/env python3
"""
Step 9: Linear regression analysis on annual reappointment proportions
This script performs statistical analysis to assess the trend direction 
and significance of government-wide reappointment rates over time.
"""

import pandas as pd
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import sys

def main():
    """Main function to perform regression analysis on reappointment trends."""
    
    # Define paths
    input_dir = Path("scripts/claudeopus4/version2/execution9/analysis_data")
    output_dir = Path("scripts/claudeopus4/version2/execution9/analysis_data")
    
    # Input and output files
    input_file = input_dir / "step8_annual_proportions.csv"
    output_file = output_dir / "step9_regression_results.txt"
    
    print("\n" + "="*60)
    print("STEP 9: LINEAR REGRESSION ANALYSIS")
    print("="*60 + "\n")
    
    # Load annual proportions data
    print(f"Loading annual proportions from: {input_file}")
    if not input_file.exists():
        print(f"ERROR: Input file not found: {input_file}")
        print("Please run Step 8 first to compute annual proportions.")
        sys.exit(1)
    
    try:
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"Successfully loaded {len(df)} years of data")
    except Exception as e:
        print(f"ERROR: Failed to load input file: {str(e)}")
        sys.exit(1)
    
    # Display data overview
    print("\n" + "-"*60)
    print("DATA OVERVIEW:")
    print("-"*60)
    
    print(f"\nYears covered: {df['year'].min()}-{df['year'].max()}")
    print(f"Number of data points: {len(df)}")
    
    print("\nReappointment proportions by year:")
    for _, row in df.iterrows():
        print(f"  {int(row['year'])}: {row['reappointment_proportion']:.2f}%")
    
    # Prepare data for regression
    print("\n" + "-"*60)
    print("PREPARING REGRESSION ANALYSIS:")
    print("-"*60)
    
    # Independent variable: years (convert to numeric sequence for better interpretation)
    X = df['year'].values
    X_normalized = X - X.min()  # Start from 0 for easier interpretation
    
    # Dependent variable: reappointment proportions
    y = df['reappointment_proportion'].values
    
    print(f"\nIndependent variable (X): Years {X.min()}-{X.max()}")
    print(f"Dependent variable (y): Reappointment proportions")
    print(f"Sample size (n): {len(X)}")
    
    # Perform linear regression
    print("\n" + "-"*60)
    print("LINEAR REGRESSION RESULTS:")
    print("-"*60)
    
    # Calculate regression statistics
    slope, intercept, r_value, p_value, std_err = stats.linregress(X_normalized, y)
    
    # Calculate additional statistics
    n = len(X)
    degrees_freedom = n - 2
    t_statistic = slope / std_err
    
    # Confidence intervals for slope (95%)
    confidence_level = 0.95
    t_critical = stats.t.ppf((1 + confidence_level) / 2, degrees_freedom)
    ci_lower = slope - t_critical * std_err
    ci_upper = slope + t_critical * std_err
    
    # R-squared
    r_squared = r_value ** 2
    
    # Predicted values and residuals
    y_pred = intercept + slope * X_normalized
    residuals = y - y_pred
    
    # Standard error of the estimate
    sse = np.sum(residuals ** 2)
    mse = sse / degrees_freedom
    se_estimate = np.sqrt(mse)
    
    # Display results
    print(f"\nRegression equation:")
    print(f"  Reappointment % = {intercept:.3f} + {slope:.3f} × (Year - {X.min()})")
    
    print(f"\nCoefficients:")
    print(f"  Intercept (β₀): {intercept:.3f}%")
    print(f"    - Interpretation: Estimated reappointment proportion in {X.min()}")
    print(f"  Slope (β₁): {slope:.3f} percentage points per year")
    print(f"    - Interpretation: Annual change in reappointment proportion")
    
    print(f"\nStatistical significance:")
    print(f"  t-statistic: {t_statistic:.3f}")
    print(f"  p-value: {p_value:.6f}")
    print(f"  Degrees of freedom: {degrees_freedom}")
    
    # Interpret significance
    alpha = 0.05
    if p_value < alpha:
        significance = "STATISTICALLY SIGNIFICANT"
        interpretation = "reject the null hypothesis"
    else:
        significance = "NOT STATISTICALLY SIGNIFICANT"
        interpretation = "fail to reject the null hypothesis"
    
    print(f"\n  Result: {significance} at α = {alpha}")
    print(f"  Decision: We {interpretation} (H₀: β₁ = 0)")
    
    print(f"\nModel fit:")
    print(f"  R-squared: {r_squared:.4f}")
    print(f"    - Interpretation: {r_squared*100:.2f}% of variance explained by the model")
    print(f"  Correlation coefficient (r): {r_value:.4f}")
    print(f"  Standard error of slope: {std_err:.4f}")
    print(f"  Standard error of estimate: {se_estimate:.3f}")
    
    print(f"\nConfidence interval for slope (95%):")
    print(f"  [{ci_lower:.4f}, {ci_upper:.4f}] percentage points per year")
    
    # Trend interpretation
    print("\n" + "-"*60)
    print("TREND INTERPRETATION:")
    print("-"*60)
    
    if p_value < alpha:
        if slope > 0:
            trend_direction = "INCREASING"
            trend_description = f"increasing by approximately {slope:.2f} percentage points per year"
        else:
            trend_direction = "DECREASING"
            trend_description = f"decreasing by approximately {abs(slope):.2f} percentage points per year"
        
        print(f"\n✓ The reappointment proportion shows a statistically significant {trend_direction} trend,")
        print(f"  {trend_description}.")
        
        # Project future values
        years_ahead = 5
        future_year = X.max() + years_ahead
        future_value = intercept + slope * (future_year - X.min())
        print(f"\n  Projection: If this trend continues, by {future_year} the reappointment")
        print(f"  proportion would be approximately {future_value:.1f}%")
    else:
        print(f"\n✗ No statistically significant trend detected (p = {p_value:.4f} > {alpha})")
        print(f"  The data does not provide sufficient evidence of a linear trend.")
    
    # Residual analysis
    print("\n" + "-"*60)
    print("RESIDUAL ANALYSIS:")
    print("-"*60)
    
    # Normality test on residuals
    shapiro_stat, shapiro_p = stats.shapiro(residuals)
    print(f"\nShapiro-Wilk normality test on residuals:")
    print(f"  Test statistic: {shapiro_stat:.4f}")
    print(f"  p-value: {shapiro_p:.4f}")
    
    if shapiro_p > 0.05:
        print("  Result: Residuals appear to be normally distributed (p > 0.05)")
    else:
        print("  Result: Residuals may not be normally distributed (p ≤ 0.05)")
    
    # Durbin-Watson test for autocorrelation
    dw_statistic = np.sum(np.diff(residuals)**2) / np.sum(residuals**2)
    print(f"\nDurbin-Watson statistic: {dw_statistic:.3f}")
    print(f"  (Values near 2 suggest no autocorrelation)")
    
    # Additional analysis
    print("\n" + "-"*60)
    print("ADDITIONAL ANALYSIS:")
    print("-"*60)
    
    # Calculate effect size
    total_change = slope * (X.max() - X.min())
    print(f"\nTotal change over {X.max() - X.min()} years: {total_change:.2f} percentage points")
    
    # Annual growth rate
    if df['reappointment_proportion'].iloc[0] > 0:
        cagr = ((df['reappointment_proportion'].iloc[-1] / df['reappointment_proportion'].iloc[0]) ** (1/(len(df)-1)) - 1) * 100
        print(f"Compound annual growth rate (CAGR): {cagr:.2f}%")
    
    # Volatility around trend
    volatility = np.std(residuals)
    print(f"Volatility (std dev of residuals): {volatility:.2f} percentage points")
    
    # Create diagnostic plots
    print("\n" + "-"*60)
    print("CREATING DIAGNOSTIC PLOTS:")
    print("-"*60)
    
    fig, axes = plt.subplots(2, 2, figsize=(12, 10))
    
    # Plot 1: Scatter plot with regression line
    ax1 = axes[0, 0]
    ax1.scatter(X, y, s=100, alpha=0.7, color='darkblue', label='Actual data')
    ax1.plot(X, y_pred, 'r-', linewidth=2, label=f'Regression line (R² = {r_squared:.3f})')
    ax1.fill_between(X, y_pred - 1.96*se_estimate, y_pred + 1.96*se_estimate, 
                     alpha=0.2, color='red', label='95% Prediction interval')
    
    for i, year in enumerate(X):
        ax1.annotate(f'{y[i]:.1f}%', (year, y[i]), 
                    textcoords="offset points", xytext=(0, 10), 
                    ha='center', fontsize=8)
    
    ax1.set_xlabel('Year')
    ax1.set_ylabel('Reappointment Proportion (%)')
    ax1.set_title('Linear Regression: Reappointment Proportion vs Year')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Plot 2: Residual plot
    ax2 = axes[0, 1]
    ax2.scatter(y_pred, residuals, s=100, alpha=0.7, color='darkgreen')
    ax2.axhline(y=0, color='red', linestyle='--', linewidth=1)
    ax2.set_xlabel('Fitted Values (%)')
    ax2.set_ylabel('Residuals')
    ax2.set_title('Residual Plot')
    ax2.grid(True, alpha=0.3)
    
    # Plot 3: Q-Q plot
    ax3 = axes[1, 0]
    stats.probplot(residuals, dist="norm", plot=ax3)
    ax3.set_title('Normal Q-Q Plot of Residuals')
    ax3.grid(True, alpha=0.3)
    
    # Plot 4: Residuals over time
    ax4 = axes[1, 1]
    ax4.scatter(X, residuals, s=100, alpha=0.7, color='darkorange')
    ax4.axhline(y=0, color='red', linestyle='--', linewidth=1)
    ax4.set_xlabel('Year')
    ax4.set_ylabel('Residuals')
    ax4.set_title('Residuals Over Time')
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    # Save diagnostic plots
    plot_file = output_dir / "step9_regression_diagnostics.png"
    try:
        plt.savefig(plot_file, dpi=300, bbox_inches='tight')
        print(f"\nDiagnostic plots saved to: {plot_file}")
    except Exception as e:
        print(f"\nWARNING: Failed to save plots: {str(e)}")
    
    plt.close()
    
    # Save results to text file
    print("\n" + "-"*60)
    print("SAVING RESULTS:")
    print("-"*60)
    
    results_text = f"""LINEAR REGRESSION ANALYSIS RESULTS
{'='*60}

RESEARCH QUESTION:
Which government branch in New Brunswick most frequently reappoints past appointees, 
and is this trend increasing or declining over the past 12 years?

DATA SUMMARY:
- Years analyzed: {X.min()}-{X.max()} ({len(X)} data points)
- Dependent variable: Annual government-wide reappointment proportion (%)

REGRESSION EQUATION:
Reappointment % = {intercept:.3f} + {slope:.3f} × (Year - {X.min()})

KEY FINDINGS:
1. Trend Direction: {trend_direction if p_value < alpha else 'NO SIGNIFICANT TREND'}
2. Annual Change: {slope:.3f} percentage points per year
3. Statistical Significance: p-value = {p_value:.6f} {'(significant)' if p_value < alpha else '(not significant)'}
4. Model Fit: R² = {r_squared:.4f} ({r_squared*100:.1f}% of variance explained)

STATISTICAL DETAILS:
- Slope (β₁): {slope:.4f} ± {std_err:.4f} (SE)
- 95% CI for slope: [{ci_lower:.4f}, {ci_upper:.4f}]
- t-statistic: {t_statistic:.3f}
- Degrees of freedom: {degrees_freedom}
- Correlation coefficient: {r_value:.4f}

INTERPRETATION:
{f"The government-wide reappointment proportion is {trend_description}. This trend is statistically significant (p < 0.05), indicating a systematic change in reappointment practices over the 12-year period." if p_value < alpha else "There is no statistically significant linear trend in government-wide reappointment proportions over the 12-year period."}

ADDITIONAL METRICS:
- Total change ({X.min()}-{X.max()}): {total_change:.2f} percentage points
- Volatility (residual SD): {volatility:.2f} percentage points
- Durbin-Watson statistic: {dw_statistic:.3f}

ASSUMPTIONS CHECK:
- Normality of residuals (Shapiro-Wilk): p = {shapiro_p:.4f} {'✓' if shapiro_p > 0.05 else '⚠'}
- Autocorrelation (Durbin-Watson): {dw_statistic:.3f} {'✓' if 1.5 < dw_statistic < 2.5 else '⚠'}

{'='*60}
Analysis completed: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(results_text)
        print(f"\nResults saved to: {output_file}")
    except Exception as e:
        print(f"\nERROR: Failed to save results: {str(e)}")
        sys.exit(1)
    
    # Final summary
    print("\n" + "="*60)
    print("FINAL SUMMARY:")
    print("="*60)
    
    print(f"\n📊 REGRESSION ANALYSIS COMPLETE")
    
    if p_value < alpha:
        if slope > 0:
            print(f"\n✅ CONCLUSION: The data shows a statistically significant INCREASING trend")
            print(f"   in government-wide reappointment rates.")
            print(f"   • Annual increase: {slope:.2f} percentage points")
            print(f"   • Total increase ({X.min()}-{X.max()}): {total_change:.2f} percentage points")
            print(f"   • Statistical confidence: {(1-p_value)*100:.1f}%")
        else:
            print(f"\n✅ CONCLUSION: The data shows a statistically significant DECREASING trend")
            print(f"   in government-wide reappointment rates.")
            print(f"   • Annual decrease: {abs(slope):.2f} percentage points")
            print(f"   • Total decrease ({X.min()}-{X.max()}): {abs(total_change):.2f} percentage points")
            print(f"   • Statistical confidence: {(1-p_value)*100:.1f}%")
    else:
        print(f"\n❌ CONCLUSION: No statistically significant trend detected")
        print(f"   • The data does not provide sufficient evidence of a systematic")
        print(f"     increase or decrease in reappointment rates over time.")
    
    print("\n" + "="*60)
    print("Step 9 completed successfully!")
    print("="*60)

if __name__ == "__main__":
    main()