"""
Step 6: Calculate Reappointment Rates
This script divides reappointment counts by total employees for each organization and year.
"""

import pandas as pd
import numpy as np
from pathlib import Path
import sys

def calculate_reappointment_rates():
    """
    Calculates reappointment rates by dividing reappointment counts by total employees.
    """
    # Define paths
    input_path = Path('scripts/claudeopus4/version2/analysis_data')
    
    # Input files from previous steps
    employee_counts_file = input_path / 'step4_employee_counts.csv'
    reappointment_counts_file = input_path / 'step5_reappointment_counts.csv'
    output_file = input_path / 'step6_reappointment_rates.csv'
    
    # Check if input files exist
    if not employee_counts_file.exists():
        print(f"ERROR: Employee counts file {employee_counts_file} does not exist!")
        print("Please run Step 4 first.")
        sys.exit(1)
    
    if not reappointment_counts_file.exists():
        print(f"ERROR: Reappointment counts file {reappointment_counts_file} does not exist!")
        print("Please run Step 5 first.")
        sys.exit(1)
    
    print(f"Reading input files...")
    
    try:
        # Read employee counts (denominator)
        df_employees = pd.read_csv(employee_counts_file, encoding='utf-8')
        print(f"Employee counts loaded: {len(df_employees)} records")
        
        # Read reappointment counts (numerator)
        df_reappointments = pd.read_csv(reappointment_counts_file, encoding='utf-8')
        print(f"Reappointment counts loaded: {len(df_reappointments)} records")
        
        # Verify column names
        print("\nVerifying data structure...")
        print(f"Employee counts columns: {df_employees.columns.tolist()}")
        print(f"Reappointment counts columns: {df_reappointments.columns.tolist()}")
        
        # Merge the datasets on org and year
        print("\nMerging datasets...")
        df_merged = df_employees[['org', 'year', 'employee_count']].merge(
            df_reappointments[['org', 'year', 'reappointment_count']],
            on=['org', 'year'],
            how='outer',
            indicator=True
        )
        
        # Check merge results
        merge_summary = df_merged['_merge'].value_counts()
        print("\nMerge summary:")
        for status, count in merge_summary.items():
            print(f"  - {status}: {count}")
        
        # Fill missing values with 0
        df_merged['employee_count'] = df_merged['employee_count'].fillna(0)
        df_merged['reappointment_count'] = df_merged['reappointment_count'].fillna(0)
        
        # Calculate reappointment rate
        print("\nCalculating reappointment rates...")
        
        # Avoid division by zero
        df_merged['reappointment_rate'] = np.where(
            df_merged['employee_count'] > 0,
            df_merged['reappointment_count'] / df_merged['employee_count'],
            0
        )
        
        # Convert to percentage
        df_merged['reappointment_rate_pct'] = df_merged['reappointment_rate'] * 100
        
        # Drop the merge indicator
        df_merged = df_merged.drop('_merge', axis=1)
        
        # Add validation flags
        df_merged['has_employees'] = df_merged['employee_count'] > 0
        df_merged['has_reappointments'] = df_merged['reappointment_count'] > 0
        df_merged['rate_valid'] = df_merged['has_employees']  # Rate is only valid if there are employees
        
        # Check for anomalies
        print("\nData quality checks:")
        
        # Check for rates > 100%
        high_rates = df_merged[df_merged['reappointment_rate_pct'] > 100]
        if len(high_rates) > 0:
            print(f"\nWARNING: Found {len(high_rates)} records with reappointment rate > 100%:")
            for _, row in high_rates.head(5).iterrows():
                print(f"  - {row['org']} ({row['year']}): {row['reappointment_count']} reappointments / {row['employee_count']} employees = {row['reappointment_rate_pct']:.1f}%")
        
        # Organizations with high reappointment rates
        valid_rates = df_merged[df_merged['rate_valid'] & (df_merged['employee_count'] >= 5)]  # At least 5 employees
        high_rate_orgs = valid_rates.nlargest(20, 'reappointment_rate_pct')
        
        print(f"\nTop 20 organizations by reappointment rate (min 5 employees):")
        for i, (_, row) in enumerate(high_rate_orgs.iterrows()):
            print(f"  {i+1}. {row['org']} ({row['year']}): {row['reappointment_rate_pct']:.1f}% ({row['reappointment_count']}/{row['employee_count']})")
        
        # Calculate organization-level statistics
        print("\nCalculating organization-level statistics...")
        
        org_stats = df_merged[df_merged['rate_valid']].groupby('org').agg({
            'employee_count': 'sum',
            'reappointment_count': 'sum',
            'reappointment_rate_pct': ['mean', 'std', 'min', 'max'],
            'year': 'count'
        }).round(2)
        
        org_stats.columns = ['total_employees', 'total_reappointments', 
                           'avg_rate_pct', 'std_rate_pct', 'min_rate_pct', 'max_rate_pct', 'years_active']
        
        # Calculate overall rate for each org
        org_stats['overall_rate_pct'] = (org_stats['total_reappointments'] / org_stats['total_employees'] * 100).round(2)
        
        # Merge back to main dataframe
        df_final = df_merged.merge(
            org_stats[['overall_rate_pct', 'avg_rate_pct', 'years_active']],
            left_on='org',
            right_index=True,
            how='left'
        )
        
        # Year-level statistics
        print("\nYear-over-year reappointment rates:")
        yearly_stats = df_merged[df_merged['rate_valid']].groupby('year').agg({
            'employee_count': 'sum',
            'reappointment_count': 'sum'
        })
        yearly_stats['yearly_rate_pct'] = (yearly_stats['reappointment_count'] / yearly_stats['employee_count'] * 100).round(2)
        
        for year, row in yearly_stats.iterrows():
            print(f"  - {year}: {row['yearly_rate_pct']:.1f}% ({row['reappointment_count']}/{row['employee_count']})")
        
        # Create pivot table for visualization
        rate_matrix = df_merged.pivot(
            index='org',
            columns='year',
            values='reappointment_rate_pct'
        ).round(1)
        
        # Add average column
        rate_matrix['avg_rate'] = rate_matrix.mean(axis=1, skipna=True).round(1)
        
        # Sort by average rate
        rate_matrix = rate_matrix.sort_values('avg_rate', ascending=False)
        
        # Display organizations with consistently high rates
        print("\nOrganizations with consistently high reappointment rates:")
        consistent_high = rate_matrix[rate_matrix.iloc[:, :-1].min(axis=1) > 20]  # All years > 20%
        print(f"  - Found {len(consistent_high)} organizations with >20% rate in all years")
        for org in consistent_high.head(10).index:
            avg_rate = consistent_high.loc[org, 'avg_rate']
            print(f"    - {org}: {avg_rate:.1f}% average")
        
        # Sort final output by org and year
        df_final = df_final.sort_values(['org', 'year'])
        
        # Select and order columns for output
        output_columns = [
            'org', 'year', 'employee_count', 'reappointment_count',
            'reappointment_rate', 'reappointment_rate_pct',
            'overall_rate_pct', 'avg_rate_pct', 'years_active',
            'has_employees', 'has_reappointments', 'rate_valid'
        ]
        df_final = df_final[output_columns]
        
        # Summary statistics
        print(f"\n{'='*50}")
        print(f"SUMMARY:")
        print(f"  - Total records: {len(df_final)}")
        print(f"  - Records with valid rates: {df_final['rate_valid'].sum()}")
        print(f"  - Average reappointment rate (all orgs/years): {df_final[df_final['rate_valid']]['reappointment_rate_pct'].mean():.1f}%")
        print(f"  - Median reappointment rate: {df_final[df_final['rate_valid']]['reappointment_rate_pct'].median():.1f}%")
        print(f"  - Organizations analyzed: {df_final['org'].nunique()}")
        
        # Save the results
        df_final.to_csv(output_file, index=False, encoding='utf-8')
        print(f"\nReappointment rates saved to: {output_file}")
        
        # Save the rate matrix
        matrix_file = input_path / 'step6_rate_matrix.csv'
        rate_matrix.to_csv(matrix_file, encoding='utf-8')
        print(f"Rate matrix saved to: {matrix_file}")
        
        return {
            'total_records': len(df_final),
            'valid_rate_records': df_final['rate_valid'].sum(),
            'avg_reappointment_rate': df_final[df_final['rate_valid']]['reappointment_rate_pct'].mean(),
            'output_file': str(output_file),
            'matrix_file': str(matrix_file)
        }
        
    except Exception as e:
        print(f"\nERROR: Failed to calculate rates: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    # Run the rate calculation process
    summary = calculate_reappointment_rates()
    print("\nStep 6 completed successfully!")