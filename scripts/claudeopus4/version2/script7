"""
Step 7: Find Organizations with Maximum Reappointment Rates by Year
This script identifies the organization with the highest reappointment rate for each year
and creates a visualization of the trends.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import sys

def find_yearly_max_reappointment_rates():
    """
    Finds the organization with the maximum reappointment rate for each year.
    """
    # Define paths
    input_path = Path('scripts/claudeopus4/version2/analysis_data')
    input_file = input_path / 'step6_reappointment_rates.csv'
    output_file = input_path / 'step7_yearly_max_rates.csv'
    plot_file = input_path / 'step7_yearly_max_reappointment_rates.png'
    
    # Check if input file exists
    if not input_file.exists():
        print(f"ERROR: Reappointment rates file {input_file} does not exist!")
        print("Please run Step 6 first.")
        sys.exit(1)
    
    print(f"Reading reappointment rates from: {input_file}")
    
    try:
        # Read the reappointment rates
        df_rates = pd.read_csv(input_file, encoding='utf-8')
        print(f"Reappointment rates loaded: {len(df_rates)} records")
        
        # Filter for valid rates only (where we have employees)
        df_valid = df_rates[df_rates['rate_valid'] == True].copy()
        print(f"Valid rate records: {len(df_valid)}")
        
        # Further filter for organizations with meaningful employee counts
        # (at least 5 employees to avoid small sample bias)
        df_meaningful = df_valid[df_valid['employee_count'] >= 5].copy()
        print(f"Records with at least 5 employees: {len(df_meaningful)}")
        
        # Find the organization with max rate for each year
        print("\nFinding organizations with maximum reappointment rates by year...")
        
        # Get the index of max rate for each year
        idx_max = df_meaningful.groupby('year')['reappointment_rate_pct'].idxmax()
        
        # Extract the records with maximum rates
        df_max_rates = df_meaningful.loc[idx_max].copy()
        
        # Sort by year
        df_max_rates = df_max_rates.sort_values('year')
        
        # Display results
        print("\nOrganizations with highest reappointment rates by year:")
        print("-" * 80)
        print(f"{'Year':<6} {'Organization':<40} {'Rate':<10} {'Reapp/Total':<15}")
        print("-" * 80)
        
        for _, row in df_max_rates.iterrows():
            ratio = f"{int(row['reappointment_count'])}/{int(row['employee_count'])}"
            print(f"{int(row['year']):<6} {row['org'][:40]:<40} {row['reappointment_rate_pct']:>6.1f}%    {ratio:<15}")
        
        # Analyze patterns
        print("\n" + "=" * 50)
        print("PATTERN ANALYSIS:")
        
        # Count how many times each organization appears
        org_counts = df_max_rates['org'].value_counts()
        print(f"\nOrganizations appearing multiple times as yearly maximum:")
        for org, count in org_counts[org_counts > 1].items():
            years = df_max_rates[df_max_rates['org'] == org]['year'].tolist()
            print(f"  - {org}: {count} times (years: {', '.join(map(str, years))})")
        
        # Trend analysis
        print(f"\nReappointment rate trends for yearly maximums:")
        print(f"  - Average max rate: {df_max_rates['reappointment_rate_pct'].mean():.1f}%")
        print(f"  - Minimum max rate: {df_max_rates['reappointment_rate_pct'].min():.1f}% ({df_max_rates.loc[df_max_rates['reappointment_rate_pct'].idxmin(), 'year']})")
        print(f"  - Maximum max rate: {df_max_rates['reappointment_rate_pct'].max():.1f}% ({df_max_rates.loc[df_max_rates['reappointment_rate_pct'].idxmax(), 'year']})")
        
        # Check if rates are increasing or decreasing
        years = df_max_rates['year'].values
        rates = df_max_rates['reappointment_rate_pct'].values
        
        # Simple linear regression for trend
        from scipy import stats
        slope, intercept, r_value, p_value, std_err = stats.linregress(years, rates)
        
        print(f"\nTrend analysis (linear regression):")
        print(f"  - Slope: {slope:.3f} (percentage points per year)")
        print(f"  - R-squared: {r_value**2:.3f}")
        print(f"  - P-value: {p_value:.3f}")
        
        if p_value < 0.05:
            if slope > 0:
                print(f"  - Trend: INCREASING (statistically significant)")
            else:
                print(f"  - Trend: DECREASING (statistically significant)")
        else:
            print(f"  - Trend: No significant trend detected")
        
        # Create visualization
        print("\nCreating visualization...")
        
        plt.figure(figsize=(12, 8))
        
        # Main plot - bar chart with trend line
        bars = plt.bar(df_max_rates['year'], df_max_rates['reappointment_rate_pct'], 
                       color='steelblue', alpha=0.7, edgecolor='black', linewidth=1)
        
        # Add organization names on bars
        for i, (_, row) in enumerate(df_max_rates.iterrows()):
            # Truncate long names
            org_name = row['org'][:25] + '...' if len(row['org']) > 25 else row['org']
            plt.text(row['year'], row['reappointment_rate_pct'] + 1, 
                    org_name, rotation=45, ha='left', va='bottom', fontsize=8)
        
        # Add trend line
        trend_line = slope * years + intercept
        plt.plot(years, trend_line, 'r--', linewidth=2, label=f'Trend (slope: {slope:.2f}%/year)')
        
        # Formatting
        plt.xlabel('Year', fontsize=12)
        plt.ylabel('Maximum Reappointment Rate (%)', fontsize=12)
        plt.title('Organizations with Highest Reappointment Rates by Year\n(Minimum 5 employees)', 
                 fontsize=14, fontweight='bold')
        
        # Set y-axis to start at 0 and add some padding at top
        plt.ylim(0, max(rates) * 1.2)
        
        # Add grid
        plt.grid(True, axis='y', alpha=0.3)
        
        # Add legend
        plt.legend()
        
        # Adjust layout to prevent label cutoff
        plt.tight_layout()
        
        # Save plot
        plt.savefig(plot_file, dpi=300, bbox_inches='tight')
        print(f"Visualization saved to: {plot_file}")
        plt.close()
        
        # Prepare output dataframe with additional context
        df_output = df_max_rates[['year', 'org', 'employee_count', 'reappointment_count', 
                                 'reappointment_rate_pct']].copy()
        
        # Add rank information (how many orgs had 5+ employees that year)
        orgs_per_year = df_meaningful.groupby('year').size()
        df_output = df_output.merge(orgs_per_year.rename('total_orgs_analyzed'), 
                                   left_on='year', right_index=True)
        
        # Add trend information
        df_output['trend_slope'] = slope
        df_output['trend_pvalue'] = p_value
        df_output['is_significant_trend'] = p_value < 0.05
        
        # Summary statistics
        print(f"\n{'='*50}")
        print(f"SUMMARY:")
        print(f"  - Years analyzed: {len(df_output)}")
        print(f"  - Unique organizations as yearly max: {df_output['org'].nunique()}")
        print(f"  - Average maximum rate: {df_output['reappointment_rate_pct'].mean():.1f}%")
        print(f"  - Rate range: {df_output['reappointment_rate_pct'].min():.1f}% - {df_output['reappointment_rate_pct'].max():.1f}%")
        
        # Save the results
        df_output.to_csv(output_file, index=False, encoding='utf-8')
        print(f"\nYearly maximum rates saved to: {output_file}")
        
        return {
            'years_analyzed': len(df_output),
            'unique_max_orgs': df_output['org'].nunique(),
            'avg_max_rate': df_output['reappointment_rate_pct'].mean(),
            'trend_slope': slope,
            'trend_significant': p_value < 0.05,
            'output_file': str(output_file),
            'plot_file': str(plot_file)
        }
        
    except Exception as e:
        print(f"\nERROR: Failed to analyze maximum rates: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    # Run the maximum rate analysis
    summary = find_yearly_max_reappointment_rates()
    print("\nStep 7 completed successfully!")