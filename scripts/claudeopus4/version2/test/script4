"""
Step 4: Count Employees by Organization and Year
This step counts the number of employees for each organization for each year.
"""

import pandas as pd
import numpy as np
from pathlib import Path
import sys

def count_employees_by_org_year():
    """
    Counts the number of employees for each organization by year.
    """
    # Define paths
    input_path = Path('steps/claudeopus4/version2/analysis_data')
    
    # We need to use the original combined dataset with year information
    combined_file = input_path / 'step1_combined_appointments.csv'
    marked_file = input_path / 'step3_repeats_marked.csv'
    output_file = input_path / 'step4_employee_counts.csv'
    
    # Check if input files exist
    if not combined_file.exists():
        print(f"ERROR: Combined dataset {combined_file} does not exist!")
        print("Please run Step 1 first.")
        sys.exit(1)
    
    if not marked_file.exists():
        print(f"ERROR: Marked dataset {marked_file} does not exist!")
        print("Please run Step 3 first.")
        sys.exit(1)
    
    print(f"Reading datasets...")
    
    try:
        # Read the combined dataset (has year information)
        df_combined = pd.read_csv(combined_file, encoding='utf-8')
        print(f"Combined dataset loaded: {len(df_combined)} rows")
        
        # Read the marked dataset (has updated reappointed flags)
        df_marked = pd.read_csv(marked_file, encoding='utf-8')
        print(f"Marked dataset loaded: {len(df_marked)} rows")
        
        # Check if we have year information
        if 'source_year' not in df_combined.columns:
            print("ERROR: No 'source_year' column found in combined dataset!")
            sys.exit(1)
        
        # Standardize org column names
        if 'org' in df_combined.columns:
            org_col = 'org'
        elif 'organization' in df_combined.columns:
            org_col = 'organization'
        else:
            print("ERROR: No organization column found!")
            sys.exit(1)
        
        # Clean and standardize data
        print("\nCleaning and standardizing data...")
        
        # Clean organization names in combined dataset
        df_combined['org_clean'] = df_combined[org_col].astype(str).str.strip().str.lower()
        df_combined['org_clean'] = df_combined['org_clean'].replace(['nan', 'none', ''], np.nan)
        
        # Ensure we have name for matching
        if 'name' in df_combined.columns:
            df_combined['name_clean'] = df_combined['name'].astype(str).str.strip().str.lower()
        
        # Get unique organizations (excluding nulls)
        unique_orgs = df_combined['org_clean'].dropna().unique()
        print(f"  - Unique organizations found: {len(unique_orgs)}")
        
        # Get year range
        years = sorted(df_combined['source_year'].unique())
        print(f"  - Years covered: {min(years)} to {max(years)}")
        
        # Count employees by organization and year
        print("\nCounting employees by organization and year...")
        
        # Group by organization and year, count unique names
        employee_counts = df_combined.groupby(['source_year', 'org_clean'])['name'].nunique().reset_index()
        employee_counts.columns = ['year', 'org', 'employee_count']
        
        # Remove rows with null organizations
        employee_counts = employee_counts[employee_counts['org'].notna()]
        
        # Pivot to create a matrix of organizations vs years
        employee_matrix = employee_counts.pivot(index='org', columns='year', values='employee_count').fillna(0).astype(int)
        
        # Add row totals
        employee_matrix['total_across_years'] = employee_matrix.sum(axis=1)
        
        # Sort by total employees (descending)
        employee_matrix = employee_matrix.sort_values('total_across_years', ascending=False)
        
        # Display top organizations
        print(f"\nTop 20 organizations by total employees across all years:")
        for i, (org, row) in enumerate(employee_matrix.head(20).iterrows()):
            print(f"  {i+1}. {org}: {int(row['total_across_years'])} total employees")
        
        # Calculate year-over-year statistics
        print(f"\nYear-over-year statistics:")
        yearly_totals = employee_counts.groupby('year')['employee_count'].sum()
        for year in sorted(yearly_totals.index):
            print(f"  - {year}: {yearly_totals[year]} total appointments")
        
        # Identify organizations with consistent presence
        print(f"\nOrganizations present in all years:")
        years_count = len(years)
        consistent_orgs = employee_matrix[employee_matrix.iloc[:, :-1].gt(0).sum(axis=1) == years_count]
        print(f"  - Found {len(consistent_orgs)} organizations present in all {years_count} years")
        for org in consistent_orgs.head(10).index:
            print(f"    - {org}")
        
        # Create detailed output format
        print(f"\nCreating detailed output format...")
        
        # Melt the matrix back to long format for saving
        employee_matrix_reset = employee_matrix.drop('total_across_years', axis=1).reset_index()
        employee_counts_long = employee_matrix_reset.melt(
            id_vars=['org'], 
            var_name='year', 
            value_name='employee_count'
        )
        
        # Add additional statistics
        # Calculate average employees per year for each org
        org_stats = employee_counts_long.groupby('org').agg({
            'employee_count': ['sum', 'mean', 'std', 'min', 'max']
        }).round(2)
        org_stats.columns = ['total_employees', 'avg_per_year', 'std_dev', 'min_year', 'max_year']
        
        # Merge statistics back
        employee_counts_final = employee_counts_long.merge(
            org_stats, 
            left_on='org', 
            right_index=True
        )
        
        # Add year-specific rankings
        employee_counts_final['rank_in_year'] = employee_counts_final.groupby('year')['employee_count'].rank(
            ascending=False, 
            method='dense'
        ).astype(int)
        
        # Sort by organization and year
        employee_counts_final = employee_counts_final.sort_values(['org', 'year'])
        
        # Summary statistics
        print(f"\n{'='*50}")
        print(f"SUMMARY:")
        print(f"  - Total organizations: {len(unique_orgs)}")
        print(f"  - Years analyzed: {len(years)}")
        print(f"  - Total records: {len(employee_counts_final)}")
        print(f"  - Organizations with most employees: {employee_matrix.index[0]} ({int(employee_matrix.iloc[0]['total_across_years'])} total)")
        
        # Save the results
        employee_counts_final.to_csv(output_file, index=False, encoding='utf-8')
        print(f"\nEmployee counts by organization and year saved to: {output_file}")
        
        # Also save the matrix format for easier viewing
        matrix_file = input_path / 'step4_employee_matrix.csv'
        employee_matrix.to_csv(matrix_file, encoding='utf-8')
        print(f"Employee count matrix saved to: {matrix_file}")
        
        return {
            'total_organizations': len(unique_orgs),
            'years_analyzed': len(years),
            'output_file': str(output_file),
            'matrix_file': str(matrix_file)
        }
        
    except Exception as e:
        print(f"\nERROR: Failed to process the dataset: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    # Run the employee counting process
    summary = count_employees_by_org_year()
    print("\nStep 4 completed successfully!")