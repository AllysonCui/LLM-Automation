"""
Step 5: Count Reappointments by Organization and Year
This step counts the times each organization appears when reappointed is true for each year.
"""

import pandas as pd
import numpy as np
from pathlib import Path
import sys

def count_reappointments_by_org_year():
    """
    Counts reappointments (where reappointed=True) for each organization by year.
    """
    # Define paths
    input_path = Path('steps/claudeopus4/version2/analysis_data')
    
    # We need both the combined dataset (for year info) and marked dataset (for reappointed flag)
    combined_file = input_path / 'step1_combined_appointments.csv'
    marked_file = input_path / 'step3_repeats_marked.csv'
    output_file = input_path / 'step5_reappointment_counts.csv'
    
    # Check if input files exist
    if not combined_file.exists():
        print(f"ERROR: Combined dataset {combined_file} does not exist!")
        print("Please run Step 1 first.")
        sys.exit(1)
    
    if not marked_file.exists():
        print(f"ERROR: Marked dataset {marked_file} does not exist!")
        print("Please run Step 3 first.")
        sys.exit(1)
    
    print(f"Reading datasets...")
    
    try:
        # Read the combined dataset (has year information)
        df_combined = pd.read_csv(combined_file, encoding='utf-8')
        print(f"Combined dataset loaded: {len(df_combined)} rows")
        
        # Read the marked dataset (has updated reappointed flags)
        df_marked = pd.read_csv(marked_file, encoding='utf-8')
        print(f"Marked dataset loaded: {len(df_marked)} rows")
        
        # Check for required columns
        if 'source_year' not in df_combined.columns:
            print("ERROR: No 'source_year' column found in combined dataset!")
            sys.exit(1)
        
        if 'reappointed' not in df_marked.columns:
            print("ERROR: No 'reappointed' column found in marked dataset!")
            sys.exit(1)
        
        # Standardize column names
        # Find org column in combined dataset
        if 'org' in df_combined.columns:
            org_col_combined = 'org'
        elif 'organization' in df_combined.columns:
            org_col_combined = 'organization'
        else:
            print("ERROR: No organization column found in combined dataset!")
            sys.exit(1)
        
        # Clean and prepare data
        print("\nPreparing data for merge...")
        
        # Clean key columns in both datasets for merging
        for df, name in [(df_combined, 'combined'), (df_marked, 'marked')]:
            # Clean name
            if 'name' in df.columns:
                df['name_clean'] = df['name'].astype(str).str.strip().str.lower()
                df['name_clean'] = df['name_clean'].replace(['nan', 'none', ''], np.nan)
            
            # Clean position
            if 'position' in df.columns:
                df['position_clean'] = df['position'].astype(str).str.strip().str.lower()
                df['position_clean'] = df['position_clean'].replace(['nan', 'none', ''], np.nan)
            
            # Clean org
            org_col = org_col_combined if name == 'combined' else 'org'
            if org_col in df.columns:
                df['org_clean'] = df[org_col].astype(str).str.strip().str.lower()
                df['org_clean'] = df['org_clean'].replace(['nan', 'none', ''], np.nan)
        
        # Create merge keys
        df_combined['merge_key'] = (
            df_combined['name_clean'].astype(str) + '|' + 
            df_combined['position_clean'].astype(str) + '|' + 
            df_combined['org_clean'].astype(str)
        )
        
        df_marked['merge_key'] = (
            df_marked['name_clean'].astype(str) + '|' + 
            df_marked['position_clean'].astype(str) + '|' + 
            df_marked['org_clean'].astype(str)
        )
        
        # Merge datasets to get year information with reappointed flags
        print("\nMerging datasets...")
        df_merged = df_combined[['merge_key', 'source_year', 'org_clean']].merge(
            df_marked[['merge_key', 'reappointed']],
            on='merge_key',
            how='left'
        )
        
        print(f"Merged dataset: {len(df_merged)} rows")
        print(f"  - Records with reappointed flag: {df_merged['reappointed'].notna().sum()}")
        print(f"  - Reappointments (True): {(df_merged['reappointed'] == True).sum()}")
        
        # Filter for reappointments only
        df_reappointments = df_merged[df_merged['reappointed'] == True].copy()
        print(f"\nReappointment records: {len(df_reappointments)}")
        
        # Count reappointments by organization and year
        print("\nCounting reappointments by organization and year...")
        
        # Group by year and organization
        reappointment_counts = df_reappointments.groupby(['source_year', 'org_clean']).size().reset_index(name='reappointment_count')
        reappointment_counts.columns = ['year', 'org', 'reappointment_count']
        
        # Remove rows with null organizations
        reappointment_counts = reappointment_counts[reappointment_counts['org'].notna()]
        
        # Get year range
        years = sorted(df_merged['source_year'].unique())
        print(f"  - Years covered: {min(years)} to {max(years)}")
        
        # Create a complete grid of all org-year combinations
        all_orgs = sorted(df_merged['org_clean'].dropna().unique())
        org_year_grid = pd.DataFrame(
            [(org, year) for org in all_orgs for year in years],
            columns=['org', 'year']
        )
        
        # Merge with actual counts, filling missing with 0
        reappointment_counts_complete = org_year_grid.merge(
            reappointment_counts,
            on=['org', 'year'],
            how='left'
        ).fillna({'reappointment_count': 0})
        
        reappointment_counts_complete['reappointment_count'] = reappointment_counts_complete['reappointment_count'].astype(int)
        
        # Create pivot table for matrix view
        reappointment_matrix = reappointment_counts_complete.pivot(
            index='org', 
            columns='year', 
            values='reappointment_count'
        ).fillna(0).astype(int)
        
        # Add row totals
        reappointment_matrix['total_reappointments'] = reappointment_matrix.sum(axis=1)
        
        # Sort by total reappointments (descending)
        reappointment_matrix = reappointment_matrix.sort_values('total_reappointments', ascending=False)
        
        # Display top organizations by reappointments
        print(f"\nTop 20 organizations by total reappointments:")
        for i, (org, row) in enumerate(reappointment_matrix.head(20).iterrows()):
            print(f"  {i+1}. {org}: {int(row['total_reappointments'])} reappointments")
        
        # Year-over-year reappointment statistics
        print(f"\nYear-over-year reappointment totals:")
        yearly_totals = reappointment_counts.groupby('year')['reappointment_count'].sum()
        for year in sorted(yearly_totals.index):
            print(f"  - {year}: {yearly_totals[year]} reappointments")
        
        # Organizations with consistent reappointments
        print(f"\nOrganizations with reappointments in multiple years:")
        years_with_reappointments = (reappointment_matrix.iloc[:, :-1] > 0).sum(axis=1)
        consistent_reappointers = reappointment_matrix[years_with_reappointments >= 5]
        print(f"  - Found {len(consistent_reappointers)} organizations with reappointments in 5+ years")
        for org in consistent_reappointers.head(10).index:
            years_count = years_with_reappointments[org]
            total = consistent_reappointers.loc[org, 'total_reappointments']
            print(f"    - {org}: {int(total)} reappointments across {years_count} years")
        
        # Add statistics to long format
        print(f"\nAdding statistics to output...")
        
        # Calculate additional metrics
        org_stats = reappointment_counts_complete.groupby('org').agg({
            'reappointment_count': ['sum', 'mean', 'std', 'max']
        }).round(2)
        org_stats.columns = ['total_reappointments', 'avg_reappointments_per_year', 'std_dev', 'max_in_single_year']
        
        # Count years with reappointments
        years_active = reappointment_counts_complete[reappointment_counts_complete['reappointment_count'] > 0].groupby('org').size()
        years_active.name = 'years_with_reappointments'
        
        # Merge statistics
        reappointment_counts_final = reappointment_counts_complete.merge(
            org_stats,
            left_on='org',
            right_index=True
        ).merge(
            years_active,
            left_on='org',
            right_index=True,
            how='left'
        ).fillna({'years_with_reappointments': 0})
        
        # Add year-specific rankings
        reappointment_counts_final['rank_in_year'] = reappointment_counts_final.groupby('year')['reappointment_count'].rank(
            ascending=False,
            method='dense'
        ).astype(int)
        
        # Sort by organization and year
        reappointment_counts_final = reappointment_counts_final.sort_values(['org', 'year'])
        
        # Summary statistics
        print(f"\n{'='*50}")
        print(f"SUMMARY:")
        print(f"  - Total reappointments identified: {reappointment_counts['reappointment_count'].sum()}")
        print(f"  - Organizations with reappointments: {len(reappointment_counts['org'].unique())}")
        print(f"  - Average reappointments per org per year: {reappointment_counts['reappointment_count'].mean():.2f}")
        print(f"  - Organization with most reappointments: {reappointment_matrix.index[0]} ({int(reappointment_matrix.iloc[0]['total_reappointments'])})")
        
        # Save the results
        reappointment_counts_final.to_csv(output_file, index=False, encoding='utf-8')
        print(f"\nReappointment counts saved to: {output_file}")
        
        # Also save the matrix format
        matrix_file = input_path / 'step5_reappointment_matrix.csv'
        reappointment_matrix.to_csv(matrix_file, encoding='utf-8')
        print(f"Reappointment matrix saved to: {matrix_file}")
        
        return {
            'total_reappointments': reappointment_counts['reappointment_count'].sum(),
            'organizations_with_reappointments': len(reappointment_counts['org'].unique()),
            'output_file': str(output_file),
            'matrix_file': str(matrix_file)
        }
        
    except Exception as e:
        print(f"\nERROR: Failed to process the dataset: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    # Run the reappointment counting process
    summary = count_reappointments_by_org_year()
    print("\nStep 5 completed successfully!")