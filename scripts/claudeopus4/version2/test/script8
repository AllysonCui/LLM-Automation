"""
Step 8: Calculate Annual Reappointment Proportions
This step calculates the proportion of reappointments across all appointments by year
and creates a visualization of the trends.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import sys

def calculate_annual_reappointment_proportions():
    """
    Calculates the proportion of reappointments across all appointments for each year.
    """
    # Define paths
    input_path = Path('steps/claudeopus4/version2/analysis_data')
    rates_file = input_path / 'step6_reappointment_rates.csv'
    output_file = input_path / 'step8_annual_proportions.csv'
    plot_file = input_path / 'step8_annual_reappointment_proportions.png'
    
    # Check if input file exists
    if not rates_file.exists():
        print(f"ERROR: Reappointment rates file {rates_file} does not exist!")
        print("Please run Step 6 first.")
        sys.exit(1)
    
    print(f"Reading reappointment rates from: {rates_file}")
    
    try:
        # Read the reappointment rates data
        df_rates = pd.read_csv(rates_file, encoding='utf-8')
        print(f"Reappointment rates loaded: {len(df_rates)} records")
        
        # Aggregate by year
        print("\nCalculating annual proportions...")
        
        # Sum up appointments and reappointments by year
        annual_stats = df_rates.groupby('year').agg({
            'employee_count': 'sum',
            'reappointment_count': 'sum'
        }).reset_index()
        
        # Calculate proportion
        annual_stats['reappointment_proportion'] = (
            annual_stats['reappointment_count'] / annual_stats['employee_count']
        )
        annual_stats['reappointment_proportion_pct'] = annual_stats['reappointment_proportion'] * 100
        
        # Sort by year
        annual_stats = annual_stats.sort_values('year')
        
        # Display results
        print("\nAnnual reappointment proportions:")
        print("-" * 70)
        print(f"{'Year':<6} {'Total Appointments':<20} {'Reappointments':<15} {'Proportion':<12}")
        print("-" * 70)
        
        for _, row in annual_stats.iterrows():
            print(f"{int(row['year']):<6} {int(row['employee_count']):<20} "
                  f"{int(row['reappointment_count']):<15} {row['reappointment_proportion_pct']:>6.1f}%")
        
        # Calculate year-over-year changes
        annual_stats['yoy_change_pct'] = annual_stats['reappointment_proportion_pct'].pct_change() * 100
        annual_stats['yoy_change_pp'] = annual_stats['reappointment_proportion_pct'].diff()
        
        print("\nYear-over-year changes:")
        print("-" * 50)
        print(f"{'Year':<6} {'Proportion':<12} {'Change (pp)':<15} {'Change (%)':<12}")
        print("-" * 50)
        
        for _, row in annual_stats[1:].iterrows():  # Skip first year (no previous year)
            change_pp = row['yoy_change_pp']
            change_pct = row['yoy_change_pct']
            print(f"{int(row['year']):<6} {row['reappointment_proportion_pct']:>6.1f}%      "
                  f"{change_pp:>+6.1f}pp        {change_pct:>+6.1f}%")
        
        # Statistical analysis
        print("\n" + "=" * 50)
        print("STATISTICAL ANALYSIS:")
        
        # Summary statistics
        print(f"\nSummary statistics:")
        print(f"  - Average annual proportion: {annual_stats['reappointment_proportion_pct'].mean():.1f}%")
        print(f"  - Median annual proportion: {annual_stats['reappointment_proportion_pct'].median():.1f}%")
        print(f"  - Standard deviation: {annual_stats['reappointment_proportion_pct'].std():.1f}pp")
        print(f"  - Range: {annual_stats['reappointment_proportion_pct'].min():.1f}% - "
              f"{annual_stats['reappointment_proportion_pct'].max():.1f}%")
        
        # Trend analysis
        years = annual_stats['year'].values
        proportions = annual_stats['reappointment_proportion_pct'].values
        
        from scipy import stats
        slope, intercept, r_value, p_value, std_err = stats.linregress(years, proportions)
        
        print(f"\nTrend analysis (linear regression):")
        print(f"  - Slope: {slope:.3f} percentage points per year")
        print(f"  - R-squared: {r_value**2:.3f}")
        print(f"  - P-value: {p_value:.3f}")
        
        if p_value < 0.05:
            if slope > 0:
                print(f"  - Trend: INCREASING (statistically significant)")
                print(f"  - At this rate, proportion increases by {slope*10:.1f}pp per decade")
            else:
                print(f"  - Trend: DECREASING (statistically significant)")
                print(f"  - At this rate, proportion decreases by {abs(slope*10):.1f}pp per decade")
        else:
            print(f"  - Trend: No statistically significant trend detected")
        
        # Identify notable years
        print(f"\nNotable years:")
        max_year = annual_stats.loc[annual_stats['reappointment_proportion_pct'].idxmax()]
        min_year = annual_stats.loc[annual_stats['reappointment_proportion_pct'].idxmin()]
        print(f"  - Highest proportion: {max_year['year']:.0f} ({max_year['reappointment_proportion_pct']:.1f}%)")
        print(f"  - Lowest proportion: {min_year['year']:.0f} ({min_year['reappointment_proportion_pct']:.1f}%)")
        
        # Create visualization
        print("\nCreating visualization...")
        
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10), gridspec_kw={'height_ratios': [3, 1]})
        
        # Top plot - proportion over time
        ax1.plot(annual_stats['year'], annual_stats['reappointment_proportion_pct'], 
                'o-', color='darkblue', linewidth=2, markersize=8, label='Actual')
        
        # Add trend line
        trend_line = slope * years + intercept
        ax1.plot(years, trend_line, 'r--', linewidth=2, 
                label=f'Trend (slope: {slope:.3f}%/year, p={p_value:.3f})')
        
        # Add confidence interval
        from scipy import stats as scipy_stats
        predict_mean_se = np.sqrt(std_err**2 * (1/len(years) + (years - years.mean())**2 / ((years - years.mean())**2).sum()))
        margin = predict_mean_se * scipy_stats.t.ppf(0.975, len(years)-2)
        ax1.fill_between(years, trend_line - margin, trend_line + margin, 
                        color='red', alpha=0.2, label='95% Confidence Interval')
        
        # Formatting for top plot
        ax1.set_xlabel('Year', fontsize=12)
        ax1.set_ylabel('Reappointment Proportion (%)', fontsize=12)
        ax1.set_title('Annual Proportion of Reappointments Across All Government Appointments\n' + 
                     f'New Brunswick ({years[0]:.0f}-{years[-1]:.0f})', 
                     fontsize=14, fontweight='bold')
        ax1.grid(True, alpha=0.3)
        ax1.legend()
        
        # Add data labels
        for _, row in annual_stats.iterrows():
            ax1.annotate(f"{row['reappointment_proportion_pct']:.1f}%", 
                        (row['year'], row['reappointment_proportion_pct']),
                        textcoords="offset points", xytext=(0,10), ha='center', fontsize=8)
        
        # Bottom plot - year-over-year changes
        colors = ['green' if x > 0 else 'red' for x in annual_stats['yoy_change_pp'].fillna(0)]
        ax2.bar(annual_stats['year'][1:], annual_stats['yoy_change_pp'][1:], 
               color=colors[1:], alpha=0.7, edgecolor='black')
        
        # Formatting for bottom plot
        ax2.set_xlabel('Year', fontsize=12)
        ax2.set_ylabel('YoY Change (pp)', fontsize=12)
        ax2.set_title('Year-over-Year Change in Reappointment Proportion', fontsize=12)
        ax2.grid(True, axis='y', alpha=0.3)
        ax2.axhline(y=0, color='black', linewidth=0.5)
        
        # Adjust layout
        plt.tight_layout()
        
        # Save plot
        plt.savefig(plot_file, dpi=300, bbox_inches='tight')
        print(f"Visualization saved to: {plot_file}")
        plt.close()
        
        # Add additional analysis columns
        annual_stats['trend_slope'] = slope
        annual_stats['trend_intercept'] = intercept
        annual_stats['trend_r_squared'] = r_value**2
        annual_stats['trend_p_value'] = p_value
        annual_stats['trend_significant'] = p_value < 0.05
        
        # Calculate 3-year moving average
        annual_stats['proportion_3yr_ma'] = annual_stats['reappointment_proportion_pct'].rolling(
            window=3, center=True).mean()
        
        # Summary
        print(f"\n{'='*50}")
        print(f"SUMMARY:")
        print(f"  - Years analyzed: {len(annual_stats)}")
        print(f"  - Total appointments: {annual_stats['employee_count'].sum():,}")
        print(f"  - Total reappointments: {annual_stats['reappointment_count'].sum():,}")
        print(f"  - Overall proportion: {annual_stats['reappointment_count'].sum() / annual_stats['employee_count'].sum() * 100:.1f}%")
        
        # Answer research question
        print(f"\nRESEARCH QUESTION INSIGHTS:")
        if p_value < 0.05:
            if slope > 0:
                print(f"  - The reappointment trend is INCREASING over the past 12 years")
                print(f"  - Reappointments are growing by {slope:.2f} percentage points per year")
            else:
                print(f"  - The reappointment trend is DECREASING over the past 12 years")
                print(f"  - Reappointments are declining by {abs(slope):.2f} percentage points per year")
        else:
            print(f"  - No significant trend detected in reappointment rates over the past 12 years")
            print(f"  - Rates have remained relatively stable")
        
        # Save results
        annual_stats.to_csv(output_file, index=False, encoding='utf-8')
        print(f"\nAnnual proportions saved to: {output_file}")
        
        return {
            'years_analyzed': len(annual_stats),
            'avg_proportion': annual_stats['reappointment_proportion_pct'].mean(),
            'trend_slope': slope,
            'trend_significant': p_value < 0.05,
            'total_appointments': annual_stats['employee_count'].sum(),
            'total_reappointments': annual_stats['reappointment_count'].sum(),
            'output_file': str(output_file),
            'plot_file': str(plot_file)
        }
        
    except Exception as e:
        print(f"\nERROR: Failed to calculate annual proportions: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    # Run the annual proportion analysis
    summary = calculate_annual_reappointment_proportions()
    print("\nStep 8 completed successfully!")