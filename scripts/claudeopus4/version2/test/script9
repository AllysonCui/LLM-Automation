"""
Step 9: Simple Linear Regression - Coefficient Analysis
This step fits a linear regression on annual data and determines if the coefficient is positive or negative.
"""

import pandas as pd
import numpy as np
from scipy import stats
from pathlib import Path
import sys

def simple_regression_analysis():
    """
    Performs simple linear regression to determine coefficient direction.
    """
    # Define paths
    input_path = Path('steps/claudeopus4/version2/analysis_data')
    input_file = input_path / 'step8_annual_proportions.csv'
    output_file = input_path / 'step9_regression_results.txt'
    
    # Check if input file exists
    if not input_file.exists():
        print(f"ERROR: Annual proportions file {input_file} does not exist!")
        print("Please run Step 8 first.")
        sys.exit(1)
    
    print(f"Reading annual proportions from: {input_file}")
    
    try:
        # Read the annual proportions
        df_annual = pd.read_csv(input_file, encoding='utf-8')
        print(f"Annual data loaded: {len(df_annual)} years")
        
        # Extract year and proportion data
        X = df_annual['year'].values
        y = df_annual['reappointment_proportion_pct'].values
        
        print(f"\nData points:")
        for year, prop in zip(X, y):
            print(f"  {int(year)}: {prop:.1f}%")
        
        # Fit linear regression
        print("\n" + "="*50)
        print("LINEAR REGRESSION ANALYSIS")
        print("="*50)
        
        slope, intercept, r_value, p_value, std_err = stats.linregress(X, y)
        
        # Primary result
        print(f"\nREGRESSION COEFFICIENT (SLOPE): {slope:.6f}")
        print(f"DIRECTION: {'POSITIVE' if slope > 0 else 'NEGATIVE'}")
        
        # Interpretation
        print(f"\nINTERPRETATION:")
        if slope > 0:
            print(f"  - The coefficient is POSITIVE (+{slope:.3f})")
            print(f"  - Reappointment proportions are INCREASING over time")
            print(f"  - Rate of increase: {slope:.2f} percentage points per year")
        else:
            print(f"  - The coefficient is NEGATIVE ({slope:.3f})")
            print(f"  - Reappointment proportions are DECREASING over time")
            print(f"  - Rate of decrease: {abs(slope):.2f} percentage points per year")
        
        # Statistical significance
        print(f"\nSTATISTICAL SIGNIFICANCE:")
        print(f"  - p-value: {p_value:.3f}")
        if p_value < 0.05:
            print(f"  - Result: STATISTICALLY SIGNIFICANT (p < 0.05)")
            print(f"  - Conclusion: The {'increasing' if slope > 0 else 'decreasing'} trend is real")
        else:
            print(f"  - Result: NOT statistically significant (p >= 0.05)")
            print(f"  - Conclusion: Cannot confirm a real trend; changes may be random")
        
        # Model fit
        print(f"\nMODEL FIT:")
        print(f"  - R-squared: {r_value**2:.3f} ({r_value**2*100:.1f}% of variance explained)")
        print(f"  - Regression equation: y = {intercept:.2f} + {slope:.3f} * year")
        
        # Save results
        results = []
        results.append("LINEAR REGRESSION RESULTS")
        results.append("="*40)
        results.append(f"Coefficient (slope): {slope:.6f}")
        results.append(f"Direction: {'POSITIVE' if slope > 0 else 'NEGATIVE'}")
        results.append(f"p-value: {p_value:.6f}")
        results.append(f"R-squared: {r_value**2:.6f}")
        results.append(f"Significant: {'YES' if p_value < 0.05 else 'NO'}")
        results.append("")
        results.append("ANSWER: The regression coefficient is " + 
                      ('POSITIVE' if slope > 0 else 'NEGATIVE'))
        
        with open(output_file, 'w') as f:
            f.write('\n'.join(results))
        
        print(f"\nResults saved to: {output_file}")
        
        # Final answer
        print("\n" + "="*50)
        print("FINAL ANSWER:")
        print("="*50)
        print(f"The regression coefficient is {'POSITIVE' if slope > 0 else 'NEGATIVE'} ({slope:.6f})")
        
        return {
            'coefficient': slope,
            'direction': 'POSITIVE' if slope > 0 else 'NEGATIVE',
            'significant': p_value < 0.05,
            'p_value': p_value
        }
        
    except Exception as e:
        print(f"\nERROR: Failed to perform regression: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    # Run the analysis
    result = simple_regression_analysis()
    print(f"\nStep 9 completed! Coefficient is {result['direction']}.")