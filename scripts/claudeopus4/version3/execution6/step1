#!/usr/bin/env python3
"""
New Brunswick Government Reappointment Analysis
Research Question: Which government branch in New Brunswick most frequently 
reappoints past appointees, and is this trend increasing or declining over 
the past 12 years?

This script analyzes appointment data from 2013-2024 to identify reappointment
patterns across different government organizations.
"""

import pandas as pd
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
from pathlib import Path
import warnings
import sys

# Suppress warnings for cleaner output
warnings.filterwarnings('ignore')

# Define paths
RAW_DATA_PATH = Path("raw_data")
OUTPUT_PATH = Path("scripts/claudeopus4/version3/execution6/analysis_data")

# Create output directory if it doesn't exist
OUTPUT_PATH.mkdir(parents=True, exist_ok=True)

def validate_dataframe(df, step_name, required_columns=None):
    """Validate dataframe and print statistics."""
    print(f"\n{step_name} Validation:")
    print(f"  - Shape: {df.shape}")
    print(f"  - Columns: {list(df.columns)}")
    if required_columns:
        missing = set(required_columns) - set(df.columns)
        if missing:
            print(f"  - WARNING: Missing columns: {missing}")
    print(f"  - Null values: {df.isnull().sum().sum()}")
    return df

def step1_combine_datasets():
    """Step 1: Combine the 12 raw datasets."""
    print("=" * 80)
    print("STEP 1: Combining datasets from 2013-2024")
    print("=" * 80)
    
    combined_data = []
    years_found = []
    
    for year in range(2013, 2025):
        file_path = RAW_DATA_PATH / f"appointments_{year}.csv"
        
        try:
            # Read CSV with flexible parsing
            df = pd.read_csv(file_path, encoding='utf-8', low_memory=False)
            
            # Add year column
            df['year'] = year
            
            # Standardize column names (handle 'org' vs 'organization')
            if 'organization' in df.columns and 'org' not in df.columns:
                df['org'] = df['organization']
            
            combined_data.append(df)
            years_found.append(year)
            print(f"  ✓ Loaded {year}: {len(df)} records")
            
        except FileNotFoundError:
            print(f"  ✗ File not found: {file_path}")
        except Exception as e:
            print(f"  ✗ Error loading {year}: {str(e)}")
    
    if not combined_data:
        print("ERROR: No data files found!")
        sys.exit(1)
    
    # Combine all dataframes
    combined_df = pd.concat(combined_data, ignore_index=True)
    
    # Save combined data
    output_file = OUTPUT_PATH / "step1_combined_appointments.csv"
    combined_df.to_csv(output_file, index=False)
    print(f"\n✓ Combined data saved to: {output_file}")
    
    validate_dataframe(combined_df, "Combined Dataset")
    print(f"Years included: {sorted(years_found)}")
    
    return combined_df

def step2_extract_key_columns(df):
    """Step 2: Extract and retain key columns."""
    print("\n" + "=" * 80)
    print("STEP 2: Extracting key columns")
    print("=" * 80)
    
    # Define required columns
    required_columns = ['reappointed', 'name', 'position', 'org', 'year']
    
    # Check which columns exist
    existing_columns = [col for col in required_columns if col in df.columns]
    missing_columns = set(required_columns) - set(existing_columns)
    
    if missing_columns:
        print(f"WARNING: Missing columns: {missing_columns}")
        # Create missing columns with default values
        for col in missing_columns:
            if col == 'reappointed':
                df[col] = False
            else:
                df[col] = 'Unknown'
    
    # Extract key columns
    key_df = df[required_columns].copy()
    
    # Clean data
    key_df['name'] = key_df['name'].astype(str).str.strip().str.title()
    key_df['position'] = key_df['position'].astype(str).str.strip()
    key_df['org'] = key_df['org'].astype(str).str.strip()
    
    # Handle reappointed column - convert to boolean
    if key_df['reappointed'].dtype == 'object':
        key_df['reappointed'] = key_df['reappointed'].astype(str).str.lower().isin(['true', 'yes', '1'])
    
    # Remove rows with missing critical data
    initial_count = len(key_df)
    key_df = key_df.dropna(subset=['name', 'position', 'org'])
    dropped_count = initial_count - len(key_df)
    
    if dropped_count > 0:
        print(f"  - Dropped {dropped_count} rows with missing name/position/org")
    
    # Save key columns data
    output_file = OUTPUT_PATH / "step2_key_columns_data.csv"
    key_df.to_csv(output_file, index=False)
    print(f"\n✓ Key columns data saved to: {output_file}")
    
    validate_dataframe(key_df, "Key Columns Dataset", required_columns)
    
    return key_df

def step3_mark_repeats(df):
    """Step 3: Mark reappointed as true for repeated name-position-org combinations."""
    print("\n" + "=" * 80)
    print("STEP 3: Marking repeated appointments")
    print("=" * 80)
    
    # Sort by year to ensure chronological order
    df = df.sort_values(['year', 'name', 'position', 'org']).reset_index(drop=True)
    
    # Create a composite key for tracking unique appointments
    df['appointment_key'] = df['name'] + '|' + df['position'] + '|' + df['org']
    
    # Initialize new reappointed column
    df['reappointed_calculated'] = False
    
    # Track first appearances
    seen_appointments = {}
    reappointment_count = 0
    
    for idx, row in df.iterrows():
        key = row['appointment_key']
        
        if key in seen_appointments:
            # This is a reappointment
            df.at[idx, 'reappointed_calculated'] = True
            reappointment_count += 1
        else:
            # First appearance
            seen_appointments[key] = row['year']
    
    # Keep original reappointed column for comparison
    df['reappointed_original'] = df['reappointed']
    df['reappointed'] = df['reappointed_calculated']
    
    # Drop the temporary key column
    df = df.drop(columns=['appointment_key', 'reappointed_calculated'])
    
    # Save marked data
    output_file = OUTPUT_PATH / "step3_repeats_marked.csv"
    df.to_csv(output_file, index=False)
    print(f"\n✓ Repeats marked data saved to: {output_file}")
    
    print(f"\nReappointment Statistics:")
    print(f"  - Total appointments: {len(df)}")
    print(f"  - Reappointments identified: {reappointment_count}")
    print(f"  - Reappointment rate: {reappointment_count/len(df)*100:.2f}%")
    
    validate_dataframe(df, "Repeats Marked Dataset")
    
    return df

def step4_count_employees(df):
    """Step 4: Count total number of employees for each org in each year."""
    print("\n" + "=" * 80)
    print("STEP 4: Counting employees by organization and year")
    print("=" * 80)
    
    # Group by org and year to count total appointments
    employee_counts = df.groupby(['org', 'year']).size().reset_index(name='total_employees')
    
    # Sort by organization and year
    employee_counts = employee_counts.sort_values(['org', 'year'])
    
    # Save employee counts
    output_file = OUTPUT_PATH / "step4_employee_counts.csv"
    employee_counts.to_csv(output_file, index=False)
    print(f"\n✓ Appointment counts saved to: {output_file}")
    
    # Print summary statistics
    print(f"\nAppointment Count Statistics:")
    print(f"  - Total unique organizations: {employee_counts['org'].nunique()}")
    print(f"  - Average appointments per org-year: {employee_counts['total_employees'].mean():.2f}")
    print(f"  - Max appointments in a single org-year: {employee_counts['total_employees'].max()}")
    
    # Top 5 organizations by total appointments
    top_orgs = employee_counts.groupby('org')['total_employees'].sum().nlargest(5)
    print(f"\nTop 5 Organizations by Total Appointments:")
    for org, count in top_orgs.items():
        print(f"  - {org}: {count}")
    
    validate_dataframe(employee_counts, "Appointment Counts")
    
    return employee_counts

def step5_count_reappointments(df):
    """Step 5: Count reappointments for each org in each year."""
    print("\n" + "=" * 80)
    print("STEP 5: Counting reappointments by organization and year")
    print("=" * 80)
    
    # Filter for reappointments only
    reappointed_df = df[df['reappointed'] == True]
    
    # Group by org and year to count reappointments
    reappointment_counts = reappointed_df.groupby(['org', 'year']).size().reset_index(name='reappointment_count')
    
    # Sort by organization and year
    reappointment_counts = reappointment_counts.sort_values(['org', 'year'])
    
    # Save reappointment counts
    output_file = OUTPUT_PATH / "step5_reappointment_counts.csv"
    reappointment_counts.to_csv(output_file, index=False)
    print(f"\n✓ Reappointment counts saved to: {output_file}")
    
    # Print summary statistics
    print(f"\nReappointment Count Statistics:")
    print(f"  - Organizations with reappointments: {reappointment_counts['org'].nunique()}")
    print(f"  - Total reappointments: {reappointment_counts['reappointment_count'].sum()}")
    print(f"  - Average reappointments per org-year: {reappointment_counts['reappointment_count'].mean():.2f}")
    
    # Top 5 organizations by total reappointments
    top_reappoint_orgs = reappointment_counts.groupby('org')['reappointment_count'].sum().nlargest(5)
    print(f"\nTop 5 Organizations by Total Reappointments:")
    for org, count in top_reappoint_orgs.items():
        print(f"  - {org}: {count}")
    
    validate_dataframe(reappointment_counts, "Reappointment Counts")
    
    return reappointment_counts

def step6_calculate_rates(employee_counts, reappointment_counts):
    """Step 6: Calculate reappointment rates for each org-year pair."""
    print("\n" + "=" * 80)
    print("STEP 6: Calculating reappointment rates")
    print("=" * 80)
    
    # Merge employee counts with reappointment counts
    rates_df = employee_counts.merge(
        reappointment_counts, 
        on=['org', 'year'], 
        how='left'
    )
    
    # Fill NaN values (organizations with no reappointments) with 0
    rates_df['reappointment_count'] = rates_df['reappointment_count'].fillna(0)
    
    # Calculate reappointment rate
    rates_df['reappointment_rate'] = (rates_df['reappointment_count'] / rates_df['total_employees']) * 100
    
    # Sort by rate descending
    rates_df = rates_df.sort_values('reappointment_rate', ascending=False)
    
    # Save reappointment rates
    output_file = OUTPUT_PATH / "step6_reappointment_rates.csv"
    rates_df.to_csv(output_file, index=False)
    print(f"\n✓ Reappointment rates saved to: {output_file}")
    
    # Print summary statistics
    print(f"\nReappointment Rate Statistics:")
    print(f"  - Average reappointment rate: {rates_df['reappointment_rate'].mean():.2f}%")
    print(f"  - Median reappointment rate: {rates_df['reappointment_rate'].median():.2f}%")
    print(f"  - Max reappointment rate: {rates_df['reappointment_rate'].max():.2f}%")
    
    # Top 10 org-year combinations by reappointment rate (with minimum threshold)
    significant_rates = rates_df[rates_df['total_employees'] >= 5].nlargest(10, 'reappointment_rate')
    print(f"\nTop 10 Org-Year Combinations by Reappointment Rate (min 5 employees):")
    for _, row in significant_rates.iterrows():
        print(f"  - {row['org']} ({row['year']}): {row['reappointment_rate']:.1f}% "
              f"({int(row['reappointment_count'])}/{int(row['total_employees'])})")
    
    validate_dataframe(rates_df, "Reappointment Rates")
    
    return rates_df

def step7_yearly_max_rates(rates_df):
    """Step 7: Identify organization with highest reappointment rate each year."""
    print("\n" + "=" * 80)
    print("STEP 7: Identifying yearly maximum reappointment rates")
    print("=" * 80)
    
    # Filter for organizations with meaningful sample size (at least 5 employees)
    significant_df = rates_df[rates_df['total_employees'] >= 5].copy()
    
    # Get the organization with highest rate for each year
    yearly_max = []
    
    for year in sorted(significant_df['year'].unique()):
        year_data = significant_df[significant_df['year'] == year]
        if not year_data.empty:
            max_row = year_data.nlargest(1, 'reappointment_rate').iloc[0]
            yearly_max.append({
                'year': year,
                'org': max_row['org'],
                'reappointment_rate': max_row['reappointment_rate'],
                'reappointment_count': max_row['reappointment_count'],
                'total_employees': max_row['total_employees']
            })
    
    yearly_max_df = pd.DataFrame(yearly_max)
    
    # Save yearly maximum rates
    output_file = OUTPUT_PATH / "step7_yearly_max_rates.csv"
    yearly_max_df.to_csv(output_file, index=False)
    print(f"\n✓ Yearly maximum rates saved to: {output_file}")
    
    # Print yearly leaders
    print(f"\nOrganizations with Highest Reappointment Rates by Year:")
    for _, row in yearly_max_df.iterrows():
        print(f"  - {int(row['year'])}: {row['org']} - {row['reappointment_rate']:.1f}% "
              f"({int(row['reappointment_count'])}/{int(row['total_employees'])})")
    
    # Identify most frequent leader
    org_leadership_counts = yearly_max_df['org'].value_counts()
    print(f"\nMost Frequent Leaders:")
    for org, count in org_leadership_counts.head(3).items():
        print(f"  - {org}: Led {count} years")
    
    # Create visualization
    plt.figure(figsize=(12, 8))
    
    # Plot bars for each year
    years = yearly_max_df['year'].values
    rates = yearly_max_df['reappointment_rate'].values
    orgs = yearly_max_df['org'].values
    
    bars = plt.bar(years, rates, color='steelblue', alpha=0.8)
    
    # Add organization labels on bars
    for i, (bar, org) in enumerate(zip(bars, orgs)):
        height = bar.get_height()
        # Truncate long organization names
        label = org[:30] + '...' if len(org) > 30 else org
        plt.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                label, ha='center', va='bottom', rotation=45, fontsize=8)
    
    plt.xlabel('Year', fontsize=12)
    plt.ylabel('Reappointment Rate (%)', fontsize=12)
    plt.title('Highest Organizational Reappointment Rates by Year\n(Organizations with ≥5 employees)', 
              fontsize=14, pad=20)
    plt.xticks(years)
    plt.ylim(0, max(rates) * 1.3)  # Add space for labels
    plt.grid(axis='y', alpha=0.3)
    
    plt.tight_layout()
    plot_file = OUTPUT_PATH / "step7_yearly_max_reappointment_rates.png"
    plt.savefig(plot_file, dpi=300, bbox_inches='tight')
    plt.close()
    print(f"\n✓ Yearly max rates visualization saved to: {plot_file}")
    
    validate_dataframe(yearly_max_df, "Yearly Maximum Rates")
    
    return yearly_max_df

def step8_annual_proportions(df):
    """Step 8: Compute government-wide reappointment proportion for each year."""
    print("\n" + "=" * 80)
    print("STEP 8: Computing annual government-wide reappointment proportions")
    print("=" * 80)
    
    # Calculate annual statistics
    annual_stats = df.groupby('year').agg({
        'reappointed': ['sum', 'count']
    }).reset_index()
    
    # Flatten column names
    annual_stats.columns = ['year', 'reappointments', 'total_appointments']
    
    # Calculate proportion
    annual_stats['reappointment_proportion'] = (
        annual_stats['reappointments'] / annual_stats['total_appointments'] * 100
    )
    
    # Save annual proportions
    output_file = OUTPUT_PATH / "step8_annual_proportions.csv"
    annual_stats.to_csv(output_file, index=False)
    print(f"\n✓ Annual proportions saved to: {output_file}")
    
    # Print annual statistics
    print(f"\nAnnual Reappointment Proportions:")
    for _, row in annual_stats.iterrows():
        print(f"  - {int(row['year'])}: {row['reappointment_proportion']:.2f}% "
              f"({int(row['reappointments'])}/{int(row['total_appointments'])})")
    
    # Create visualization
    plt.figure(figsize=(12, 8))
    
    years = annual_stats['year'].values
    proportions = annual_stats['reappointment_proportion'].values
    
    # Plot line with markers
    plt.plot(years, proportions, 'o-', linewidth=2, markersize=8, color='darkblue')
    
    # Add value labels
    for x, y in zip(years, proportions):
        plt.annotate(f'{y:.1f}%', (x, y), textcoords="offset points", 
                    xytext=(0,10), ha='center', fontsize=9)
    
    # Add trend line
    z = np.polyfit(years, proportions, 1)
    p = np.poly1d(z)
    plt.plot(years, p(years), "--", color='red', alpha=0.8, linewidth=2, 
             label=f'Trend: {z[0]:.3f}x + {z[1]:.1f}')
    
    plt.xlabel('Year', fontsize=12)
    plt.ylabel('Reappointment Proportion (%)', fontsize=12)
    plt.title('Government-wide Annual Reappointment Proportions\nNew Brunswick (2013-2024)', 
              fontsize=14, pad=20)
    plt.xticks(years)
    plt.grid(True, alpha=0.3)
    plt.legend(loc='best')
    
    # Add min and max lines
    plt.axhline(y=proportions.min(), color='gray', linestyle=':', alpha=0.5)
    plt.axhline(y=proportions.max(), color='gray', linestyle=':', alpha=0.5)
    
    plt.tight_layout()
    plot_file = OUTPUT_PATH / "step8_annual_reappointment_proportions.png"
    plt.savefig(plot_file, dpi=300, bbox_inches='tight')
    plt.close()
    print(f"\n✓ Annual proportions visualization saved to: {plot_file}")
    
    validate_dataframe(annual_stats, "Annual Proportions")
    
    return annual_stats

def step9_regression_analysis(annual_stats):
    """Step 9: Run linear regression on annual reappointment proportions."""
    print("\n" + "=" * 80)
    print("STEP 9: Linear regression analysis of reappointment trends")
    print("=" * 80)
    
    # Prepare data for regression
    years = annual_stats['year'].values
    proportions = annual_stats['reappointment_proportion'].values
    
    # Perform linear regression
    slope, intercept, r_value, p_value, std_err = stats.linregress(years, proportions)
    
    # Calculate additional statistics
    n = len(years)
    t_statistic = slope / std_err
    df = n - 2  # degrees of freedom
    confidence_level = 0.95
    t_critical = stats.t.ppf((1 + confidence_level) / 2, df)
    margin_of_error = t_critical * std_err
    ci_lower = slope - margin_of_error
    ci_upper = slope + margin_of_error
    
    # Prepare regression results
    results = f"""
LINEAR REGRESSION ANALYSIS RESULTS
==================================

Research Question: Is the reappointment trend increasing or declining?

DATA SUMMARY:
- Years analyzed: {years.min()} - {years.max()}
- Number of years: {n}
- Mean reappointment proportion: {proportions.mean():.2f}%
- Standard deviation: {proportions.std():.2f}%

REGRESSION RESULTS:
- Slope (annual change): {slope:.4f}% per year
- Intercept: {intercept:.2f}%
- R-squared: {r_value**2:.4f}
- Correlation coefficient (r): {r_value:.4f}

STATISTICAL SIGNIFICANCE:
- p-value: {p_value:.6f}
- Standard error: {std_err:.4f}
- t-statistic: {t_statistic:.4f}
- Degrees of freedom: {df}
- 95% Confidence Interval for slope: [{ci_lower:.4f}, {ci_upper:.4f}]

INTERPRETATION:
"""
    
    # Add interpretation
    if p_value < 0.05:
        if slope > 0:
            results += f"""
The reappointment trend is SIGNIFICANTLY INCREASING.
- The proportion of reappointments increases by approximately {slope:.3f}% each year.
- This trend is statistically significant (p = {p_value:.4f} < 0.05).
- Over the 12-year period, reappointments increased by approximately {slope * 12:.1f} percentage points.
"""
        else:
            results += f"""
The reappointment trend is SIGNIFICANTLY DECREASING.
- The proportion of reappointments decreases by approximately {abs(slope):.3f}% each year.
- This trend is statistically significant (p = {p_value:.4f} < 0.05).
- Over the 12-year period, reappointments decreased by approximately {abs(slope * 12):.1f} percentage points.
"""
    else:
        results += f"""
The reappointment trend shows NO SIGNIFICANT CHANGE.
- The slope is {slope:.3f}% per year, but this is not statistically significant (p = {p_value:.4f} > 0.05).
- There is insufficient evidence to conclude that reappointment rates are changing over time.
"""
    
    # Add model quality assessment
    results += f"""
MODEL QUALITY:
- R-squared value of {r_value**2:.3f} indicates that {r_value**2*100:.1f}% of the variance in reappointment 
  proportions can be explained by the year.
"""
    
    if r_value**2 > 0.7:
        results += "- This represents a STRONG linear relationship.\n"
    elif r_value**2 > 0.3:
        results += "- This represents a MODERATE linear relationship.\n"
    else:
        results += "- This represents a WEAK linear relationship.\n"
    
    # Add prediction
    next_year = years.max() + 1
    predicted_proportion = slope * next_year + intercept
    results += f"""
PREDICTION:
- Based on the linear trend, the predicted reappointment proportion for {next_year} is {predicted_proportion:.2f}%.
- Note: This assumes the linear trend continues, which may not reflect actual future policy changes.

ORGANIZATIONS WITH HIGHEST REAPPOINTMENT RATES:
Based on the analysis, organizations that most frequently had the highest reappointment rates include:
[This information is available in the step7_yearly_max_rates.csv file]
"""
    
    # Save regression results
    output_file = OUTPUT_PATH / "step9_regression_results.txt"
    with open(output_file, 'w') as f:
        f.write(results)
    print(f"\n✓ Regression results saved to: {output_file}")
    
    # Print results to console
    print(results)
    
    return {
        'slope': slope,
        'intercept': intercept,
        'r_value': r_value,
        'p_value': p_value,
        'std_err': std_err,
        'r_squared': r_value**2
    }

def main():
    """Main execution function."""
    print("\n" + "=" * 80)
    print("NEW BRUNSWICK GOVERNMENT REAPPOINTMENT ANALYSIS")
    print("Analyzing appointment data from 2013-2024")
    print("=" * 80)
    
    try:
        # Execute all steps
        print("\nStarting analysis pipeline...")
        
        # Step 1: Combine datasets
        combined_df = step1_combine_datasets()
        
        # Step 2: Extract key columns
        key_df = step2_extract_key_columns(combined_df)
        
        # Step 3: Mark repeats
        marked_df = step3_mark_repeats(key_df)
        
        # Step 4: Count employees
        employee_counts = step4_count_employees(marked_df)
        
        # Step 5: Count reappointments
        reappointment_counts = step5_count_reappointments(marked_df)
        
        # Step 6: Calculate rates
        rates_df = step6_calculate_rates(employee_counts, reappointment_counts)
        
        # Step 7: Yearly maximum rates
        yearly_max_df = step7_yearly_max_rates(rates_df)
        
        # Step 8: Annual proportions
        annual_stats = step8_annual_proportions(marked_df)
        
        # Step 9: Regression analysis
        regression_results = step9_regression_analysis(annual_stats)
        
        print("\n" + "=" * 80)
        print("ANALYSIS COMPLETE!")
        print("=" * 80)
        print(f"\nAll results have been saved to: {OUTPUT_PATH}")
        print("\nKey findings:")
        print(f"- Total appointments analyzed: {len(marked_df):,}")
        print(f"- Total reappointments identified: {marked_df['reappointed'].sum():,}")
        print(f"- Overall reappointment rate: {marked_df['reappointed'].mean()*100:.2f}%")
        print(f"- Trend direction: {'Increasing' if regression_results['slope'] > 0 else 'Decreasing'}")
        print(f"- Statistical significance: {'Yes' if regression_results['p_value'] < 0.05 else 'No'}")
        
    except Exception as e:
        print(f"\nERROR: An unexpected error occurred: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()