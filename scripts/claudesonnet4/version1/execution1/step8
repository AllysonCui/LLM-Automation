#!/usr/bin/env python3

"""
New Brunswick Government Appointments Annual Reappointment Proportions
Calculates government-wide reappointment proportions for each year (2013-2024).
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt

def load_reappointment_data():
    """
    Load the dataset from step 3 with reappointment flags.
    
    Returns:
        pd.DataFrame: Dataset with reappointment flags
    """
    
    # Define file path
    analysis_data_dir = Path("scripts/claudesonnet4/version1/execution1/analysis_data")
    input_file = analysis_data_dir / "step3_repeats_marked.csv"
    
    # Check if input file exists
    if not input_file.exists():
        raise FileNotFoundError(f"Reappointment data file not found: {input_file}")
    
    print("LOADING REAPPOINTMENT DATA")
    print("=" * 30)
    
    # Load the dataset
    print(f"Loading data from: {input_file.name}")
    try:
        df = pd.read_csv(input_file)
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
    except Exception as e:
        raise Exception(f"Error loading dataset: {str(e)}")
    
    # Validate required columns
    required_cols = ['year', 'reappointed']
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        raise ValueError(f"Missing required columns: {missing_cols}")
    
    print(f"✓ Required columns present: {required_cols}")
    
    # Data validation and preprocessing
    print(f"\nData validation and preprocessing...")
    
    # Convert year to numeric
    df['year'] = pd.to_numeric(df['year'], errors='coerce')
    
    # Remove rows with missing years
    year_nulls = df['year'].isnull().sum()
    if year_nulls > 0:
        print(f"⚠ Warning: Removing {year_nulls} rows with missing year data")
        df = df.dropna(subset=['year'])
    
    # Convert year to integer
    df['year'] = df['year'].astype(int)
    
    # Validate reappointed column
    if df['reappointed'].dtype != bool:
        print(f"Converting reappointed column to boolean...")
        
        def convert_to_bool(val):
            if pd.isna(val):
                return False
            if isinstance(val, bool):
                return val
            val_str = str(val).lower().strip()
            return val_str in ['true', 'yes', '1', 'y', '1.0']
        
        df['reappointed'] = df['reappointed'].apply(convert_to_bool)
    
    # Show year range and data distribution
    year_range = (df['year'].min(), df['year'].max())
    unique_years = sorted(df['year'].unique())
    
    print(f"✓ Year range: {year_range[0]} to {year_range[1]}")
    print(f"✓ Years available: {unique_years}")
    
    # Show reappointment distribution
    reapp_counts = df['reappointed'].value_counts()
    total_appointments = len(df)
    total_reappointments = reapp_counts.get(True, 0)
    total_first_appointments = reapp_counts.get(False, 0)
    
    print(f"✓ Total appointments: {total_appointments:,}")
    print(f"✓ First appointments: {total_first_appointments:,} ({(total_first_appointments/total_appointments*100):.1f}%)")
    print(f"✓ Reappointments: {total_reappointments:,} ({(total_reappointments/total_appointments*100):.1f}%)")
    
    return df

def calculate_annual_proportions(df):
    """
    Calculate annual reappointment proportions for each year.
    
    Args:
        df (pd.DataFrame): Dataset with reappointment flags
        
    Returns:
        pd.DataFrame: Annual proportions with columns: year, total_appointments, total_reappointments, reappointment_proportion
    """
    
    print(f"\nCALCULATING ANNUAL REAPPOINTMENT PROPORTIONS")
    print("=" * 50)
    
    # Group by year and calculate statistics
    annual_stats = []
    
    for year in sorted(df['year'].unique()):
        year_data = df[df['year'] == year]
        
        # Calculate totals
        total_appointments = len(year_data)
        total_reappointments = year_data['reappointed'].sum()
        total_first_appointments = total_appointments - total_reappointments
        
        # Calculate proportion
        if total_appointments > 0:
            reappointment_proportion = total_reappointments / total_appointments
        else:
            reappointment_proportion = 0.0
        
        annual_stats.append({
            'year': year,
            'total_appointments': total_appointments,
            'total_reappointments': total_reappointments,
            'reappointment_proportion': reappointment_proportion
        })
        
        print(f"{year}: {total_reappointments:>4}/{total_appointments:>4} = {reappointment_proportion:>6.1%}")
    
    # Convert to DataFrame
    results_df = pd.DataFrame(annual_stats)
    
    print(f"\n✓ Calculated proportions for {len(results_df)} years")
    
    # Summary statistics
    if len(results_df) > 0:
        print(f"\nSummary statistics:")
        print(f"  Average annual proportion: {results_df['reappointment_proportion'].mean():.1%}")
        print(f"  Median annual proportion: {results_df['reappointment_proportion'].median():.1%}")
        print(f"  Highest proportion: {results_df['reappointment_proportion'].max():.1%} in {results_df.loc[results_df['reappointment_proportion'].idxmax(), 'year']}")
        print(f"  Lowest proportion: {results_df['reappointment_proportion'].min():.1%} in {results_df.loc[results_df['reappointment_proportion'].idxmin(), 'year']}")
        
        # Total across all years for validation
        total_all_appointments = results_df['total_appointments'].sum()
        total_all_reappointments = results_df['total_reappointments'].sum()
        overall_proportion = total_all_reappointments / total_all_appointments if total_all_appointments > 0 else 0
        
        print(f"\nOverall validation:")
        print(f"  Total appointments (2013-2024): {total_all_appointments:,}")
        print(f"  Total reappointments (2013-2024): {total_all_reappointments:,}")
        print(f"  Overall proportion: {overall_proportion:.1%}")
    
    return results_df

def create_visualization(df):
    """
    Create a visualization showing the government-wide reappointment proportion trend over time.
    
    Args:
        df (pd.DataFrame): Annual proportions data
    """
    
    print(f"\nCREATING VISUALIZATION")
    print("=" * 25)
    
    if len(df) == 0:
        print("No data available for visualization")
        return
    
    # Set up the plot
    plt.figure(figsize=(14, 10))
    
    # Create the main plot - proportion trend
    plt.subplot(2, 1, 1)
    
    # Plot the reappointment proportion over time
    plt.plot(df['year'], df['reappointment_proportion'], 
             marker='o', linewidth=3, markersize=10, color='#E74C3C', markerfacecolor='white', markeredgewidth=2)
    plt.fill_between(df['year'], df['reappointment_proportion'], alpha=0.3, color='#E74C3C')
    
    plt.title('New Brunswick Government Annual Reappointment Proportion\n(Government-Wide Trend 2013-2024)', 
              fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Year', fontsize=12, fontweight='bold')
    plt.ylabel('Reappointment Proportion', fontsize=12, fontweight='bold')
    
    # Format y-axis as percentage
    plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: '{:.0%}'.format(y)))
    
    # Add grid
    plt.grid(True, alpha=0.3)
    
    # Set x-axis to show all years
    plt.xticks(df['year'], rotation=0)
    
    # Add value labels on points
    for _, row in df.iterrows():
        plt.annotate(f'{row["reappointment_proportion"]:.1%}', 
                    (row['year'], row['reappointment_proportion']),
                    textcoords="offset points", 
                    xytext=(0,15), 
                    ha='center',
                    fontsize=10,
                    fontweight='bold',
                    bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8))
    
    # Add trend line
    z = np.polyfit(df['year'], df['reappointment_proportion'], 1)
    p = np.poly1d(z)
    plt.plot(df['year'], p(df['year']), "--", alpha=0.7, color='#34495E', linewidth=2, label=f'Trend Line')
    plt.legend()
    
    plt.tight_layout()
    
    # Create a secondary plot showing absolute numbers
    plt.subplot(2, 1, 2)
    
    # Stacked bar chart showing reappointments vs first appointments
    first_appointments = df['total_appointments'] - df['total_reappointments']
    
    plt.bar(df['year'], first_appointments, color='#3498DB', alpha=0.8, label='First Appointments')
    plt.bar(df['year'], df['total_reappointments'], bottom=first_appointments, 
            color='#E74C3C', alpha=0.8, label='Reappointments')
    
    plt.title('Annual Appointments by Type', fontsize=14, fontweight='bold', pad=15)
    plt.xlabel('Year', fontsize=12, fontweight='bold')
    plt.ylabel('Number of Appointments', fontsize=12, fontweight='bold')
    
    # Add total counts on top of bars
    for _, row in df.iterrows():
        plt.text(row['year'], row['total_appointments'] + 10, 
                f"{row['total_appointments']:,}",
                ha='center', va='bottom', fontsize=9, fontweight='bold')
    
    plt.xticks(df['year'])
    plt.legend()
    plt.grid(True, alpha=0.3, axis='y')
    
    plt.tight_layout()
    
    # Save the plot
    analysis_data_dir = Path("scripts/claudesonnet4/version1/execution1/analysis_data")
    output_file = analysis_data_dir / "step8_annual_reappointment_proportions.png"
    
    plt.savefig(output_file, dpi=300, bbox_inches='tight', facecolor='white')
    print(f"✓ Visualization saved to: {output_file}")
    
    # Show summary statistics for the visualization
    print(f"\nVisualization summary:")
    print(f"Years covered: {df['year'].min()} to {df['year'].max()}")
    print(f"Proportion range: {df['reappointment_proportion'].min():.1%} to {df['reappointment_proportion'].max():.1%}")
    
    # Calculate trend
    if len(df) > 1:
        slope = (df['reappointment_proportion'].iloc[-1] - df['reappointment_proportion'].iloc[0]) / (len(df) - 1)
        trend_direction = "increasing" if slope > 0 else "decreasing" if slope < 0 else "stable"
        print(f"Overall trend: {trend_direction} ({slope:+.1%} per year average)")
    
    plt.close()

def save_results(df):
    """
    Save the annual proportions to CSV file.
    
    Args:
        df (pd.DataFrame): Annual proportions data
    """
    
    # Define output file path
    analysis_data_dir = Path("scripts/claudesonnet4/version1/execution1/analysis_data")
    output_file = analysis_data_dir / "step8_annual_proportions.csv"
    
    # Round proportion to 4 decimal places
    df_output = df.copy()
    df_output['reappointment_proportion'] = df_output['reappointment_proportion'].round(4)
    
    # Save to CSV
    df_output.to_csv(output_file, index=False)
    print(f"✓ Results saved to: {output_file}")
    print(f"✓ Saved {len(df_output)} annual proportion records")

def analyze_trends(df):
    """
    Analyze trends in the annual reappointment proportions.
    
    Args:
        df (pd.DataFrame): Annual proportions data
    """
    
    print(f"\nTREND ANALYSIS")
    print("=" * 15)
    
    if len(df) < 2:
        print("Insufficient data for trend analysis")
        return
    
    # Year-over-year changes
    df_sorted = df.sort_values('year').copy()
    df_sorted['proportion_change'] = df_sorted['reappointment_proportion'].diff()
    df_sorted['appointments_change'] = df_sorted['total_appointments'].diff()
    
    print(f"Year-over-year changes:")
    for _, row in df_sorted[1:].iterrows():  # Skip first year
        prop_change = row['proportion_change']
        appt_change = row['appointments_change']
        direction = "↑" if prop_change > 0 else "↓" if prop_change < 0 else "→"
        
        print(f"  {int(row['year'])}: {direction} {prop_change:+.1%} proportion, {appt_change:+,.0f} appointments")
    
    # Identify notable patterns
    print(f"\nNotable patterns:")
    
    # Highest and lowest years
    max_year = df.loc[df['reappointment_proportion'].idxmax()]
    min_year = df.loc[df['reappointment_proportion'].idxmin()]
    
    print(f"  Highest reappointment rate: {max_year['reappointment_proportion']:.1%} in {int(max_year['year'])}")
    print(f"  Lowest reappointment rate: {min_year['reappointment_proportion']:.1%} in {int(min_year['year'])}")
    
    # Years with biggest changes
    if 'proportion_change' in df_sorted.columns:
        biggest_increase = df_sorted.loc[df_sorted['proportion_change'].idxmax()]
        biggest_decrease = df_sorted.loc[df_sorted['proportion_change'].idxmin()]
        
        if not pd.isna(biggest_increase['proportion_change']):
            print(f"  Biggest increase: {biggest_increase['proportion_change']:+.1%} in {int(biggest_increase['year'])}")
        if not pd.isna(biggest_decrease['proportion_change']):
            print(f"  Biggest decrease: {biggest_decrease['proportion_change']:+.1%} in {int(biggest_decrease['year'])}")

def main():
    """Main execution function."""
    try:
        print("NEW BRUNSWICK GOVERNMENT ANNUAL REAPPOINTMENT PROPORTIONS")
        print("=" * 65)
        
        # Load reappointment data
        data_df = load_reappointment_data()
        
        # Calculate annual proportions
        proportions_df = calculate_annual_proportions(data_df)
        
        # Create visualization
        create_visualization(proportions_df)
        
        # Save results
        save_results(proportions_df)
        
        # Analyze trends
        analyze_trends(proportions_df)
        
        print("\n" + "=" * 65)
        print("✓ Script completed successfully!")
        
    except Exception as e:
        print(f"\n✗ Script failed with error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()