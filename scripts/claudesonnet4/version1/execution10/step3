#!/usr/bin/env python3
"""
New Brunswick Government Appointments - Reappointments Marker

This script identifies and marks reappointments by analyzing unique combinations
of name, position, and organization across years.

Author: Claude Sonnet 4
Date: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import re
from collections import defaultdict

def normalize_text(text):
    """
    Normalize text for comparison by removing extra spaces, standardizing case,
    and handling common variations.
    
    Args:
        text (str): Text to normalize
        
    Returns:
        str: Normalized text
    """
    if pd.isna(text) or text is None:
        return ""
    
    # Convert to string and lowercase
    text = str(text).lower().strip()
    
    # Remove extra whitespace
    text = re.sub(r'\s+', ' ', text)
    
    # Remove common punctuation that might cause mismatches
    text = re.sub(r'[.,;:]', '', text)
    
    # Handle common abbreviations and variations
    text = re.sub(r'\b(inc|ltd|corp|corporation)\b', '', text)
    text = re.sub(r'\b(dr|mr|mrs|ms)\b\.?', '', text)
    
    return text.strip()

def normalize_name(name):
    """
    Normalize names for better matching, handling common variations.
    
    Args:
        name (str): Name to normalize
        
    Returns:
        str: Normalized name
    """
    if pd.isna(name) or name is None:
        return ""
    
    name = normalize_text(name)
    
    # Handle name order variations (Last, First vs First Last)
    if ',' in name:
        parts = [part.strip() for part in name.split(',')]
        if len(parts) == 2:
            # Reverse "Last, First" to "First Last"
            name = f"{parts[1]} {parts[0]}"
    
    # Remove middle initials for better matching
    # This helps match "John A. Smith" with "John Smith"
    name_parts = name.split()
    if len(name_parts) >= 3:
        # Check if middle part is likely an initial
        middle_parts = name_parts[1:-1]
        filtered_parts = [name_parts[0]]  # First name
        
        for part in middle_parts:
            # Keep if it's not just an initial (more than 2 chars or no period)
            if len(part) > 2 and '.' not in part:
                filtered_parts.append(part)
        
        filtered_parts.append(name_parts[-1])  # Last name
        name = ' '.join(filtered_parts)
    
    return name.strip()

def create_person_key(row):
    """
    Create a unique key for identifying the same person in the same role.
    
    Args:
        row (pd.Series): DataFrame row
        
    Returns:
        tuple: (normalized_name, normalized_position, normalized_org)
    """
    name = normalize_name(row.get('name', ''))
    position = normalize_text(row.get('position', ''))
    org = normalize_text(row.get('org', ''))
    
    return (name, position, org)

def load_key_columns_data():
    """
    Load the key columns dataset from step 2.
    
    Returns:
        pd.DataFrame: Dataset with key columns
    """
    
    # Define input path
    input_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step2_key_columns_data.csv")
    
    # Check if input file exists
    if not input_path.exists():
        raise FileNotFoundError(f"Input file not found: {input_path}")
    
    print("Loading key columns dataset...")
    print("=" * 50)
    
    try:
        # Load the dataset
        df = pd.read_csv(input_path)
        print(f"Loaded dataset with shape: {df.shape}")
        
        # Ensure required columns exist
        required_columns = ['name', 'position', 'org', 'year']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        # Handle reappointed column
        if 'reappointed' not in df.columns:
            print("WARNING: 'reappointed' column not found, creating with default values")
            df['reappointed'] = False
        
        return df
        
    except Exception as e:
        raise Exception(f"Error loading dataset: {str(e)}")

def analyze_original_reappointments(df):
    """
    Analyze the original reappointment markings in the dataset.
    
    Args:
        df (pd.DataFrame): Dataset to analyze
        
    Returns:
        dict: Statistics about original reappointments
    """
    
    print(f"\nOriginal Reappointment Analysis:")
    print("-" * 40)
    
    # Handle different possible values in reappointed column
    total_records = len(df)
    
    # Convert reappointed column to boolean, handling various formats
    reapp_values = df['reappointed'].value_counts(dropna=False)
    print(f"Original 'reappointed' column values:")
    for value, count in reapp_values.items():
        pct = (count / total_records) * 100
        print(f"  {str(value):10}: {count:,} ({pct:.1f}%)")
    
    # Count original True/Yes reappointments
    original_reappointed = 0
    for value in reapp_values.index:
        if str(value).lower() in ['true', '1', 'yes', 'y']:
            original_reappointed += reapp_values[value]
    
    stats = {
        'total_records': total_records,
        'original_reappointed': original_reappointed,
        'original_not_reappointed': total_records - original_reappointed
    }
    
    print(f"\nSummary:")
    print(f"  Total records: {stats['total_records']:,}")
    print(f"  Originally marked as reappointed: {stats['original_reappointed']:,}")
    print(f"  Originally marked as not reappointed: {stats['original_not_reappointed']:,}")
    
    return stats

def identify_reappointments(df):
    """
    Identify reappointments based on name, position, and organization combinations.
    
    Args:
        df (pd.DataFrame): Dataset to process
        
    Returns:
        pd.DataFrame: Dataset with updated reappointment markings
    """
    
    print(f"\nIdentifying Reappointments:")
    print("=" * 40)
    
    # Create a copy to work with
    df_updated = df.copy()
    
    # Create person keys for grouping
    print("Creating person identification keys...")
    df_updated['person_key'] = df_updated.apply(create_person_key, axis=1)
    
    # Filter out records with missing essential information
    essential_missing = (df_updated['person_key'].apply(lambda x: x[0] == '' or x[1] == '' or x[2] == ''))
    
    if essential_missing.sum() > 0:
        print(f"WARNING: {essential_missing.sum()} records have missing essential information (name/position/org)")
        print("These records will be excluded from reappointment analysis")
    
    # Work with records that have complete information
    df_complete = df_updated[~essential_missing].copy()
    df_incomplete = df_updated[essential_missing].copy()
    
    print(f"Processing {len(df_complete):,} records with complete information")
    
    # Group by person key to identify multiple appointments
    person_groups = df_complete.groupby('person_key')
    
    # Statistics tracking
    multi_appointment_groups = 0
    newly_marked_reappointments = 0
    
    # Process each person group
    for person_key, group in person_groups:
        if len(group) > 1:  # Multiple appointments for same person/position/org
            multi_appointment_groups += 1
            
            # Sort by year to identify chronological order
            group_sorted = group.sort_values('year')
            
            # Mark all except the first chronologically as reappointments
            first_appointment_idx = group_sorted.index[0]
            reappointment_indices = group_sorted.index[1:]
            
            # Update reappointment status for subsequent appointments
            for idx in reappointment_indices:
                # Only count as newly marked if it wasn't already marked
                current_value = df_updated.loc[idx, 'reappointed']
                if not (str(current_value).lower() in ['true', '1', 'yes', 'y']):
                    newly_marked_reappointments += 1
                
                df_updated.loc[idx, 'reappointed'] = True
    
    # Combine complete and incomplete records back together
    if len(df_incomplete) > 0:
        df_final = pd.concat([df_updated[~essential_missing], df_incomplete], ignore_index=True)
    else:
        df_final = df_updated.copy()
    
    # Remove the helper column
    df_final = df_final.drop('person_key', axis=1)
    
    # Print statistics
    print(f"\nReappointment Identification Results:")
    print("-" * 40)
    print(f"Unique person/position/org combinations with multiple appointments: {multi_appointment_groups:,}")
    print(f"Newly marked reappointments: {newly_marked_reappointments:,}")
    
    return df_final, newly_marked_reappointments

def analyze_updated_reappointments(df, newly_marked):
    """
    Analyze the updated reappointment markings.
    
    Args:
        df (pd.DataFrame): Updated dataset
        newly_marked (int): Number of newly marked reappointments
    """
    
    print(f"\nUpdated Reappointment Analysis:")
    print("=" * 40)
    
    total_records = len(df)
    
    # Count current reappointments
    current_reappointed = 0
    reapp_values = df['reappointed'].value_counts(dropna=False)
    
    print(f"Updated 'reappointed' column values:")
    for value, count in reapp_values.items():
        pct = (count / total_records) * 100
        print(f"  {str(value):10}: {count:,} ({pct:.1f}%)")
        
        if str(value).lower() in ['true', '1', 'yes', 'y']:
            current_reappointed += count
    
    print(f"\nSummary:")
    print(f"  Total records: {total_records:,}")
    print(f"  Total marked as reappointed: {current_reappointed:,}")
    print(f"  Newly identified reappointments: {newly_marked:,}")
    print(f"  Reappointment rate: {(current_reappointed/total_records)*100:.1f}%")

def save_updated_dataset(df):
    """
    Save the updated dataset with reappointment markings.
    
    Args:
        df (pd.DataFrame): Updated dataset
    """
    
    # Define output path
    output_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step3_repeats_marked.csv")
    
    try:
        # Save the dataset
        df.to_csv(output_path, index=False)
        print(f"\nUpdated dataset saved to: {output_path}")
        print(f"File size: {output_path.stat().st_size / 1024:.1f} KB")
        
    except Exception as e:
        raise Exception(f"Error saving dataset: {str(e)}")

def main():
    """Main execution function."""
    
    print("New Brunswick Appointments - Reappointments Marker")
    print("=" * 60)
    
    try:
        # Load the key columns dataset
        df = load_key_columns_data()
        
        # Analyze original reappointment markings
        original_stats = analyze_original_reappointments(df)
        
        # Identify and mark reappointments
        df_updated, newly_marked = identify_reappointments(df)
        
        # Analyze updated reappointment markings
        analyze_updated_reappointments(df_updated, newly_marked)
        
        # Save the updated dataset
        save_updated_dataset(df_updated)
        
        print(f"\nScript completed successfully!")
        print(f"Processed {len(df_updated):,} records and identified {newly_marked:,} additional reappointments")
        
    except Exception as e:
        print(f"\nERROR: Script failed with error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()