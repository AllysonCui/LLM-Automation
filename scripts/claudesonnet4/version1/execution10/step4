#!/usr/bin/env python3
"""
New Brunswick Government Appointments - Appointment Counts by Organization and Year

This script creates a summary table showing appointment counts by organization
and year from the processed appointments dataset.

Author: Claude Sonnet 4
Date: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_step3_data():
    """
    Load the dataset from step 3.
    
    Returns:
        pd.DataFrame: Dataset with reappointments marked
    """
    
    # Define input path
    input_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step3_repeats_marked.csv")
    
    # Check if input file exists
    if not input_path.exists():
        raise FileNotFoundError(f"Input file not found: {input_path}")
    
    print("Loading step 3 dataset...")
    print("=" * 50)
    
    try:
        # Load the dataset
        df = pd.read_csv(input_path)
        print(f"Loaded dataset with shape: {df.shape}")
        
        # Validate required columns
        required_columns = ['org', 'year']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        # Ensure year is numeric
        df.loc[:, 'year'] = pd.to_numeric(df['year'], errors='coerce')
        
        return df
        
    except Exception as e:
        raise Exception(f"Error loading dataset: {str(e)}")

def validate_and_clean_data(df):
    """
    Validate and clean the data for counting appointments.
    
    Args:
        df (pd.DataFrame): Input dataset
        
    Returns:
        pd.DataFrame: Cleaned dataset
        dict: Data quality report
    """
    
    print(f"\nValidating and cleaning data...")
    print("-" * 35)
    
    # Create data quality report
    quality_report = {
        'original_records': len(df),
        'missing_org': df['org'].isna().sum(),
        'missing_year': df['year'].isna().sum(),
        'empty_org': (df['org'] == '').sum() if df['org'].dtype == 'object' else 0,
        'invalid_years': 0,
        'records_after_cleaning': 0
    }
    
    # Clean organization names
    if df['org'].dtype == 'object':
        # Replace empty strings with NaN for consistent handling
        df.loc[:, 'org'] = df['org'].replace('', np.nan)
        
        # Strip whitespace from organization names
        df.loc[:, 'org'] = df['org'].str.strip()
        
        # Replace empty strings after stripping with NaN
        df.loc[:, 'org'] = df['org'].replace('', np.nan)
    
    # Check for reasonable year range (appointments should be between 2000-2030)
    if 'year' in df.columns:
        valid_year_mask = (df['year'] >= 2000) & (df['year'] <= 2030)
        quality_report['invalid_years'] = (~valid_year_mask & df['year'].notna()).sum()
        
        if quality_report['invalid_years'] > 0:
            print(f"WARNING: Found {quality_report['invalid_years']} records with invalid years")
            invalid_years = df.loc[~valid_year_mask & df['year'].notna(), 'year'].unique()
            print(f"Invalid years found: {sorted(invalid_years)}")
    
    # Create cleaned dataset (remove records with missing org or year)
    df_clean = df.dropna(subset=['org', 'year']).copy()
    
    # Convert year to integer for cleaner display
    df_clean.loc[:, 'year'] = df_clean['year'].astype(int)
    
    quality_report['records_after_cleaning'] = len(df_clean)
    quality_report['records_removed'] = quality_report['original_records'] - quality_report['records_after_cleaning']
    
    # Print quality report
    print(f"Original records: {quality_report['original_records']:,}")
    print(f"Missing organization: {quality_report['missing_org']:,}")
    print(f"Missing year: {quality_report['missing_year']:,}")
    print(f"Empty organization names: {quality_report['empty_org']:,}")
    print(f"Invalid years: {quality_report['invalid_years']:,}")
    print(f"Records removed: {quality_report['records_removed']:,}")
    print(f"Records after cleaning: {quality_report['records_after_cleaning']:,}")
    
    if quality_report['records_after_cleaning'] == 0:
        raise ValueError("No valid records remaining after data cleaning!")
    
    return df_clean, quality_report

def create_appointment_counts(df):
    """
    Create appointment counts by organization and year.
    
    Args:
        df (pd.DataFrame): Cleaned dataset
        
    Returns:
        pd.DataFrame: Pivot table with organizations as rows, years as columns
    """
    
    print(f"\nCreating appointment counts by organization and year...")
    print("-" * 55)
    
    # Group by organization and year, count appointments
    counts = df.groupby(['org', 'year']).size().reset_index(name='appointments')
    
    print(f"Found appointments for {counts['org'].nunique()} organizations across {counts['year'].nunique()} years")
    
    # Create pivot table
    pivot_table = counts.pivot(index='org', columns='year', values='appointments')
    
    # Fill missing values with 0 (no appointments in that year)
    pivot_table = pivot_table.fillna(0).astype(int)
    
    # Sort columns (years) in ascending order
    pivot_table = pivot_table.reindex(sorted(pivot_table.columns), axis=1)
    
    # Sort rows by total appointments (descending)
    pivot_table.loc[:, 'Total'] = pivot_table.sum(axis=1)
    pivot_table = pivot_table.sort_values('Total', ascending=False)
    
    print(f"Created summary table with {len(pivot_table)} organizations and {len(pivot_table.columns)-1} years")
    
    return pivot_table

def analyze_appointment_patterns(pivot_table):
    """
    Analyze appointment patterns and identify key insights.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with appointment counts
    """
    
    print(f"\nAppointment Pattern Analysis:")
    print("=" * 35)
    
    # Overall statistics
    total_appointments = pivot_table['Total'].sum()
    num_organizations = len(pivot_table)
    years = [col for col in pivot_table.columns if col != 'Total']
    num_years = len(years)
    
    print(f"Total appointments across all organizations: {total_appointments:,}")
    print(f"Number of organizations: {num_organizations:,}")
    print(f"Years covered: {min(years)} - {max(years)} ({num_years} years)")
    print(f"Average appointments per organization: {total_appointments/num_organizations:.1f}")
    
    # Top organizations by total appointments
    print(f"\nTop 10 Organizations by Total Appointments:")
    print("-" * 45)
    top_orgs = pivot_table.head(10)
    for i, (org, row) in enumerate(top_orgs.iterrows(), 1):
        total = row['Total']
        pct = (total / total_appointments) * 100
        print(f"{i:2d}. {org[:60]:<60} {total:4d} ({pct:4.1f}%)")
    
    # Organizations with appointments in all years
    full_coverage_orgs = pivot_table[(pivot_table.drop('Total', axis=1) > 0).all(axis=1)]
    print(f"\nOrganizations with appointments in all {num_years} years: {len(full_coverage_orgs)}")
    
    if len(full_coverage_orgs) > 0:
        print("Organizations with consistent annual appointments:")
        for org in full_coverage_orgs.index[:5]:  # Show first 5
            print(f"  - {org}")
    
    # Year with most appointments
    yearly_totals = pivot_table.drop('Total', axis=1).sum()
    peak_year = yearly_totals.idxmax()
    peak_count = yearly_totals.max()
    
    print(f"\nYear with most appointments: {peak_year} ({peak_count:,} appointments)")
    
    # Organizations with zero appointments in some years
    orgs_with_gaps = pivot_table[(pivot_table.drop('Total', axis=1) == 0).any(axis=1)]
    print(f"Organizations with gaps (no appointments in some years): {len(orgs_with_gaps)}")
    
    # Data quality validation
    print(f"\nData Quality Validation:")
    print("-" * 25)
    
    # Check for unreasonably high counts
    max_count = pivot_table.drop('Total', axis=1).max().max()
    if max_count > 100:
        print(f"WARNING: Found very high appointment count: {max_count}")
        high_count_locations = pivot_table.drop('Total', axis=1).stack()
        high_count_locations = high_count_locations[high_count_locations > 50]
        print(f"Organizations/years with >50 appointments: {len(high_count_locations)}")
    
    # Check for organizations with very few total appointments
    low_activity_orgs = pivot_table[pivot_table['Total'] <= 2]
    print(f"Organizations with â‰¤2 total appointments: {len(low_activity_orgs)}")

def display_summary_table(pivot_table, max_rows=20):
    """
    Display the summary table in a readable format.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table to display
        max_rows (int): Maximum number of rows to display
    """
    
    print(f"\nAppointment Counts Summary Table (Top {max_rows} Organizations):")
    print("=" * 80)
    
    # Display header
    years = [col for col in pivot_table.columns if col != 'Total']
    header = "Organization".ljust(40) + "".join(f"{year}".rjust(6) for year in years) + "Total".rjust(8)
    print(header)
    print("-" * len(header))
    
    # Display top organizations
    display_data = pivot_table.head(max_rows)
    
    for org, row in display_data.iterrows():
        org_name = org[:37] + "..." if len(org) > 40 else org
        line = org_name.ljust(40)
        
        for year in years:
            count = row[year]
            line += f"{count}".rjust(6)
        
        line += f"{row['Total']}".rjust(8)
        print(line)
    
    if len(pivot_table) > max_rows:
        print(f"\n... and {len(pivot_table) - max_rows} more organizations")

def save_counts_table(pivot_table):
    """
    Save the appointment counts table.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table to save
    """
    
    # Define output path
    output_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step4_appointment_counts.csv")
    
    try:
        # Save the table
        pivot_table.to_csv(output_path)
        print(f"\nAppointment counts table saved to: {output_path}")
        print(f"File size: {output_path.stat().st_size / 1024:.1f} KB")
        
    except Exception as e:
        raise Exception(f"Error saving counts table: {str(e)}")

def main():
    """Main execution function."""
    
    print("New Brunswick Appointments - Appointment Counts by Organization and Year")
    print("=" * 75)
    
    try:
        # Load step 3 data
        df = load_step3_data()
        
        # Validate and clean data
        df_clean, quality_report = validate_and_clean_data(df)
        
        # Create appointment counts
        pivot_table = create_appointment_counts(df_clean)
        
        # Display summary table
        display_summary_table(pivot_table)
        
        # Analyze patterns
        analyze_appointment_patterns(pivot_table)
        
        # Save counts table
        save_counts_table(pivot_table)
        
        print(f"\nScript completed successfully!")
        print(f"Created summary table with {len(pivot_table)} organizations")
        
    except Exception as e:
        print(f"\nERROR: Script failed with error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()