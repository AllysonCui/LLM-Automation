#!/usr/bin/env python3
"""
New Brunswick Government Appointments - Employee Counts by Organization and Year

This script creates a summary table showing appointment counts by organization
and year, with organizations as rows and years as columns.

Author: Claude Sonnet 4
Date: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_marked_dataset():
    """
    Load the dataset from step 3 with reappointment markings.
    
    Returns:
        pd.DataFrame: Dataset with reappointment markings
    """
    
    # Define input path
    input_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step3_repeats_marked.csv")
    
    # Check if input file exists
    if not input_path.exists():
        raise FileNotFoundError(f"Input file not found: {input_path}")
    
    print("Loading dataset with reappointment markings...")
    print("=" * 50)
    
    try:
        # Load the dataset
        df = pd.read_csv(input_path)
        print(f"Loaded dataset with shape: {df.shape}")
        
        # Ensure required columns exist
        required_columns = ['org', 'year']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        return df
        
    except Exception as e:
        raise Exception(f"Error loading dataset: {str(e)}")

def validate_and_clean_data(df):
    """
    Validate and clean the data for counting appointments.
    
    Args:
        df (pd.DataFrame): Raw dataset
        
    Returns:
        pd.DataFrame: Cleaned dataset ready for counting
    """
    
    print(f"\nData Validation and Cleaning:")
    print("-" * 40)
    
    original_count = len(df)
    print(f"Original record count: {original_count:,}")
    
    # Check for missing organization values
    missing_org = df['org'].isna() | (df['org'].astype(str).str.strip() == '') | (df['org'].astype(str).str.lower() == 'nan')
    missing_org_count = missing_org.sum()
    
    if missing_org_count > 0:
        print(f"Records with missing organization: {missing_org_count:,} ({missing_org_count/original_count*100:.1f}%)")
        print("These records will be excluded from the analysis")
    
    # Check for missing year values
    missing_year = df['year'].isna()
    missing_year_count = missing_year.sum()
    
    if missing_year_count > 0:
        print(f"Records with missing year: {missing_year_count:,} ({missing_year_count/original_count*100:.1f}%)")
        print("These records will be excluded from the analysis")
    
    # Remove records with missing essential data
    df_clean = df[~missing_org & ~missing_year].copy()
    
    # Clean organization names
    df_clean['org'] = df_clean['org'].astype(str).str.strip()
    
    # Validate year values
    df_clean['year'] = pd.to_numeric(df_clean['year'], errors='coerce')
    invalid_years = df_clean['year'].isna()
    invalid_year_count = invalid_years.sum()
    
    if invalid_year_count > 0:
        print(f"Records with invalid year values: {invalid_year_count:,}")
        df_clean = df_clean[~invalid_years]
    
    # Check year range reasonableness
    year_min = df_clean['year'].min()
    year_max = df_clean['year'].max()
    print(f"Year range: {int(year_min)} to {int(year_max)}")
    
    # Flag potentially problematic years
    if year_min < 2000 or year_max > 2030:
        print(f"WARNING: Unusual year range detected ({int(year_min)}-{int(year_max)})")
    
    final_count = len(df_clean)
    excluded_count = original_count - final_count
    
    print(f"Final record count: {final_count:,}")
    if excluded_count > 0:
        print(f"Excluded records: {excluded_count:,} ({excluded_count/original_count*100:.1f}%)")
    
    return df_clean

def create_appointment_counts(df):
    """
    Create appointment counts by organization and year.
    
    Args:
        df (pd.DataFrame): Cleaned dataset
        
    Returns:
        pd.DataFrame: Pivot table with organizations as rows and years as columns
    """
    
    print(f"\nCreating Appointment Counts:")
    print("-" * 35)
    
    # Group by organization and year, count appointments
    counts = df.groupby(['org', 'year']).size().reset_index(name='count')
    
    print(f"Total organization-year combinations: {len(counts):,}")
    
    # Create pivot table with organizations as rows and years as columns
    pivot_table = counts.pivot(index='org', columns='year', values='count')
    
    # Fill missing values with 0 (no appointments that year)
    pivot_table = pivot_table.fillna(0).astype(int)
    
    # Sort columns (years) in ascending order
    pivot_table = pivot_table.reindex(sorted(pivot_table.columns), axis=1)
    
    # Add row totals
    pivot_table['Total'] = pivot_table.sum(axis=1)
    
    # Sort by total appointments (descending)
    pivot_table = pivot_table.sort_values('Total', ascending=False)
    
    print(f"Number of unique organizations: {len(pivot_table):,}")
    print(f"Number of years covered: {len(pivot_table.columns) - 1}")  # -1 for Total column
    
    return pivot_table

def validate_counts(df, pivot_table):
    """
    Validate that the counts in the pivot table are reasonable.
    
    Args:
        df (pd.DataFrame): Original cleaned dataset
        pivot_table (pd.DataFrame): Pivot table with counts
    """
    
    print(f"\nCount Validation:")
    print("-" * 20)
    
    # Check total counts match
    original_total = len(df)
    pivot_total = pivot_table['Total'].sum()
    
    print(f"Original record count: {original_total:,}")
    print(f"Sum of pivot table counts: {pivot_total:,}")
    
    if original_total == pivot_total:
        print("✓ Count validation passed")
    else:
        print(f"⚠ WARNING: Count mismatch detected!")
        print(f"Difference: {abs(original_total - pivot_total):,}")
    
    # Check for unreasonably high counts
    max_count = pivot_table.drop('Total', axis=1).max().max()
    max_org_total = pivot_table['Total'].max()
    
    print(f"Maximum appointments in any org-year: {max_count:,}")
    print(f"Maximum total appointments for any org: {max_org_total:,}")
    
    # Flag potentially problematic high counts
    if max_count > 1000:
        print(f"⚠ WARNING: Very high appointment count detected ({max_count:,})")
    
    if max_org_total > 5000:
        print(f"⚠ WARNING: Very high total appointments for one organization ({max_org_total:,})")

def analyze_summary_table(pivot_table):
    """
    Analyze and print insights from the summary table.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with appointment counts
    """
    
    print(f"\nSummary Table Analysis:")
    print("=" * 30)
    
    # Display top organizations by total appointments
    print(f"Top 10 Organizations by Total Appointments:")
    print("-" * 45)
    top_10 = pivot_table.head(10)
    
    for i, (org, row) in enumerate(top_10.iterrows(), 1):
        total = row['Total']
        print(f"{i:2d}. {org[:50]:<50} {total:,}")
    
    # Year-by-year statistics
    year_columns = [col for col in pivot_table.columns if col != 'Total']
    year_totals = pivot_table[year_columns].sum()
    
    print(f"\nAppointments by Year:")
    print("-" * 25)
    for year in sorted(year_columns):
        count = year_totals[year]
        print(f"  {int(year)}: {count:,}")
    
    # Summary statistics
    print(f"\nOverall Statistics:")
    print("-" * 20)
    print(f"Total appointments across all years: {pivot_table['Total'].sum():,}")
    print(f"Average appointments per organization: {pivot_table['Total'].mean():.1f}")
    print(f"Median appointments per organization: {pivot_table['Total'].median():.1f}")
    print(f"Organizations with most appointments: {pivot_table.index[0]}")
    print(f"  Total appointments: {pivot_table['Total'].iloc[0]:,}")
    
    # Active years analysis
    active_orgs_by_year = (pivot_table[year_columns] > 0).sum()
    print(f"\nActive Organizations by Year:")
    print("-" * 30)
    for year in sorted(year_columns):
        count = active_orgs_by_year[year]
        print(f"  {int(year)}: {count:,} organizations")

def display_summary_table(pivot_table, max_rows=20, max_cols=15):
    """
    Display a portion of the summary table for review.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table to display
        max_rows (int): Maximum rows to display
        max_cols (int): Maximum columns to display
    """
    
    print(f"\nSummary Table Preview (Top {max_rows} organizations):")
    print("=" * 60)
    
    # Select columns to display (limit for readability)
    year_columns = [col for col in pivot_table.columns if col != 'Total']
    display_columns = year_columns[:max_cols-1] + ['Total']  # Include Total column
    
    # Select rows to display
    display_table = pivot_table.head(max_rows)[display_columns]
    
    # Format organization names for display
    display_table_formatted = display_table.copy()
    display_table_formatted.index = [org[:40] + '...' if len(org) > 40 else org 
                                   for org in display_table_formatted.index]
    
    print(display_table_formatted.to_string())
    
    if len(pivot_table) > max_rows:
        print(f"\n... and {len(pivot_table) - max_rows} more organizations")
    
    if len(year_columns) > max_cols - 1:
        print(f"... and {len(year_columns) - (max_cols - 1)} more years")

def save_counts_table(pivot_table):
    """
    Save the appointment counts table.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with counts
    """
    
    # Define output path
    output_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step4_employee_counts.csv")
    
    try:
        # Save the table
        pivot_table.to_csv(output_path)
        print(f"\nAppointment counts saved to: {output_path}")
        print(f"File size: {output_path.stat().st_size / 1024:.1f} KB")
        
    except Exception as e:
        raise Exception(f"Error saving counts table: {str(e)}")

def main():
    """Main execution function."""
    
    print("New Brunswick Appointments - Employee Counts by Organization and Year")
    print("=" * 75)
    
    try:
        # Load the dataset from step 3
        df = load_marked_dataset()
        
        # Validate and clean the data
        df_clean = validate_and_clean_data(df)
        
        # Create appointment counts pivot table
        pivot_table = create_appointment_counts(df_clean)
        
        # Validate the counts
        validate_counts(df_clean, pivot_table)
        
        # Analyze and display the summary table
        analyze_summary_table(pivot_table)
        
        # Display a preview of the summary table
        display_summary_table(pivot_table)
        
        # Save the counts table
        save_counts_table(pivot_table)
        
        print(f"\nScript completed successfully!")
        print(f"Created summary table with {len(pivot_table):,} organizations across {len(pivot_table.columns)-1} years")
        
    except Exception as e:
        print(f"\nERROR: Script failed with error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()