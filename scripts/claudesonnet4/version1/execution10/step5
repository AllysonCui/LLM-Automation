#!/usr/bin/env python3
"""
New Brunswick Government Appointments - Reappointment Counts by Organization and Year

This script analyzes reappointment patterns by filtering for reappointed=True records
and creating a summary table by organization and year.

Author: Claude Sonnet 4
Date: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_step3_data():
    """
    Load the dataset from step 3.
    
    Returns:
        pd.DataFrame: Dataset with reappointments marked
    """
    
    # Define input path
    input_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step3_repeats_marked.csv")
    
    # Check if input file exists
    if not input_path.exists():
        raise FileNotFoundError(f"Input file not found: {input_path}")
    
    print("Loading step 3 dataset...")
    print("=" * 50)
    
    try:
        # Load the dataset
        df = pd.read_csv(input_path)
        print(f"Loaded dataset with shape: {df.shape}")
        
        # Validate required columns
        required_columns = ['org', 'year', 'reappointed']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        # Ensure year is numeric and convert to integer
        df.loc[:, 'year'] = pd.to_numeric(df['year'], errors='coerce')
        
        # Ensure reappointed is boolean
        if df['reappointed'].dtype != 'bool':
            # Handle various representations of boolean values
            df.loc[:, 'reappointed'] = df['reappointed'].astype(str).str.lower().isin(['true', '1', 'yes', 't'])
        
        return df
        
    except Exception as e:
        raise Exception(f"Error loading dataset: {str(e)}")

def filter_and_validate_reappointments(df):
    """
    Filter for reappointments and validate the data.
    
    Args:
        df (pd.DataFrame): Input dataset
        
    Returns:
        pd.DataFrame: Filtered dataset with only reappointments
        dict: Validation report
    """
    
    print(f"\nFiltering and validating reappointment data...")
    print("-" * 50)
    
    # Create validation report
    validation_report = {
        'total_records': len(df),
        'reappointed_true': df['reappointed'].sum(),
        'reappointed_false': (~df['reappointed']).sum(),
        'missing_org': 0,
        'missing_year': 0,
        'records_after_filtering': 0
    }
    
    # Show reappointment distribution
    reapp_counts = df['reappointed'].value_counts()
    print(f"Reappointment distribution:")
    for value, count in reapp_counts.items():
        pct = (count / len(df)) * 100
        print(f"  {value}: {count:,} ({pct:.1f}%)")
    
    # Filter for reappointments only
    reappointments_df = df[df['reappointed'] == True].copy()
    
    print(f"\nAfter filtering for reappointments: {len(reappointments_df):,} records")
    
    if len(reappointments_df) == 0:
        raise ValueError("No reappointment records found in the dataset!")
    
    # Check for missing values in key columns
    validation_report['missing_org'] = reappointments_df['org'].isna().sum()
    validation_report['missing_year'] = reappointments_df['year'].isna().sum()
    
    print(f"Missing organizations: {validation_report['missing_org']:,}")
    print(f"Missing years: {validation_report['missing_year']:,}")
    
    # Remove records with missing org or year
    clean_reappointments = reappointments_df.dropna(subset=['org', 'year']).copy()
    
    # Convert year to integer (removing any remaining NaN values)
    clean_reappointments = clean_reappointments[clean_reappointments['year'].notna()].copy()
    clean_reappointments.loc[:, 'year'] = clean_reappointments['year'].astype(int)
    
    validation_report['records_after_filtering'] = len(clean_reappointments)
    
    print(f"Records after cleaning: {len(clean_reappointments):,}")
    
    return clean_reappointments, validation_report

def create_reappointment_counts_with_debugging(df):
    """
    Create reappointment counts by organization and year with debugging output.
    
    Args:
        df (pd.DataFrame): Filtered reappointments dataset
        
    Returns:
        pd.DataFrame: Pivot table with reappointment counts
    """
    
    print(f"\nCreating reappointment counts by organization and year...")
    print("-" * 60)
    
    # Group by organization and year, count reappointments
    grouped = df.groupby(['org', 'year']).size().reset_index(name='reappointments')
    
    print(f"Grouped data shape: {grouped.shape}")
    print(f"Organizations with reappointments: {grouped['org'].nunique()}")
    print(f"Years with reappointments: {grouped['year'].nunique()}")
    
    # Show sample grouped data for debugging
    print(f"\nSample grouped data (first 10 rows):")
    print("-" * 40)
    sample_grouped = grouped.head(10)
    for _, row in sample_grouped.iterrows():
        org = row['org'][:50] + "..." if len(row['org']) > 50 else row['org']
        print(f"  {org:<53} | {row['year']} | {row['reappointments']} reappointments")
    
    # Show organizations with highest reappointment counts
    top_reapp_orgs = grouped.groupby('org')['reappointments'].sum().sort_values(ascending=False).head(5)
    print(f"\nTop 5 organizations by total reappointments:")
    print("-" * 45)
    for org, total in top_reapp_orgs.items():
        org_display = org[:50] + "..." if len(org) > 50 else org
        print(f"  {org_display:<53} | {total} total")
    
    # Create pivot table
    print(f"\nCreating pivot table...")
    pivot_table = grouped.pivot(index='org', columns='year', values='reappointments')
    
    # Fill missing values with 0 (no reappointments in that year)
    pivot_table = pivot_table.fillna(0)
    
    # Ensure all values are integers
    pivot_table = pivot_table.astype(int)
    
    # Sort columns (years) in ascending order
    pivot_table = pivot_table.reindex(sorted(pivot_table.columns), axis=1)
    
    # Add total column and sort by total reappointments
    pivot_table.loc[:, 'Total'] = pivot_table.sum(axis=1)
    pivot_table = pivot_table.sort_values('Total', ascending=False)
    
    print(f"Pivot table shape: {pivot_table.shape}")
    print(f"Organizations in pivot table: {len(pivot_table)}")
    print(f"Years in pivot table: {len([col for col in pivot_table.columns if col != 'Total'])}")
    
    return pivot_table

def validate_pivot_table(pivot_table):
    """
    Validate the pivot table contains actual counts rather than all zeros.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table to validate
    """
    
    print(f"\nValidating pivot table...")
    print("-" * 25)
    
    # Check for actual data
    year_columns = [col for col in pivot_table.columns if col != 'Total']
    total_reappointments = pivot_table['Total'].sum()
    
    print(f"Total reappointments in pivot table: {total_reappointments:,}")
    
    if total_reappointments == 0:
        raise ValueError("ERROR: Pivot table contains no reappointments!")
    
    # Check for non-zero values
    non_zero_cells = (pivot_table[year_columns] > 0).sum().sum()
    total_cells = len(pivot_table) * len(year_columns)
    
    print(f"Non-zero cells: {non_zero_cells:,} out of {total_cells:,} ({(non_zero_cells/total_cells)*100:.1f}%)")
    
    # Show distribution of reappointment counts
    all_values = pivot_table[year_columns].values.flatten()
    unique_values = np.unique(all_values)
    
    print(f"Range of reappointment counts: {unique_values.min()} to {unique_values.max()}")
    
    # Show value distribution (for small ranges)
    if len(unique_values) <= 10:
        print(f"Distribution of reappointment counts:")
        for value in sorted(unique_values):
            count = (all_values == value).sum()
            pct = (count / len(all_values)) * 100
            print(f"  {value}: {count:,} cells ({pct:.1f}%)")

def analyze_reappointment_patterns(pivot_table):
    """
    Analyze reappointment patterns and provide summary statistics.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with reappointment counts
    """
    
    print(f"\nReappointment Pattern Analysis:")
    print("=" * 35)
    
    # Overall statistics
    year_columns = [col for col in pivot_table.columns if col != 'Total']
    total_reappointments = pivot_table['Total'].sum()
    num_organizations = len(pivot_table)
    num_years = len(year_columns)
    
    print(f"Total reappointments across all organizations: {total_reappointments:,}")
    print(f"Organizations with reappointments: {num_organizations:,}")
    print(f"Years covered: {min(year_columns)} - {max(year_columns)} ({num_years} years)")
    print(f"Average reappointments per organization: {total_reappointments/num_organizations:.1f}")
    
    # Top organizations by reappointments
    print(f"\nTop 10 Organizations by Total Reappointments:")
    print("-" * 50)
    top_orgs = pivot_table.head(10)
    for i, (org, row) in enumerate(top_orgs.iterrows(), 1):
        total = row['Total']
        pct = (total / total_reappointments) * 100
        print(f"{i:2d}. {org[:55]:<55} {total:4d} ({pct:4.1f}%)")
    
    # Year with most reappointments
    yearly_totals = pivot_table[year_columns].sum()
    peak_year = yearly_totals.idxmax()
    peak_count = yearly_totals.max()
    
    print(f"\nYearly reappointment totals:")
    print("-" * 30)
    for year in sorted(year_columns):
        count = yearly_totals[year]
        pct = (count / total_reappointments) * 100
        marker = " ← Peak" if year == peak_year else ""
        print(f"  {year}: {count:,} ({pct:.1f}%){marker}")
    
    # Organizations with consistent reappointments
    consistent_orgs = pivot_table[(pivot_table[year_columns] > 0).all(axis=1)]
    print(f"\nOrganizations with reappointments in all {num_years} years: {len(consistent_orgs)}")
    
    # Organizations with sporadic reappointments
    years_with_reapp = (pivot_table[year_columns] > 0).sum(axis=1)
    sporadic_orgs = pivot_table[years_with_reapp == 1]
    print(f"Organizations with reappointments in only 1 year: {len(sporadic_orgs)}")

def display_reappointment_table(pivot_table, max_rows=15):
    """
    Display the reappointment table in a readable format.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table to display
        max_rows (int): Maximum number of rows to display
    """
    
    print(f"\nReappointment Counts Summary Table (Top {max_rows} Organizations):")
    print("=" * 85)
    
    # Display header
    year_columns = [col for col in pivot_table.columns if col != 'Total']
    header = "Organization".ljust(45) + "".join(f"{year}".rjust(6) for year in year_columns) + "Total".rjust(8)
    print(header)
    print("-" * len(header))
    
    # Display top organizations
    display_data = pivot_table.head(max_rows)
    
    for org, row in display_data.iterrows():
        org_name = org[:42] + "..." if len(org) > 45 else org
        line = org_name.ljust(45)
        
        for year in year_columns:
            count = row[year]
            line += f"{count}".rjust(6)
        
        line += f"{row['Total']}".rjust(8)
        print(line)
    
    if len(pivot_table) > max_rows:
        print(f"\n... and {len(pivot_table) - max_rows} more organizations")

def save_reappointment_counts(pivot_table):
    """
    Save the reappointment counts table.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table to save
    """
    
    # Define output path
    output_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step5_reappointment_counts.csv")
    
    try:
        # Save the table
        pivot_table.to_csv(output_path)
        print(f"\nReappointment counts table saved to: {output_path}")
        print(f"File size: {output_path.stat().st_size / 1024:.1f} KB")
        
    except Exception as e:
        raise Exception(f"Error saving reappointment counts table: {str(e)}")

def main():
    """Main execution function."""
    
    print("New Brunswick Appointments - Reappointment Counts by Organization and Year")
    print("=" * 80)
    
    try:
        # Load step 3 data
        df = load_step3_data()
        
        # Filter and validate reappointments
        reappointments_df, validation_report = filter_and_validate_reappointments(df)
        
        # Create reappointment counts with debugging
        pivot_table = create_reappointment_counts_with_debugging(reappointments_df)
        
        # Validate pivot table
        validate_pivot_table(pivot_table)
        
        # Display reappointment table
        display_reappointment_table(pivot_table)
        
        # Analyze patterns
        analyze_reappointment_patterns(pivot_table)
        
        # Save reappointment counts
        save_reappointment_counts(pivot_table)
        
        print(f"\nScript completed successfully!")
        print(f"Created reappointment summary table with {len(pivot_table)} organizations")
        
    except Exception as e:
        print(f"\nERROR: Script failed with error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()