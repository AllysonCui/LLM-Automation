#!/usr/bin/env python3
"""
New Brunswick Government Appointments - Reappointment Rates Calculator

This script merges appointment counts and reappointment counts to calculate
reappointment rates for each organization and year combination.

Author: Claude Sonnet 4
Date: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_appointment_counts():
    """
    Load the appointment counts dataset from step 4.
    
    Returns:
        pd.DataFrame: Appointment counts with org as index, years as columns
    """
    
    # Define input path
    input_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step4_appointment_counts.csv")
    
    # Check if input file exists
    if not input_path.exists():
        raise FileNotFoundError(f"Appointment counts file not found: {input_path}")
    
    print("Loading appointment counts dataset...")
    
    try:
        # Load the dataset
        df = pd.read_csv(input_path, index_col=0)  # org as index
        print(f"Loaded appointment counts with shape: {df.shape}")
        print(f"Organizations: {len(df)}")
        
        # Show column info
        year_columns = [col for col in df.columns if col != 'Total']
        print(f"Year columns: {len(year_columns)} ({min(year_columns)} - {max(year_columns)})")
        
        return df
        
    except Exception as e:
        raise Exception(f"Error loading appointment counts: {str(e)}")

def load_reappointment_counts():
    """
    Load the reappointment counts dataset from step 5.
    
    Returns:
        pd.DataFrame: Reappointment counts with org as index, years as columns
    """
    
    # Define input path
    input_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step5_reappointment_counts.csv")
    
    # Check if input file exists
    if not input_path.exists():
        raise FileNotFoundError(f"Reappointment counts file not found: {input_path}")
    
    print("Loading reappointment counts dataset...")
    
    try:
        # Load the dataset
        df = pd.read_csv(input_path, index_col=0)  # org as index
        print(f"Loaded reappointment counts with shape: {df.shape}")
        print(f"Organizations: {len(df)}")
        
        # Show column info
        year_columns = [col for col in df.columns if col != 'Total']
        print(f"Year columns: {len(year_columns)} ({min(year_columns)} - {max(year_columns)})")
        
        return df
        
    except Exception as e:
        raise Exception(f"Error loading reappointment counts: {str(e)}")

def validate_and_align_datasets(appointment_df, reappointment_df):
    """
    Validate and align the two datasets for merging.
    
    Args:
        appointment_df (pd.DataFrame): Appointment counts dataset
        reappointment_df (pd.DataFrame): Reappointment counts dataset
        
    Returns:
        tuple: Aligned appointment and reappointment DataFrames
    """
    
    print(f"\nValidating and aligning datasets...")
    print("-" * 40)
    
    # Remove 'Total' columns for processing
    emp_years = [col for col in appointment_df.columns if col != 'Total']
    reapp_years = [col for col in reappointment_df.columns if col != 'Total']
    
    appointment_clean = appointment_df[emp_years].copy()
    reappointment_clean = reappointment_df[reapp_years].copy()
    
    # Find common years
    common_years = sorted(set(emp_years) & set(reapp_years))
    print(f"Common years between datasets: {len(common_years)} ({min(common_years)} - {max(common_years)})")
    
    if not common_years:
        raise ValueError("No common years found between appointment and reappointment datasets!")
    
    # Align datasets to common years
    appointment_aligned = appointment_clean[common_years].copy()
    reappointment_aligned = reappointment_clean[common_years].copy()
    
    # Find organizations in both datasets
    common_orgs = set(appointment_aligned.index) & set(reappointment_aligned.index)
    appointment_only = set(appointment_aligned.index) - set(reappointment_aligned.index)
    reappointment_only = set(reappointment_aligned.index) - set(appointment_aligned.index)
    
    print(f"Organizations in both datasets: {len(common_orgs)}")
    print(f"Organizations only in appointment data: {len(appointment_only)}")
    print(f"Organizations only in reappointment data: {len(reappointment_only)}")
    
    # Create union of all organizations for complete picture
    all_orgs = sorted(set(appointment_aligned.index) | set(reappointment_aligned.index))
    
    # Reindex both datasets to include all organizations
    appointment_final = appointment_aligned.reindex(all_orgs, fill_value=0)
    reappointment_final = reappointment_aligned.reindex(all_orgs, fill_value=0)
    
    print(f"Final aligned datasets shape: {appointment_final.shape}")
    
    return appointment_final, reappointment_final, common_years

def calculate_reappointment_rates(appointment_df, reappointment_df, years):
    """
    Calculate reappointment rates for each organization and year.
    
    Args:
        appointment_df (pd.DataFrame): Appointment counts by org and year
        reappointment_df (pd.DataFrame): Reappointment counts by org and year
        years (list): List of years to process
        
    Returns:
        pd.DataFrame: Comprehensive table with rates calculated
    """
    
    print(f"\nCalculating reappointment rates...")
    print("-" * 35)
    
    # Initialize list to store results
    results = []
    
    # Track statistics
    total_combinations = 0
    zero_appointment_cases = 0
    perfect_rate_cases = 0
    
    # Process each organization and year combination
    for org in appointment_df.index:
        for year in years:
            total_appointments = appointment_df.loc[org, year]
            reappointments = reappointment_df.loc[org, year]
            
            total_combinations += 1
            
            # Handle division by zero case
            if total_appointments == 0:
                zero_appointment_cases += 1
                reappointment_rate = np.nan  # Use NaN for undefined rates
            else:
                reappointment_rate = reappointments / total_appointments
                
                # Check for perfect reappointment rate
                if reappointment_rate == 1.0:
                    perfect_rate_cases += 1
            
            # Validate that reappointments don't exceed total appointments
            if reappointments > total_appointments:
                print(f"WARNING: {org} in {year} has {reappointments} reappointments but only {total_appointments} total appointments")
            
            # Add to results
            results.append({
                'org': org,
                'year': year,
                'total_appointments': total_appointments,
                'reappointments': reappointments,
                'reappointment_rate': reappointment_rate
            })
    
    # Create DataFrame from results
    rates_df = pd.DataFrame(results)
    
    # Print statistics
    print(f"Total org-year combinations processed: {total_combinations:,}")
    print(f"Cases with zero appointments (rate = NaN): {zero_appointment_cases:,}")
    print(f"Cases with 100% reappointment rate: {perfect_rate_cases:,}")
    
    # Additional validation
    valid_rates = rates_df.dropna(subset=['reappointment_rate'])
    if len(valid_rates) > 0:
        max_rate = valid_rates['reappointment_rate'].max()
        min_rate = valid_rates['reappointment_rate'].min()
        avg_rate = valid_rates['reappointment_rate'].mean()
        
        print(f"Reappointment rate range: {min_rate:.3f} to {max_rate:.3f}")
        print(f"Average reappointment rate: {avg_rate:.3f} ({avg_rate*100:.1f}%)")
        
        # Check for impossible rates (>1.0)
        impossible_rates = valid_rates[valid_rates['reappointment_rate'] > 1.0]
        if len(impossible_rates) > 0:
            print(f"WARNING: Found {len(impossible_rates)} cases with reappointment rate > 100%")
    
    return rates_df

def analyze_reappointment_rates(rates_df):
    """
    Analyze reappointment rate patterns and identify top organizations.
    
    Args:
        rates_df (pd.DataFrame): DataFrame with reappointment rates
    """
    
    print(f"\nReappointment Rate Analysis:")
    print("=" * 30)
    
    # Filter out cases with zero appointments or missing data
    valid_rates = rates_df[(rates_df['total_appointments'] > 0) & 
                          (rates_df['reappointment_rate'].notna())].copy()
    
    print(f"Valid rate calculations: {len(valid_rates):,} out of {len(rates_df):,}")
    
    if len(valid_rates) == 0:
        print("No valid reappointment rates to analyze!")
        return
    
    # Calculate average reappointment rate by organization
    org_avg_rates = valid_rates.groupby('org').agg({
        'reappointment_rate': 'mean',
        'total_appointments': 'sum',
        'reappointments': 'sum'
    }).reset_index()
    
    # Calculate overall rate for each organization
    org_avg_rates['overall_rate'] = org_avg_rates['reappointments'] / org_avg_rates['total_appointments']
    
    # Sort by average reappointment rate
    org_avg_rates = org_avg_rates.sort_values('reappointment_rate', ascending=False)
    
    print(f"\nTop 15 Organizations by Average Reappointment Rate:")
    print("-" * 60)
    print(f"{'Organization':<40} {'Avg Rate':<10} {'Overall Rate':<12} {'Total Emp':<10}")
    print("-" * 80)
    
    for _, row in org_avg_rates.head(15).iterrows():
        org_name = row['org'][:37] + "..." if len(row['org']) > 40 else row['org']
        avg_rate = row['reappointment_rate']
        overall_rate = row['overall_rate']
        total_emp = int(row['total_appointments'])
        
        print(f"{org_name:<40} {avg_rate:7.3f} ({avg_rate*100:4.1f}%) {overall_rate:7.3f} ({overall_rate*100:4.1f}%) {total_emp:8,}")
    
    # Year-by-year analysis
    print(f"\nReappointment Rates by Year:")
    print("-" * 30)
    
    yearly_rates = valid_rates.groupby('year').agg({
        'reappointment_rate': 'mean',
        'total_appointments': 'sum',
        'reappointments': 'sum'
    }).reset_index()
    
    yearly_rates['overall_rate'] = yearly_rates['reappointments'] / yearly_rates['total_appointments']
    
    for _, row in yearly_rates.iterrows():
        year = int(row['year'])
        avg_rate = row['reappointment_rate']
        overall_rate = row['overall_rate']
        total_emp = int(row['total_appointments'])
        
        print(f"  {year}: Avg={avg_rate:.3f} ({avg_rate*100:4.1f}%), Overall={overall_rate:.3f} ({overall_rate*100:4.1f}%), Appointments={total_emp:,}")

def save_reappointment_rates(rates_df):
    """
    Save the reappointment rates table.
    
    Args:
        rates_df (pd.DataFrame): DataFrame with reappointment rates
    """
    
    # Define output path
    output_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step6_reappointment_rates.csv")
    
    try:
        # Sort by organization and year for consistency
        rates_sorted = rates_df.sort_values(['org', 'year']).reset_index(drop=True)
        
        # Save the table
        rates_sorted.to_csv(output_path, index=False)
        print(f"\nReappointment rates table saved to: {output_path}")
        print(f"File size: {output_path.stat().st_size / 1024:.1f} KB")
        print(f"Records saved: {len(rates_sorted):,}")
        
    except Exception as e:
        raise Exception(f"Error saving reappointment rates table: {str(e)}")

def main():
    """Main execution function."""
    
    print("New Brunswick Appointments - Reappointment Rates Calculator")
    print("=" * 65)
    
    try:
        # Load both datasets
        appointment_df = load_appointment_counts()
        reappointment_df = load_reappointment_counts()
        
        # Validate and align datasets
        appointment_aligned, reappointment_aligned, common_years = validate_and_align_datasets(
            appointment_df, reappointment_df
        )
        
        # Calculate reappointment rates
        rates_df = calculate_reappointment_rates(
            appointment_aligned, reappointment_aligned, common_years
        )
        
        # Analyze reappointment rate patterns
        analyze_reappointment_rates(rates_df)
        
        # Save results
        save_reappointment_rates(rates_df)
        
        print(f"\nScript completed successfully!")
        print(f"Calculated reappointment rates for {len(rates_df):,} org-year combinations")
        
    except Exception as e:
        print(f"\nERROR: Script failed with error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()