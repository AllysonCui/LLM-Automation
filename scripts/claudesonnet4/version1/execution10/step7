#!/usr/bin/env python3
"""
New Brunswick Government Appointments - Yearly Maximum Reappointment Rates

This script identifies the organization with the highest reappointment rate
for each year and creates a time series analysis with visualization.

Author: Claude Sonnet 4
Date: 2025-06-30

Tie-breaking approach: When multiple organizations have the same maximum rate,
we select the organization with the highest total number of appointments (most appointments)
to prioritize organizations with more substantial appointment activity.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt
import seaborn as sns

def load_reappointment_rates():
    """
    Load the reappointment rates dataset from step 6.
    
    Returns:
        pd.DataFrame: Reappointment rates with org, year, rates, etc.
    """
    
    # Define input path
    input_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step6_reappointment_rates.csv")
    
    # Check if input file exists
    if not input_path.exists():
        raise FileNotFoundError(f"Reappointment rates file not found: {input_path}")
    
    print("Loading reappointment rates dataset...")
    print("=" * 45)
    
    try:
        # Load the dataset
        df = pd.read_csv(input_path)
        print(f"Loaded reappointment rates with shape: {df.shape}")
        
        # Validate required columns
        required_columns = ['org', 'year', 'total_appointments', 'reappointments', 'reappointment_rate']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        # Show basic info
        years = sorted(df['year'].unique())
        orgs = df['org'].nunique()
        
        print(f"Years covered: {min(years)} - {max(years)} ({len(years)} years)")
        print(f"Organizations: {orgs:,}")
        print(f"Total records: {len(df):,}")
        
        return df
        
    except Exception as e:
        raise Exception(f"Error loading reappointment rates: {str(e)}")

def find_yearly_max_rates(df):
    """
    Find the organization with the highest reappointment rate for each year.
    
    Tie-breaking approach: When multiple organizations have the same maximum rate,
    select the organization with the highest total number of appointments.
    
    Args:
        df (pd.DataFrame): Reappointment rates dataset
        
    Returns:
        pd.DataFrame: Yearly maximum rates with year, top_org, max_rate
    """
    
    print(f"\nFinding yearly maximum reappointment rates...")
    print("-" * 45)
    
    # Filter out records with missing or invalid rates
    valid_data = df[(df['reappointment_rate'].notna()) & 
                   (df['reappointment_rate'] >= 0)].copy()
    
    print(f"Valid records for analysis: {len(valid_data):,} out of {len(df):,}")
    
    if len(valid_data) == 0:
        raise ValueError("No valid reappointment rate data found!")
    
    # Initialize results list
    yearly_results = []
    
    # Process each year
    years = sorted(valid_data['year'].unique())
    ties_encountered = 0
    
    for year in years:
        year_data = valid_data[valid_data['year'] == year].copy()
        
        if len(year_data) == 0:
            print(f"WARNING: No data for year {year}")
            continue
        
        # Find the maximum rate for this year
        max_rate = year_data['reappointment_rate'].max()
        
        # Find all organizations with the maximum rate
        max_rate_orgs = year_data[year_data['reappointment_rate'] == max_rate].copy()
        
        # Handle ties using total_appointments as tie-breaker
        if len(max_rate_orgs) > 1:
            ties_encountered += 1
            # Sort by total_appointments (descending) and then by org name for consistency
            max_rate_orgs = max_rate_orgs.sort_values(['total_appointments', 'org'], 
                                                     ascending=[False, True])
            print(f"  {year}: Tie between {len(max_rate_orgs)} organizations at rate {max_rate:.3f}")
            print(f"        Tie-breaker: Selected org with most appointments")
        
        # Select the top organization
        top_org_row = max_rate_orgs.iloc[0]
        top_org = top_org_row['org']
        
        # Add to results
        yearly_results.append({
            'year': year,
            'top_org': top_org,
            'max_rate': max_rate,
            'total_appointments': top_org_row['total_appointments'],
            'reappointments': top_org_row['reappointments'],
            'tied_orgs': len(max_rate_orgs)
        })
    
    # Create DataFrame from results
    results_df = pd.DataFrame(yearly_results)
    
    print(f"\nProcessing completed:")
    print(f"Years processed: {len(results_df)}")
    print(f"Ties encountered: {ties_encountered}")
    
    return results_df

def analyze_yearly_trends(results_df):
    """
    Analyze trends in yearly maximum reappointment rates.
    
    Args:
        results_df (pd.DataFrame): Yearly maximum rates results
    """
    
    print(f"\nYearly Maximum Reappointment Rate Analysis:")
    print("=" * 45)
    
    if len(results_df) == 0:
        print("No data to analyze!")
        return
    
    # Overall statistics
    avg_max_rate = results_df['max_rate'].mean()
    min_max_rate = results_df['max_rate'].min()
    max_max_rate = results_df['max_rate'].max()
    
    print(f"Average maximum rate across years: {avg_max_rate:.3f} ({avg_max_rate*100:.1f}%)")
    print(f"Range of maximum rates: {min_max_rate:.3f} to {max_max_rate:.3f}")
    
    # Year with highest and lowest maximum rates
    peak_year_row = results_df.loc[results_df['max_rate'].idxmax()]
    low_year_row = results_df.loc[results_df['max_rate'].idxmin()]
    
    print(f"\nPeak year: {peak_year_row['year']} with rate {peak_year_row['max_rate']:.3f}")
    print(f"  Organization: {peak_year_row['top_org']}")
    
    print(f"Lowest year: {low_year_row['year']} with rate {low_year_row['max_rate']:.3f}")
    print(f"  Organization: {low_year_row['top_org']}")
    
    # Organizations that appear multiple times as top
    org_counts = results_df['top_org'].value_counts()
    repeat_winners = org_counts[org_counts > 1]
    
    print(f"\nOrganizations with multiple years as top reappointer:")
    if len(repeat_winners) > 0:
        for org, count in repeat_winners.items():
            years = results_df[results_df['top_org'] == org]['year'].tolist()
            org_display = org[:50] + "..." if len(org) > 50 else org
            print(f"  {org_display}: {count} years ({years})")
    else:
        print("  No organization appears as top reappointer in multiple years")
    
    # Trend analysis
    if len(results_df) > 1:
        rate_change = results_df['max_rate'].iloc[-1] - results_df['max_rate'].iloc[0]
        print(f"\nOverall trend: {rate_change:+.3f} from {results_df['year'].min()} to {results_df['year'].max()}")

def print_yearly_results(results_df):
    """
    Print year-by-year results in a formatted table.
    
    Args:
        results_df (pd.DataFrame): Yearly maximum rates results
    """
    
    print(f"\nYear-by-Year Maximum Reappointment Rates:")
    print("=" * 80)
    print(f"{'Year':<6} {'Rate':<8} {'Appointments':<10} {'Reapp':<6} {'Ties':<5} {'Organization'}")
    print("-" * 80)
    
    for _, row in results_df.iterrows():
        year = int(row['year'])
        rate = row['max_rate']
        appointments = int(row['total_appointments'])
        reapp = int(row['reappointments'])
        ties = int(row['tied_orgs'])
        org = row['top_org']
        
        # Truncate organization name if too long
        org_display = org[:45] + "..." if len(org) > 48 else org
        
        tie_marker = f"({ties})" if ties > 1 else ""
        
        print(f"{year:<6} {rate:6.3f} {appointments:8,} {reapp:4} {tie_marker:<5} {org_display}")

def create_visualization(results_df):
    """
    Create a visualization showing the trend of maximum reappointment rates over time.
    
    Args:
        results_df (pd.DataFrame): Yearly maximum rates results
    """
    
    print(f"\nCreating visualization...")
    print("-" * 25)
    
    if len(results_df) == 0:
        print("No data to visualize!")
        return
    
    # Set up the plot style
    plt.style.use('default')
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
    fig.suptitle('New Brunswick Government Appointments\nYearly Maximum Reappointment Rates', 
                 fontsize=16, fontweight='bold')
    
    # Top plot: Line chart of maximum rates over time
    ax1.plot(results_df['year'], results_df['max_rate'], 
             marker='o', linewidth=2, markersize=6, color='darkblue')
    ax1.set_title('Maximum Reappointment Rate by Year', fontsize=14, fontweight='bold')
    ax1.set_xlabel('Year', fontsize=12)
    ax1.set_ylabel('Maximum Reappointment Rate', fontsize=12)
    ax1.grid(True, alpha=0.3)
    ax1.set_ylim(0, max(results_df['max_rate']) * 1.1)
    
    # Format y-axis as percentages
    ax1.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'{x:.1%}'))
    
    # Add value labels on points
    for _, row in results_df.iterrows():
        ax1.annotate(f'{row["max_rate"]:.2%}', 
                    (row['year'], row['max_rate']),
                    textcoords="offset points", xytext=(0,10), ha='center',
                    fontsize=9)
    
    # Bottom plot: Bar chart showing which organizations achieved maximum rates
    org_counts = results_df['top_org'].value_counts()
    
    # If there are many unique organizations, show only top ones
    if len(org_counts) > 10:
        org_counts = org_counts.head(10)
        title_suffix = " (Top 10)"
    else:
        title_suffix = ""
    
    # Truncate long organization names for display
    org_labels = [org[:30] + "..." if len(org) > 30 else org for org in org_counts.index]
    
    bars = ax2.bar(range(len(org_counts)), org_counts.values, color='lightcoral')
    ax2.set_title(f'Organizations with Highest Yearly Reappointment Rates{title_suffix}', 
                  fontsize=14, fontweight='bold')
    ax2.set_xlabel('Organization', fontsize=12)
    ax2.set_ylabel('Number of Years as Top Reappointer', fontsize=12)
    ax2.set_xticks(range(len(org_counts)))
    ax2.set_xticklabels(org_labels, rotation=45, ha='right')
    
    # Add value labels on bars
    for i, bar in enumerate(bars):
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + 0.05,
                f'{int(height)}', ha='center', va='bottom', fontsize=10)
    
    plt.tight_layout()
    
    # Save the visualization
    output_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step7_yearly_max_rates.png")
    
    try:
        plt.savefig(output_path, dpi=300, bbox_inches='tight')
        print(f"Visualization saved to: {output_path}")
        plt.close()
        
    except Exception as e:
        print(f"Error saving visualization: {str(e)}")
        plt.close()

def save_yearly_results(results_df):
    """
    Save the yearly maximum rates results.
    
    Args:
        results_df (pd.DataFrame): Yearly maximum rates results
    """
    
    # Define output path
    output_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step7_yearly_max_rates.csv")
    
    try:
        # Select only the required columns for output
        output_df = results_df[['year', 'top_org', 'max_rate']].copy()
        
        # Sort by year
        output_df = output_df.sort_values('year').reset_index(drop=True)
        
        # Save the table
        output_df.to_csv(output_path, index=False)
        print(f"\nYearly maximum rates saved to: {output_path}")
        print(f"File size: {output_path.stat().st_size / 1024:.1f} KB")
        print(f"Records saved: {len(output_df):,}")
        
    except Exception as e:
        raise Exception(f"Error saving yearly maximum rates: {str(e)}")

def main():
    """Main execution function."""
    
    print("New Brunswick Appointments - Yearly Maximum Reappointment Rates")
    print("=" * 70)
    
    try:
        # Load reappointment rates
        df = load_reappointment_rates()
        
        # Find yearly maximum rates
        results_df = find_yearly_max_rates(df)
        
        # Print yearly results
        print_yearly_results(results_df)
        
        # Analyze trends
        analyze_yearly_trends(results_df)
        
        # Create visualization
        create_visualization(results_df)
        
        # Save results
        save_yearly_results(results_df)
        
        print(f"\nScript completed successfully!")
        print(f"Analyzed {len(results_df)} years of maximum reappointment rates")
        
    except Exception as e:
        print(f"\nERROR: Script failed with error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()