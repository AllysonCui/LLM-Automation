#!/usr/bin/env python3
"""
New Brunswick Government Appointments - Yearly Maximum Reappointment Rates

This script identifies the organization with the highest reappointment rate
for each year and creates a time series analysis with visualization.

Author: Claude Sonnet 4
Date: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime

def load_reappointment_rates():
    """
    Load the reappointment rates dataset from step 6.
    
    Returns:
        pd.DataFrame: Dataset with reappointment rates
    """
    
    # Define input path
    input_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step6_reappointment_rates.csv")
    
    # Check if input file exists
    if not input_path.exists():
        raise FileNotFoundError(f"Reappointment rates file not found: {input_path}")
    
    print("Loading reappointment rates dataset...")
    print("=" * 45)
    
    try:
        # Load the dataset
        df = pd.read_csv(input_path)
        print(f"Loaded dataset with shape: {df.shape}")
        
        # Ensure required columns exist
        required_columns = ['org', 'year', 'total_employees', 'reappointments', 'reappointment_rate']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        # Convert year to integer
        df['year'] = df['year'].astype(int)
        
        print(f"Years covered: {df['year'].min()} to {df['year'].max()}")
        print(f"Unique organizations: {df['org'].nunique():,}")
        print(f"Total org-year combinations: {len(df):,}")
        
        return df
        
    except Exception as e:
        raise Exception(f"Error loading reappointment rates: {str(e)}")

def analyze_data_completeness(df):
    """
    Analyze data completeness and quality for rate calculations.
    
    Args:
        df (pd.DataFrame): Reappointment rates dataset
        
    Returns:
        pd.DataFrame: Cleaned dataset ready for analysis
    """
    
    print(f"\nAnalyzing Data Completeness:")
    print("-" * 35)
    
    original_count = len(df)
    print(f"Original records: {original_count:,}")
    
    # Check for missing or invalid rates
    missing_rates = df['reappointment_rate'].isna()
    missing_count = missing_rates.sum()
    
    print(f"Records with missing reappointment rates: {missing_count:,} ({missing_count/original_count*100:.1f}%)")
    
    # Filter for valid rates (not NaN and >= 0)
    df_valid = df[~missing_rates & (df['reappointment_rate'] >= 0)].copy()
    
    valid_count = len(df_valid)
    excluded_count = original_count - valid_count
    
    print(f"Records with valid rates: {valid_count:,}")
    if excluded_count > 0:
        print(f"Excluded records: {excluded_count:,} ({excluded_count/original_count*100:.1f}%)")
    
    # Check for organizations with employees but zero rate
    zero_rate_with_employees = df_valid[(df_valid['total_employees'] > 0) & (df_valid['reappointment_rate'] == 0)]
    print(f"Records with employees but 0% reappointment rate: {len(zero_rate_with_employees):,}")
    
    # Show year coverage
    years_with_data = df_valid['year'].value_counts().sort_index()
    print(f"\nRecords per year:")
    for year, count in years_with_data.items():
        print(f"  {year}: {count:,} org-year combinations")
    
    return df_valid

def identify_yearly_max_rates(df_valid):
    """
    Identify the organization with the highest reappointment rate for each year.
    
    Tie-breaking approach:
    1. Select the organization with the highest reappointment rate
    2. If tied, select the organization with the most total employees (more meaningful sample)
    3. If still tied, select alphabetically first organization name (deterministic)
    
    Args:
        df_valid (pd.DataFrame): Dataset with valid reappointment rates
        
    Returns:
        pd.DataFrame: Yearly maximum rates with top organization
    """
    
    print(f"\nIdentifying Yearly Maximum Rates:")
    print("=" * 40)
    print("Tie-breaking approach:")
    print("  1. Highest reappointment rate")
    print("  2. If tied: Most total employees")
    print("  3. If still tied: Alphabetically first organization")
    
    yearly_results = []
    tie_cases = 0
    
    # Process each year
    for year in sorted(df_valid['year'].unique()):
        year_data = df_valid[df_valid['year'] == year].copy()
        
        if len(year_data) == 0:
            print(f"âš  WARNING: No data for year {year}")
            continue
        
        # Find maximum rate for this year
        max_rate = year_data['reappointment_rate'].max()
        
        # Get all organizations with the maximum rate
        max_rate_orgs = year_data[year_data['reappointment_rate'] == max_rate].copy()
        
        if len(max_rate_orgs) > 1:
            tie_cases += 1
            print(f"  {year}: {len(max_rate_orgs)} organizations tied at {max_rate:.3f}")
            
            # Tie-breaking: select organization with most employees
            max_employees = max_rate_orgs['total_employees'].max()
            max_emp_orgs = max_rate_orgs[max_rate_orgs['total_employees'] == max_employees]
            
            if len(max_emp_orgs) > 1:
                print(f"    Still tied after employee count, using alphabetical order")
                # Final tie-breaker: alphabetical order
                top_org_data = max_emp_orgs.sort_values('org').iloc[0]
            else:
                top_org_data = max_emp_orgs.iloc[0]
        else:
            top_org_data = max_rate_orgs.iloc[0]
        
        # Store result
        yearly_results.append({
            'year': int(year),
            'top_org': top_org_data['org'],
            'max_rate': top_org_data['reappointment_rate'],
            'total_employees': int(top_org_data['total_employees']),
            'reappointments': int(top_org_data['reappointments'])
        })
    
    # Create DataFrame from results
    df_yearly_max = pd.DataFrame(yearly_results)
    
    print(f"\nYearly Analysis Results:")
    print("-" * 25)
    print(f"Years processed: {len(df_yearly_max)}")
    print(f"Years with ties: {tie_cases}")
    
    if len(df_yearly_max) > 0:
        print(f"Rate range: {df_yearly_max['max_rate'].min():.3f} to {df_yearly_max['max_rate'].max():.3f}")
        print(f"Average max rate: {df_yearly_max['max_rate'].mean():.3f}")
    
    return df_yearly_max

def print_yearly_results(df_yearly_max):
    """
    Print year-by-year results in a formatted table.
    
    Args:
        df_yearly_max (pd.DataFrame): Yearly maximum rates dataset
    """
    
    print(f"\nYear-by-Year Results:")
    print("=" * 25)
    print(f"{'Year':<6} {'Max Rate':<9} {'Employees':<10} {'Reappoint':<10} {'Organization':<40}")
    print("-" * 80)
    
    for _, row in df_yearly_max.iterrows():
        year = int(row['year'])
        max_rate = row['max_rate']
        total_emp = int(row['total_employees'])
        reapp = int(row['reappointments'])
        org = row['top_org']
        
        # Truncate organization name if too long
        org_display = org[:38] + '..' if len(org) > 40 else org
        
        print(f"{year:<6} {max_rate:.3f}     {total_emp:<10} {reapp:<10} {org_display:<40}")
    
    # Summary statistics
    if len(df_yearly_max) > 0:
        print(f"\nSummary Statistics:")
        print("-" * 20)
        print(f"Highest rate observed: {df_yearly_max['max_rate'].max():.3f} ({df_yearly_max['max_rate'].max()*100:.1f}%)")
        print(f"Lowest max rate: {df_yearly_max['max_rate'].min():.3f} ({df_yearly_max['max_rate'].min()*100:.1f}%)")
        print(f"Average max rate: {df_yearly_max['max_rate'].mean():.3f} ({df_yearly_max['max_rate'].mean()*100:.1f}%)")
        print(f"Standard deviation: {df_yearly_max['max_rate'].std():.3f}")
        
        # Most frequent top organization
        top_org_counts = df_yearly_max['top_org'].value_counts()
        if len(top_org_counts) > 0:
            most_frequent_org = top_org_counts.index[0]
            frequency = top_org_counts.iloc[0]
            print(f"Most frequent top org: {most_frequent_org} ({frequency} years)")

def create_visualization(df_yearly_max):
    """
    Create a visualization showing the trend of maximum reappointment rates over time.
    
    Args:
        df_yearly_max (pd.DataFrame): Yearly maximum rates dataset
    """
    
    print(f"\nCreating Visualization:")
    print("-" * 25)
    
    if len(df_yearly_max) == 0:
        print("No data available for visualization")
        return
    
    # Set up the plot
    plt.figure(figsize=(14, 8))
    
    # Create the main plot
    years = df_yearly_max['year']
    rates = df_yearly_max['max_rate'] * 100  # Convert to percentage
    
    # Line plot with markers
    plt.plot(years, rates, marker='o', linewidth=2.5, markersize=8, 
             color='#2E86AB', markerfacecolor='#A23B72', markeredgecolor='white', 
             markeredgewidth=2, label='Maximum Reappointment Rate')
    
    # Add value labels on points
    for i, (year, rate) in enumerate(zip(years, rates)):
        plt.annotate(f'{rate:.1f}%', 
                    (year, rate), 
                    textcoords="offset points", 
                    xytext=(0,10), 
                    ha='center', 
                    fontsize=9,
                    fontweight='bold')
    
    # Customize the plot
    plt.title('Maximum Reappointment Rates by Year\nNew Brunswick Government Appointments', 
              fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Year', fontsize=12, fontweight='bold')
    plt.ylabel('Maximum Reappointment Rate (%)', fontsize=12, fontweight='bold')
    
    # Set y-axis to start from 0 for better perspective
    plt.ylim(0, max(rates) * 1.1)
    
    # Format x-axis
    plt.xticks(years, rotation=45)
    
    # Add grid
    plt.grid(True, alpha=0.3, linestyle='--')
    
    # Add average line
    avg_rate = rates.mean()
    plt.axhline(y=avg_rate, color='red', linestyle='--', alpha=0.7, 
                label=f'Average: {avg_rate:.1f}%')
    
    # Add legend
    plt.legend(loc='upper left', fontsize=10)
    
    # Improve layout
    plt.tight_layout()
    
    # Save the plot
    output_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step7_yearly_max_rates.png")
    plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white')
    print(f"Visualization saved to: {output_path}")
    
    # Display plot info
    print(f"Plot covers {len(years)} years ({min(years)} to {max(years)})")
    print(f"Rate range: {min(rates):.1f}% to {max(rates):.1f}%")
    
    # Close the plot to free memory
    plt.close()

def save_yearly_max_rates(df_yearly_max):
    """
    Save the yearly maximum rates dataset.
    
    Args:
        df_yearly_max (pd.DataFrame): Yearly maximum rates dataset
    """
    
    # Select only the required columns
    df_output = df_yearly_max[['year', 'top_org', 'max_rate']].copy()
    
    # Define output path
    output_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step7_yearly_max_rates.csv")
    
    try:
        # Save the dataset
        df_output.to_csv(output_path, index=False)
        print(f"\nYearly maximum rates saved to: {output_path}")
        print(f"File size: {output_path.stat().st_size / 1024:.1f} KB")
        print(f"Records saved: {len(df_output):,}")
        
    except Exception as e:
        raise Exception(f"Error saving yearly maximum rates: {str(e)}")

def main():
    """Main execution function."""
    
    print("New Brunswick Appointments - Yearly Maximum Reappointment Rates Analysis")
    print("=" * 75)
    
    try:
        # Load the reappointment rates dataset
        df = load_reappointment_rates()
        
        # Analyze data completeness
        df_valid = analyze_data_completeness(df)
        
        if len(df_valid) == 0:
            print("ERROR: No valid data available for analysis!")
            sys.exit(1)
        
        # Identify yearly maximum rates
        df_yearly_max = identify_yearly_max_rates(df_valid)
        
        if len(df_yearly_max) == 0:
            print("ERROR: No yearly maximum rates could be calculated!")
            sys.exit(1)
        
        # Print year-by-year results
        print_yearly_results(df_yearly_max)
        
        # Create visualization
        create_visualization(df_yearly_max)
        
        # Save the results
        save_yearly_max_rates(df_yearly_max)
        
        print(f"\nScript completed successfully!")
        print(f"Analyzed {len(df_yearly_max)} years of data")
        
    except Exception as e:
        print(f"\nERROR: Script failed with error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()