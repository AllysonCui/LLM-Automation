#!/usr/bin/env python3
"""
New Brunswick Government Appointments - Annual Reappointment Proportions

This script calculates the overall proportion of reappointments across the entire
New Brunswick government for each year from 2013-2024.

Author: Claude Sonnet 4
Date: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt

def load_reappointment_data():
    """
    Load the dataset from step 3 with reappointment flags.
    
    Returns:
        pd.DataFrame: Dataset with reappointment markings
    """
    
    # Define input path
    input_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step3_repeats_marked.csv")
    
    # Check if input file exists
    if not input_path.exists():
        raise FileNotFoundError(f"Reappointment data file not found: {input_path}")
    
    print("Loading dataset with reappointment markings...")
    print("=" * 50)
    
    try:
        # Load the dataset
        df = pd.read_csv(input_path)
        print(f"Loaded dataset with shape: {df.shape}")
        
        # Ensure required columns exist
        required_columns = ['year', 'reappointed']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        return df
        
    except Exception as e:
        raise Exception(f"Error loading reappointment data: {str(e)}")

def clean_and_validate_data(df):
    """
    Clean and validate the data for proportion calculations.
    
    Args:
        df (pd.DataFrame): Raw dataset
        
    Returns:
        pd.DataFrame: Cleaned dataset ready for analysis
    """
    
    print(f"\nCleaning and Validating Data:")
    print("-" * 35)
    
    original_count = len(df)
    print(f"Original record count: {original_count:,}")
    
    # Check for missing year values
    missing_year = df['year'].isna()
    missing_year_count = missing_year.sum()
    
    if missing_year_count > 0:
        print(f"Records with missing year: {missing_year_count:,}")
        df = df[~missing_year].copy()
    
    # Convert year to integer
    df['year'] = pd.to_numeric(df['year'], errors='coerce').astype('Int64')
    
    # Remove records where year conversion failed
    valid_year = df['year'].notna()
    df = df[valid_year].copy()
    
    # Analyze reappointed column
    print(f"\nReappointed column analysis:")
    reapp_values = df['reappointed'].value_counts(dropna=False)
    for value, count in reapp_values.items():
        pct = (count / len(df)) * 100
        print(f"  {str(value):10}: {count:,} ({pct:.1f}%)")
    
    # Convert reappointed to boolean
    # Handle different possible formats for True values
    true_values = ['true', '1', 'yes', 'y', True, 1]
    df['reappointed_bool'] = df['reappointed'].astype(str).str.lower().isin([str(v).lower() for v in true_values])
    
    final_count = len(df)
    excluded_count = original_count - final_count
    
    print(f"\nData cleaning summary:")
    print(f"Final record count: {final_count:,}")
    if excluded_count > 0:
        print(f"Excluded records: {excluded_count:,} ({excluded_count/original_count*100:.1f}%)")
    
    # Show year range
    year_min = df['year'].min()
    year_max = df['year'].max()
    print(f"Year range: {year_min} to {year_max}")
    
    return df

def calculate_annual_proportions(df):
    """
    Calculate annual reappointment proportions for the entire government.
    
    Args:
        df (pd.DataFrame): Cleaned dataset
        
    Returns:
        pd.DataFrame: Annual proportions dataset
    """
    
    print(f"\nCalculating Annual Reappointment Proportions:")
    print("=" * 50)
    
    # Group by year and calculate totals
    annual_stats = df.groupby('year').agg({
        'reappointed_bool': ['count', 'sum']
    }).round(6)
    
    # Flatten column names
    annual_stats.columns = ['total_appointments', 'total_reappointments']
    
    # Calculate proportion
    annual_stats['reappointment_proportion'] = (
        annual_stats['total_reappointments'] / annual_stats['total_appointments']
    )
    
    # Reset index to make year a column
    annual_stats = annual_stats.reset_index()
    
    # Ensure data types
    annual_stats['year'] = annual_stats['year'].astype(int)
    annual_stats['total_appointments'] = annual_stats['total_appointments'].astype(int)
    annual_stats['total_reappointments'] = annual_stats['total_reappointments'].astype(int)
    
    # Sort by year
    annual_stats = annual_stats.sort_values('year')
    
    print(f"Years processed: {len(annual_stats)}")
    print(f"Year range: {annual_stats['year'].min()} to {annual_stats['year'].max()}")
    
    # Overall statistics
    total_appointments_all = annual_stats['total_appointments'].sum()
    total_reappointments_all = annual_stats['total_reappointments'].sum()
    overall_proportion = total_reappointments_all / total_appointments_all
    
    print(f"\nOverall Statistics (All Years):")
    print("-" * 35)
    print(f"Total appointments: {total_appointments_all:,}")
    print(f"Total reappointments: {total_reappointments_all:,}")
    print(f"Overall proportion: {overall_proportion:.4f} ({overall_proportion*100:.2f}%)")
    
    return annual_stats

def print_annual_results(annual_stats):
    """
    Print year-by-year proportions in a formatted table.
    
    Args:
        annual_stats (pd.DataFrame): Annual proportions dataset
    """
    
    print(f"\nYear-by-Year Reappointment Proportions:")
    print("=" * 45)
    print(f"{'Year':<6} {'Total Apps':<12} {'Reappoint':<12} {'Proportion':<12} {'Percentage':<12}")
    print("-" * 65)
    
    for _, row in annual_stats.iterrows():
        year = int(row['year'])
        total_apps = int(row['total_appointments'])
        reappoint = int(row['total_reappointments'])
        proportion = row['reappointment_proportion']
        percentage = proportion * 100
        
        print(f"{year:<6} {total_apps:<12,} {reappoint:<12,} {proportion:<12.4f} {percentage:<12.2f}%")
    
    # Summary statistics
    print(f"\nSummary Statistics:")
    print("-" * 20)
    proportions = annual_stats['reappointment_proportion']
    print(f"Highest proportion: {proportions.max():.4f} ({proportions.max()*100:.2f}%) in {annual_stats.loc[proportions.idxmax(), 'year']}")
    print(f"Lowest proportion: {proportions.min():.4f} ({proportions.min()*100:.2f}%) in {annual_stats.loc[proportions.idxmin(), 'year']}")
    print(f"Average proportion: {proportions.mean():.4f} ({proportions.mean()*100:.2f}%)")
    print(f"Standard deviation: {proportions.std():.4f}")
    
    # Trend analysis
    if len(annual_stats) >= 2:
        first_year_prop = annual_stats.iloc[0]['reappointment_proportion']
        last_year_prop = annual_stats.iloc[-1]['reappointment_proportion']
        change = last_year_prop - first_year_prop
        
        print(f"\nTrend Analysis:")
        print("-" * 15)
        print(f"First year ({annual_stats.iloc[0]['year']}): {first_year_prop:.4f} ({first_year_prop*100:.2f}%)")
        print(f"Last year ({annual_stats.iloc[-1]['year']}): {last_year_prop:.4f} ({last_year_prop*100:.2f}%)")
        print(f"Change: {change:+.4f} ({change*100:+.2f} percentage points)")

def create_visualization(annual_stats):
    """
    Create a visualization showing the government-wide reappointment proportion trend.
    
    Args:
        annual_stats (pd.DataFrame): Annual proportions dataset
    """
    
    print(f"\nCreating Visualization:")
    print("-" * 25)
    
    if len(annual_stats) == 0:
        print("No data available for visualization")
        return
    
    # Set up the plot
    plt.figure(figsize=(14, 8))
    
    # Extract data
    years = annual_stats['year']
    proportions = annual_stats['reappointment_proportion'] * 100  # Convert to percentage
    
    # Create the main plot
    plt.plot(years, proportions, marker='o', linewidth=3, markersize=10, 
             color='#1f77b4', markerfacecolor='#ff7f0e', markeredgecolor='white', 
             markeredgewidth=2, label='Government-wide Reappointment Rate')
    
    # Add value labels on points
    for year, prop in zip(years, proportions):
        plt.annotate(f'{prop:.1f}%', 
                    (year, prop), 
                    textcoords="offset points", 
                    xytext=(0,12), 
                    ha='center', 
                    fontsize=10,
                    fontweight='bold',
                    bbox=dict(boxstyle="round,pad=0.3", facecolor='white', alpha=0.8))
    
    # Add trend line
    if len(years) >= 2:
        z = np.polyfit(years, proportions, 1)
        p = np.poly1d(z)
        plt.plot(years, p(years), "--", alpha=0.7, color='red', 
                label=f'Trend Line (slope: {z[0]:.2f}%/year)')
    
    # Customize the plot
    plt.title('New Brunswick Government-Wide Reappointment Proportions\n2013-2024', 
              fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Year', fontsize=12, fontweight='bold')
    plt.ylabel('Reappointment Proportion (%)', fontsize=12, fontweight='bold')
    
    # Set y-axis limits for better perspective
    y_min = max(0, proportions.min() - 1)
    y_max = proportions.max() + 1
    plt.ylim(y_min, y_max)
    
    # Format x-axis
    plt.xticks(years, rotation=45)
    
    # Add grid
    plt.grid(True, alpha=0.3, linestyle='--')
    
    # Add average line
    avg_proportion = proportions.mean()
    plt.axhline(y=avg_proportion, color='green', linestyle=':', alpha=0.8, 
                label=f'Average: {avg_proportion:.1f}%')
    
    # Add legend
    plt.legend(loc='best', fontsize=10)
    
    # Improve layout
    plt.tight_layout()
    
    # Save the plot
    output_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step8_annual_reappointment_proportions.png")
    plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white')
    print(f"Visualization saved to: {output_path}")
    
    # Display plot info
    print(f"Plot covers {len(years)} years ({min(years)} to {max(years)})")
    print(f"Proportion range: {min(proportions):.1f}% to {max(proportions):.1f}%")
    
    # Close the plot to free memory
    plt.close()

def save_annual_proportions(annual_stats):
    """
    Save the annual proportions dataset.
    
    Args:
        annual_stats (pd.DataFrame): Annual proportions dataset
    """
    
    # Define output path
    output_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step8_annual_proportions.csv")
    
    try:
        # Save the dataset
        annual_stats.to_csv(output_path, index=False)
        print(f"\nAnnual proportions saved to: {output_path}")
        print(f"File size: {output_path.stat().st_size / 1024:.1f} KB")
        print(f"Records saved: {len(annual_stats):,}")
        
    except Exception as e:
        raise Exception(f"Error saving annual proportions: {str(e)}")

def main():
    """Main execution function."""
    
    print("New Brunswick Appointments - Annual Government-Wide Reappointment Proportions")
    print("=" * 80)
    
    try:
        # Load the dataset from step 3
        df = load_reappointment_data()
        
        # Clean and validate the data
        df_clean = clean_and_validate_data(df)
        
        if len(df_clean) == 0:
            print("ERROR: No valid data available for analysis!")
            sys.exit(1)
        
        # Calculate annual proportions
        annual_stats = calculate_annual_proportions(df_clean)
        
        if len(annual_stats) == 0:
            print("ERROR: No annual proportions could be calculated!")
            sys.exit(1)
        
        # Print year-by-year results
        print_annual_results(annual_stats)
        
        # Create visualization
        create_visualization(annual_stats)
        
        # Save the results
        save_annual_proportions(annual_stats)
        
        print(f"\nScript completed successfully!")
        print(f"Analyzed {len(annual_stats)} years of government-wide reappointment data")
        
    except Exception as e:
        print(f"\nERROR: Script failed with error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()