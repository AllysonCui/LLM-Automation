#!/usr/bin/env python3
"""
New Brunswick Government Appointments - Regression Analysis of Reappointment Trends

This script performs comprehensive linear regression analysis on government-wide
reappointment proportions to determine statistical significance of trends over
the 12-year period (2013-2024).

Author: Claude Sonnet 4
Date: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
from scipy import stats
from scipy.stats import linregress, normaltest, jarque_bera
import warnings

def load_annual_proportions():
    """
    Load the annual government-wide proportions from step 8.
    
    Returns:
        pd.DataFrame: Annual proportions data
    """
    
    # Define input path
    input_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step8_annual_proportions.csv")
    
    # Check if input file exists
    if not input_path.exists():
        raise FileNotFoundError(f"Annual proportions file not found: {input_path}")
    
    print("Loading annual government-wide proportions...")
    print("=" * 50)
    
    try:
        # Load the dataset
        df = pd.read_csv(input_path)
        print(f"Loaded annual proportions with shape: {df.shape}")
        
        # Validate required columns
        required_columns = ['year', 'total_appointments', 'total_reappointments', 'reappointment_proportion']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        # Ensure proper data types
        df['year'] = pd.to_numeric(df['year'], errors='coerce')
        df['reappointment_proportion'] = pd.to_numeric(df['reappointment_proportion'], errors='coerce')
        
        # Check for missing values
        if df[['year', 'reappointment_proportion']].isnull().any().any():
            raise ValueError("Missing values found in year or reappointment_proportion columns")
        
        # Sort by year
        df = df.sort_values('year').reset_index(drop=True)
        
        print(f"Years covered: {df['year'].min():.0f} - {df['year'].max():.0f}")
        print(f"Data points: {len(df)}")
        
        return df
        
    except Exception as e:
        raise Exception(f"Error loading annual proportions: {str(e)}")

def prepare_regression_data(df):
    """
    Prepare data for regression analysis.
    
    Args:
        df (pd.DataFrame): Annual proportions data
        
    Returns:
        tuple: (X, Y) arrays for regression
    """
    
    print(f"\nPreparing data for regression analysis...")
    print("-" * 40)
    
    # Extract X (year) and Y (reappointment proportion) variables
    X = df['year'].values
    Y = df['reappointment_proportion'].values
    
    print(f"Independent variable (X): Year")
    print(f"  Range: {X.min():.0f} - {X.max():.0f}")
    print(f"  Data points: {len(X)}")
    
    print(f"Dependent variable (Y): Reappointment Proportion")
    print(f"  Range: {Y.min():.4f} - {Y.max():.4f}")
    print(f"  Mean: {Y.mean():.4f}")
    print(f"  Standard deviation: {Y.std():.4f}")
    
    return X, Y

def perform_linear_regression(X, Y):
    """
    Perform linear regression analysis using scipy.stats.linregress.
    
    Args:
        X (np.array): Independent variable (year)
        Y (np.array): Dependent variable (reappointment proportion)
        
    Returns:
        dict: Comprehensive regression results
    """
    
    print(f"\nPerforming linear regression analysis...")
    print("-" * 40)
    
    try:
        # Perform linear regression
        slope, intercept, r_value, p_value, std_err = linregress(X, Y)
        
        # Calculate additional statistics
        n = len(X)
        degrees_freedom = n - 2
        r_squared = r_value ** 2
        
        # Calculate predicted values and residuals
        Y_pred = slope * X + intercept
        residuals = Y - Y_pred
        
        # Calculate standard error of the estimate
        sse = np.sum(residuals ** 2)
        mse = sse / degrees_freedom
        se_estimate = np.sqrt(mse)
        
        # Calculate 95% confidence intervals for slope
        t_critical = stats.t.ppf(0.975, degrees_freedom)  # Two-tailed test
        slope_ci_lower = slope - t_critical * std_err
        slope_ci_upper = slope + t_critical * std_err
        
        # Calculate 95% confidence intervals for intercept
        x_mean = np.mean(X)
        sum_x_squared = np.sum((X - x_mean) ** 2)
        se_intercept = se_estimate * np.sqrt(1/n + x_mean**2/sum_x_squared)
        intercept_ci_lower = intercept - t_critical * se_intercept
        intercept_ci_upper = intercept + t_critical * se_intercept
        
        # Store results
        results = {
            'n': n,
            'slope': slope,
            'intercept': intercept,
            'r_value': r_value,
            'r_squared': r_squared,
            'p_value': p_value,
            'std_err': std_err,
            'degrees_freedom': degrees_freedom,
            'se_estimate': se_estimate,
            'slope_ci_lower': slope_ci_lower,
            'slope_ci_upper': slope_ci_upper,
            'intercept_ci_lower': intercept_ci_lower,
            'intercept_ci_upper': intercept_ci_upper,
            'Y_pred': Y_pred,
            'residuals': residuals
        }
        
        print(f"Linear regression completed successfully")
        print(f"Slope: {slope:.6f}")
        print(f"R-squared: {r_squared:.4f}")
        print(f"P-value: {p_value:.6f}")
        
        return results
        
    except Exception as e:
        raise Exception(f"Error in linear regression: {str(e)}")

def perform_regression_diagnostics(X, Y, results):
    """
    Perform regression diagnostics including Durbin-Watson test and outlier detection.
    
    Args:
        X (np.array): Independent variable
        Y (np.array): Dependent variable
        results (dict): Regression results
        
    Returns:
        dict: Diagnostic results
    """
    
    print(f"\nPerforming regression diagnostics...")
    print("-" * 35)
    
    diagnostics = {}
    
    try:
        residuals = results['residuals']
        
        # Durbin-Watson test for autocorrelation
        # DW = sum((e_t - e_{t-1})^2) / sum(e_t^2)
        dw_numerator = np.sum(np.diff(residuals) ** 2)
        dw_denominator = np.sum(residuals ** 2)
        durbin_watson = dw_numerator / dw_denominator
        
        print(f"Durbin-Watson statistic: {durbin_watson:.4f}")
        
        # Interpret Durbin-Watson (rule of thumb: 1.5-2.5 is acceptable)
        if durbin_watson < 1.5:
            dw_interpretation = "Positive autocorrelation detected"
        elif durbin_watson > 2.5:
            dw_interpretation = "Negative autocorrelation detected"
        else:
            dw_interpretation = "No significant autocorrelation"
        
        print(f"DW interpretation: {dw_interpretation}")
        
        # Outlier detection using standardized residuals
        std_residuals = residuals / np.std(residuals)
        outliers = np.abs(std_residuals) > 2.0  # Points more than 2 std devs away
        outlier_indices = np.where(outliers)[0]
        
        print(f"Outliers (|std residual| > 2.0): {len(outlier_indices)}")
        if len(outlier_indices) > 0:
            outlier_years = X[outlier_indices]
            print(f"Outlier years: {outlier_years}")
        
        # Test for normality of residuals
        try:
            # Shapiro-Wilk test (good for small samples)
            if len(residuals) <= 50:
                shapiro_stat, shapiro_p = stats.shapiro(residuals)
                normality_test = "Shapiro-Wilk"
                normality_stat = shapiro_stat
                normality_p = shapiro_p
            else:
                # Jarque-Bera test for larger samples
                jb_stat, jb_p = jarque_bera(residuals)
                normality_test = "Jarque-Bera"
                normality_stat = jb_stat
                normality_p = jb_p
            
            print(f"{normality_test} normality test:")
            print(f"  Statistic: {normality_stat:.4f}")
            print(f"  P-value: {normality_p:.4f}")
            
            if normality_p > 0.05:
                normality_conclusion = "Residuals appear normally distributed"
            else:
                normality_conclusion = "Residuals may not be normally distributed"
            
            print(f"  Conclusion: {normality_conclusion}")
            
        except Exception as e:
            print(f"Warning: Could not perform normality test: {e}")
            normality_test = "Failed"
            normality_stat = None
            normality_p = None
            normality_conclusion = "Unable to test normality"
        
        diagnostics = {
            'durbin_watson': durbin_watson,
            'dw_interpretation': dw_interpretation,
            'outlier_count': len(outlier_indices),
            'outlier_years': X[outlier_indices].tolist() if len(outlier_indices) > 0 else [],
            'normality_test': normality_test,
            'normality_stat': normality_stat,
            'normality_p': normality_p,
            'normality_conclusion': normality_conclusion
        }
        
        return diagnostics
        
    except Exception as e:
        print(f"Warning: Some diagnostic tests failed: {e}")
        return {'error': str(e)}

def interpret_results(X, Y, results, diagnostics):
    """
    Interpret regression results and provide conclusions.
    
    Args:
        X (np.array): Independent variable
        Y (np.array): Dependent variable
        results (dict): Regression results
        diagnostics (dict): Diagnostic results
        
    Returns:
        dict: Interpretation and conclusions
    """
    
    print(f"\nInterpreting regression results...")
    print("-" * 35)
    
    # Statistical significance
    is_significant = results['p_value'] < 0.05
    significance_level = "statistically significant" if is_significant else "not statistically significant"
    
    print(f"Statistical significance (α = 0.05): {significance_level}")
    print(f"P-value: {results['p_value']:.6f}")
    
    # Trend direction
    slope = results['slope']
    if slope > 0:
        trend_direction = "increasing"
        trend_description = "positive"
    elif slope < 0:
        trend_direction = "decreasing"
        trend_description = "negative"
    else:
        trend_direction = "stable"
        trend_description = "zero"
    
    print(f"Trend direction: {trend_direction} ({trend_description} slope)")
    print(f"Slope coefficient: {slope:.6f}")
    
    # Annual change in percentage points
    annual_change_pp = slope * 100  # Convert to percentage points
    print(f"Annual change: {annual_change_pp:+.4f} percentage points per year")
    
    # Total change over period
    year_span = X.max() - X.min()
    total_change_pp = annual_change_pp * year_span
    print(f"Total change over {year_span:.0f} years: {total_change_pp:+.4f} percentage points")
    
    # R-squared interpretation
    r_squared = results['r_squared']
    variance_explained = r_squared * 100
    print(f"Variance explained (R²): {variance_explained:.1f}%")
    
    # Model fit assessment
    if r_squared > 0.7:
        fit_quality = "strong"
    elif r_squared > 0.5:
        fit_quality = "moderate"
    elif r_squared > 0.3:
        fit_quality = "weak"
    else:
        fit_quality = "very weak"
    
    print(f"Model fit quality: {fit_quality}")
    
    # Final conclusion
    if is_significant:
        conclusion = f"The government-wide reappointment proportion shows a statistically significant {trend_direction} trend over the 12-year period."
    else:
        conclusion = f"The government-wide reappointment proportion shows no statistically significant trend over the 12-year period."
    
    interpretation = {
        'is_significant': is_significant,
        'significance_level': significance_level,
        'trend_direction': trend_direction,
        'trend_description': trend_description,
        'annual_change_pp': annual_change_pp,
        'total_change_pp': total_change_pp,
        'variance_explained': variance_explained,
        'fit_quality': fit_quality,
        'conclusion': conclusion
    }
    
    return interpretation

def save_detailed_results(df, X, Y, results, diagnostics, interpretation):
    """
    Save comprehensive statistical results to a text file.
    
    Args:
        df (pd.DataFrame): Original data
        X, Y (np.array): Regression variables
        results (dict): Regression results
        diagnostics (dict): Diagnostic results
        interpretation (dict): Result interpretation
    """
    
    # Define output path
    output_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step9_regression_results.txt")
    
    try:
        with open(output_path, 'w') as f:
            f.write("NEW BRUNSWICK GOVERNMENT APPOINTMENTS\n")
            f.write("REGRESSION ANALYSIS OF REAPPOINTMENT TRENDS (2013-2024)\n")
            f.write("=" * 70 + "\n\n")
            
            # Data Summary
            f.write("DATA SUMMARY\n")
            f.write("-" * 20 + "\n")
            f.write(f"Dataset: Annual government-wide reappointment proportions\n")
            f.write(f"Time period: {X.min():.0f} - {X.max():.0f}\n")
            f.write(f"Number of observations: {len(X)}\n")
            f.write(f"Years analyzed: {X.max() - X.min():.0f}\n\n")
            
            f.write("Dependent Variable: Government-wide Reappointment Proportion\n")
            f.write(f"  Mean: {Y.mean():.4f} ({Y.mean()*100:.2f}%)\n")
            f.write(f"  Standard Deviation: {Y.std():.4f}\n")
            f.write(f"  Minimum: {Y.min():.4f} ({Y.min()*100:.2f}%)\n")
            f.write(f"  Maximum: {Y.max():.4f} ({Y.max()*100:.2f}%)\n")
            f.write(f"  Range: {Y.max() - Y.min():.4f}\n\n")
            
            # Annual Data
            f.write("ANNUAL DATA\n")
            f.write("-" * 15 + "\n")
            f.write("Year    Total Appts   Reappts   Proportion   Percentage\n")
            f.write("-" * 55 + "\n")
            for _, row in df.iterrows():
                f.write(f"{row['year']:.0f}    {row['total_appointments']:8,}   {row['total_reappointments']:6,}   {row['reappointment_proportion']:8.4f}   {row['reappointment_proportion']*100:7.2f}%\n")
            f.write("\n")
            
            # Regression Results
            f.write("LINEAR REGRESSION RESULTS\n")
            f.write("-" * 30 + "\n")
            f.write(f"Regression Equation: Y = {results['intercept']:.6f} + {results['slope']:.6f} * X\n")
            f.write(f"  Where: Y = Reappointment Proportion, X = Year\n\n")
            
            f.write("Coefficient Estimates:\n")
            f.write(f"  Intercept: {results['intercept']:.6f}\n")
            f.write(f"    95% CI: [{results['intercept_ci_lower']:.6f}, {results['intercept_ci_upper']:.6f}]\n")
            f.write(f"  Slope: {results['slope']:.6f}\n")
            f.write(f"    95% CI: [{results['slope_ci_lower']:.6f}, {results['slope_ci_upper']:.6f}]\n")
            f.write(f"    Standard Error: {results['std_err']:.6f}\n\n")
            
            f.write("Model Fit Statistics:\n")
            f.write(f"  R-squared: {results['r_squared']:.4f}\n")
            f.write(f"  Correlation coefficient (r): {results['r_value']:.4f}\n")
            f.write(f"  Standard Error of Estimate: {results['se_estimate']:.6f}\n")
            f.write(f"  Degrees of Freedom: {results['degrees_freedom']}\n\n")
            
            f.write("Statistical Significance:\n")
            f.write(f"  P-value: {results['p_value']:.6f}\n")
            f.write(f"  Significance Level (α = 0.05): {interpretation['significance_level']}\n\n")
            
            # Trend Analysis
            f.write("TREND ANALYSIS\n")
            f.write("-" * 20 + "\n")
            f.write(f"Trend Direction: {interpretation['trend_direction'].title()}\n")
            f.write(f"Annual Change: {interpretation['annual_change_pp']:+.4f} percentage points per year\n")
            f.write(f"Total Change ({X.min():.0f}-{X.max():.0f}): {interpretation['total_change_pp']:+.4f} percentage points\n")
            f.write(f"Variance Explained: {interpretation['variance_explained']:.1f}%\n")
            f.write(f"Model Fit Quality: {interpretation['fit_quality'].title()}\n\n")
            
            # Diagnostics
            f.write("REGRESSION DIAGNOSTICS\n")
            f.write("-" * 25 + "\n")
            if 'error' not in diagnostics:
                f.write(f"Durbin-Watson Test: {diagnostics['durbin_watson']:.4f}\n")
                f.write(f"  Interpretation: {diagnostics['dw_interpretation']}\n")
                f.write(f"Outlier Detection: {diagnostics['outlier_count']} outlier(s) detected\n")
                if diagnostics['outlier_years']:
                    f.write(f"  Outlier years: {diagnostics['outlier_years']}\n")
                f.write(f"Normality Test ({diagnostics['normality_test']}):\n")
                if diagnostics['normality_stat'] is not None:
                    f.write(f"  Statistic: {diagnostics['normality_stat']:.4f}\n")
                    f.write(f"  P-value: {diagnostics['normality_p']:.4f}\n")
                f.write(f"  Conclusion: {diagnostics['normality_conclusion']}\n")
            else:
                f.write(f"Diagnostic tests encountered errors: {diagnostics['error']}\n")
            f.write("\n")
            
            # Conclusions
            f.write("CONCLUSIONS\n")
            f.write("-" * 15 + "\n")
            f.write(f"{interpretation['conclusion']}\n\n")
            
            if interpretation['is_significant']:
                f.write("Key Findings:\n")
                f.write(f"• The trend is {interpretation['trend_direction']} at a rate of ")
                f.write(f"{abs(interpretation['annual_change_pp']):.4f} percentage points per year\n")
                f.write(f"• Over the {X.max() - X.min():.0f}-year period, the reappointment proportion ")
                if interpretation['annual_change_pp'] > 0:
                    f.write(f"increased by {interpretation['total_change_pp']:.4f} percentage points\n")
                else:
                    f.write(f"decreased by {abs(interpretation['total_change_pp']):.4f} percentage points\n")
                f.write(f"• The linear model explains {interpretation['variance_explained']:.1f}% of the variance\n")
                f.write(f"• The relationship is statistically significant (p = {results['p_value']:.6f})\n")
            else:
                f.write("Key Findings:\n")
                f.write(f"• No statistically significant trend detected (p = {results['p_value']:.6f})\n")
                f.write(f"• Changes in reappointment proportion appear to be random variation\n")
                f.write(f"• Linear model explains only {interpretation['variance_explained']:.1f}% of the variance\n")
            
            f.write(f"\nAnalysis completed on: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        
        print(f"\nDetailed results saved to: {output_path}")
        print(f"File size: {output_path.stat().st_size / 1024:.1f} KB")
        
    except Exception as e:
        raise Exception(f"Error saving detailed results: {str(e)}")

def print_final_answer(interpretation, results):
    """
    Print the final answer about trend direction and statistical significance.
    
    Args:
        interpretation (dict): Result interpretation
        results (dict): Regression results
    """
    
    print(f"\n" + "=" * 80)
    print("FINAL ANSWER")
    print("=" * 80)
    
    print(f"\nQuestion: Is the government-wide reappointment proportion trend")
    print(f"increasing or declining over the 12-year period, and is it statistically significant?\n")
    
    print(f"ANSWER:")
    print(f"Trend Direction: {interpretation['trend_direction'].upper()}")
    print(f"Statistical Significance: {interpretation['significance_level'].upper()}")
    print(f"P-value: {results['p_value']:.6f}")
    
    if interpretation['is_significant']:
        print(f"\nThe New Brunswick government-wide reappointment proportion is")
        print(f"{interpretation['trend_direction']} at a statistically significant rate of")
        print(f"{abs(interpretation['annual_change_pp']):.4f} percentage points per year")
        print(f"(p = {results['p_value']:.6f} < 0.05).")
    else:
        print(f"\nThe New Brunswick government-wide reappointment proportion shows")
        print(f"no statistically significant trend over the 12-year period")
        print(f"(p = {results['p_value']:.6f} ≥ 0.05).")
    
    print("=" * 80)

def main():
    """Main execution function."""
    
    print("New Brunswick Government - Reappointment Trend Regression Analysis")
    print("=" * 75)
    
    try:
        # Load annual proportions
        df = load_annual_proportions()
        
        # Prepare regression data
        X, Y = prepare_regression_data(df)
        
        # Perform linear regression
        results = perform_linear_regression(X, Y)
        
        # Perform diagnostics
        diagnostics = perform_regression_diagnostics(X, Y, results)
        
        # Interpret results
        interpretation = interpret_results(X, Y, results, diagnostics)
        
        # Save detailed results
        save_detailed_results(df, X, Y, results, diagnostics, interpretation)
        
        # Print final answer
        print_final_answer(interpretation, results)
        
        print(f"\nScript completed successfully!")
        
    except Exception as e:
        print(f"\nERROR: Script failed with error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()