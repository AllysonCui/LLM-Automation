#!/usr/bin/env python3
"""
New Brunswick Government Appointments - Regression Analysis of Reappointment Trends

This script performs comprehensive regression analysis to determine if there is a
statistically significant trend in government-wide reappointment proportions
over the 12-year period from 2013-2024.

Author: Claude Sonnet 4
Date: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
from scipy import stats
from scipy.stats import linregress, jarque_bera, shapiro
import warnings

def load_annual_proportions():
    """
    Load the annual government-wide proportions from step 8.
    
    Returns:
        pd.DataFrame: Annual proportions dataset
    """
    
    # Define input path
    input_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step8_annual_proportions.csv")
    
    # Check if input file exists
    if not input_path.exists():
        raise FileNotFoundError(f"Annual proportions file not found: {input_path}")
    
    print("Loading annual government-wide proportions...")
    print("=" * 50)
    
    try:
        # Load the dataset
        df = pd.read_csv(input_path)
        print(f"Loaded dataset with shape: {df.shape}")
        
        # Ensure required columns exist
        required_columns = ['year', 'total_appointments', 'total_reappointments', 'reappointment_proportion']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        # Sort by year to ensure proper ordering
        df = df.sort_values('year').reset_index(drop=True)
        
        print(f"Years covered: {df['year'].min()} to {df['year'].max()}")
        print(f"Data points: {len(df)}")
        
        return df
        
    except Exception as e:
        raise Exception(f"Error loading annual proportions: {str(e)}")

def prepare_regression_data(df):
    """
    Prepare data for regression analysis.
    
    Args:
        df (pd.DataFrame): Annual proportions dataset
        
    Returns:
        tuple: (X, Y, df_clean) where X is years, Y is proportions, df_clean is cleaned data
    """
    
    print(f"\nPreparing Data for Regression Analysis:")
    print("-" * 45)
    
    # Check for missing values
    missing_data = df[['year', 'reappointment_proportion']].isnull().sum()
    print(f"Missing values check:")
    for col, count in missing_data.items():
        print(f"  {col}: {count}")
    
    # Remove any rows with missing data
    df_clean = df.dropna(subset=['year', 'reappointment_proportion']).copy()
    
    if len(df_clean) != len(df):
        print(f"Removed {len(df) - len(df_clean)} rows with missing data")
    
    if len(df_clean) < 3:
        raise ValueError(f"Insufficient data points for regression: {len(df_clean)}")
    
    # Prepare regression variables
    X = df_clean['year'].values.astype(float)
    Y = df_clean['reappointment_proportion'].values.astype(float)
    
    print(f"Regression data prepared:")
    print(f"  X (years): {len(X)} values from {X.min():.0f} to {X.max():.0f}")
    print(f"  Y (proportions): {len(Y)} values from {Y.min():.4f} to {Y.max():.4f}")
    print(f"  Y range in percentage: {Y.min()*100:.2f}% to {Y.max()*100:.2f}%")
    
    return X, Y, df_clean

def fit_linear_regression(X, Y):
    """
    Fit linear regression model and calculate comprehensive statistics.
    
    Args:
        X (np.array): Independent variable (years)
        Y (np.array): Dependent variable (reappointment proportions)
        
    Returns:
        dict: Comprehensive regression results
    """
    
    print(f"\nFitting Linear Regression Model:")
    print("=" * 35)
    
    try:
        # Fit linear regression using scipy.stats.linregress
        slope, intercept, r_value, p_value, std_err = linregress(X, Y)
        
        # Calculate additional statistics
        n = len(X)
        df_residual = n - 2  # degrees of freedom for residuals
        r_squared = r_value ** 2
        
        # Calculate predicted values and residuals
        Y_pred = slope * X + intercept
        residuals = Y - Y_pred
        
        # Calculate confidence intervals for slope (95%)
        # t-critical value for 95% confidence
        t_critical = stats.t.ppf(0.975, df_residual)
        slope_ci_lower = slope - t_critical * std_err
        slope_ci_upper = slope + t_critical * std_err
        
        # Calculate confidence intervals for intercept
        X_mean = np.mean(X)
        sum_x_squared = np.sum((X - X_mean) ** 2)
        intercept_std_err = std_err * np.sqrt(1/n + X_mean**2 / sum_x_squared)
        intercept_ci_lower = intercept - t_critical * intercept_std_err
        intercept_ci_upper = intercept + t_critical * intercept_std_err
        
        # Calculate mean squared error and root mean squared error
        mse = np.mean(residuals ** 2)
        rmse = np.sqrt(mse)
        
        # Calculate F-statistic for overall model significance
        ss_reg = np.sum((Y_pred - np.mean(Y)) ** 2)  # Sum of squares regression
        ss_res = np.sum(residuals ** 2)  # Sum of squares residual
        f_statistic = (ss_reg / 1) / (ss_res / df_residual)
        f_p_value = 1 - stats.f.cdf(f_statistic, 1, df_residual)
        
        results = {
            'slope': slope,
            'intercept': intercept,
            'r_value': r_value,
            'r_squared': r_squared,
            'p_value': p_value,
            'std_err': std_err,
            'n': n,
            'df_residual': df_residual,
            'slope_ci_lower': slope_ci_lower,
            'slope_ci_upper': slope_ci_upper,
            'intercept_std_err': intercept_std_err,
            'intercept_ci_lower': intercept_ci_lower,
            'intercept_ci_upper': intercept_ci_upper,
            'Y_pred': Y_pred,
            'residuals': residuals,
            'mse': mse,
            'rmse': rmse,
            'f_statistic': f_statistic,
            'f_p_value': f_p_value,
            't_critical': t_critical
        }
        
        print(f"Linear regression fitted successfully")
        print(f"  Slope: {slope:.6f}")
        print(f"  Intercept: {intercept:.6f}")
        print(f"  R-squared: {r_squared:.4f}")
        print(f"  P-value: {p_value:.6f}")
        
        return results
        
    except Exception as e:
        raise Exception(f"Error fitting linear regression: {str(e)}")

def perform_regression_diagnostics(X, Y, results):
    """
    Perform regression diagnostics including Durbin-Watson test and outlier detection.
    
    Args:
        X (np.array): Independent variable
        Y (np.array): Dependent variable
        results (dict): Regression results
        
    Returns:
        dict: Diagnostic test results
    """
    
    print(f"\nPerforming Regression Diagnostics:")
    print("-" * 40)
    
    residuals = results['residuals']
    n = len(residuals)
    
    # Durbin-Watson test for autocorrelation
    try:
        # Calculate Durbin-Watson statistic
        diff_residuals = np.diff(residuals)
        dw_statistic = np.sum(diff_residuals ** 2) / np.sum(residuals ** 2)
        
        print(f"Durbin-Watson test:")
        print(f"  Statistic: {dw_statistic:.4f}")
        if dw_statistic < 1.5:
            dw_interpretation = "Positive autocorrelation detected"
        elif dw_statistic > 2.5:
            dw_interpretation = "Negative autocorrelation detected"
        else:
            dw_interpretation = "No significant autocorrelation"
        print(f"  Interpretation: {dw_interpretation}")
        
    except Exception as e:
        print(f"Warning: Could not calculate Durbin-Watson test: {str(e)}")
        dw_statistic = None
        dw_interpretation = "Could not calculate"
    
    # Outlier detection using standardized residuals
    try:
        residual_std = np.std(residuals)
        standardized_residuals = residuals / residual_std
        outlier_threshold = 2.0  # Standard threshold for outliers
        
        outliers = np.abs(standardized_residuals) > outlier_threshold
        outlier_count = np.sum(outliers)
        
        print(f"\nOutlier detection:")
        print(f"  Outlier threshold: Â±{outlier_threshold} standard deviations")
        print(f"  Number of outliers: {outlier_count}")
        
        if outlier_count > 0:
            outlier_years = X[outliers]
            outlier_residuals = standardized_residuals[outliers]
            print(f"  Outlier years: {outlier_years}")
            print(f"  Standardized residuals: {outlier_residuals}")
        
    except Exception as e:
        print(f"Warning: Could not perform outlier detection: {str(e)}")
        outlier_count = None
        outliers = None
        standardized_residuals = None
    
    # Normality test of residuals
    try:
        if n >= 8:  # Minimum sample size for Shapiro-Wilk
            shapiro_stat, shapiro_p = shapiro(residuals)
            print(f"\nNormality test (Shapiro-Wilk):")
            print(f"  Statistic: {shapiro_stat:.4f}")
            print(f"  P-value: {shapiro_p:.4f}")
            print(f"  Interpretation: {'Residuals are normally distributed' if shapiro_p > 0.05 else 'Residuals may not be normally distributed'}")
        else:
            shapiro_stat, shapiro_p = None, None
            print(f"\nNormality test: Sample size too small for Shapiro-Wilk test")
            
    except Exception as e:
        print(f"Warning: Could not perform normality test: {str(e)}")
        shapiro_stat, shapiro_p = None, None
    
    diagnostic_results = {
        'dw_statistic': dw_statistic,
        'dw_interpretation': dw_interpretation,
        'outlier_count': outlier_count,
        'outliers': outliers,
        'standardized_residuals': standardized_residuals,
        'shapiro_stat': shapiro_stat,
        'shapiro_p': shapiro_p
    }
    
    return diagnostic_results

def calculate_trend_statistics(X, Y, results):
    """
    Calculate trend-specific statistics including annual change and total change.
    
    Args:
        X (np.array): Years
        Y (np.array): Proportions
        results (dict): Regression results
        
    Returns:
        dict: Trend statistics
    """
    
    print(f"\nCalculating Trend Statistics:")
    print("-" * 35)
    
    slope = results['slope']
    
    # Annual change in percentage points
    annual_change_pp = slope * 100  # Convert to percentage points
    
    # Total change over the period
    year_span = X.max() - X.min()
    total_change_pp = slope * year_span * 100  # Total change in percentage points
    
    # Relative change
    initial_value = Y.min()
    relative_change_percent = (total_change_pp / (initial_value * 100)) * 100
    
    print(f"Trend statistics:")
    print(f"  Annual change: {annual_change_pp:+.4f} percentage points per year")
    print(f"  Total change over {year_span:.0f} years: {total_change_pp:+.4f} percentage points")
    print(f"  Relative change: {relative_change_percent:+.2f}%")
    
    trend_stats = {
        'annual_change_pp': annual_change_pp,
        'total_change_pp': total_change_pp,
        'year_span': year_span,
        'relative_change_percent': relative_change_percent
    }
    
    return trend_stats

def determine_trend_significance(results, alpha=0.05):
    """
    Determine if the trend is statistically significant and its direction.
    
    Args:
        results (dict): Regression results
        alpha (float): Significance level (default 0.05)
        
    Returns:
        dict: Trend significance results
    """
    
    print(f"\nDetermining Trend Significance:")
    print("-" * 35)
    
    slope = results['slope']
    p_value = results['p_value']
    
    # Determine significance
    is_significant = p_value < alpha
    
    # Determine direction
    if slope > 0:
        trend_direction = "increasing"
    elif slope < 0:
        trend_direction = "decreasing"
    else:
        trend_direction = "no trend"
    
    # Overall conclusion
    if is_significant:
        if trend_direction == "increasing":
            conclusion = f"The government-wide reappointment proportion is INCREASING significantly over time"
        elif trend_direction == "decreasing":
            conclusion = f"The government-wide reappointment proportion is DECREASING significantly over time"
    else:
        conclusion = f"There is NO statistically significant trend in government-wide reappointment proportion over time"
    
    print(f"Statistical significance test (Î± = {alpha}):")
    print(f"  P-value: {p_value:.6f}")
    print(f"  Is significant: {is_significant}")
    print(f"  Trend direction: {trend_direction}")
    print(f"  Conclusion: {conclusion}")
    
    significance_results = {
        'alpha': alpha,
        'is_significant': is_significant,
        'trend_direction': trend_direction,
        'conclusion': conclusion
    }
    
    return significance_results

def save_detailed_results(df, X, Y, results, diagnostics, trend_stats, significance):
    """
    Save comprehensive statistical results to a text file.
    
    Args:
        df (pd.DataFrame): Original data
        X, Y (np.array): Regression variables
        results (dict): Regression results
        diagnostics (dict): Diagnostic results
        trend_stats (dict): Trend statistics
        significance (dict): Significance results
    """
    
    output_path = Path("scripts/claudesonnet4/version1/execution10/analysis_data/step9_regression_results.txt")
    
    try:
        with open(output_path, 'w') as f:
            f.write("NEW BRUNSWICK GOVERNMENT APPOINTMENTS\n")
            f.write("REGRESSION ANALYSIS OF REAPPOINTMENT TRENDS (2013-2024)\n")
            f.write("=" * 65 + "\n\n")
            
            # Data Summary
            f.write("DATA SUMMARY\n")
            f.write("-" * 15 + "\n")
            f.write(f"Time period: {X.min():.0f} to {X.max():.0f}\n")
            f.write(f"Number of observations: {len(X)}\n")
            f.write(f"Reappointment proportion range: {Y.min():.4f} to {Y.max():.4f}\n")
            f.write(f"Reappointment percentage range: {Y.min()*100:.2f}% to {Y.max()*100:.2f}%\n\n")
            
            # Raw Data
            f.write("RAW DATA\n")
            f.write("-" * 10 + "\n")
            f.write("Year    Total Apps    Reappointments    Proportion    Percentage\n")
            f.write("-" * 65 + "\n")
            for _, row in df.iterrows():
                f.write(f"{int(row['year']):<8} {int(row['total_appointments']):<12} {int(row['total_reappointments']):<14} "
                       f"{row['reappointment_proportion']:<12.4f} {row['reappointment_proportion']*100:<10.2f}%\n")
            f.write("\n")
            
            # Regression Results
            f.write("REGRESSION RESULTS\n")
            f.write("-" * 20 + "\n")
            f.write(f"Regression equation: Y = {results['slope']:.6f} * X + {results['intercept']:.6f}\n")
            f.write(f"Where Y = reappointment proportion, X = year\n\n")
            
            f.write("Model Statistics:\n")
            f.write(f"  Slope (Î²â): {results['slope']:.6f}\n")
            f.write(f"  Intercept (Î²â): {results['intercept']:.6f}\n")
            f.write(f"  R-squared: {results['r_squared']:.4f}\n")
            f.write(f"  Correlation coefficient (r): {results['r_value']:.4f}\n")
            f.write(f"  Standard error of slope: {results['std_err']:.6f}\n")
            f.write(f"  P-value: {results['p_value']:.6f}\n")
            f.write(f"  F-statistic: {results['f_statistic']:.4f}\n")
            f.write(f"  F p-value: {results['f_p_value']:.6f}\n\n")
            
            # Confidence Intervals
            f.write("95% CONFIDENCE INTERVALS\n")
            f.write("-" * 25 + "\n")
            f.write(f"Slope: [{results['slope_ci_lower']:.6f}, {results['slope_ci_upper']:.6f}]\n")
            f.write(f"Intercept: [{results['intercept_ci_lower']:.6f}, {results['intercept_ci_upper']:.6f}]\n\n")
            
            # Model Diagnostics
            f.write("MODEL DIAGNOSTICS\n")
            f.write("-" * 18 + "\n")
            f.write(f"Root Mean Square Error (RMSE): {results['rmse']:.6f}\n")
            f.write(f"Mean Squared Error (MSE): {results['mse']:.6f}\n")
            f.write(f"Degrees of freedom: {results['df_residual']}\n\n")
            
            if diagnostics['dw_statistic'] is not None:
                f.write(f"Durbin-Watson test: {diagnostics['dw_statistic']:.4f}\n")
                f.write(f"  Interpretation: {diagnostics['dw_interpretation']}\n")
            
            if diagnostics['outlier_count'] is not None:
                f.write(f"Outliers detected: {diagnostics['outlier_count']}\n")
            
            if diagnostics['shapiro_p'] is not None:
                f.write(f"Shapiro-Wilk normality test: p = {diagnostics['shapiro_p']:.4f}\n")
                f.write(f"  Residuals normal: {'Yes' if diagnostics['shapiro_p'] > 0.05 else 'No'}\n")
            f.write("\n")
            
            # Trend Analysis
            f.write("TREND ANALYSIS\n")
            f.write("-" * 15 + "\n")
            f.write(f"Annual change: {trend_stats['annual_change_pp']:+.4f} percentage points per year\n")
            f.write(f"Total change over {trend_stats['year_span']:.0f} years: {trend_stats['total_change_pp']:+.4f} percentage points\n")
            f.write(f"Relative change: {trend_stats['relative_change_percent']:+.2f}%\n\n")
            
            # Statistical Significance
            f.write("STATISTICAL SIGNIFICANCE\n")
            f.write("-" * 25 + "\n")
            f.write(f"Significance level (Î±): {significance['alpha']}\n")
            f.write(f"P-value: {results['p_value']:.6f}\n")
            f.write(f"Statistically significant: {'Yes' if significance['is_significant'] else 'No'}\n")
            f.write(f"Trend direction: {significance['trend_direction']}\n\n")
            
            # Final Conclusion
            f.write("CONCLUSION\n")
            f.write("-" * 12 + "\n")
            f.write(f"{significance['conclusion']}\n\n")
            
            if significance['is_significant']:
                f.write(f"The slope coefficient ({results['slope']:.6f}) is statistically significant ")
                f.write(f"(p = {results['p_value']:.6f} < 0.05), indicating a {significance['trend_direction']} ")
                f.write(f"trend in reappointment proportions over the 12-year period.\n\n")
            else:
                f.write(f"The slope coefficient ({results['slope']:.6f}) is not statistically significant ")
                f.write(f"(p = {results['p_value']:.6f} â¥ 0.05), indicating no reliable trend ")
                f.write(f"in reappointment proportions over the 12-year period.\n\n")
            
            f.write(f"Analysis completed on: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        
        print(f"\nDetailed results saved to: {output_path}")
        
    except Exception as e:
        raise Exception(f"Error saving results: {str(e)}")

def print_final_answer(significance, results, trend_stats):
    """
    Print the final answer to the research question.
    
    Args:
        significance (dict): Significance results
        results (dict): Regression results
        trend_stats (dict): Trend statistics
    """
    
    print(f"\n" + "="*80)
    print("FINAL ANSWER")
    print("="*80)
    
    print(f"\nResearch Question: Is the government-wide reappointment proportion trend")
    print(f"increasing or declining over the 12-year period, and is it statistically significant?")
    
    print(f"\nAnswer:")
    print(f"  Trend Direction: {significance['trend_direction'].upper()}")
    print(f"  Statistical Significance: {'YES' if significance['is_significant'] else 'NO'}")
    print(f"  P-value: {results['p_value']:.6f}")
    print(f"  Annual Change: {trend_stats['annual_change_pp']:+.4f} percentage points per year")
    print(f"  Total Change: {trend_stats['total_change_pp']:+.4f} percentage points over {trend_stats['year_span']:.0f} years")
    
    print(f"\nConclusion:")
    print(f"  {significance['conclusion']}")
    
    if significance['is_significant']:
        print(f"\n  This finding is statistically reliable (p < 0.05).")
    else:
        print(f"\n  This finding is not statistically reliable (p â¥ 0.05).")
    
    print("="*80)

def main():
    """Main execution function."""
    
    print("New Brunswick Appointments - Regression Analysis of Reappointment Trends")
    print("=" * 75)
    
    try:
        # Load annual proportions data
        df = load_annual_proportions()
        
        # Prepare data for regression
        X, Y, df_clean = prepare_regression_data(df)
        
        # Fit linear regression model
        results = fit_linear_regression(X, Y)
        
        # Perform regression diagnostics
        diagnostics = perform_regression_diagnostics(X, Y, results)
        
        # Calculate trend statistics
        trend_stats = calculate_trend_statistics(X, Y, results)
        
        # Determine trend significance
        significance = determine_trend_significance(results)
        
        # Save detailed results
        save_detailed_results(df_clean, X, Y, results, diagnostics, trend_stats, significance)
        
        # Print final answer
        print_final_answer(significance, results, trend_stats)
        
        print(f"\nScript completed successfully!")
        
    except Exception as e:
        print(f"\nERROR: Script failed with error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()