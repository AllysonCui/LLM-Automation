#!/usr/bin/env python3
"""
New Brunswick Government Appointments Data Combiner

This script loads appointment data from 2013-2024 CSV files, adds year columns,
combines them into a single dataset, and saves the result.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_and_combine_appointments():
    """
    Load all appointment CSV files from 2013-2024, add year columns, and combine.
    
    Returns:
        pd.DataFrame: Combined dataset with all appointments
    """
    
    # Define the year range
    years = range(2013, 2025)  # 2013 through 2024 inclusive
    
    # List to store individual DataFrames
    dataframes = []
    
    print("Loading appointment data files...")
    
    for year in years:
        filename = f"raw_data/appointments_{year}.csv"
        
        try:
            # Check if file exists
            if not os.path.exists(filename):
                print(f"Warning: File {filename} not found. Skipping...")
                continue
            
            # Load the CSV file
            df = pd.read_csv(filename)
            
            # Add year column
            df['year'] = year
            
            # Store the DataFrame
            dataframes.append(df)
            
            print(f"Loaded {filename}: {df.shape[0]} rows, {df.shape[1]} columns")
            
        except Exception as e:
            print(f"Error loading {filename}: {str(e)}")
            continue
    
    if not dataframes:
        raise ValueError("No valid CSV files were loaded. Please check file paths and data.")
    
    # Combine all DataFrames
    print("\nCombining all datasets...")
    combined_df = pd.concat(dataframes, ignore_index=True)
    
    return combined_df

def create_output_directory():
    """Create the output directory if it doesn't exist."""
    output_dir = Path("scripts/claudesonnet4/version1/execution2/analysis_data")
    output_dir.mkdir(parents=True, exist_ok=True)
    return output_dir

def main():
    """Main execution function."""
    
    try:
        # Load and combine the data
        combined_data = load_and_combine_appointments()
        
        # Create output directory
        output_dir = create_output_directory()
        
        # Define output file path
        output_file = output_dir / "step1_combined_appointments.csv"
        
        # Save the combined dataset
        print(f"\nSaving combined dataset to {output_file}...")
        combined_data.to_csv(output_file, index=False)
        
        # Print dataset information
        print("\n" + "="*50)
        print("COMBINED DATASET SUMMARY")
        print("="*50)
        print(f"Dataset shape: {combined_data.shape}")
        print(f"Total rows: {combined_data.shape[0]:,}")
        print(f"Total columns: {combined_data.shape[1]}")
        
        print(f"\nColumns in combined dataset:")
        for i, col in enumerate(combined_data.columns, 1):
            print(f"  {i:2d}. {col}")
        
        print(f"\nData types:")
        print(combined_data.dtypes)
        
        print(f"\nYear distribution:")
        year_counts = combined_data['year'].value_counts().sort_index()
        for year, count in year_counts.items():
            print(f"  {year}: {count:,} appointments")
        
        print(f"\nMissing values per column:")
        missing_values = combined_data.isnull().sum()
        for col, missing in missing_values.items():
            if missing > 0:
                percentage = (missing / len(combined_data)) * 100
                print(f"  {col}: {missing:,} ({percentage:.1f}%)")
        
        print(f"\nFirst few rows:")
        print(combined_data.head())
        
        print(f"\nDataset successfully saved to: {output_file}")
        
    except Exception as e:
        print(f"Error in main execution: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    # Assumptions documented:
    print("ASSUMPTIONS:")
    print("1. CSV files are located in 'raw_data/' directory")
    print("2. Files are named 'appointments_YYYY.csv' for years 2013-2024")
    print("3. All CSV files have the same column structure")
    print("4. Output directory will be created if it doesn't exist")
    print("5. Index will not be saved in the output CSV file")
    print("-" * 50)
    
    main()