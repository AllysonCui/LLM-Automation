#!/usr/bin/env python3
"""
New Brunswick Government Appointments Reappointments Marker

This script identifies and marks reappointments by analyzing unique combinations
of name, position, and organization across years.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import re

def normalize_name(name):
    """
    Normalize name for better matching by handling common variations.
    
    Args:
        name (str): Original name
    
    Returns:
        str: Normalized name
    """
    if pd.isna(name):
        return name
    
    # Convert to string and strip whitespace
    name = str(name).strip()
    
    # Convert to lowercase for comparison
    name = name.lower()
    
    # Remove extra whitespace
    name = re.sub(r'\s+', ' ', name)
    
    # Handle common abbreviations and variations
    name = re.sub(r'\b(dr|doctor)\b\.?', 'dr', name)
    name = re.sub(r'\b(mr|mister)\b\.?', 'mr', name)
    name = re.sub(r'\b(mrs|ms)\b\.?', 'mrs', name)
    name = re.sub(r'\b(jr|junior)\b\.?', 'jr', name)
    name = re.sub(r'\b(sr|senior)\b\.?', 'sr', name)
    
    # Remove periods and commas
    name = re.sub(r'[.,]', '', name)
    
    return name

def normalize_position(position):
    """
    Normalize position title for better matching.
    
    Args:
        position (str): Original position
    
    Returns:
        str: Normalized position
    """
    if pd.isna(position):
        return position
    
    # Convert to string and strip whitespace
    position = str(position).strip()
    
    # Convert to lowercase
    position = position.lower()
    
    # Remove extra whitespace
    position = re.sub(r'\s+', ' ', position)
    
    # Handle common abbreviations
    position = re.sub(r'\b(dir|director)\b\.?', 'director', position)
    position = re.sub(r'\b(mgr|manager)\b\.?', 'manager', position)
    position = re.sub(r'\b(coord|coordinator)\b\.?', 'coordinator', position)
    position = re.sub(r'\b(admin|administrator)\b\.?', 'administrator', position)
    
    return position

def normalize_org(org):
    """
    Normalize organization name for better matching.
    
    Args:
        org (str): Original organization
    
    Returns:
        str: Normalized organization
    """
    if pd.isna(org):
        return org
    
    # Convert to string and strip whitespace
    org = str(org).strip()
    
    # Convert to lowercase
    org = org.lower()
    
    # Remove extra whitespace
    org = re.sub(r'\s+', ' ', org)
    
    # Handle common abbreviations
    org = re.sub(r'\b(dept|department)\b\.?', 'department', org)
    org = re.sub(r'\b(gov|government)\b\.?', 'government', org)
    org = re.sub(r'\b(assoc|association)\b\.?', 'association', org)
    org = re.sub(r'\b(corp|corporation)\b\.?', 'corporation', org)
    
    return org

def identify_reappointments(df):
    """
    Identify and mark reappointments based on name, position, and organization.
    
    Args:
        df (pd.DataFrame): Dataset with appointments
    
    Returns:
        pd.DataFrame: Updated dataset with reappointments marked
    """
    
    # Create a working copy
    df_work = df.copy()
    
    # Create normalized columns for matching
    df_work['name_normalized'] = df_work['name'].apply(normalize_name)
    df_work['position_normalized'] = df_work['position'].apply(normalize_position)
    df_work['org_normalized'] = df_work['org'].apply(normalize_org)
    
    # Track original reappointed values
    original_reappointed = df_work['reappointed'].copy()
    
    # Create a unique identifier for each person-position-organization combination
    df_work['combo_id'] = (
        df_work['name_normalized'].astype(str) + '|' + 
        df_work['position_normalized'].astype(str) + '|' + 
        df_work['org_normalized'].astype(str)
    )
    
    # Sort by combo_id and year to ensure chronological order
    df_work = df_work.sort_values(['combo_id', 'year']).reset_index(drop=True)
    
    # Initialize reappointed column as False
    df_work['reappointed'] = False
    
    # Group by combo_id and mark reappointments
    reappointment_stats = {
        'total_combinations': 0,
        'combinations_with_reappointments': 0,
        'total_reappointments_marked': 0,
        'originally_marked': 0,
        'newly_identified': 0
    }
    
    print("Analyzing appointment combinations...")
    
    for combo_id, group in df_work.groupby('combo_id'):
        reappointment_stats['total_combinations'] += 1
        
        # Skip if only one occurrence
        if len(group) <= 1:
            continue
        
        # Check if this is a valid combination (not all NaN)
        first_row = group.iloc[0]
        if (pd.isna(first_row['name_normalized']) or 
            pd.isna(first_row['position_normalized']) or 
            pd.isna(first_row['org_normalized'])):
            continue
        
        # Mark all occurrences except the first as reappointments
        indices_to_mark = group.index[1:]  # Skip first occurrence
        
        if len(indices_to_mark) > 0:
            reappointment_stats['combinations_with_reappointments'] += 1
            reappointment_stats['total_reappointments_marked'] += len(indices_to_mark)
            
            # Mark as reappointments
            df_work.loc[indices_to_mark, 'reappointed'] = True
            
            # Print example for verification
            if reappointment_stats['combinations_with_reappointments'] <= 5:
                print(f"Example {reappointment_stats['combinations_with_reappointments']}:")
                print(f"  Name: {first_row['name']}")
                print(f"  Position: {first_row['position']}")
                print(f"  Organization: {first_row['org']}")
                print(f"  Years: {sorted(group['year'].tolist())}")
                print(f"  Reappointments marked: {len(indices_to_mark)}")
    
    # Calculate statistics
    reappointment_stats['originally_marked'] = original_reappointed.sum()
    reappointment_stats['newly_identified'] = (
        df_work['reappointed'].sum() - reappointment_stats['originally_marked']
    )
    
    # Remove working columns
    df_result = df_work.drop(['name_normalized', 'position_normalized', 
                             'org_normalized', 'combo_id'], axis=1)
    
    return df_result, reappointment_stats

def main():
    """Main execution function."""
    
    try:
        # Define input file path
        input_file = Path("scripts/claudesonnet4/version1/execution2/analysis_data/step2_key_columns_data.csv")
        
        # Check if input file exists
        if not input_file.exists():
            raise FileNotFoundError(f"Input file not found: {input_file}")
        
        # Load the dataset
        print(f"Loading key columns dataset from: {input_file}")
        df = pd.read_csv(input_file)
        print(f"Loaded dataset with shape: {df.shape}")
        
        # Show original reappointed statistics
        original_reappointed_count = df['reappointed'].sum()
        print(f"Originally marked reappointments: {original_reappointed_count}")
        
        # Identify and mark reappointments
        df_updated, stats = identify_reappointments(df)
        
        # Define output file path
        output_dir = Path("scripts/claudesonnet4/version1/execution2/analysis_data")
        output_file = output_dir / "step3_repeats_marked.csv"
        
        # Save the updated dataset
        print(f"\nSaving updated dataset to: {output_file}")
        df_updated.to_csv(output_file, index=False)
        
        # Print comprehensive statistics
        print("\n" + "="*50)
        print("REAPPOINTMENT IDENTIFICATION RESULTS")
        print("="*50)
        
        print(f"Total unique name-position-org combinations: {stats['total_combinations']:,}")
        print(f"Combinations with multiple appointments: {stats['combinations_with_reappointments']:,}")
        print(f"Total reappointments marked: {stats['total_reappointments_marked']:,}")
        print(f"Originally marked reappointments: {stats['originally_marked']:,}")
        print(f"Newly identified reappointments: {stats['newly_identified']:,}")
        
        # Show percentage improvement
        if stats['originally_marked'] > 0:
            improvement = (stats['newly_identified'] / stats['originally_marked']) * 100
            print(f"Improvement: {improvement:.1f}% more reappointments identified")
        
        print(f"\nFinal reappointment statistics:")
        reappointed_final = df_updated['reappointed'].value_counts()
        for value, count in reappointed_final.items():
            percentage = (count / len(df_updated)) * 100
            print(f"  {value}: {count:,} ({percentage:.1f}%)")
        
        print(f"\nYear distribution of reappointments:")
        reappointed_by_year = df_updated[df_updated['reappointed'] == True]['year'].value_counts().sort_index()
        for year, count in reappointed_by_year.items():
            print(f"  {year}: {count:,} reappointments")
        
        print(f"\nDataset successfully updated and saved to: {output_file}")
        
    except Exception as e:
        print(f"Error in main execution: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    # Document assumptions and methodology
    print("REAPPOINTMENT IDENTIFICATION ASSUMPTIONS:")
    print("1. Same person = same normalized name")
    print("2. Same role = same normalized position title")
    print("3. Same organization = same normalized organization name")
    print("4. First occurrence chronologically (by year) is original appointment")
    print("5. All subsequent occurrences are reappointments")
    print("6. Name/position/org normalization handles common variations")
    print("7. Missing values are handled gracefully")
    print("-" * 50)
    
    main()