#!/usr/bin/env python3
"""
New Brunswick Government Appointments Count Summary

This script creates a summary table of appointment counts by organization and year,
with validation and data quality handling.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def clean_organization_names(org_series):
    """
    Clean and standardize organization names.
    
    Args:
        org_series (pd.Series): Series containing organization names
    
    Returns:
        pd.Series: Cleaned organization names
    """
    # Convert to string and handle missing values
    cleaned = org_series.astype(str).str.strip()
    
    # Replace common variations of missing values
    missing_values = ['nan', 'none', 'null', '', 'unknown', 'n/a', 'na']
    cleaned = cleaned.replace(missing_values, 'Unknown Organization', regex=False)
    cleaned = cleaned.replace('nan', 'Unknown Organization')
    
    # Remove extra whitespace
    cleaned = cleaned.str.replace(r'\s+', ' ', regex=True)
    
    return cleaned

def validate_year_data(year_series):
    """
    Validate and clean year data.
    
    Args:
        year_series (pd.Series): Series containing year values
    
    Returns:
        pd.Series: Cleaned year data
    """
    # Convert to numeric, handling non-numeric values
    years_numeric = pd.to_numeric(year_series, errors='coerce')
    
    # Check for reasonable year range (assuming appointments from 2000-2030)
    valid_range = (years_numeric >= 2000) & (years_numeric <= 2030)
    
    # Mark invalid years as missing
    years_cleaned = years_numeric.where(valid_range)
    
    return years_cleaned

def create_appointment_counts_table(df):
    """
    Create a pivot table of appointment counts by organization and year.
    
    Args:
        df (pd.DataFrame): The appointments dataset
    
    Returns:
        pd.DataFrame: Pivot table with organizations as rows, years as columns
    """
    
    # Clean organization names
    df_clean = df.copy()
    df_clean['org_clean'] = clean_organization_names(df_clean['org'])
    
    # Validate and clean years
    df_clean['year_clean'] = validate_year_data(df_clean['year'])
    
    # Remove rows with invalid years
    df_valid = df_clean.dropna(subset=['year_clean'])
    df_valid['year_clean'] = df_valid['year_clean'].astype(int)
    
    # Group by organization and year, count appointments
    counts = df_valid.groupby(['org_clean', 'year_clean']).size().reset_index(name='appointment_count')
    
    # Create pivot table
    pivot_table = counts.pivot(index='org_clean', columns='year_clean', values='appointment_count')
    
    # Fill missing values with 0
    pivot_table = pivot_table.fillna(0).astype(int)
    
    # Sort by total appointments (descending)
    pivot_table['Total'] = pivot_table.sum(axis=1)
    pivot_table = pivot_table.sort_values('Total', ascending=False)
    
    return pivot_table, df_valid

def main():
    """Main execution function."""
    
    try:
        # Define input file path
        input_file = Path("scripts/claudesonnet4/version1/execution2/analysis_data/step3_repeats_marked.csv")
        
        # Check if input file exists
        if not input_file.exists():
            raise FileNotFoundError(f"Input file not found: {input_file}")
        
        # Load the dataset
        print(f"Loading reappointments dataset from: {input_file}")
        df = pd.read_csv(input_file)
        print(f"Loaded dataset with shape: {df.shape}")
        
        # Check for required columns
        required_columns = ['org', 'year']
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        # Data quality assessment
        print(f"\nData Quality Assessment:")
        print(f"  Total records: {len(df):,}")
        print(f"  Missing organization names: {df['org'].isna().sum():,}")
        print(f"  Missing years: {df['year'].isna().sum():,}")
        
        # Identify unique organizations and years before cleaning
        unique_orgs_raw = df['org'].nunique()
        unique_years_raw = df['year'].nunique()
        print(f"  Unique organizations (raw): {unique_orgs_raw:,}")
        print(f"  Unique years (raw): {unique_years_raw:,}")
        
        # Create appointment counts table
        print(f"\nCreating appointment counts summary...")
        counts_table, df_valid = create_appointment_counts_table(df)
        
        # Data validation
        total_valid_records = len(df_valid)
        total_counted = counts_table.drop('Total', axis=1).sum().sum()
        
        if total_valid_records != total_counted:
            print(f"Warning: Record count mismatch. Valid records: {total_valid_records}, Counted: {total_counted}")
        
        # Define output file path
        output_dir = Path("scripts/claudesonnet4/version1/execution2/analysis_data")
        output_file = output_dir / "step4_employee_counts.csv"
        
        # Save the counts table
        print(f"\nSaving appointment counts to: {output_file}")
        counts_table.to_csv(output_file)
        
        # Print comprehensive results
        print("\n" + "="*80)
        print("APPOINTMENT COUNTS SUMMARY")
        print("="*80)
        
        print(f"Summary Statistics:")
        print(f"  Total valid records processed: {total_valid_records:,}")
        print(f"  Records with invalid/missing years removed: {len(df) - total_valid_records:,}")
        print(f"  Organizations in summary: {len(counts_table):,}")
        print(f"  Years covered: {counts_table.columns[:-1].min()}-{counts_table.columns[:-1].max()}")
        
        print(f"\nTop 10 Organizations by Total Appointments:")
        top_orgs = counts_table.head(10)
        for i, (org, row) in enumerate(top_orgs.iterrows(), 1):
            print(f"  {i:2d}. {org}: {row['Total']:,} appointments")
        
        print(f"\nAppointments by Year (All Organizations):")
        yearly_totals = counts_table.drop('Total', axis=1).sum()
        for year, total in yearly_totals.items():
            print(f"  {year}: {total:,} appointments")
        
        print(f"\nSummary Table Preview (Top 5 Organizations):")
        print("-" * 80)
        # Display first few organizations and years
        display_table = counts_table.head(5)
        # Limit to first 10 years for display if there are many years
        year_cols = [col for col in display_table.columns if col != 'Total']
        if len(year_cols) > 10:
            display_cols = year_cols[:10] + ['Total']
            display_table = display_table[display_cols]
            print("(Showing first 10 years only)")
        
        print(display_table.to_string())
        
        print(f"\nData Quality Summary:")
        print(f"  Organizations with single appointments: {(counts_table['Total'] == 1).sum():,}")
        print(f"  Organizations with 10+ appointments: {(counts_table['Total'] >= 10).sum():,}")
        print(f"  Organizations with 50+ appointments: {(counts_table['Total'] >= 50).sum():,}")
        
        # Identify years with unusually high/low activity
        yearly_stats = yearly_totals.describe()
        print(f"\nYearly Appointment Statistics:")
        print(f"  Average per year: {yearly_stats['mean']:.1f}")
        print(f"  Highest year: {yearly_totals.idxmax()} ({yearly_totals.max():,} appointments)")
        print(f"  Lowest year: {yearly_totals.idxmin()} ({yearly_totals.min():,} appointments)")
        
        # Check for potential data quality issues
        print(f"\nData Quality Flags:")
        if (counts_table['Total'] > yearly_totals.mean() * 2).any():
            super_active_orgs = counts_table[counts_table['Total'] > yearly_totals.mean() * 2]
            print(f"  Organizations with unusually high activity (>{yearly_totals.mean() * 2:.0f} appointments): {len(super_active_orgs)}")
        
        unknown_org_count = counts_table.loc['Unknown Organization', 'Total'] if 'Unknown Organization' in counts_table.index else 0
        if unknown_org_count > 0:
            print(f"  Records with unknown/missing organization: {unknown_org_count:,}")
        
        print(f"\nAppointment counts table successfully saved to: {output_file}")
        
    except Exception as e:
        print(f"Error in main execution: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    # Document assumptions and approach
    print("APPOINTMENT COUNTS ANALYSIS ASSUMPTIONS:")
    print("1. Each row represents one appointment (including reappointments)")
    print("2. Organizations with missing/invalid names are labeled 'Unknown Organization'")
    print("3. Years outside reasonable range (2000-2030) are considered invalid")
    print("4. Pivot table shows appointment counts, not unique individuals")
    print("5. Organizations are sorted by total appointment count (descending)")
    print("6. Missing values in the pivot table are filled with 0")
    print("-" * 80)
    
    main()