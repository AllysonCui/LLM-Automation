#!/usr/bin/env python3
"""
New Brunswick Government Reappointment Counts

This script creates a summary table of reappointment counts by organization and year.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def validate_reappointment_data(df):
    """
    Validate the input data and filter for reappointments.
    
    Args:
        df (pd.DataFrame): Input dataset
    
    Returns:
        pd.DataFrame: Filtered dataset with only reappointments
    """
    
    print("Validating reappointment data...")
    
    # Check for required columns
    required_columns = ['org', 'year', 'reappointed', 'name', 'position']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        raise ValueError(f"Missing required columns: {missing_columns}")
    
    # Report reappointment statistics
    total_records = len(df)
    reappointed_count = df['reappointed'].sum()
    print(f"Total records: {total_records:,}")
    print(f"Records marked as reappointed: {reappointed_count:,}")
    print(f"Reappointment rate: {(reappointed_count/total_records)*100:.1f}%")
    
    # Filter for reappointments only
    reappointed_df = df[df['reappointed'] == True].copy()
    print(f"Filtering to {len(reappointed_df):,} reappointment records")
    
    if len(reappointed_df) == 0:
        raise ValueError("No reappointments found in dataset")
    
    # Check for missing values in key columns
    print(f"\nMissing values in reappointment data:")
    for col in ['org', 'year']:
        missing_count = reappointed_df[col].isnull().sum()
        if missing_count > 0:
            percentage = (missing_count / len(reappointed_df)) * 100
            print(f"  {col}: {missing_count:,} missing ({percentage:.1f}%)")
        else:
            print(f"  {col}: No missing values")
    
    # Handle missing organizations
    missing_org_count = reappointed_df['org'].isnull().sum()
    if missing_org_count > 0:
        print(f"\nReplacing {missing_org_count} missing organizations with 'Unknown Organization'")
        reappointed_df['org'] = reappointed_df['org'].fillna('Unknown Organization')
    
    # Handle missing years
    missing_year_count = reappointed_df['year'].isnull().sum()
    if missing_year_count > 0:
        print(f"Removing {missing_year_count} records with missing years")
        reappointed_df = reappointed_df.dropna(subset=['year'])
    
    # Ensure year is integer
    reappointed_df['year'] = reappointed_df['year'].astype(int)
    
    # Show year range
    min_year = reappointed_df['year'].min()
    max_year = reappointed_df['year'].max()
    print(f"Reappointment year range: {min_year} to {max_year}")
    
    return reappointed_df

def create_reappointment_counts(df):
    """
    Create counts of reappointments by organization and year with debugging.
    
    Args:
        df (pd.DataFrame): Filtered reappointment dataset
    
    Returns:
        pd.DataFrame: Summary table with organizations as rows, years as columns
    """
    
    print("\nCreating reappointment counts table...")
    
    # Group by organization and year, count reappointments
    print("Grouping data by organization and year...")
    grouped_counts = df.groupby(['org', 'year']).size().reset_index(name='reappointment_count')
    
    print(f"Created {len(grouped_counts)} organization-year combinations")
    
    # Debug: Show sample of grouped data
    print(f"\nSample of grouped data (first 10 rows):")
    print(grouped_counts.head(10))
    
    # Validate that we have actual counts
    total_reappointments = grouped_counts['reappointment_count'].sum()
    print(f"Total reappointments in grouped data: {total_reappointments:,}")
    
    if total_reappointments != len(df):
        print(f"Warning: Count mismatch - grouped total ({total_reappointments}) != input records ({len(df)})")
    
    # Show distribution of counts
    print(f"\nReappointment count distribution:")
    count_dist = grouped_counts['reappointment_count'].describe()
    print(count_dist)
    
    # Create pivot table with organizations as rows, years as columns
    print(f"\nCreating pivot table...")
    pivot_table = grouped_counts.pivot(index='org', columns='year', values='reappointment_count')
    
    # Fill missing values with 0 and convert to integers
    pivot_table = pivot_table.fillna(0).astype(int)
    
    print(f"Pivot table shape: {pivot_table.shape}")
    
    # Ensure column names (years) are integers
    pivot_table.columns = pivot_table.columns.astype(int)
    
    # Sort columns (years) in ascending order
    pivot_table = pivot_table.sort_index(axis=1)
    
    # Add total column
    pivot_table['Total'] = pivot_table.sum(axis=1)
    
    # Sort by total (descending) to show most active organizations first
    pivot_table = pivot_table.sort_values('Total', ascending=False)
    
    # Validate pivot table
    pivot_total = pivot_table['Total'].sum()
    print(f"Total reappointments in pivot table: {pivot_total:,}")
    
    if pivot_total != total_reappointments:
        print(f"Warning: Pivot table total ({pivot_total}) != grouped total ({total_reappointments})")
    
    # Check for organizations with non-zero totals
    non_zero_orgs = (pivot_table['Total'] > 0).sum()
    print(f"Organizations with reappointments: {non_zero_orgs} out of {len(pivot_table)}")
    
    return pivot_table

def analyze_reappointment_patterns(pivot_table):
    """
    Analyze reappointment patterns and provide insights.
    
    Args:
        pivot_table (pd.DataFrame): Summary table
    """
    
    print("\n" + "="*50)
    print("REAPPOINTMENT PATTERNS ANALYSIS")
    print("="*50)
    
    # Basic statistics
    total_reappointments = pivot_table['Total'].sum()
    num_organizations = len(pivot_table)
    orgs_with_reappointments = (pivot_table['Total'] > 0).sum()
    
    print(f"Total reappointments across all organizations: {total_reappointments:,}")
    print(f"Number of organizations in table: {num_organizations}")
    print(f"Organizations with reappointments: {orgs_with_reappointments}")
    print(f"Organizations without reappointments: {num_organizations - orgs_with_reappointments}")
    
    if orgs_with_reappointments > 0:
        avg_reappointments = total_reappointments / orgs_with_reappointments
        print(f"Average reappointments per active organization: {avg_reappointments:.1f}")
    
    # Top organizations by reappointments
    active_orgs = pivot_table[pivot_table['Total'] > 0]
    if len(active_orgs) > 0:
        print(f"\nTop 10 organizations by reappointments:")
        top_10 = active_orgs.head(10)
        for i, (org, row) in enumerate(top_10.iterrows(), 1):
            percentage = (row['Total'] / total_reappointments) * 100
            print(f"  {i:2d}. {org[:50]:<50} {row['Total']:,} ({percentage:.1f}%)")
    
    # Year-by-year reappointment totals
    year_columns = [col for col in pivot_table.columns if col != 'Total']
    if year_columns:
        print(f"\nReappointments by year:")
        yearly_totals = pivot_table[year_columns].sum()
        for year in sorted(yearly_totals.index):
            print(f"  {year}: {yearly_totals[year]:,}")
        
        # Calculate year-over-year changes
        if len(yearly_totals) > 1:
            print(f"\nYear-over-year changes:")
            for i in range(1, len(yearly_totals)):
                prev_year = sorted(yearly_totals.index)[i-1]
                curr_year = sorted(yearly_totals.index)[i]
                prev_count = yearly_totals[prev_year]
                curr_count = yearly_totals[curr_year]
                if prev_count > 0:
                    change = ((curr_count - prev_count) / prev_count) * 100
                    print(f"  {prev_year} to {curr_year}: {change:+.1f}% ({prev_count:,} → {curr_count:,})")
    
    # Organizations with consistent reappointments
    if len(year_columns) >= 3:
        consistent_orgs = active_orgs[(active_orgs[year_columns] > 0).sum(axis=1) >= 3]
        if len(consistent_orgs) > 0:
            print(f"\nOrganizations with reappointments in 3+ years: {len(consistent_orgs)}")
            for org, row in consistent_orgs.head(5).iterrows():
                active_years = (row[year_columns] > 0).sum()
                print(f"  {org[:50]:<50} {row['Total']:,} total ({active_years} years)")

def main():
    """Main execution function."""
    
    try:
        # Define input file path
        input_file = Path("scripts/claudesonnet4/version1/execution2/analysis_data/step3_repeats_marked.csv")
        
        # Check if input file exists
        if not input_file.exists():
            raise FileNotFoundError(f"Input file not found: {input_file}")
        
        # Load the dataset
        print(f"Loading dataset from: {input_file}")
        df = pd.read_csv(input_file)
        print(f"Loaded dataset with shape: {df.shape}")
        
        # Validate and filter for reappointments
        reappointed_df = validate_reappointment_data(df)
        
        # Create reappointment counts table
        counts_table = create_reappointment_counts(reappointed_df)
        
        # Define output file path
        output_dir = Path("scripts/claudesonnet4/version1/execution2/analysis_data")
        output_file = output_dir / "step5_reappointment_counts.csv"
        
        # Save the counts table
        print(f"\nSaving reappointment counts table to: {output_file}")
        counts_table.to_csv(output_file)
        
        # Analyze and print results
        analyze_reappointment_patterns(counts_table)
        
        # Display sample of the table
        print(f"\nSample of reappointment counts table (first 10 rows):")
        print(counts_table.head(10))
        
        print(f"\nTable dimensions: {counts_table.shape[0]} organizations × {counts_table.shape[1]} columns")
        print(f"Reappointment counts table successfully saved to: {output_file}")
        
    except Exception as e:
        print(f"Error in main execution: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    # Document assumptions
    print("REAPPOINTMENT COUNTS ASSUMPTIONS:")
    print("1. Only records where 'reappointed' is True are included")
    print("2. Each row represents one reappointment")
    print("3. Missing organizations are replaced with 'Unknown Organization'")
    print("4. Records with missing years are excluded")
    print("5. Zero counts indicate no reappointments for that org/year combination")
    print("6. Year columns are formatted as integers to match appointment counts")
    print("7. Organizations are sorted by total reappointments (descending)")
    print("-" * 50)
    
    main()