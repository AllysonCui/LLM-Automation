#!/usr/bin/env python3
"""
New Brunswick Government Reappointment Rates Calculator

This script merges appointment counts and reappointment counts to calculate 
reappointment rates by organization and year.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_and_validate_counts_data():
    """
    Load and validate both appointment counts and reappointment counts datasets.
    
    Returns:
        tuple: (appointment_counts_df, reappointment_counts_df)
    """
    
    # Define file paths
    data_dir = Path("scripts/claudesonnet4/version1/execution2/analysis_data")
    appointment_file = data_dir / "step4_appointment_counts.csv"
    reappointment_file = data_dir / "step5_reappointment_counts.csv"
    
    # Check if files exist
    if not appointment_file.exists():
        raise FileNotFoundError(f"Appointment counts file not found: {appointment_file}")
    if not reappointment_file.exists():
        raise FileNotFoundError(f"Reappointment counts file not found: {reappointment_file}")
    
    # Load datasets
    print(f"Loading appointment counts from: {appointment_file}")
    appointment_df = pd.read_csv(appointment_file, index_col=0)  # org is index
    print(f"Appointment counts shape: {appointment_df.shape}")
    
    print(f"Loading reappointment counts from: {reappointment_file}")
    reappointment_df = pd.read_csv(reappointment_file, index_col=0)  # org is index
    print(f"Reappointment counts shape: {reappointment_df.shape}")
    
    # Validate structure
    print(f"\nAppointment counts columns: {list(appointment_df.columns)}")
    print(f"Reappointment counts columns: {list(reappointment_df.columns)}")
    
    # Check for 'Total' column and remove it for merging
    if 'Total' in appointment_df.columns:
        appointment_df = appointment_df.drop('Total', axis=1)
        print("Removed 'Total' column from appointment counts")
    
    if 'Total' in reappointment_df.columns:
        reappointment_df = reappointment_df.drop('Total', axis=1)
        print("Removed 'Total' column from reappointment counts")
    
    # Identify year columns (should be integers)
    emp_years = [col for col in appointment_df.columns if str(col).isdigit()]
    reapp_years = [col for col in reappointment_df.columns if str(col).isdigit()]
    
    print(f"Appointment data years: {sorted(emp_years)}")
    print(f"Reappointment data years: {sorted(reapp_years)}")
    
    # Convert year columns to integers for consistency
    appointment_df.columns = [int(col) if str(col).isdigit() else col for col in appointment_df.columns]
    reappointment_df.columns = [int(col) if str(col).isdigit() else col for col in reappointment_df.columns]
    
    return appointment_df, reappointment_df

def merge_and_calculate_rates(appointment_df, reappointment_df):
    """
    Merge datasets and calculate reappointment rates.
    
    Args:
        appointment_df (pd.DataFrame): Appointment counts by org and year
        reappointment_df (pd.DataFrame): Reappointment counts by org and year
    
    Returns:
        pd.DataFrame: Merged data with reappointment rates
    """
    
    print("\nMerging datasets and calculating rates...")
    
    # Get all years from both datasets
    emp_years = [col for col in appointment_df.columns if isinstance(col, int)]
    reapp_years = [col for col in reappointment_df.columns if isinstance(col, int)]
    all_years = sorted(set(emp_years + reapp_years))
    
    print(f"Processing years: {all_years}")
    
    # Get all organizations from both datasets
    all_orgs = sorted(set(appointment_df.index.tolist() + reappointment_df.index.tolist()))
    print(f"Total organizations: {len(all_orgs)}")
    
    # Create comprehensive result list
    results = []
    
    for org in all_orgs:
        for year in all_years:
            # Get appointment count (default to 0 if missing)
            if org in appointment_df.index and year in appointment_df.columns:
                total_appointments = appointment_df.loc[org, year]
            else:
                total_appointments = 0
            
            # Get reappointment count (default to 0 if missing)
            if org in reappointment_df.index and year in reappointment_df.columns:
                reappointments = reappointment_df.loc[org, year]
            else:
                reappointments = 0
            
            # Calculate reappointment rate
            if total_appointments > 0:
                reappointment_rate = reappointments / total_appointments
            else:
                reappointment_rate = np.nan  # Use NaN for undefined rates
            
            results.append({
                'org': org,
                'year': year,
                'total_appointments': int(total_appointments),
                'reappointments': int(reappointments),
                'reappointment_rate': reappointment_rate
            })
    
    # Create DataFrame
    result_df = pd.DataFrame(results)
    
    # Validate results
    print(f"\nMerged dataset shape: {result_df.shape}")
    print(f"Records with appointments > 0: {(result_df['total_appointments'] > 0).sum():,}")
    print(f"Records with reappointments > 0: {(result_df['reappointments'] > 0).sum():,}")
    print(f"Records with valid rates: {result_df['reappointment_rate'].notna().sum():,}")
    
    return result_df

def analyze_reappointment_rates(df):
    """
    Analyze reappointment rates and provide insights.
    
    Args:
        df (pd.DataFrame): Merged dataset with rates
    """
    
    print("\n" + "="*50)
    print("REAPPOINTMENT RATES ANALYSIS")
    print("="*50)
    
    # Filter for records with valid data
    valid_data = df[(df['total_appointments'] > 0) & (df['reappointment_rate'].notna())].copy()
    
    print(f"Total org-year combinations: {len(df):,}")
    print(f"Combinations with valid data: {len(valid_data):,}")
    
    if len(valid_data) == 0:
        print("No valid data for rate analysis")
        return
    
    # Overall statistics
    print(f"\nOverall reappointment rate statistics:")
    rate_stats = valid_data['reappointment_rate'].describe()
    print(f"  Mean rate: {rate_stats['mean']:.3f} ({rate_stats['mean']*100:.1f}%)")
    print(f"  Median rate: {rate_stats['50%']:.3f} ({rate_stats['50%']*100:.1f}%)")
    print(f"  Standard deviation: {rate_stats['std']:.3f}")
    print(f"  Min rate: {rate_stats['min']:.3f} ({rate_stats['min']*100:.1f}%)")
    print(f"  Max rate: {rate_stats['max']:.3f} ({rate_stats['max']*100:.1f}%)")
    
    # Organizations with highest average reappointment rates
    print(f"\nOrganizations with highest average reappointment rates:")
    
    # Calculate average rates by organization (only for orgs with valid data)
    org_avg_rates = valid_data.groupby('org').agg({
        'reappointment_rate': 'mean',
        'total_appointments': 'sum',
        'reappointments': 'sum',
        'year': 'count'  # number of years with data
    }).rename(columns={'year': 'years_active'})
    
    # Filter organizations with at least 10 total appointments for meaningful rates
    significant_orgs = org_avg_rates[org_avg_rates['total_appointments'] >= 10].copy()
    significant_orgs = significant_orgs.sort_values('reappointment_rate', ascending=False)
    
    print(f"\nTop 15 organizations by average reappointment rate (min 10 total appointments):")
    for i, (org, row) in enumerate(significant_orgs.head(15).iterrows(), 1):
        avg_rate = row['reappointment_rate']
        total_emp = int(row['total_appointments'])
        total_reapp = int(row['reappointments'])
        years = int(row['years_active'])
        print(f"  {i:2d}. {org[:45]:<45} {avg_rate:.3f} ({avg_rate*100:.1f}%) "
              f"[{total_reapp}/{total_emp} over {years} years]")
    
    # Year-by-year average rates
    print(f"\nAverage reappointment rates by year:")
    yearly_rates = valid_data.groupby('year')['reappointment_rate'].agg(['mean', 'count']).round(3)
    for year, row in yearly_rates.iterrows():
        print(f"  {year}: {row['mean']:.3f} ({row['mean']*100:.1f}%) "
              f"[{int(row['count'])} organizations]")
    
    # Edge cases analysis
    print(f"\nEdge cases analysis:")
    
    # Organizations with 100% reappointment rate
    perfect_rates = valid_data[valid_data['reappointment_rate'] == 1.0]
    if len(perfect_rates) > 0:
        print(f"  Org-year combinations with 100% reappointment rate: {len(perfect_rates)}")
        perfect_orgs = perfect_rates.groupby('org').size().sort_values(ascending=False)
        print(f"  Organizations with most 100% rate years: {dict(perfect_orgs.head(3))}")
    
    # Organizations with zero reappointment rate but appointments
    zero_rates = df[(df['total_appointments'] > 0) & (df['reappointments'] == 0)]
    if len(zero_rates) > 0:
        print(f"  Org-year combinations with 0% reappointment rate: {len(zero_rates)}")
    
    # Division by zero cases (handled as NaN)
    zero_appointments = df[df['total_appointments'] == 0]
    if len(zero_appointments) > 0:
        print(f"  Org-year combinations with zero appointments: {len(zero_appointments)}")

def main():
    """Main execution function."""
    
    try:
        # Load and validate data
        appointment_df, reappointment_df = load_and_validate_counts_data()
        
        # Merge and calculate rates
        rates_df = merge_and_calculate_rates(appointment_df, reappointment_df)
        
        # Define output file path
        output_dir = Path("scripts/claudesonnet4/version1/execution2/analysis_data")
        output_file = output_dir / "step6_reappointment_rates.csv"
        
        # Save the results
        print(f"\nSaving reappointment rates to: {output_file}")
        rates_df.to_csv(output_file, index=False)
        
        # Analyze results
        analyze_reappointment_rates(rates_df)
        
        # Display sample of results
        print(f"\nSample of reappointment rates data (first 10 rows):")
        print(rates_df.head(10))
        
        print(f"\nSample of highest rates:")
        valid_rates = rates_df[rates_df['reappointment_rate'].notna()].copy()
        if len(valid_rates) > 0:
            top_rates = valid_rates.nlargest(5, 'reappointment_rate')
            print(top_rates[['org', 'year', 'total_appointments', 'reappointments', 'reappointment_rate']])
        
        print(f"\nReappointment rates successfully saved to: {output_file}")
        
    except Exception as e:
        print(f"Error in main execution: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    # Document assumptions and handling
    print("REAPPOINTMENT RATES ASSUMPTIONS:")
    print("1. Rate = reappointments / total_appointments for each org-year combination")
    print("2. Division by zero (0 appointments) results in NaN rate")
    print("3. Missing data in either dataset defaults to 0 for that metric")
    print("4. Rates are calculated for all org-year combinations from both datasets")
    print("5. Organizations need ≥10 total appointments for 'significant' rate analysis")
    print("6. NaN rates are excluded from statistical calculations")
    print("-" * 50)
    
    main()