#!/usr/bin/env python3
"""
New Brunswick Government Yearly Maximum Reappointment Rates

This script identifies the organization with the highest reappointment rate 
for each year and creates a visualization of trends over time.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

def load_reappointment_rates():
    """
    Load the reappointment rates dataset.
    
    Returns:
        pd.DataFrame: Reappointment rates data
    """
    
    # Define input file path
    input_file = Path("scripts/claudesonnet4/version1/execution2/analysis_data/step6_reappointment_rates.csv")
    
    # Check if file exists
    if not input_file.exists():
        raise FileNotFoundError(f"Reappointment rates file not found: {input_file}")
    
    # Load dataset
    print(f"Loading reappointment rates from: {input_file}")
    df = pd.read_csv(input_file)
    print(f"Loaded dataset with shape: {df.shape}")
    
    # Validate required columns
    required_columns = ['org', 'year', 'total_appointments', 'reappointments', 'reappointment_rate']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        raise ValueError(f"Missing required columns: {missing_columns}")
    
    print(f"Columns: {list(df.columns)}")
    
    return df

def identify_yearly_max_rates(df):
    """
    Identify the organization with highest reappointment rate for each year.
    
    Tie-breaking approach:
    1. Highest reappointment rate
    2. If tied, organization with most total appointments (more significant sample)
    3. If still tied, alphabetical order by organization name
    
    Args:
        df (pd.DataFrame): Reappointment rates data
    
    Returns:
        pd.DataFrame: Yearly maximum rates with columns: year, top_org, max_rate
    """
    
    print("\nIdentifying yearly maximum reappointment rates...")
    
    # Filter for valid data (non-null rates and positive appointments)
    valid_data = df[
        (df['reappointment_rate'].notna()) & 
        (df['total_appointments'] > 0)
    ].copy()
    
    print(f"Valid records for analysis: {len(valid_data):,}")
    
    if len(valid_data) == 0:
        raise ValueError("No valid data found for analysis")
    
    # Get available years
    years = sorted(valid_data['year'].unique())
    print(f"Years with data: {years}")
    
    # Process each year
    yearly_results = []
    tie_info = []
    
    for year in years:
        year_data = valid_data[valid_data['year'] == year].copy()
        
        if len(year_data) == 0:
            print(f"Warning: No valid data for year {year}")
            continue
        
        # Find maximum rate for the year
        max_rate = year_data['reappointment_rate'].max()
        
        # Find all organizations with the maximum rate (potential ties)
        max_rate_orgs = year_data[year_data['reappointment_rate'] == max_rate].copy()
        
        if len(max_rate_orgs) > 1:
            # Handle ties using our tie-breaking approach
            tie_info.append({
                'year': year,
                'max_rate': max_rate,
                'tied_orgs': len(max_rate_orgs),
                'org_names': max_rate_orgs['org'].tolist()
            })
            
            # Tie-breaker 1: Most total appointments
            max_appointments = max_rate_orgs['total_appointments'].max()
            max_rate_orgs = max_rate_orgs[max_rate_orgs['total_appointments'] == max_appointments]
            
            if len(max_rate_orgs) > 1:
                # Tie-breaker 2: Alphabetical order
                max_rate_orgs = max_rate_orgs.sort_values('org')
        
        # Select the top organization (first after tie-breaking)
        top_org_row = max_rate_orgs.iloc[0]
        
        yearly_results.append({
            'year': year,
            'top_org': top_org_row['org'],
            'max_rate': top_org_row['reappointment_rate'],
            'total_appointments': top_org_row['total_appointments'],
            'reappointments': top_org_row['reappointments']
        })
    
    # Report ties
    if tie_info:
        print(f"\nTie-breaking applied for {len(tie_info)} years:")
        for tie in tie_info:
            print(f"  {tie['year']}: {tie['tied_orgs']} orgs tied at {tie['max_rate']:.3f}")
            print(f"    Organizations: {', '.join(tie['org_names'][:3])}{'...' if len(tie['org_names']) > 3 else ''}")
    
    # Create results DataFrame
    results_df = pd.DataFrame(yearly_results)
    
    # Keep only required columns for output
    output_df = results_df[['year', 'top_org', 'max_rate']].copy()
    
    print(f"\nYearly maximum rates identified for {len(output_df)} years")
    
    return output_df, results_df

def create_visualization(results_df, output_dir):
    """
    Create a visualization of yearly maximum reappointment rates.
    
    Args:
        results_df (pd.DataFrame): Detailed results with additional columns
        output_dir (Path): Output directory for saving the plot
    """
    
    print("\nCreating visualization...")
    
    # Set up the plot
    plt.style.use('default')
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # Plot the trend line
    ax.plot(results_df['year'], results_df['max_rate'], 
            marker='o', linewidth=2, markersize=8, 
            color='#2E86AB', markerfacecolor='#A23B72')
    
    # Customize the plot
    ax.set_xlabel('Year', fontsize=12, fontweight='bold')
    ax.set_ylabel('Maximum Reappointment Rate', fontsize=12, fontweight='bold')
    ax.set_title('Yearly Maximum Reappointment Rates\nNew Brunswick Government Organizations', 
                 fontsize=14, fontweight='bold', pad=20)
    
    # Format y-axis as percentage
    ax.yaxis.set_major_formatter(ticker.PercentFormatter(1.0, decimals=1))
    
    # Set x-axis to show all years
    ax.set_xticks(results_df['year'])
    ax.tick_params(axis='x', rotation=45)
    
    # Add grid for better readability
    ax.grid(True, alpha=0.3, linestyle='--')
    
    # Add value labels on points
    for _, row in results_df.iterrows():
        ax.annotate(f'{row["max_rate"]:.1%}', 
                   (row['year'], row['max_rate']),
                   textcoords="offset points", 
                   xytext=(0,10), 
                   ha='center', va='bottom',
                   fontsize=9, fontweight='bold')
    
    # Adjust layout
    plt.tight_layout()
    
    # Save the plot
    plot_file = output_dir / "step7_yearly_max_rates.png"
    plt.savefig(plot_file, dpi=300, bbox_inches='tight')
    print(f"Visualization saved to: {plot_file}")
    
    # Also save as high-quality PDF
    pdf_file = output_dir / "step7_yearly_max_rates.pdf"
    plt.savefig(pdf_file, bbox_inches='tight')
    print(f"PDF version saved to: {pdf_file}")
    
    plt.close()

def analyze_trends(results_df):
    """
    Analyze trends in the yearly maximum rates.
    
    Args:
        results_df (pd.DataFrame): Detailed results
    """
    
    print("\n" + "="*50)
    print("YEARLY MAXIMUM RATES ANALYSIS")
    print("="*50)
    
    # Basic statistics
    print(f"Years analyzed: {len(results_df)}")
    print(f"Year range: {results_df['year'].min()} to {results_df['year'].max()}")
    
    # Rate statistics
    rate_stats = results_df['max_rate'].describe()
    print(f"\nMaximum reappointment rate statistics:")
    print(f"  Mean: {rate_stats['mean']:.3f} ({rate_stats['mean']*100:.1f}%)")
    print(f"  Median: {rate_stats['50%']:.3f} ({rate_stats['50%']*100:.1f}%)")
    print(f"  Min: {rate_stats['min']:.3f} ({rate_stats['min']*100:.1f}%)")
    print(f"  Max: {rate_stats['max']:.3f} ({rate_stats['max']*100:.1f}%)")
    print(f"  Std Dev: {rate_stats['std']:.3f}")
    
    # Trend analysis
    if len(results_df) > 1:
        first_rate = results_df.iloc[0]['max_rate']
        last_rate = results_df.iloc[-1]['max_rate']
        overall_change = last_rate - first_rate
        
        print(f"\nTrend analysis:")
        print(f"  First year rate: {first_rate:.3f} ({first_rate*100:.1f}%)")
        print(f"  Last year rate: {last_rate:.3f} ({last_rate*100:.1f}%)")
        print(f"  Overall change: {overall_change:+.3f} ({overall_change*100:+.1f} percentage points)")
    
    # Organizations that appear multiple times
    org_counts = results_df['top_org'].value_counts()
    frequent_orgs = org_counts[org_counts > 1]
    
    if len(frequent_orgs) > 0:
        print(f"\nOrganizations with multiple years as top performer:")
        for org, count in frequent_orgs.items():
            years = results_df[results_df['top_org'] == org]['year'].tolist()
            print(f"  {org[:50]:<50} {count} years: {years}")
    else:
        print(f"\nNo organization had the highest rate in multiple years")
    
    # Year-by-year results
    print(f"\nYear-by-year results:")
    for _, row in results_df.iterrows():
        print(f"  {row['year']}: {row['top_org'][:50]:<50} "
              f"{row['max_rate']:.3f} ({row['max_rate']*100:.1f}%) "
              f"[{row['reappointments']}/{row['total_appointments']} appointments]")

def main():
    """Main execution function."""
    
    try:
        # Load reappointment rates data
        rates_df = load_reappointment_rates()
        
        # Identify yearly maximum rates
        output_df, detailed_df = identify_yearly_max_rates(rates_df)
        
        # Define output directory
        output_dir = Path("scripts/claudesonnet4/version1/execution2/analysis_data")
        output_file = output_dir / "step7_yearly_max_rates.csv"
        
        # Save the results
        print(f"\nSaving yearly maximum rates to: {output_file}")
        output_df.to_csv(output_file, index=False)
        
        # Create visualization
        create_visualization(detailed_df, output_dir)
        
        # Analyze trends
        analyze_trends(detailed_df)
        
        print(f"\nYearly maximum rates successfully saved to: {output_file}")
        
    except Exception as e:
        print(f"Error in main execution: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    # Document tie-breaking approach
    print("YEARLY MAXIMUM RATES ASSUMPTIONS:")
    print("1. Only organizations with positive appointments and valid rates are considered")
    print("2. Tie-breaking approach for equal maximum rates:")
    print("   a) Organization with most total appointments (larger sample size)")
    print("   b) If still tied, alphabetical order by organization name")
    print("3. Visualization shows trends over time with percentage formatting")
    print("4. Missing years (no valid data) are excluded from analysis")
    print("5. Results include both CSV data and PNG/PDF visualizations")
    print("-" * 50)
    
    main()