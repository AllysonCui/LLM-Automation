#!/usr/bin/env python3
"""
New Brunswick Government Annual Reappointment Proportions

This script calculates government-wide reappointment proportions for each year
from 2013-2024 and creates a visualization of the trend.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

def load_reappointment_data():
    """
    Load the dataset with reappointment flags from step 3.
    
    Returns:
        pd.DataFrame: Dataset with reappointment information
    """
    
    # Define input file path
    input_file = Path("scripts/claudesonnet4/version1/execution2/analysis_data/step3_repeats_marked.csv")
    
    # Check if file exists
    if not input_file.exists():
        raise FileNotFoundError(f"Reappointment data file not found: {input_file}")
    
    # Load dataset
    print(f"Loading reappointment data from: {input_file}")
    df = pd.read_csv(input_file)
    print(f"Loaded dataset with shape: {df.shape}")
    
    # Validate required columns
    required_columns = ['year', 'reappointed']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        raise ValueError(f"Missing required columns: {missing_columns}")
    
    print(f"Columns: {list(df.columns)}")
    
    return df

def calculate_annual_proportions(df):
    """
    Calculate government-wide reappointment proportions for each year.
    
    Args:
        df (pd.DataFrame): Dataset with reappointment flags
    
    Returns:
        pd.DataFrame: Annual proportions with columns: year, total_appointments, 
                     total_reappointments, reappointment_proportion
    """
    
    print("\nCalculating annual reappointment proportions...")
    
    # Remove records with missing year data
    valid_data = df[df['year'].notna()].copy()
    missing_year_count = len(df) - len(valid_data)
    
    if missing_year_count > 0:
        print(f"Removed {missing_year_count} records with missing year data")
    
    # Ensure year is integer
    valid_data['year'] = valid_data['year'].astype(int)
    
    # Handle missing reappointed values (treat as False)
    valid_data['reappointed'] = valid_data['reappointed'].fillna(False)
    
    # Get year range
    years = sorted(valid_data['year'].unique())
    print(f"Years in dataset: {years}")
    
    # Calculate annual statistics
    annual_results = []
    
    for year in years:
        year_data = valid_data[valid_data['year'] == year]
        
        # Count total appointments for the year
        total_appointments = len(year_data)
        
        # Count total reappointments for the year
        total_reappointments = year_data['reappointed'].sum()
        
        # Calculate proportion
        if total_appointments > 0:
            reappointment_proportion = total_reappointments / total_appointments
        else:
            reappointment_proportion = 0.0
        
        annual_results.append({
            'year': year,
            'total_appointments': total_appointments,
            'total_reappointments': int(total_reappointments),
            'reappointment_proportion': reappointment_proportion
        })
    
    # Create results DataFrame
    results_df = pd.DataFrame(annual_results)
    
    # Validate results
    total_all_appointments = results_df['total_appointments'].sum()
    total_all_reappointments = results_df['total_reappointments'].sum()
    
    print(f"\nValidation:")
    print(f"Total appointments across all years: {total_all_appointments:,}")
    print(f"Total reappointments across all years: {total_all_reappointments:,}")
    print(f"Overall reappointment rate: {(total_all_reappointments/total_all_appointments)*100:.1f}%")
    
    return results_df

def create_visualization(results_df, output_dir):
    """
    Create a visualization of annual reappointment proportions.
    
    Args:
        results_df (pd.DataFrame): Annual proportions data
        output_dir (Path): Output directory for saving the plot
    """
    
    print("\nCreating visualization...")
    
    # Set up the plot
    plt.style.use('default')
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10), 
                                   gridspec_kw={'height_ratios': [2, 1], 'hspace': 0.3})
    
    # Main plot: Reappointment proportion trend
    ax1.plot(results_df['year'], results_df['reappointment_proportion'], 
             marker='o', linewidth=3, markersize=8, 
             color='#2E86AB', markerfacecolor='#A23B72')
    
    # Customize main plot
    ax1.set_ylabel('Reappointment Proportion', fontsize=12, fontweight='bold')
    ax1.set_title('New Brunswick Government Annual Reappointment Proportions\n2013-2024', 
                  fontsize=14, fontweight='bold', pad=20)
    
    # Format y-axis as percentage
    ax1.yaxis.set_major_formatter(ticker.PercentFormatter(1.0, decimals=1))
    
    # Set x-axis
    ax1.set_xticks(results_df['year'])
    ax1.tick_params(axis='x', rotation=45)
    
    # Add grid
    ax1.grid(True, alpha=0.3, linestyle='--')
    
    # Add value labels on points
    for _, row in results_df.iterrows():
        ax1.annotate(f'{row["reappointment_proportion"]:.1%}', 
                    (row['year'], row['reappointment_proportion']),
                    textcoords="offset points", 
                    xytext=(0,10), 
                    ha='center', va='bottom',
                    fontsize=9, fontweight='bold')
    
    # Secondary plot: Total appointments bar chart
    bars = ax2.bar(results_df['year'], results_df['total_appointments'], 
                   color='#4CAF50', alpha=0.7, width=0.8)
    
    ax2.set_xlabel('Year', fontsize=12, fontweight='bold')
    ax2.set_ylabel('Total Appointments', fontsize=12, fontweight='bold')
    ax2.set_title('Annual Total Appointments', fontsize=12, fontweight='bold')
    
    # Set x-axis for bar chart
    ax2.set_xticks(results_df['year'])
    ax2.tick_params(axis='x', rotation=45)
    
    # Add value labels on bars
    for bar, value in zip(bars, results_df['total_appointments']):
        ax2.annotate(f'{value:,}', 
                    (bar.get_x() + bar.get_width()/2, bar.get_height()),
                    textcoords="offset points", 
                    xytext=(0,5), 
                    ha='center', va='bottom',
                    fontsize=8)
    
    # Add grid to bar chart
    ax2.grid(True, alpha=0.3, linestyle='--', axis='y')
    
    # Adjust layout
    plt.tight_layout()
    
    # Save the plot
    plot_file = output_dir / "step8_annual_reappointment_proportions.png"
    plt.savefig(plot_file, dpi=300, bbox_inches='tight')
    print(f"Visualization saved to: {plot_file}")
    
    # Also save as PDF
    pdf_file = output_dir / "step8_annual_reappointment_proportions.pdf"
    plt.savefig(pdf_file, bbox_inches='tight')
    print(f"PDF version saved to: {pdf_file}")
    
    plt.close()

def analyze_trends(results_df):
    """
    Analyze trends in annual reappointment proportions.
    
    Args:
        results_df (pd.DataFrame): Annual proportions data
    """
    
    print("\n" + "="*50)
    print("ANNUAL REAPPOINTMENT PROPORTIONS ANALYSIS")
    print("="*50)
    
    # Basic statistics
    print(f"Years analyzed: {len(results_df)}")
    print(f"Year range: {results_df['year'].min()} to {results_df['year'].max()}")
    
    # Proportion statistics
    prop_stats = results_df['reappointment_proportion'].describe()
    print(f"\nReappointment proportion statistics:")
    print(f"  Mean: {prop_stats['mean']:.3f} ({prop_stats['mean']*100:.1f}%)")
    print(f"  Median: {prop_stats['50%']:.3f} ({prop_stats['50%']*100:.1f}%)")
    print(f"  Min: {prop_stats['min']:.3f} ({prop_stats['min']*100:.1f}%)")
    print(f"  Max: {prop_stats['max']:.3f} ({prop_stats['max']*100:.1f}%)")
    print(f"  Std Dev: {prop_stats['std']:.3f}")
    
    # Trend analysis
    if len(results_df) > 1:
        first_prop = results_df.iloc[0]['reappointment_proportion']
        last_prop = results_df.iloc[-1]['reappointment_proportion']
        overall_change = last_prop - first_prop
        
        print(f"\nTrend analysis:")
        print(f"  First year proportion: {first_prop:.3f} ({first_prop*100:.1f}%)")
        print(f"  Last year proportion: {last_prop:.3f} ({last_prop*100:.1f}%)")
        print(f"  Overall change: {overall_change:+.3f} ({overall_change*100:+.1f} percentage points)")
        
        # Calculate correlation with year (simple trend indicator)
        correlation = results_df['year'].corr(results_df['reappointment_proportion'])
        if correlation > 0.1:
            trend_direction = "increasing"
        elif correlation < -0.1:
            trend_direction = "decreasing"
        else:
            trend_direction = "stable"
        print(f"  Overall trend: {trend_direction} (correlation: {correlation:.3f})")
    
    # Appointment volume statistics
    appt_stats = results_df['total_appointments'].describe()
    print(f"\nAppointment volume statistics:")
    print(f"  Mean annual appointments: {appt_stats['mean']:.0f}")
    print(f"  Min annual appointments: {int(appt_stats['min'])} ({results_df[results_df['total_appointments'] == appt_stats['min']]['year'].iloc[0]})")
    print(f"  Max annual appointments: {int(appt_stats['max'])} ({results_df[results_df['total_appointments'] == appt_stats['max']]['year'].iloc[0]})")
    
    # Identify notable years
    highest_prop_year = results_df.loc[results_df['reappointment_proportion'].idxmax()]
    lowest_prop_year = results_df.loc[results_df['reappointment_proportion'].idxmin()]
    
    print(f"\nNotable years:")
    print(f"  Highest reappointment proportion: {highest_prop_year['year']} ({highest_prop_year['reappointment_proportion']:.1%})")
    print(f"  Lowest reappointment proportion: {lowest_prop_year['year']} ({lowest_prop_year['reappointment_proportion']:.1%})")
    
    # Year-by-year results
    print(f"\nYear-by-year government-wide reappointment proportions:")
    for _, row in results_df.iterrows():
        print(f"  {row['year']}: {row['reappointment_proportion']:.3f} ({row['reappointment_proportion']*100:.1f}%) "
              f"[{row['total_reappointments']:,} of {row['total_appointments']:,} appointments]")

def main():
    """Main execution function."""
    
    try:
        # Load reappointment data
        data_df = load_reappointment_data()
        
        # Calculate annual proportions
        proportions_df = calculate_annual_proportions(data_df)
        
        # Define output directory
        output_dir = Path("scripts/claudesonnet4/version1/execution2/analysis_data")
        output_file = output_dir / "step8_annual_proportions.csv"
        
        # Save the results
        print(f"\nSaving annual proportions to: {output_file}")
        proportions_df.to_csv(output_file, index=False)
        
        # Create visualization
        create_visualization(proportions_df, output_dir)
        
        # Analyze trends
        analyze_trends(proportions_df)
        
        print(f"\nAnnual proportions successfully saved to: {output_file}")
        
    except Exception as e:
        print(f"Error in main execution: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    # Document methodology
    print("ANNUAL PROPORTIONS ASSUMPTIONS:")
    print("1. Each row in step 3 data represents one appointment")
    print("2. Reappointment proportion = total_reappointments / total_appointments per year")
    print("3. Missing 'reappointed' values are treated as False (not reappointments)")
    print("4. Records with missing years are excluded from analysis")
    print("5. Analysis covers entire NB government, not individual organizations")
    print("6. Visualization includes both proportion trend and appointment volume")
    print("-" * 50)
    
    main()