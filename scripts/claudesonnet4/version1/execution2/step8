#!/usr/bin/env python3
"""
New Brunswick Government Annual Reappointment Proportions Analysis

This script calculates the overall reappointment proportion for the entire
New Brunswick government each year from 2013-2024.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

def calculate_annual_proportions(df):
    """
    Calculate annual reappointment proportions for the entire government.
    
    Args:
        df (pd.DataFrame): The appointments dataset with reappointment flags
    
    Returns:
        pd.DataFrame: Annual proportions with columns: year, total_appointments, 
                     total_reappointments, reappointment_proportion
    """
    print("Calculating annual reappointment proportions...")
    
    # Filter out records with missing years
    valid_data = df[df['year'].notna()].copy()
    valid_data['year'] = valid_data['year'].astype(int)
    
    # Ensure reappointed column is boolean
    if valid_data['reappointed'].dtype == 'object':
        # Handle various representations of boolean values
        valid_data['reappointed'] = valid_data['reappointed'].map({
            'True': True, 'true': True, 'TRUE': True, 'Yes': True, 'yes': True, 'Y': True, 'y': True, '1': True, 1: True,
            'False': False, 'false': False, 'FALSE': False, 'No': False, 'no': False, 'N': False, 'n': False, '0': False, 0: False
        }).fillna(False)
    
    valid_data['reappointed'] = valid_data['reappointed'].astype(bool)
    
    print(f"  Total valid records: {len(valid_data):,}")
    print(f"  Year range: {valid_data['year'].min()}-{valid_data['year'].max()}")
    print(f"  Total reappointments: {valid_data['reappointed'].sum():,}")
    
    # Group by year and calculate totals
    annual_stats = valid_data.groupby('year').agg({
        'reappointed': ['count', 'sum']
    }).reset_index()
    
    # Flatten column names
    annual_stats.columns = ['year', 'total_appointments', 'total_reappointments']
    
    # Calculate reappointment proportion
    annual_stats['reappointment_proportion'] = (
        annual_stats['total_reappointments'] / annual_stats['total_appointments']
    ).round(4)
    
    # Ensure we have data for all years 2013-2024
    all_years = pd.DataFrame({'year': range(2013, 2025)})
    annual_stats = pd.merge(all_years, annual_stats, on='year', how='left')
    
    # Fill missing values with 0
    annual_stats['total_appointments'] = annual_stats['total_appointments'].fillna(0).astype(int)
    annual_stats['total_reappointments'] = annual_stats['total_reappointments'].fillna(0).astype(int)
    annual_stats['reappointment_proportion'] = annual_stats['reappointment_proportion'].fillna(0).round(4)
    
    return annual_stats

def create_visualization(annual_data, output_path):
    """
    Create a visualization of annual reappointment proportions.
    
    Args:
        annual_data (pd.DataFrame): Annual proportions data
        output_path (Path): Path to save the visualization
    """
    print(f"\nCreating visualization...")
    
    # Filter out years with no data for cleaner visualization
    plot_data = annual_data[annual_data['total_appointments'] > 0].copy()
    
    if len(plot_data) == 0:
        print("No data available for visualization")
        return
    
    # Set up the plot
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10))
    
    # Plot 1: Reappointment Proportion Over Time
    years = plot_data['year']
    proportions = plot_data['reappointment_proportion'] * 100  # Convert to percentage
    
    ax1.plot(years, proportions, marker='o', linewidth=3, markersize=8, color='#E74C3C')
    ax1.fill_between(years, proportions, alpha=0.3, color='#E74C3C')
    
    # Annotate each point with the percentage
    for _, row in plot_data.iterrows():
        if row['total_appointments'] > 0:
            pct = row['reappointment_proportion'] * 100
            ax1.annotate(f'{pct:.1f}%', 
                        (row['year'], pct),
                        textcoords="offset points",
                        xytext=(0, 10),
                        ha='center',
                        fontsize=10,
                        fontweight='bold')
    
    ax1.set_title('New Brunswick Government Reappointment Proportion Trend', 
                  fontsize=16, fontweight='bold', pad=20)
    ax1.set_xlabel('Year', fontsize=12, fontweight='bold')
    ax1.set_ylabel('Reappointment Proportion (%)', fontsize=12, fontweight='bold')
    ax1.grid(True, alpha=0.3, linestyle='--')
    ax1.set_xlim(years.min() - 0.5, years.max() + 0.5)
    ax1.set_ylim(0, max(proportions.max() * 1.1, 10))
    
    # Format y-axis as percentage
    ax1.yaxis.set_major_formatter(ticker.PercentFormatter(decimals=1))
    ax1.xaxis.set_major_locator(ticker.MaxNLocator(integer=True))
    
    # Plot 2: Total Appointments and Reappointments
    x_pos = np.arange(len(plot_data))
    width = 0.35
    
    bars1 = ax2.bar(x_pos - width/2, plot_data['total_appointments'], width, 
                    label='Total Appointments', color='#3498DB', alpha=0.8)
    bars2 = ax2.bar(x_pos + width/2, plot_data['total_reappointments'], width,
                    label='Reappointments', color='#E74C3C', alpha=0.8)
    
    # Add value labels on bars
    for bar in bars1:
        height = bar.get_height()
        if height > 0:
            ax2.annotate(f'{int(height)}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=9)
    
    for bar in bars2:
        height = bar.get_height()
        if height > 0:
            ax2.annotate(f'{int(height)}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=9)
    
    ax2.set_title('Annual Appointment Volumes', fontsize=14, fontweight='bold')
    ax2.set_xlabel('Year', fontsize=12, fontweight='bold')
    ax2.set_ylabel('Number of Appointments', fontsize=12, fontweight='bold')
    ax2.set_xticks(x_pos)
    ax2.set_xticklabels(plot_data['year'])
    ax2.legend()
    ax2.grid(True, alpha=0.3, linestyle='--', axis='y')
    
    # Add summary statistics
    avg_proportion = plot_data['reappointment_proportion'].mean() * 100
    total_appointments = plot_data['total_appointments'].sum()
    total_reappointments = plot_data['total_reappointments'].sum()
    overall_proportion = (total_reappointments / total_appointments) * 100 if total_appointments > 0 else 0
    
    stats_text = f"Overall Statistics:\n"
    stats_text += f"Period Average: {avg_proportion:.1f}%\n"
    stats_text += f"Total Proportion: {overall_proportion:.1f}%\n"
    stats_text += f"Total Appointments: {total_appointments:,}\n"
    stats_text += f"Total Reappointments: {total_reappointments:,}"
    
    ax1.text(0.02, 0.98, stats_text, transform=ax1.transAxes, 
             fontsize=10, verticalalignment='top',
             bbox=dict(boxstyle='round,pad=0.5', facecolor='lightblue', alpha=0.8))
    
    # Adjust layout
    plt.tight_layout()
    
    # Save the plot
    plt.savefig(output_path, dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"Visualization saved to: {output_path}")

def main():
    """Main execution function."""
    
    try:
        # Define input file path
        input_file = Path("scripts/claudesonnet4/version1/execution2/analysis_data/step3_repeats_marked.csv")
        
        # Check if input file exists
        if not input_file.exists():
            raise FileNotFoundError(f"Input file not found: {input_file}")
        
        # Load the dataset
        print(f"Loading reappointments dataset from: {input_file}")
        df = pd.read_csv(input_file)
        print(f"Loaded dataset with shape: {df.shape}")
        
        # Check for required columns
        required_columns = ['year', 'reappointed']
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        # Data quality assessment
        print(f"\nData Quality Assessment:")
        print(f"  Total records: {len(df):,}")
        print(f"  Records with valid years: {df['year'].notna().sum():,}")
        print(f"  Records marked as reappointed: {df['reappointed'].sum() if df['reappointed'].dtype == bool else (df['reappointed'] == True).sum():,}")
        
        # Calculate annual proportions
        annual_proportions = calculate_annual_proportions(df)
        
        # Define output paths
        output_dir = Path("scripts/claudesonnet4/version1/execution2/analysis_data")
        csv_output = output_dir / "step8_annual_proportions.csv"
        png_output = output_dir / "step8_annual_reappointment_proportions.png"
        
        # Save the results
        print(f"\nSaving annual proportions to: {csv_output}")
        annual_proportions.to_csv(csv_output, index=False)
        
        # Create visualization
        create_visualization(annual_proportions, png_output)
        
        # Print comprehensive results
        print("\n" + "="*80)
        print("ANNUAL GOVERNMENT-WIDE REAPPOINTMENT PROPORTIONS")
        print("="*80)
        
        # Filter for years with data for summary
        years_with_data = annual_proportions[annual_proportions['total_appointments'] > 0]
        
        print(f"Analysis Summary:")
        print(f"  Years with data: {len(years_with_data)}")
        print(f"  Total period appointments: {years_with_data['total_appointments'].sum():,}")
        print(f"  Total period reappointments: {years_with_data['total_reappointments'].sum():,}")
        
        if len(years_with_data) > 0:
            overall_proportion = years_with_data['total_reappointments'].sum() / years_with_data['total_appointments'].sum()
            avg_annual_proportion = years_with_data['reappointment_proportion'].mean()
            print(f"  Overall reappointment proportion: {overall_proportion:.4f} ({overall_proportion*100:.2f}%)")
            print(f"  Average annual proportion: {avg_annual_proportion:.4f} ({avg_annual_proportion*100:.2f}%)")
        
        print(f"\nYear-by-Year Proportions:")
        print("-" * 80)
        for _, row in annual_proportions.iterrows():
            year = int(row['year'])
            total_apps = int(row['total_appointments'])
            total_reapps = int(row['total_reappointments'])
            proportion = row['reappointment_proportion']
            
            if total_apps > 0:
                print(f"{year}: {proportion:.4f} ({proportion*100:.2f}%) - {total_reapps:,}/{total_apps:,} appointments")
            else:
                print(f"{year}: No data")
        
        # Trend analysis
        if len(years_with_data) > 1:
            print(f"\nTrend Analysis:")
            first_year_prop = years_with_data.iloc[0]['reappointment_proportion']
            last_year_prop = years_with_data.iloc[-1]['reappointment_proportion']
            change = last_year_prop - first_year_prop
            
            print(f"  First year ({years_with_data.iloc[0]['year']:.0f}): {first_year_prop*100:.2f}%")
            print(f"  Last year ({years_with_data.iloc[-1]['year']:.0f}): {last_year_prop*100:.2f}%")
            print(f"  Overall change: {change*100:+.2f} percentage points")
            
            # Find highest and lowest years
            max_year_idx = years_with_data['reappointment_proportion'].idxmax()
            min_year_idx = years_with_data['reappointment_proportion'].idxmin()
            
            max_year = years_with_data.loc[max_year_idx]
            min_year = years_with_data.loc[min_year_idx]
            
            print(f"  Highest proportion: {max_year['reappointment_proportion']*100:.2f}% ({max_year['year']:.0f})")
            print(f"  Lowest proportion: {min_year['reappointment_proportion']*100:.2f}% ({min_year['year']:.0f})")
        
        print(f"\nFiles saved:")
        print(f"  Data: {csv_output}")
        print(f"  Visualization: {png_output}")
        
    except Exception as e:
        print(f"Error in main execution: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    # Document assumptions and approach
    print("ANNUAL REAPPOINTMENT PROPORTIONS ASSUMPTIONS:")
    print("1. Analysis covers years 2013-2024 based on available data")
    print("2. Proportion = total_reappointments / total_appointments for each year")
    print("3. Years with no appointments are included with 0 values")
    print("4. Reappointment flags from step 3 are used as the source of truth")
    print("5. Visualization shows both proportions and absolute numbers")
    print("6. Government-wide calculation includes all organizations")
    print("-" * 80)
    
    main()