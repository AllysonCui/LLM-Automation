#!/usr/bin/env python3
"""
New Brunswick Government Reappointment Trend Regression Analysis

This script performs comprehensive regression analysis on government-wide 
reappointment proportion trends from 2013-2024.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
from scipy import stats
from scipy.stats import linregress, jarque_bera, normaltest
import warnings

def load_annual_proportions():
    """
    Load the annual government-wide proportions from step 8.
    
    Returns:
        pd.DataFrame: Annual proportions data
    """
    
    # Define input file path
    input_file = Path("scripts/claudesonnet4/version1/execution2/analysis_data/step8_annual_proportions.csv")
    
    # Check if file exists
    if not input_file.exists():
        raise FileNotFoundError(f"Annual proportions file not found: {input_file}")
    
    # Load dataset
    print(f"Loading annual proportions from: {input_file}")
    df = pd.read_csv(input_file)
    print(f"Loaded dataset with shape: {df.shape}")
    
    # Validate required columns
    required_columns = ['year', 'reappointment_proportion']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        raise ValueError(f"Missing required columns: {missing_columns}")
    
    print(f"Columns: {list(df.columns)}")
    
    return df

def prepare_regression_data(df):
    """
    Prepare data for regression analysis.
    
    Args:
        df (pd.DataFrame): Annual proportions data
    
    Returns:
        tuple: (X, Y, df_clean) where X is years, Y is proportions, df_clean is filtered data
    """
    
    print("\nPreparing data for regression analysis...")
    
    # Remove any rows with missing values
    df_clean = df.dropna(subset=['year', 'reappointment_proportion']).copy()
    missing_count = len(df) - len(df_clean)
    
    if missing_count > 0:
        print(f"Removed {missing_count} rows with missing values")
    
    if len(df_clean) < 3:
        raise ValueError("Insufficient data for regression analysis (need at least 3 points)")
    
    # Sort by year
    df_clean = df_clean.sort_values('year').reset_index(drop=True)
    
    # Extract X (year) and Y (proportion)
    X = df_clean['year'].values
    Y = df_clean['reappointment_proportion'].values
    
    print(f"Regression data prepared: {len(df_clean)} data points")
    print(f"Year range: {X.min()} to {X.max()}")
    print(f"Proportion range: {Y.min():.3f} to {Y.max():.3f}")
    
    return X, Y, df_clean

def perform_linear_regression(X, Y):
    """
    Perform linear regression analysis with comprehensive statistics.
    
    Args:
        X (np.array): Independent variable (years)
        Y (np.array): Dependent variable (proportions)
    
    Returns:
        dict: Comprehensive regression results
    """
    
    print("\nPerforming linear regression analysis...")
    
    # Perform linear regression
    slope, intercept, r_value, p_value, std_err = linregress(X, Y)
    
    # Calculate additional statistics
    n = len(X)
    
    # R-squared
    r_squared = r_value ** 2
    
    # Degrees of freedom
    df_regression = 1
    df_residual = n - 2
    df_total = n - 1
    
    # Predicted values and residuals
    Y_pred = slope * X + intercept
    residuals = Y - Y_pred
    
    # Sum of squares
    SS_total = np.sum((Y - np.mean(Y))**2)
    SS_regression = np.sum((Y_pred - np.mean(Y))**2)
    SS_residual = np.sum(residuals**2)
    
    # Mean squared error
    MSE = SS_residual / df_residual
    
    # Standard error of slope and intercept
    X_mean = np.mean(X)
    SXX = np.sum((X - X_mean)**2)
    se_slope = np.sqrt(MSE / SXX)
    se_intercept = np.sqrt(MSE * (1/n + X_mean**2/SXX))
    
    # t-statistics
    t_slope = slope / se_slope
    t_intercept = intercept / se_intercept
    
    # 95% confidence intervals
    t_critical = stats.t.ppf(0.975, df_residual)  # 95% CI
    
    slope_ci_lower = slope - t_critical * se_slope
    slope_ci_upper = slope + t_critical * se_slope
    intercept_ci_lower = intercept - t_critical * se_intercept
    intercept_ci_upper = intercept + t_critical * se_intercept
    
    # F-statistic for overall model significance
    F_statistic = (SS_regression / df_regression) / (SS_residual / df_residual)
    F_p_value = 1 - stats.f.cdf(F_statistic, df_regression, df_residual)
    
    results = {
        'n': n,
        'slope': slope,
        'intercept': intercept,
        'r_value': r_value,
        'r_squared': r_squared,
        'p_value': p_value,
        'std_err': std_err,
        'se_slope': se_slope,
        'se_intercept': se_intercept,
        'slope_ci_lower': slope_ci_lower,
        'slope_ci_upper': slope_ci_upper,
        'intercept_ci_lower': intercept_ci_lower,
        'intercept_ci_upper': intercept_ci_upper,
        't_slope': t_slope,
        't_intercept': t_intercept,
        'F_statistic': F_statistic,
        'F_p_value': F_p_value,
        'df_regression': df_regression,
        'df_residual': df_residual,
        'SS_total': SS_total,
        'SS_regression': SS_regression,
        'SS_residual': SS_residual,
        'MSE': MSE,
        'Y_pred': Y_pred,
        'residuals': residuals
    }
    
    print(f"Linear regression completed:")
    print(f"  Slope: {slope:.6f}")
    print(f"  R-squared: {r_squared:.4f}")
    print(f"  P-value: {p_value:.6f}")
    
    return results

def perform_diagnostics(X, Y, results):
    """
    Perform regression diagnostics.
    
    Args:
        X (np.array): Independent variable
        Y (np.array): Dependent variable
        results (dict): Regression results
    
    Returns:
        dict: Diagnostic results
    """
    
    print("\nPerforming regression diagnostics...")
    
    residuals = results['residuals']
    n = results['n']
    
    diagnostics = {}
    
    # Durbin-Watson test for autocorrelation
    def durbin_watson(residuals):
        diff = np.diff(residuals)
        return np.sum(diff**2) / np.sum(residuals**2)
    
    dw_statistic = durbin_watson(residuals)
    diagnostics['durbin_watson'] = dw_statistic
    
    # Rule of thumb: DW around 2.0 indicates no autocorrelation
    # Values significantly different from 2.0 suggest autocorrelation
    if 1.5 <= dw_statistic <= 2.5:
        dw_interpretation = "No significant autocorrelation"
    elif dw_statistic < 1.5:
        dw_interpretation = "Positive autocorrelation detected"
    else:
        dw_interpretation = "Negative autocorrelation detected"
    
    diagnostics['dw_interpretation'] = dw_interpretation
    
    # Outlier detection using standardized residuals
    residual_std = residuals / np.sqrt(results['MSE'])
    outlier_threshold = 2.0  # Standard threshold
    outliers = np.abs(residual_std) > outlier_threshold
    outlier_indices = np.where(outliers)[0]
    
    diagnostics['outlier_indices'] = outlier_indices
    diagnostics['outlier_count'] = len(outlier_indices)
    diagnostics['standardized_residuals'] = residual_std
    
    # Normality tests on residuals
    try:
        # Shapiro-Wilk test (good for small samples)
        if n <= 50:
            shapiro_stat, shapiro_p = stats.shapiro(residuals)
            diagnostics['shapiro_stat'] = shapiro_stat
            diagnostics['shapiro_p'] = shapiro_p
        
        # Jarque-Bera test
        jb_stat, jb_p = jarque_bera(residuals)
        diagnostics['jarque_bera_stat'] = jb_stat
        diagnostics['jarque_bera_p'] = jb_p
        
    except Exception as e:
        print(f"Warning: Normality tests failed: {e}")
        diagnostics['normality_test_error'] = str(e)
    
    print(f"Diagnostics completed:")
    print(f"  Durbin-Watson statistic: {dw_statistic:.3f} ({dw_interpretation})")
    print(f"  Outliers detected: {len(outlier_indices)} of {n} observations")
    
    return diagnostics

def calculate_trend_implications(X, results):
    """
    Calculate practical implications of the trend.
    
    Args:
        X (np.array): Years
        results (dict): Regression results
    
    Returns:
        dict: Trend implications
    """
    
    print("\nCalculating trend implications...")
    
    slope = results['slope']
    
    # Annual change in percentage points
    annual_change_pp = slope * 100  # Convert to percentage points
    
    # Total change over the period
    year_span = X.max() - X.min()
    total_change_pp = slope * year_span * 100
    
    # Predict values for first and last years
    first_year_pred = slope * X.min() + results['intercept']
    last_year_pred = slope * X.max() + results['intercept']
    
    # Determine trend direction
    if slope > 0:
        trend_direction = "increasing"
    elif slope < 0:
        trend_direction = "decreasing"
    else:
        trend_direction = "stable"
    
    # Statistical significance
    is_significant = results['p_value'] < 0.05
    
    implications = {
        'trend_direction': trend_direction,
        'is_significant': is_significant,
        'annual_change_pp': annual_change_pp,
        'total_change_pp': total_change_pp,
        'year_span': year_span,
        'first_year_pred': first_year_pred,
        'last_year_pred': last_year_pred,
        'slope': slope
    }
    
    print(f"Trend implications:")
    print(f"  Direction: {trend_direction}")
    print(f"  Statistically significant: {is_significant}")
    print(f"  Annual change: {annual_change_pp:+.3f} percentage points")
    print(f"  Total change over {year_span} years: {total_change_pp:+.3f} percentage points")
    
    return implications

def save_detailed_results(df_clean, results, diagnostics, implications, output_dir):
    """
    Save comprehensive statistical results to a text file.
    
    Args:
        df_clean (pd.DataFrame): Clean data used for analysis
        results (dict): Regression results
        diagnostics (dict): Diagnostic results
        implications (dict): Trend implications
        output_dir (Path): Output directory
    """
    
    output_file = output_dir / "step9_regression_results.txt"
    
    print(f"\nSaving detailed results to: {output_file}")
    
    with open(output_file, 'w') as f:
        f.write("NEW BRUNSWICK GOVERNMENT REAPPOINTMENT TREND ANALYSIS\n")
        f.write("=" * 60 + "\n\n")
        
        # Data Summary
        f.write("DATA SUMMARY\n")
        f.write("-" * 20 + "\n")
        f.write(f"Analysis period: {df_clean['year'].min()} to {df_clean['year'].max()}\n")
        f.write(f"Number of observations: {results['n']}\n")
        f.write(f"Proportion range: {df_clean['reappointment_proportion'].min():.3f} to {df_clean['reappointment_proportion'].max():.3f}\n")
        f.write(f"Mean proportion: {df_clean['reappointment_proportion'].mean():.3f}\n")
        f.write(f"Standard deviation: {df_clean['reappointment_proportion'].std():.3f}\n\n")
        
        # Year-by-year data
        f.write("YEAR-BY-YEAR DATA\n")
        f.write("-" * 20 + "\n")
        for _, row in df_clean.iterrows():
            f.write(f"{row['year']}: {row['reappointment_proportion']:.3f}\n")
        f.write("\n")
        
        # Regression Results
        f.write("LINEAR REGRESSION RESULTS\n")
        f.write("-" * 30 + "\n")
        f.write(f"Regression equation: Y = {results['slope']:.6f} * X + {results['intercept']:.6f}\n")
        f.write(f"Where Y = reappointment proportion, X = year\n\n")
        
        f.write(f"Slope (β₁): {results['slope']:.6f}\n")
        f.write(f"Intercept (β₀): {results['intercept']:.6f}\n")
        f.write(f"Correlation coefficient (r): {results['r_value']:.4f}\n")
        f.write(f"R-squared (R²): {results['r_squared']:.4f}\n")
        f.write(f"Adjusted R-squared: {1 - (1 - results['r_squared']) * (results['n'] - 1) / (results['n'] - 2):.4f}\n\n")
        
        # Statistical Significance
        f.write("STATISTICAL SIGNIFICANCE TESTS\n")
        f.write("-" * 35 + "\n")
        f.write(f"Slope t-statistic: {results['t_slope']:.4f}\n")
        f.write(f"Slope p-value: {results['p_value']:.6f}\n")
        f.write(f"Slope standard error: {results['se_slope']:.6f}\n")
        f.write(f"95% Confidence interval for slope: [{results['slope_ci_lower']:.6f}, {results['slope_ci_upper']:.6f}]\n\n")
        
        f.write(f"F-statistic (overall model): {results['F_statistic']:.4f}\n")
        f.write(f"F-test p-value: {results['F_p_value']:.6f}\n\n")
        
        # Diagnostics
        f.write("REGRESSION DIAGNOSTICS\n")
        f.write("-" * 25 + "\n")
        f.write(f"Durbin-Watson statistic: {diagnostics['durbin_watson']:.3f}\n")
        f.write(f"Autocorrelation assessment: {diagnostics['dw_interpretation']}\n")
        f.write(f"Outliers detected: {diagnostics['outlier_count']} of {results['n']} observations\n")
        
        if diagnostics['outlier_count'] > 0:
            f.write(f"Outlier years: {[df_clean.iloc[i]['year'] for i in diagnostics['outlier_indices']]}\n")
        
        if 'shapiro_p' in diagnostics:
            f.write(f"Shapiro-Wilk normality test p-value: {diagnostics['shapiro_p']:.4f}\n")
        if 'jarque_bera_p' in diagnostics:
            f.write(f"Jarque-Bera normality test p-value: {diagnostics['jarque_bera_p']:.4f}\n")
        f.write("\n")
        
        # Trend Analysis
        f.write("TREND ANALYSIS\n")
        f.write("-" * 15 + "\n")
        f.write(f"Trend direction: {implications['trend_direction'].upper()}\n")
        f.write(f"Statistical significance (p < 0.05): {'YES' if implications['is_significant'] else 'NO'}\n")
        f.write(f"Annual change: {implications['annual_change_pp']:+.3f} percentage points per year\n")
        f.write(f"Total change over {implications['year_span']} years: {implications['total_change_pp']:+.3f} percentage points\n\n")
        
        f.write(f"Predicted proportion in {df_clean['year'].min()}: {implications['first_year_pred']:.3f}\n")
        f.write(f"Predicted proportion in {df_clean['year'].max()}: {implications['last_year_pred']:.3f}\n\n")
        
        # Conclusions
        f.write("CONCLUSIONS\n")
        f.write("-" * 12 + "\n")
        
        significance_text = "statistically significant" if implications['is_significant'] else "not statistically significant"
        
        f.write(f"The government-wide reappointment proportion shows a {implications['trend_direction']} trend ")
        f.write(f"over the {implications['year_span']}-year period from {df_clean['year'].min()} to {df_clean['year'].max()}.\n\n")
        
        f.write(f"This trend is {significance_text} (p = {results['p_value']:.6f}).\n\n")
        
        if implications['is_significant']:
            f.write(f"The reappointment proportion changes by approximately ")
            f.write(f"{abs(implications['annual_change_pp']):.3f} percentage points per year ")
            f.write(f"in the {implications['trend_direction']} direction.\n\n")
            
            f.write(f"Over the entire {implications['year_span']}-year period, this represents a ")
            f.write(f"total change of {abs(implications['total_change_pp']):.3f} percentage points ")
            f.write(f"({'increase' if implications['slope'] > 0 else 'decrease'}).\n")
        else:
            f.write(f"The trend is not strong enough to conclude a significant change in ")
            f.write(f"reappointment patterns over time.\n")
    
    print(f"Detailed results saved successfully")

def main():
    """Main execution function."""
    
    try:
        # Load data
        df = load_annual_proportions()
        
        # Prepare regression data
        X, Y, df_clean = prepare_regression_data(df)
        
        # Perform linear regression
        results = perform_linear_regression(X, Y)
        
        # Perform diagnostics
        diagnostics = perform_diagnostics(X, Y, results)
        
        # Calculate trend implications
        implications = calculate_trend_implications(X, results)
        
        # Save detailed results
        output_dir = Path("scripts/claudesonnet4/version1/execution2/analysis_data")
        save_detailed_results(df_clean, results, diagnostics, implications, output_dir)
        
        # Print final answer
        print("\n" + "="*60)
        print("FINAL ANSWER")
        print("="*60)
        
        trend_word = implications['trend_direction'].upper()
        significance_word = "STATISTICALLY SIGNIFICANT" if implications['is_significant'] else "NOT STATISTICALLY SIGNIFICANT"
        
        print(f"The government-wide reappointment proportion trend is {trend_word}")
        print(f"over the 12-year period (2013-2024) and is {significance_word}.")
        print(f"\nP-value: {results['p_value']:.6f}")
        print(f"Annual change: {implications['annual_change_pp']:+.3f} percentage points per year")
        print(f"Total change: {implications['total_change_pp']:+.3f} percentage points over {implications['year_span']} years")
        
    except Exception as e:
        print(f"Error in main execution: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    # Document methodology
    print("REGRESSION ANALYSIS ASSUMPTIONS:")
    print("1. Linear relationship between year and reappointment proportion")
    print("2. Independence of observations (tested with Durbin-Watson)")
    print("3. Homoscedasticity (constant variance of residuals)")
    print("4. Normality of residuals (tested with Shapiro-Wilk/Jarque-Bera)")
    print("5. Statistical significance threshold: p < 0.05")
    print("6. 95% confidence intervals for parameter estimates")
    print("-" * 60)
    
    main()