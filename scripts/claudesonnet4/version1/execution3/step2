#!/usr/bin/env python3
"""
New Brunswick Government Appointments Key Columns Extractor
Extracts key columns from the combined appointments dataset with robust column name handling.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def find_column_match(df_columns, target_variations):
    """
    Find the best matching column name from a list of variations.
    
    Args:
        df_columns (list): List of actual column names in the DataFrame
        target_variations (list): List of possible column name variations
    
    Returns:
        str or None: The matching column name, or None if no match found
    """
    # Convert all to lowercase for case-insensitive matching
    df_columns_lower = [col.lower().strip() for col in df_columns]
    
    for variation in target_variations:
        variation_lower = variation.lower().strip()
        if variation_lower in df_columns_lower:
            # Return the original column name (with original case)
            index = df_columns_lower.index(variation_lower)
            return df_columns[index]
    
    return None

def extract_key_columns():
    """
    Load the combined dataset and extract key columns with robust column name matching.
    
    Returns:
        pd.DataFrame: DataFrame with key columns only
    """
    # Define input and output paths
    input_dir = Path("scripts/claudesonnet4/version1/execution3/analysis_data")
    input_file = input_dir / "step1_combined_appointments.csv"
    output_file = input_dir / "step2_key_columns_data.csv"
    
    # Check if input file exists
    if not input_file.exists():
        raise FileNotFoundError(f"Input file not found: {input_file}")
    
    print("Loading combined appointments dataset...")
    df = pd.read_csv(input_file)
    print(f"Loaded dataset with shape: {df.shape}")
    
    print(f"\nAvailable columns: {list(df.columns)}")
    
    # Define column variations for each target column
    column_mappings = {
        'reappointed': ['reappointed', 'reappoint', 're-appointed', 'reappointment'],
        'name': ['name', 'appointee', 'person', 'individual'],
        'position': ['position', 'appointment', 'role', 'title', 'job_title'],
        'org': ['org', 'organization', 'organisation', 'agency', 'department', 'ministry'],
        'year': ['year', 'appointment_year', 'year_appointed']
    }
    
    # Find matching columns
    matched_columns = {}
    missing_columns = []
    
    print("\nColumn matching results:")
    for target_col, variations in column_mappings.items():
        matched_col = find_column_match(df.columns, variations)
        if matched_col:
            matched_columns[target_col] = matched_col
            print(f"  {target_col} -> '{matched_col}'")
        else:
            missing_columns.append(target_col)
            print(f"  {target_col} -> NOT FOUND (searched: {variations})")
    
    if missing_columns:
        print(f"\nWarning: Missing columns: {missing_columns}")
        print("Proceeding with available columns only...")
    
    # Extract the matched columns
    key_df = pd.DataFrame()
    
    for target_col, actual_col in matched_columns.items():
        key_df[target_col] = df[actual_col]
    
    print(f"\nExtracted dataset shape: {key_df.shape}")
    
    # Save the filtered dataset
    key_df.to_csv(output_file, index=False)
    print(f"Key columns dataset saved to: {output_file}")
    
    return key_df

def print_extracted_info(df):
    """
    Print information about the extracted columns and missing values.
    
    Args:
        df (pd.DataFrame): The extracted key columns DataFrame
    """
    print("\n" + "="*50)
    print("EXTRACTED DATASET INFORMATION")
    print("="*50)
    
    print(f"Shape: {df.shape}")
    print(f"Total records: {len(df):,}")
    print(f"Total columns: {len(df.columns)}")
    
    print("\nExtracted columns:")
    for i, col in enumerate(df.columns, 1):
        print(f"  {i}. {col}")
    
    print("\nData types:")
    for col, dtype in df.dtypes.items():
        print(f"  {col}: {dtype}")
    
    print("\nMissing values analysis:")
    missing_total = df.isnull().sum().sum()
    if missing_total == 0:
        print("  No missing values found!")
    else:
        print(f"  Total missing values: {missing_total:,}")
        for col in df.columns:
            missing_count = df[col].isnull().sum()
            if missing_count > 0:
                percentage = (missing_count / len(df)) * 100
                print(f"    {col}: {missing_count:,} ({percentage:.1f}%)")
    
    # Year distribution if year column exists
    if 'year' in df.columns:
        print("\nYear distribution:")
        year_counts = df['year'].value_counts().sort_index()
        for year, count in year_counts.items():
            print(f"  {year}: {count:,} appointments")
    
    # Reappointed distribution if reappointed column exists
    if 'reappointed' in df.columns:
        print("\nReappointment distribution:")
        reappoint_counts = df['reappointed'].value_counts()
        for value, count in reappoint_counts.items():
            percentage = (count / len(df)) * 100
            print(f"  {value}: {count:,} ({percentage:.1f}%)")
    
    print("\nSample data:")
    print(df.head())
    
    # Basic statistics for unique values
    print("\nUnique value counts:")
    for col in df.columns:
        unique_count = df[col].nunique()
        print(f"  {col}: {unique_count:,} unique values")

def main():
    """Main execution function."""
    try:
        print("New Brunswick Government Appointments Key Columns Extractor")
        print("="*60)
        
        # Extract key columns
        key_df = extract_key_columns()
        
        # Print information about extracted data
        print_extracted_info(key_df)
        
        print("\nKey columns extraction completed successfully!")
        
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()