#!/usr/bin/env python3
"""
New Brunswick Government Appointments Reappointments Marker
Identifies and marks reappointments based on name, position, and organization combinations.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import re

def normalize_name(name):
    """
    Normalize name for better matching by handling common variations.
    
    Args:
        name (str): Original name
    
    Returns:
        str: Normalized name
    """
    if pd.isna(name):
        return ""
    
    # Convert to string and strip whitespace
    name = str(name).strip()
    
    # Convert to lowercase for consistent comparison
    name = name.lower()
    
    # Remove extra whitespace
    name = re.sub(r'\s+', ' ', name)
    
    # Handle common name variations
    # Remove titles and suffixes
    name = re.sub(r'\b(dr|prof|mr|mrs|ms|miss|rev|hon)\b\.?\s*', '', name)
    name = re.sub(r'\s+(jr|sr|ii|iii|iv|phd|md|esq)\.?\s*$', '', name)
    
    # Remove periods from initials
    name = re.sub(r'\.', '', name)
    
    return name.strip()

def normalize_text_field(text):
    """
    Normalize text fields for consistent comparison.
    
    Args:
        text (str): Original text
    
    Returns:
        str: Normalized text
    """
    if pd.isna(text):
        return ""
    
    # Convert to string and strip whitespace
    text = str(text).strip()
    
    # Convert to lowercase
    text = text.lower()
    
    # Remove extra whitespace
    text = re.sub(r'\s+', ' ', text)
    
    return text

def identify_reappointments(df):
    """
    Identify and mark reappointments based on name, position, and organization.
    
    Args:
        df (pd.DataFrame): Input DataFrame with appointments data
    
    Returns:
        pd.DataFrame: DataFrame with updated reappointment markings
    """
    print("Identifying reappointments...")
    
    # Create a copy to avoid modifying original data
    df_work = df.copy()
    
    # Ensure required columns exist
    required_cols = ['name', 'position', 'org', 'year']
    missing_cols = [col for col in required_cols if col not in df_work.columns]
    if missing_cols:
        raise ValueError(f"Missing required columns: {missing_cols}")
    
    # Create normalized versions for matching
    df_work['name_normalized'] = df_work['name'].apply(normalize_name)
    df_work['position_normalized'] = df_work['position'].apply(normalize_text_field)
    df_work['org_normalized'] = df_work['org'].apply(normalize_text_field)
    
    # Handle missing year values
    if df_work['year'].isna().any():
        print(f"Warning: {df_work['year'].isna().sum()} records have missing year values")
        # Fill missing years with a default value that will sort last
        df_work['year'] = df_work['year'].fillna(9999)
    
    # Ensure year is numeric
    df_work['year'] = pd.to_numeric(df_work['year'], errors='coerce')
    
    # Create grouping key
    df_work['group_key'] = (
        df_work['name_normalized'] + '|' + 
        df_work['position_normalized'] + '|' + 
        df_work['org_normalized']
    )
    
    # Remove empty group keys (where all components are empty)
    empty_groups = df_work['group_key'] == '||'
    if empty_groups.any():
        print(f"Warning: {empty_groups.sum()} records have empty grouping information")
    
    # Sort by group key and year for consistent ordering
    df_work = df_work.sort_values(['group_key', 'year'], kind='stable')
    
    # Initialize reappointment tracking
    original_reappointed = df_work['reappointed'].copy() if 'reappointed' in df_work.columns else pd.Series([False] * len(df_work), index=df_work.index)
    df_work['reappointed_updated'] = original_reappointed.copy()
    
    # Track statistics
    groups_processed = 0
    new_reappointments = 0
    
    print("Processing groups...")
    
    # Group by the combination and process each group
    for group_key, group_df in df_work.groupby('group_key'):
        groups_processed += 1
        
        # Skip empty groups
        if group_key == '||':
            continue
            
        # Skip single-occurrence groups
        if len(group_df) <= 1:
            continue
        
        # Sort group by year to identify chronological order
        group_df = group_df.sort_values('year', kind='stable')
        group_indices = group_df.index.tolist()
        
        # Mark all except the first occurrence as reappointments
        for idx in group_indices[1:]:  # Skip first occurrence
            if not df_work.loc[idx, 'reappointed_updated']:
                df_work.loc[idx, 'reappointed_updated'] = True
                new_reappointments += 1
    
    print(f"Processed {groups_processed} unique groups")
    print(f"Identified {new_reappointments} additional reappointments")
    
    # Update the original reappointed column
    df_work['reappointed'] = df_work['reappointed_updated']
    
    # Clean up working columns
    columns_to_drop = ['name_normalized', 'position_normalized', 'org_normalized', 
                      'group_key', 'reappointed_updated']
    df_work = df_work.drop(columns=columns_to_drop)
    
    # Restore original year column (remove filled values)
    df_work.loc[df_work['year'] == 9999, 'year'] = np.nan
    
    return df_work, new_reappointments

def print_reappointment_statistics(df_original, df_updated, new_reappointments):
    """
    Print statistics about the reappointment identification process.
    
    Args:
        df_original (pd.DataFrame): Original DataFrame
        df_updated (pd.DataFrame): Updated DataFrame
        new_reappointments (int): Number of new reappointments identified
    """
    print("\n" + "="*50)
    print("REAPPOINTMENT IDENTIFICATION STATISTICS")
    print("="*50)
    
    # Original reappointment counts
    if 'reappointed' in df_original.columns:
        original_reappointed = df_original['reappointed'].sum()
        original_not_reappointed = len(df_original) - original_reappointed
    else:
        original_reappointed = 0
        original_not_reappointed = len(df_original)
    
    # Updated reappointment counts
    updated_reappointed = df_updated['reappointed'].sum()
    updated_not_reappointed = len(df_updated) - updated_reappointed
    
    print(f"Total records: {len(df_updated):,}")
    print(f"\nOriginal reappointment status:")
    print(f"  Reappointed: {original_reappointed:,}")
    print(f"  Not reappointed: {original_not_reappointed:,}")
    
    print(f"\nUpdated reappointment status:")
    print(f"  Reappointed: {updated_reappointed:,}")
    print(f"  Not reappointed: {updated_not_reappointed:,}")
    
    print(f"\nChanges made:")
    print(f"  New reappointments identified: {new_reappointments:,}")
    print(f"  Percentage increase: {(new_reappointments/max(original_reappointed, 1)*100):.1f}%")
    
    # Year distribution of new reappointments
    if new_reappointments > 0:
        # Find records that were changed
        if 'reappointed' in df_original.columns:
            changed_mask = (df_updated['reappointed'] == True) & (df_original['reappointed'] == False)
        else:
            changed_mask = df_updated['reappointed'] == True
        
        if changed_mask.any():
            changed_records = df_updated[changed_mask]
            print(f"\nYear distribution of newly identified reappointments:")
            year_counts = changed_records['year'].value_counts().sort_index()
            for year, count in year_counts.items():
                if not pd.isna(year):
                    print(f"  {int(year)}: {count:,}")

def main():
    """Main execution function."""
    try:
        print("New Brunswick Government Appointments Reappointments Marker")
        print("="*60)
        
        # Define paths
        data_dir = Path("scripts/claudesonnet4/version1/execution3/analysis_data")
        input_file = data_dir / "step2_key_columns_data.csv"
        output_file = data_dir / "step3_repeats_marked.csv"
        
        # Check if input file exists
        if not input_file.exists():
            raise FileNotFoundError(f"Input file not found: {input_file}")
        
        # Load the dataset
        print(f"Loading dataset from: {input_file}")
        df_original = pd.read_csv(input_file)
        print(f"Loaded {len(df_original):,} records")
        
        # Identify reappointments
        df_updated, new_reappointments = identify_reappointments(df_original)
        
        # Print statistics
        print_reappointment_statistics(df_original, df_updated, new_reappointments)
        
        # Save updated dataset
        df_updated.to_csv(output_file, index=False)
        print(f"\nUpdated dataset saved to: {output_file}")
        
        print("\nReappointment identification completed successfully!")
        
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()