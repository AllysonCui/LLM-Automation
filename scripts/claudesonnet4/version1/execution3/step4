#!/usr/bin/env python3
"""
New Brunswick Government Appointments Organization-Year Counts
Creates appointment counts by organization and year.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def main():
    """Main execution function."""
    try:
        print("New Brunswick Government Appointments Organization-Year Counts")
        print("="*65)
        
        # Define paths
        data_dir = Path("scripts/claudesonnet4/version1/execution3/analysis_data")
        input_file = data_dir / "step3_repeats_marked.csv"
        output_file = data_dir / "step4_appointment_counts.csv"
        
        # Load dataset
        print(f"Loading dataset from: {input_file}")
        if not input_file.exists():
            raise FileNotFoundError(f"Input file not found: {input_file}")
        
        df = pd.read_csv(input_file)
        print(f"Loaded {len(df):,} records")
        
        # Validate required columns
        if 'org' not in df.columns or 'year' not in df.columns:
            raise ValueError("Required columns 'org' and 'year' not found")
        
        # Handle missing values
        missing_org = df['org'].isna().sum()
        missing_year = df['year'].isna().sum()
        
        if missing_org > 0:
            print(f"Warning: {missing_org:,} records with missing organization")
            df['org'] = df['org'].fillna('Unknown')
        
        if missing_year > 0:
            print(f"Warning: {missing_year:,} records with missing year")
            df['year'] = df['year'].fillna(9999)
        
        # Clean data
        df['org'] = df['org'].astype(str).str.strip()
        df['year'] = df['year'].astype(int)
        
        # Group by org and year, count appointments
        print("\nGrouping data by organization and year...")
        counts = df.groupby(['org', 'year']).size().reset_index(name='count')
        
        # Create pivot table
        print("Creating summary table...")
        summary_table = counts.pivot(index='org', columns='year', values='count')
        summary_table = summary_table.fillna(0).astype(int)
        
        # Add total column
        summary_table['Total'] = summary_table.sum(axis=1)
        
        # Sort by total appointments (descending)
        summary_table = summary_table.sort_values('Total', ascending=False)
        
        # Validate counts
        total_from_table = summary_table['Total'].sum()
        if total_from_table != len(df):
            print(f"Warning: Count mismatch! Expected: {len(df):,}, Got: {total_from_table:,}")
        else:
            print(f"âœ“ Count validation passed: {total_from_table:,} total appointments")
        
        # Print summary statistics
        print(f"\n{'='*50}")
        print("SUMMARY STATISTICS")
        print(f"{'='*50}")
        print(f"Total organizations: {len(summary_table):,}")
        print(f"Total appointments: {summary_table['Total'].sum():,}")
        print(f"Years covered: {len(summary_table.columns)-1}")
        
        # Top organizations
        print(f"\nTop 10 organizations by total appointments:")
        for i, (org, total) in enumerate(summary_table['Total'].head(10).items(), 1):
            print(f"  {i:2d}. {org}: {total:,}")
        
        # Print summary table (top organizations)
        print(f"\nSummary table (top 10 organizations):")
        print(summary_table.head(10).to_string())
        
        # Save results
        summary_table.to_csv(output_file)
        print(f"\nSummary table saved to: {output_file}")
        
        print("\nProcess completed successfully!")
        
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()