#!/usr/bin/env python3
"""
New Brunswick Government Reappointment Counts Analysis
Creates reappointment counts by organization and year.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def main():
    """Main execution function."""
    try:
        print("New Brunswick Government Reappointment Counts Analysis")
        print("="*60)
        
        # Define paths
        data_dir = Path("scripts/claudesonnet4/version1/execution3/analysis_data")
        input_file = data_dir / "step3_repeats_marked.csv"
        output_file = data_dir / "step5_reappointment_counts.csv"
        
        # Load dataset
        print(f"Loading dataset from: {input_file}")
        if not input_file.exists():
            raise FileNotFoundError(f"Input file not found: {input_file}")
        
        df = pd.read_csv(input_file)
        print(f"Loaded {len(df):,} total records")
        
        # Validate required columns
        required_cols = ['reappointed', 'org', 'year']
        missing_cols = [col for col in required_cols if col not in df.columns]
        if missing_cols:
            raise ValueError(f"Missing required columns: {missing_cols}")
        
        # Check reappointed column data types and values
        print(f"\nReappointed column info:")
        print(f"  Data type: {df['reappointed'].dtype}")
        print(f"  Unique values: {df['reappointed'].unique()}")
        print(f"  Value counts:")
        print(df['reappointed'].value_counts().to_string())
        
        # Filter for reappointments only
        print(f"\nFiltering for reappointments...")
        reappointed_df = df[df['reappointed'] == True].copy()
        print(f"Records with reappointed=True: {len(reappointed_df):,}")
        
        if len(reappointed_df) == 0:
            print("Warning: No reappointment records found!")
            # Create empty summary table
            summary_table = pd.DataFrame()
            summary_table.to_csv(output_file, index=False)
            return
        
        # Handle missing values in filtered data
        missing_org = reappointed_df['org'].isna().sum()
        missing_year = reappointed_df['year'].isna().sum()
        
        if missing_org > 0:
            print(f"Warning: {missing_org:,} reappointment records with missing organization")
            reappointed_df['org'] = reappointed_df['org'].fillna('Unknown')
        
        if missing_year > 0:
            print(f"Warning: {missing_year:,} reappointment records with missing year")
            reappointed_df['year'] = reappointed_df['year'].fillna(9999)
        
        # Clean data and ensure proper types
        reappointed_df['org'] = reappointed_df['org'].astype(str).str.strip()
        reappointed_df['year'] = reappointed_df['year'].astype(int)
        
        # Group by org and year, count reappointments
        print(f"\nGrouping reappointments by organization and year...")
        reappoint_counts = reappointed_df.groupby(['org', 'year']).size().reset_index(name='reappointments')
        
        print(f"Created {len(reappoint_counts):,} org-year combinations with reappointments")
        
        # Debugging output - show sample grouped data
        print(f"\nSample grouped data (first 10 rows):")
        print(reappoint_counts.head(10).to_string(index=False))
        
        print(f"\nSample grouped data (organizations with most reappointments):")
        top_reappoint_sample = reappoint_counts.nlargest(5, 'reappointments')
        print(top_reappoint_sample.to_string(index=False))
        
        # Get all organizations and years from original data for complete matrix
        all_orgs = df['org'].fillna('Unknown').astype(str).str.strip().unique()
        all_years = df['year'].fillna(9999).astype(int).unique()
        all_years = sorted([year for year in all_years if not pd.isna(year)])
        
        print(f"\nData coverage:")
        print(f"  Total organizations: {len(all_orgs):,}")
        print(f"  Year range: {min(all_years)} to {max(all_years)}")
        print(f"  Organizations with reappointments: {reappoint_counts['org'].nunique():,}")
        
        # Create pivot table
        print(f"\nCreating reappointment summary table...")
        summary_table = reappoint_counts.pivot(index='org', columns='year', values='reappointments')
        
        # Fill NaN with 0 for organizations with no reappointments in certain years
        summary_table = summary_table.fillna(0).astype(int)
        
        # Ensure all years are present as columns (even if no reappointments)
        for year in all_years:
            if year not in summary_table.columns:
                summary_table[year] = 0
        
        # Sort columns by year
        summary_table = summary_table[sorted(summary_table.columns)]
        
        # Add total column
        summary_table['Total'] = summary_table.sum(axis=1)
        
        # Sort by total reappointments (descending)
        summary_table = summary_table.sort_values('Total', ascending=False)
        
        # Validation - verify pivot table contains actual counts
        total_from_table = summary_table['Total'].sum()
        total_reappointments = len(reappointed_df)
        
        print(f"\nValidation:")
        print(f"  Reappointments in original data: {total_reappointments:,}")
        print(f"  Reappointments in summary table: {total_from_table:,}")
        
        if total_from_table != total_reappointments:
            print(f"  ⚠️  Count mismatch detected!")
        else:
            print(f"  ✓ Count validation passed")
        
        # Check if table contains non-zero values
        non_zero_values = (summary_table.drop('Total', axis=1) > 0).sum().sum()
        print(f"  Non-zero entries in table: {non_zero_values:,}")
        
        if non_zero_values == 0:
            print(f"  ⚠️  Warning: No non-zero reappointment counts found!")
        
        # Print summary statistics
        print(f"\n{'='*50}")
        print("REAPPOINTMENT SUMMARY STATISTICS")
        print(f"{'='*50}")
        print(f"Organizations with reappointments: {len(summary_table):,}")
        print(f"Total reappointments: {summary_table['Total'].sum():,}")
        print(f"Years with reappointments: {len([col for col in summary_table.columns if col != 'Total'])}")
        
        # Top organizations by reappointments
        print(f"\nTop 10 organizations by total reappointments:")
        for i, (org, total) in enumerate(summary_table['Total'].head(10).items(), 1):
            if total > 0:
                print(f"  {i:2d}. {org}: {total:,}")
        
        # Year-by-year reappointment totals
        print(f"\nReappointments by year:")
        year_totals = summary_table.drop('Total', axis=1).sum()
        for year, total in year_totals.items():
            if total > 0:
                print(f"  {year}: {total:,}")
        
        # Show sample of summary table
        print(f"\nSample of reappointment summary table (top 5 organizations):")
        sample_table = summary_table.head()
        if len(sample_table) > 0:
            print(sample_table.to_string())
        else:
            print("  No data to display")
        
        # Save results
        summary_table.to_csv(output_file)
        print(f"\nReappointment summary table saved to: {output_file}")
        
        print("\nReappointment analysis completed successfully!")
        
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()