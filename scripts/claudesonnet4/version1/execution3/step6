#!/usr/bin/env python3
"""
New Brunswick Government Reappointment Rates Calculator
Calculates reappointment rates by merging appointment counts and reappointment counts.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_datasets(data_dir):
    """
    Load appointment counts and reappointment counts datasets.
    
    Args:
        data_dir (Path): Directory containing the data files
    
    Returns:
        tuple: (appointment_counts_df, reappointment_counts_df)
    """
    appointment_file = data_dir / "step4_appointment_counts.csv"
    reappointment_file = data_dir / "step5_reappointment_counts.csv"
    
    # Load appointment counts
    if not appointment_file.exists():
        raise FileNotFoundError(f"Appointment counts file not found: {appointment_file}")
    
    print(f"Loading appointment counts from: {appointment_file}")
    appointment_df = pd.read_csv(appointment_file, index_col=0)
    print(f"Appointment counts shape: {appointment_df.shape}")
    
    # Load reappointment counts
    if not reappointment_file.exists():
        raise FileNotFoundError(f"Reappointment counts file not found: {reappointment_file}")
    
    print(f"Loading reappointment counts from: {reappointment_file}")
    reappointment_df = pd.read_csv(reappointment_file, index_col=0)
    print(f"Reappointment counts shape: {reappointment_df.shape}")
    
    return appointment_df, reappointment_df

def convert_to_long_format(df, value_name):
    """
    Convert pivot table to long format.
    
    Args:
        df (pd.DataFrame): Pivot table with orgs as rows, years as columns
        value_name (str): Name for the value column
    
    Returns:
        pd.DataFrame: Long format DataFrame
    """
    # Remove 'Total' column if it exists
    if 'Total' in df.columns:
        df = df.drop('Total', axis=1)
    
    # Reset index to make org a column
    df_reset = df.reset_index()
    
    # Melt to long format
    long_df = pd.melt(df_reset, id_vars=['org'], var_name='year', value_name=value_name)
    
    # Ensure year is integer
    long_df['year'] = pd.to_numeric(long_df['year'], errors='coerce').astype('Int64')
    
    return long_df

def merge_and_calculate_rates(appointment_long, reappointment_long):
    """
    Merge datasets and calculate reappointment rates.
    
    Args:
        appointment_long (pd.DataFrame): Appointment counts in long format
        reappointment_long (pd.DataFrame): Reappointment counts in long format
    
    Returns:
        pd.DataFrame: Merged data with reappointment rates
    """
    print("\nMerging datasets...")
    
    # Merge on org and year
    merged = pd.merge(appointment_long, reappointment_long, on=['org', 'year'], how='left')
    
    # Fill missing reappointments with 0
    merged['reappointments'] = merged['reappointments'].fillna(0)
    
    print(f"Merged dataset shape: {merged.shape}")
    print(f"Organizations: {merged['org'].nunique()}")
    print(f"Year range: {merged['year'].min()}-{merged['year'].max()}")
    
    # Handle division by zero and calculate reappointment rate
    print("\nCalculating reappointment rates...")
    
    # Create a mask for valid calculations (total_appointments > 0)
    valid_mask = merged['total_appointments'] > 0
    
    # Initialize reappointment_rate column
    merged['reappointment_rate'] = np.nan
    
    # Calculate rates only where we have appointments
    merged.loc[valid_mask, 'reappointment_rate'] = (
        merged.loc[valid_mask, 'reappointments'] / merged.loc[valid_mask, 'total_appointments']
    )
    
    # Check for edge cases
    zero_appointments = (merged['total_appointments'] == 0).sum()
    if zero_appointments > 0:
        print(f"Warning: {zero_appointments} records with zero total appointments")
    
    rates_over_1 = (merged['reappointment_rate'] > 1.0).sum()
    if rates_over_1 > 0:
        print(f"Warning: {rates_over_1} records with reappointment rate > 100%")
        print("This may indicate data quality issues")
    
    return merged

def validate_results(merged_df):
    """
    Validate the calculated results.
    
    Args:
        merged_df (pd.DataFrame): Merged dataset with rates
    """
    print(f"\n{'='*50}")
    print("DATA VALIDATION")
    print(f"{'='*50}")
    
    # Basic statistics
    total_records = len(merged_df)
    records_with_appointments = (merged_df['total_appointments'] > 0).sum()
    records_with_reappointments = (merged_df['reappointments'] > 0).sum()
    records_with_rates = merged_df['reappointment_rate'].notna().sum()
    
    print(f"Total records: {total_records:,}")
    print(f"Records with appointments: {records_with_appointments:,}")
    print(f"Records with reappointments: {records_with_reappointments:,}")
    print(f"Records with calculated rates: {records_with_rates:,}")
    
    # Rate statistics
    if records_with_rates > 0:
        rate_stats = merged_df['reappointment_rate'].describe()
        print(f"\nReappointment rate statistics:")
        print(f"  Mean: {rate_stats['mean']:.3f} ({rate_stats['mean']*100:.1f}%)")
        print(f"  Median: {rate_stats['50%']:.3f} ({rate_stats['50%']*100:.1f}%)")
        print(f"  Max: {rate_stats['max']:.3f} ({rate_stats['max']*100:.1f}%)")
        print(f"  Min: {rate_stats['min']:.3f} ({rate_stats['min']*100:.1f}%)")
    
    # Check for anomalies
    high_rates = merged_df[merged_df['reappointment_rate'] > 0.5]
    if len(high_rates) > 0:
        print(f"\nRecords with reappointment rate > 50%: {len(high_rates)}")

def print_top_organizations(merged_df):
    """
    Print organizations with highest average reappointment rates.
    
    Args:
        merged_df (pd.DataFrame): Merged dataset with rates
    """
    print(f"\n{'='*50}")
    print("ORGANIZATIONS WITH HIGHEST AVERAGE REAPPOINTMENT RATES")
    print(f"{'='*50}")
    
    # Calculate average reappointment rate by organization
    # Only include organizations with at least some reappointments and valid rates
    org_stats = merged_df[
        (merged_df['reappointment_rate'].notna()) & 
        (merged_df['reappointments'] > 0)
    ].groupby('org').agg({
        'reappointment_rate': ['mean', 'count'],
        'total_appointments': 'sum',
        'reappointments': 'sum'
    }).round(3)
    
    # Flatten column names
    org_stats.columns = ['avg_rate', 'years_with_data', 'total_appointments', 'total_reappointments']
    
    # Filter organizations with multiple years of data for more reliable averages
    org_stats_filtered = org_stats[org_stats['years_with_data'] >= 2]
    
    if len(org_stats_filtered) > 0:
        # Sort by average reappointment rate
        top_orgs = org_stats_filtered.sort_values('avg_rate', ascending=False).head(10)
        
        print(f"Top 10 organizations (with 2+ years of data):")
        for i, (org, row) in enumerate(top_orgs.iterrows(), 1):
            print(f"  {i:2d}. {org}")
            print(f"      Avg rate: {row['avg_rate']:.3f} ({row['avg_rate']*100:.1f}%)")
            print(f"      Years: {int(row['years_with_data'])}, Appointments: {int(row['total_appointments'])}, Reappointments: {int(row['total_reappointments'])}")
    else:
        print("Not enough organizations with multiple years of data for reliable averages")
        
        # Show single-year data instead
        single_year = org_stats[org_stats['years_with_data'] == 1].sort_values('avg_rate', ascending=False).head(5)
        if len(single_year) > 0:
            print(f"\nTop 5 organizations (single year data):")
            for i, (org, row) in enumerate(single_year.iterrows(), 1):
                print(f"  {i}. {org}: {row['avg_rate']:.3f} ({row['avg_rate']*100:.1f}%)")

def main():
    """Main execution function."""
    try:
        print("New Brunswick Government Reappointment Rates Calculator")
        print("="*60)
        
        # Define paths
        data_dir = Path("scripts/claudesonnet4/version1/execution3/analysis_data")
        output_file = data_dir / "step6_reappointment_rates.csv"
        
        # Load datasets
        appointment_df, reappointment_df = load_datasets(data_dir)
        
        # Convert to long format
        print("\nConverting to long format...")
        appointment_long = convert_to_long_format(appointment_df, 'total_appointments')
        reappointment_long = convert_to_long_format(reappointment_df, 'reappointments')
        
        print(f"Appointment long format: {appointment_long.shape}")
        print(f"Reappointment long format: {reappointment_long.shape}")
        
        # Merge and calculate rates
        merged_df = merge_and_calculate_rates(appointment_long, reappointment_long)
        
        # Validate results
        validate_results(merged_df)
        
        # Print top organizations
        print_top_organizations(merged_df)
        
        # Save results
        merged_df.to_csv(output_file, index=False)
        print(f"\nReappointment rates saved to: {output_file}")
        
        print("\nReappointment rates calculation completed successfully!")
        
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()