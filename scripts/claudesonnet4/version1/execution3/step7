#!/usr/bin/env python3
"""
New Brunswick Government Yearly Maximum Reappointment Rates
Identifies organizations with highest reappointment rates for each year.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt

def load_reappointment_rates(data_dir):
    """
    Load reappointment rates dataset.
    
    Args:
        data_dir (Path): Directory containing the data files
    
    Returns:
        pd.DataFrame: Reappointment rates dataset
    """
    rates_file = data_dir / "step6_reappointment_rates.csv"
    
    if not rates_file.exists():
        raise FileNotFoundError(f"Reappointment rates file not found: {rates_file}")
    
    print(f"Loading reappointment rates from: {rates_file}")
    df = pd.read_csv(rates_file)
    
    print(f"Loaded {len(df):,} records")
    print(f"Date range: {df['year'].min()}-{df['year'].max()}")
    print(f"Organizations: {df['org'].nunique()}")
    
    return df

def find_yearly_max_rates(df):
    """
    Find organization with highest reappointment rate for each year.
    
    Tie handling approach: When multiple organizations have the same highest rate,
    select the organization with the most total appointments (more meaningful sample size).
    If still tied, select alphabetically first organization name.
    
    Args:
        df (pd.DataFrame): Reappointment rates dataset
    
    Returns:
        pd.DataFrame: Yearly maximum rates with top organization
    """
    print("\nFinding yearly maximum reappointment rates...")
    
    # Filter for records with valid reappointment rates
    valid_df = df[df['reappointment_rate'].notna()].copy()
    
    if len(valid_df) == 0:
        print("Warning: No valid reappointment rates found!")
        return pd.DataFrame(columns=['year', 'top_org', 'max_rate'])
    
    print(f"Valid records for analysis: {len(valid_df):,}")
    
    yearly_max = []
    
    # Process each year
    for year in sorted(valid_df['year'].unique()):
        year_data = valid_df[valid_df['year'] == year]
        
        # Find maximum rate for this year
        max_rate = year_data['reappointment_rate'].max()
        
        # Find all organizations with this maximum rate
        max_orgs = year_data[year_data['reappointment_rate'] == max_rate]
        
        if len(max_orgs) == 1:
            # Single winner
            top_org = max_orgs.iloc[0]['org']
            print(f"  {year}: {top_org} ({max_rate:.3f})")
        else:
            # Handle ties
            print(f"  {year}: TIE between {len(max_orgs)} organizations at rate {max_rate:.3f}")
            
            # Tie-breaking: First by total appointments (descending), then alphabetically
            tie_breaker = max_orgs.sort_values(['total_appointments', 'org'], ascending=[False, True])
            top_org = tie_breaker.iloc[0]['org']
            
            tied_orgs = max_orgs['org'].tolist()
            print(f"    Tied organizations: {', '.join(tied_orgs)}")
            print(f"    Selected: {top_org} (most appointments: {tie_breaker.iloc[0]['total_appointments']})")
        
        yearly_max.append({
            'year': year,
            'top_org': top_org,
            'max_rate': max_rate
        })
    
    result_df = pd.DataFrame(yearly_max)
    
    print(f"\nProcessed {len(result_df)} years")
    
    return result_df

def create_visualization(yearly_max_df, output_dir):
    """
    Create visualization of yearly maximum rates trend.
    
    Args:
        yearly_max_df (pd.DataFrame): Yearly maximum rates data
        output_dir (Path): Directory to save the plot
    """
    if len(yearly_max_df) == 0:
        print("No data available for visualization")
        return
    
    print("\nCreating visualization...")
    
    # Set up the plot
    plt.figure(figsize=(12, 8))
    
    # Create the line plot
    plt.plot(yearly_max_df['year'], yearly_max_df['max_rate'], 
             marker='o', linewidth=2, markersize=6, color='#2E86C1')
    
    # Customize the plot
    plt.title('Highest Reappointment Rate by Year\nNew Brunswick Government Appointments', 
              fontsize=14, fontweight='bold', pad=20)
    plt.xlabel('Year', fontsize=12)
    plt.ylabel('Maximum Reappointment Rate', fontsize=12)
    
    # Format y-axis as percentage
    plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: f'{y:.1%}'))
    
    # Add grid for better readability
    plt.grid(True, alpha=0.3)
    
    # Rotate x-axis labels if many years
    if len(yearly_max_df) > 10:
        plt.xticks(rotation=45)
    
    # Add some padding to y-axis
    y_range = yearly_max_df['max_rate'].max() - yearly_max_df['max_rate'].min()
    y_padding = y_range * 0.1
    plt.ylim(yearly_max_df['max_rate'].min() - y_padding, 
             yearly_max_df['max_rate'].max() + y_padding)
    
    # Adjust layout to prevent label cutoff
    plt.tight_layout()
    
    # Save the plot
    plot_file = output_dir / "step7_yearly_max_rates.png"
    plt.savefig(plot_file, dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"Visualization saved to: {plot_file}")

def print_yearly_results(yearly_max_df):
    """
    Print year-by-year results in a formatted table.
    
    Args:
        yearly_max_df (pd.DataFrame): Yearly maximum rates data
    """
    print(f"\n{'='*60}")
    print("YEAR-BY-YEAR MAXIMUM REAPPOINTMENT RATES")
    print(f"{'='*60}")
    
    if len(yearly_max_df) == 0:
        print("No data available")
        return
    
    print(f"{'Year':<6} {'Organization':<30} {'Max Rate':<10}")
    print("-" * 60)
    
    for _, row in yearly_max_df.iterrows():
        rate_pct = f"{row['max_rate']:.1%}"
        # Truncate long organization names
        org_name = row['top_org'][:27] + "..." if len(row['top_org']) > 30 else row['top_org']
        print(f"{int(row['year']):<6} {org_name:<30} {rate_pct:<10}")
    
    # Summary statistics
    print(f"\n{'='*60}")
    print("SUMMARY STATISTICS")
    print(f"{'='*60}")
    print(f"Years analyzed: {len(yearly_max_df)}")
    print(f"Average max rate: {yearly_max_df['max_rate'].mean():.1%}")
    print(f"Highest max rate: {yearly_max_df['max_rate'].max():.1%} in {int(yearly_max_df.loc[yearly_max_df['max_rate'].idxmax(), 'year'])}")
    print(f"Lowest max rate: {yearly_max_df['max_rate'].min():.1%} in {int(yearly_max_df.loc[yearly_max_df['max_rate'].idxmin(), 'year'])}")
    
    # Most frequent top organizations
    org_counts = yearly_max_df['top_org'].value_counts()
    if len(org_counts) > 0:
        print(f"\nMost frequent top organizations:")
        for org, count in org_counts.head(3).items():
            print(f"  {org}: {count} year(s)")

def main():
    """Main execution function."""
    try:
        print("New Brunswick Government Yearly Maximum Reappointment Rates Analysis")
        print("="*70)
        
        # Define paths
        data_dir = Path("scripts/claudesonnet4/version1/execution3/analysis_data")
        output_file = data_dir / "step7_yearly_max_rates.csv"
        
        # Load reappointment rates
        df = load_reappointment_rates(data_dir)
        
        # Find yearly maximum rates
        yearly_max_df = find_yearly_max_rates(df)
        
        # Print results
        print_yearly_results(yearly_max_df)
        
        # Create visualization
        create_visualization(yearly_max_df, data_dir)
        
        # Save results
        if len(yearly_max_df) > 0:
            yearly_max_df.to_csv(output_file, index=False)
            print(f"\nResults saved to: {output_file}")
        else:
            print("No results to save")
        
        print("\nYearly maximum rates analysis completed successfully!")
        
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()