#!/usr/bin/env python3
"""
New Brunswick Government Annual Reappointment Proportions
Calculates government-wide reappointment proportions for each year (2013-2024).
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt

def load_appointments_data(input_dir):
    """
    Load the dataset from step 3 with reappointment flags.
    
    Args:
        input_dir (Path): Directory containing the input file
    
    Returns:
        pd.DataFrame: Appointments dataset with reappointment flags
    """
    input_file = input_dir / "step3_repeats_marked.csv"
    
    if not input_file.exists():
        raise FileNotFoundError(f"Step 3 dataset not found: {input_file}")
    
    print(f"Loading appointments data from: {input_file}")
    df = pd.read_csv(input_file)
    print(f"Loaded dataset with shape: {df.shape}")
    
    # Validate required columns
    required_columns = ['year', 'reappointed']
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        raise ValueError(f"Missing required columns: {missing_columns}")
    
    print(f"Dataset columns: {list(df.columns)}")
    return df

def prepare_data_for_analysis(df):
    """
    Prepare data for annual proportion analysis.
    
    Args:
        df (pd.DataFrame): Input appointments dataset
    
    Returns:
        pd.DataFrame: Cleaned dataset ready for analysis
    """
    print("Preparing data for analysis...")
    
    # Create a copy for processing
    clean_df = df.copy()
    
    # Handle missing years
    missing_years = clean_df['year'].isnull().sum()
    if missing_years > 0:
        print(f"  Warning: {missing_years} records with missing years will be excluded")
        clean_df = clean_df[clean_df['year'].notna()]
    
    # Convert years to integers
    clean_df['year'] = pd.to_numeric(clean_df['year'], errors='coerce')
    clean_df = clean_df[clean_df['year'].notna()]  # Remove any conversion failures
    clean_df['year'] = clean_df['year'].astype(int)
    
    # Handle reappointed column - convert to boolean
    print("  Processing reappointment flags...")
    
    reappointed_series = clean_df['reappointed'].copy()
    
    # Convert different data types to boolean
    if reappointed_series.dtype == 'object':
        # Handle string representations
        reappointed_series = reappointed_series.astype(str).str.lower()
        clean_df['reappointed_bool'] = reappointed_series.isin(['true', 'yes', '1', 'y', '1.0'])
    elif reappointed_series.dtype == 'bool':
        clean_df['reappointed_bool'] = reappointed_series
    else:
        # Numeric: treat non-zero as True, handle NaN as False
        clean_df['reappointed_bool'] = reappointed_series.fillna(0) != 0
    
    # Filter for target years (2013-2024)
    target_years = list(range(2013, 2025))
    clean_df = clean_df[clean_df['year'].isin(target_years)]
    
    print(f"  Filtered dataset shape: {clean_df.shape}")
    print(f"  Year range: {clean_df['year'].min()} - {clean_df['year'].max()}")
    print(f"  Total appointments: {len(clean_df):,}")
    print(f"  Total reappointments: {clean_df['reappointed_bool'].sum():,}")
    
    return clean_df

def calculate_annual_proportions(df):
    """
    Calculate annual reappointment proportions for each year.
    
    Args:
        df (pd.DataFrame): Cleaned appointments dataset
    
    Returns:
        pd.DataFrame: Annual proportions with columns: year, total_appointments, total_reappointments, reappointment_proportion
    """
    print("Calculating annual reappointment proportions...")
    
    # Group by year and calculate totals
    annual_stats = df.groupby('year').agg({
        'reappointed_bool': ['count', 'sum']
    }).round(6)
    
    # Flatten column names
    annual_stats.columns = ['total_appointments', 'total_reappointments']
    
    # Calculate proportion
    annual_stats['reappointment_proportion'] = (
        annual_stats['total_reappointments'] / annual_stats['total_appointments']
    )
    
    # Reset index to make year a column
    annual_stats = annual_stats.reset_index()
    
    # Ensure we have all years 2013-2024, even if no data
    all_years = pd.DataFrame({'year': list(range(2013, 2025))})
    result_df = pd.merge(all_years, annual_stats, on='year', how='left')
    
    # Fill missing values with 0
    result_df['total_appointments'] = result_df['total_appointments'].fillna(0).astype(int)
    result_df['total_reappointments'] = result_df['total_reappointments'].fillna(0).astype(int)
    result_df['reappointment_proportion'] = result_df['reappointment_proportion'].fillna(0)
    
    print(f"  Calculated proportions for {len(result_df)} years")
    
    return result_df

def create_visualization(annual_df, output_dir):
    """
    Create a visualization showing the government-wide reappointment proportion trend.
    
    Args:
        annual_df (pd.DataFrame): Annual proportions data
        output_dir (Path): Directory to save the visualization
    """
    print("Creating visualization...")
    
    # Filter out years with no data for cleaner visualization
    plot_data = annual_df[annual_df['total_appointments'] > 0].copy()
    
    if len(plot_data) == 0:
        print("  No data to visualize!")
        return
    
    # Create the plot
    plt.figure(figsize=(14, 8))
    
    # Main line plot
    plt.plot(plot_data['year'], plot_data['reappointment_proportion'], 
             marker='o', linewidth=3, markersize=8, color='#1f77b4', label='Reappointment Proportion')
    
    # Add points for emphasis
    plt.scatter(plot_data['year'], plot_data['reappointment_proportion'], 
                s=100, color='#ff7f0e', zorder=5, alpha=0.8)
    
    # Formatting
    plt.title('Government-Wide Reappointment Proportions by Year\nNew Brunswick Government Appointments (2013-2024)', 
              fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Year', fontsize=14, fontweight='bold')
    plt.ylabel('Reappointment Proportion', fontsize=14, fontweight='bold')
    
    # Format y-axis as percentages
    plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: f'{y:.1%}'))
    
    # Grid for better readability
    plt.grid(True, alpha=0.3, linestyle='--')
    
    # Set x-axis to show all years
    plt.xlim(2012.5, 2024.5)
    plt.xticks(range(2013, 2025), rotation=45)
    
    # Add trend line
    if len(plot_data) > 1:
        z = np.polyfit(plot_data['year'], plot_data['reappointment_proportion'], 1)
        p = np.poly1d(z)
        plt.plot(plot_data['year'], p(plot_data['year']), 
                 linestyle='--', alpha=0.7, color='red', linewidth=2, label='Trend Line')
    
    # Calculate and display summary statistics
    avg_proportion = plot_data['reappointment_proportion'].mean()
    max_proportion = plot_data['reappointment_proportion'].max()
    min_proportion = plot_data['reappointment_proportion'].min()
    max_year = plot_data.loc[plot_data['reappointment_proportion'].idxmax(), 'year']
    min_year = plot_data.loc[plot_data['reappointment_proportion'].idxmin(), 'year']
    
    # Add statistics text box
    stats_text = (f'Average: {avg_proportion:.1%}\n'
                  f'Highest: {max_proportion:.1%} ({int(max_year)})\n'
                  f'Lowest: {min_proportion:.1%} ({int(min_year)})\n'
                  f'Total Years: {len(plot_data)}')
    
    plt.text(0.02, 0.98, stats_text, transform=plt.gca().transAxes, 
             verticalalignment='top', bbox=dict(boxstyle='round', facecolor='white', alpha=0.9),
             fontsize=11, fontweight='bold')
    
    # Add legend
    plt.legend(loc='upper right')
    
    # Tight layout and save
    plt.tight_layout()
    
    output_file = output_dir / "step8_annual_reappointment_proportions.png"
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"  Visualization saved to: {output_file}")

def print_annual_results(annual_df):
    """
    Print year-by-year proportions and summary statistics.
    
    Args:
        annual_df (pd.DataFrame): Annual proportions data
    """
    print("\n" + "="*70)
    print("GOVERNMENT-WIDE ANNUAL REAPPOINTMENT PROPORTIONS")
    print("="*70)
    
    # Filter for years with data
    data_years = annual_df[annual_df['total_appointments'] > 0]
    
    if len(data_years) == 0:
        print("No appointment data found for any year!")
        return
    
    # Overall statistics
    total_appointments_all = data_years['total_appointments'].sum()
    total_reappointments_all = data_years['total_reappointments'].sum()
    overall_proportion = total_reappointments_all / total_appointments_all if total_appointments_all > 0 else 0
    
    print("Overall Summary (2013-2024):")
    print(f"  Years with data: {len(data_years)}")
    print(f"  Total appointments: {total_appointments_all:,}")
    print(f"  Total reappointments: {total_reappointments_all:,}")
    print(f"  Overall proportion: {overall_proportion:.1%}")
    
    # Year-by-year breakdown
    print(f"\nYear-by-Year Breakdown:")
    print("-" * 70)
    print(f"{'Year':<6} {'Appointments':<12} {'Reappointments':<14} {'Proportion':<11} {'Visual'}")
    print("-" * 70)
    
    for _, row in annual_df.iterrows():
        year = int(row['year'])
        appointments = int(row['total_appointments'])
        reappointments = int(row['total_reappointments'])
        proportion = row['reappointment_proportion']
        
        if appointments == 0:
            print(f"{year:<6} {'No data':<12} {'No data':<14} {'N/A':<11} {''}")
        else:
            # Create visual bar (simple ASCII representation)
            bar_length = int(proportion * 20)  # Scale to 20 characters max
            visual_bar = '█' * bar_length + '░' * (20 - bar_length)
            
            print(f"{year:<6} {appointments:<12,} {reappointments:<14,} {proportion:>10.1%} {visual_bar}")
    
    # Summary statistics for years with data
    if len(data_years) > 0:
        print(f"\nStatistics for Years with Data:")
        print(f"  Average annual proportion: {data_years['reappointment_proportion'].mean():.1%}")
        print(f"  Highest proportion: {data_years['reappointment_proportion'].max():.1%} "
              f"({int(data_years.loc[data_years['reappointment_proportion'].idxmax(), 'year'])})")
        print(f"  Lowest proportion: {data_years['reappointment_proportion'].min():.1%} "
              f"({int(data_years.loc[data_years['reappointment_proportion'].idxmin(), 'year'])})")
        print(f"  Standard deviation: {data_years['reappointment_proportion'].std():.1%}")
        
        # Trend analysis
        if len(data_years) > 1:
            correlation = np.corrcoef(data_years['year'], data_years['reappointment_proportion'])[0, 1]
            trend_direction = "increasing" if correlation > 0.1 else "decreasing" if correlation < -0.1 else "stable"
            print(f"  Overall trend: {trend_direction} (correlation: {correlation:.3f})")

def main():
    """Main execution function."""
    try:
        print("New Brunswick Government Annual Reappointment Proportions Analysis")
        print("="*70)
        
        # Define paths
        input_dir = Path("scripts/claudesonnet4/version1/execution3/analysis_data")
        output_file = input_dir / "step8_annual_proportions.csv"
        
        # Load appointments data
        df = load_appointments_data(input_dir)
        
        # Prepare data for analysis
        clean_df = prepare_data_for_analysis(df)
        
        # Calculate annual proportions
        annual_df = calculate_annual_proportions(clean_df)
        
        # Print results
        print_annual_results(annual_df)
        
        # Create visualization
        create_visualization(annual_df, input_dir)
        
        # Save results
        annual_df.to_csv(output_file, index=False)
        print(f"\nAnnual proportions saved to: {output_file}")
        
        print("\nGovernment-wide annual reappointment proportions analysis completed successfully!")
        
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()