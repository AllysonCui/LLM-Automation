#!/usr/bin/env python3
"""
New Brunswick Government Annual Reappointment Proportions
Calculates government-wide reappointment proportions for each year.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt

def load_appointments_data(data_dir):
    """
    Load the appointments dataset with reappointment flags.
    
    Args:
        data_dir (Path): Directory containing the data files
    
    Returns:
        pd.DataFrame: Appointments dataset
    """
    input_file = data_dir / "step3_repeats_marked.csv"
    
    if not input_file.exists():
        raise FileNotFoundError(f"Input file not found: {input_file}")
    
    print(f"Loading appointments data from: {input_file}")
    df = pd.read_csv(input_file)
    
    print(f"Loaded {len(df):,} appointment records")
    
    # Validate required columns
    required_cols = ['year', 'reappointed']
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        raise ValueError(f"Missing required columns: {missing_cols}")
    
    return df

def calculate_annual_proportions(df):
    """
    Calculate annual reappointment proportions across entire government.
    
    Args:
        df (pd.DataFrame): Appointments dataset
    
    Returns:
        pd.DataFrame: Annual proportions data
    """
    print("\nCalculating annual reappointment proportions...")
    
    # Clean data
    df_clean = df.copy()
    
    # Handle missing years
    missing_years = df_clean['year'].isna().sum()
    if missing_years > 0:
        print(f"Warning: {missing_years:,} records with missing year values (excluding from analysis)")
        df_clean = df_clean[df_clean['year'].notna()]
    
    # Ensure year is integer
    df_clean['year'] = df_clean['year'].astype(int)
    
    # Handle missing reappointment flags
    missing_reappointed = df_clean['reappointed'].isna().sum()
    if missing_reappointed > 0:
        print(f"Warning: {missing_reappointed:,} records with missing reappointment flags (treating as False)")
        df_clean['reappointed'] = df_clean['reappointed'].fillna(False)
    
    print(f"Clean dataset: {len(df_clean):,} records")
    print(f"Year range: {df_clean['year'].min()}-{df_clean['year'].max()}")
    
    # Calculate proportions for each year
    annual_data = []
    
    for year in sorted(df_clean['year'].unique()):
        year_data = df_clean[df_clean['year'] == year]
        
        total_appointments = len(year_data)
        total_reappointments = year_data['reappointed'].sum()
        reappointment_proportion = total_reappointments / total_appointments if total_appointments > 0 else 0
        
        annual_data.append({
            'year': year,
            'total_appointments': total_appointments,
            'total_reappointments': total_reappointments,
            'reappointment_proportion': reappointment_proportion
        })
        
        print(f"  {year}: {total_reappointments:,}/{total_appointments:,} = {reappointment_proportion:.1%}")
    
    result_df = pd.DataFrame(annual_data)
    
    print(f"\nCalculated proportions for {len(result_df)} years")
    
    return result_df

def create_visualization(annual_df, output_dir):
    """
    Create visualization of annual reappointment proportions.
    
    Args:
        annual_df (pd.DataFrame): Annual proportions data
        output_dir (Path): Directory to save the plot
    """
    if len(annual_df) == 0:
        print("No data available for visualization")
        return
    
    print("\nCreating visualization...")
    
    # Set up the plot
    plt.figure(figsize=(12, 8))
    
    # Create the line plot
    plt.plot(annual_df['year'], annual_df['reappointment_proportion'], 
             marker='o', linewidth=2.5, markersize=8, color='#E74C3C', markerfacecolor='white', markeredgewidth=2)
    
    # Customize the plot
    plt.title('Government-wide Reappointment Proportion Trend\nNew Brunswick Government (2013-2024)', 
              fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Year', fontsize=14)
    plt.ylabel('Reappointment Proportion', fontsize=14)
    
    # Format y-axis as percentage
    plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: f'{y:.0%}'))
    
    # Set y-axis limits to show full percentage range
    plt.ylim(0, max(annual_df['reappointment_proportion'].max() * 1.1, 0.1))
    
    # Add grid for better readability
    plt.grid(True, alpha=0.3, linestyle='--')
    
    # Set x-axis to show all years
    plt.xticks(annual_df['year'], rotation=45)
    
    # Add trend line
    z = np.polyfit(annual_df['year'], annual_df['reappointment_proportion'], 1)
    p = np.poly1d(z)
    plt.plot(annual_df['year'], p(annual_df['year']), "--", alpha=0.7, color='#3498DB', linewidth=1.5, label='Trend line')
    plt.legend()
    
    # Adjust layout
    plt.tight_layout()
    
    # Save the plot
    plot_file = output_dir / "step8_annual_reappointment_proportions.png"
    plt.savefig(plot_file, dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"Visualization saved to: {plot_file}")

def print_annual_results(annual_df):
    """
    Print year-by-year proportions in a formatted table.
    
    Args:
        annual_df (pd.DataFrame): Annual proportions data
    """
    print(f"\n{'='*60}")
    print("ANNUAL GOVERNMENT-WIDE REAPPOINTMENT PROPORTIONS")
    print(f"{'='*60}")
    
    if len(annual_df) == 0:
        print("No data available")
        return
    
    print(f"{'Year':<6} {'Total Apps':<12} {'Reappoints':<12} {'Proportion':<12}")
    print("-" * 60)
    
    for _, row in annual_df.iterrows():
        proportion_pct = f"{row['reappointment_proportion']:.1%}"
        print(f"{int(row['year']):<6} {int(row['total_appointments']):<12,} {int(row['total_reappointments']):<12,} {proportion_pct:<12}")
    
    # Summary statistics
    print(f"\n{'='*60}")
    print("SUMMARY STATISTICS")
    print(f"{'='*60}")
    print(f"Years analyzed: {len(annual_df)}")
    print(f"Total appointments (all years): {annual_df['total_appointments'].sum():,}")
    print(f"Total reappointments (all years): {annual_df['total_reappointments'].sum():,}")
    print(f"Overall proportion: {annual_df['total_reappointments'].sum() / annual_df['total_appointments'].sum():.1%}")
    print(f"Average annual proportion: {annual_df['reappointment_proportion'].mean():.1%}")
    print(f"Highest proportion: {annual_df['reappointment_proportion'].max():.1%} in {int(annual_df.loc[annual_df['reappointment_proportion'].idxmax(), 'year'])}")
    print(f"Lowest proportion: {annual_df['reappointment_proportion'].min():.1%} in {int(annual_df.loc[annual_df['reappointment_proportion'].idxmin(), 'year'])}")
    
    # Trend analysis
    if len(annual_df) > 1:
        first_year_prop = annual_df.iloc[0]['reappointment_proportion']
        last_year_prop = annual_df.iloc[-1]['reappointment_proportion']
        change = last_year_prop - first_year_prop
        print(f"Change from first to last year: {change:+.1%}")

def main():
    """Main execution function."""
    try:
        print("New Brunswick Government Annual Reappointment Proportions Analysis")
        print("="*70)
        
        # Define paths
        data_dir = Path("scripts/claudesonnet4/version1/execution3/analysis_data")
        output_file = data_dir / "step8_annual_proportions.csv"
        
        # Load appointments data
        df = load_appointments_data(data_dir)
        
        # Calculate annual proportions
        annual_df = calculate_annual_proportions(df)
        
        # Print results
        print_annual_results(annual_df)
        
        # Create visualization
        create_visualization(annual_df, data_dir)
        
        # Save results
        if len(annual_df) > 0:
            annual_df.to_csv(output_file, index=False)
            print(f"\nResults saved to: {output_file}")
        else:
            print("No results to save")
        
        print("\nAnnual proportions analysis completed successfully!")
        
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()