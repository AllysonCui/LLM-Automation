#!/usr/bin/env python3
"""
New Brunswick Government Reappointment Proportion Trend Analysis
Performs comprehensive regression analysis on government-wide reappointment trends.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
from scipy import stats
from scipy.stats import linregress, normaltest, jarque_bera
import warnings

def load_annual_proportions(data_dir):
    """
    Load annual government-wide reappointment proportions.
    
    Args:
        data_dir (Path): Directory containing the data files
    
    Returns:
        pd.DataFrame: Annual proportions dataset
    """
    input_file = data_dir / "step8_annual_proportions.csv"
    
    if not input_file.exists():
        raise FileNotFoundError(f"Input file not found: {input_file}")
    
    print(f"Loading annual proportions from: {input_file}")
    df = pd.read_csv(input_file)
    
    print(f"Loaded {len(df)} years of data")
    
    # Validate required columns
    required_cols = ['year', 'reappointment_proportion']
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        raise ValueError(f"Missing required columns: {missing_cols}")
    
    return df

def prepare_regression_data(df):
    """
    Prepare data for regression analysis.
    
    Args:
        df (pd.DataFrame): Annual proportions dataset
    
    Returns:
        tuple: (x_values, y_values, valid_data_df)
    """
    print("\nPreparing data for regression analysis...")
    
    # Remove any rows with missing values
    valid_data = df[['year', 'reappointment_proportion']].dropna()
    
    if len(valid_data) < 3:
        raise ValueError(f"Insufficient data for regression analysis: only {len(valid_data)} valid observations")
    
    # Extract X (year) and Y (reappointment proportion) values
    x_values = valid_data['year'].values
    y_values = valid_data['reappointment_proportion'].values
    
    print(f"Valid observations: {len(valid_data)}")
    print(f"Year range: {x_values.min()}-{x_values.max()}")
    print(f"Proportion range: {y_values.min():.1%}-{y_values.max():.1%}")
    
    return x_values, y_values, valid_data

def perform_linear_regression(x_values, y_values):
    """
    Perform linear regression analysis.
    
    Args:
        x_values (array): Year values (X)
        y_values (array): Reappointment proportion values (Y)
    
    Returns:
        dict: Comprehensive regression results
    """
    print("\nPerforming linear regression analysis...")
    
    # Fit linear regression
    slope, intercept, r_value, p_value, std_err = linregress(x_values, y_values)
    
    # Calculate additional statistics
    n = len(x_values)
    r_squared = r_value ** 2
    
    # Calculate 95% confidence intervals for slope
    t_critical = stats.t.ppf(0.975, n - 2)  # 95% CI, df = n-2
    slope_ci_lower = slope - t_critical * std_err
    slope_ci_upper = slope + t_critical * std_err
    
    # Calculate fitted values and residuals
    fitted_values = slope * x_values + intercept
    residuals = y_values - fitted_values
    
    # Calculate Mean Squared Error and Root Mean Squared Error
    mse = np.mean(residuals ** 2)
    rmse = np.sqrt(mse)
    
    # Calculate annual change in percentage points
    annual_change_pct_points = slope * 100  # Convert to percentage points
    
    # Calculate total change over period
    total_change = slope * (x_values.max() - x_values.min())
    total_change_pct_points = total_change * 100
    
    results = {
        'slope': slope,
        'intercept': intercept,
        'r_value': r_value,
        'r_squared': r_squared,
        'p_value': p_value,
        'std_err': std_err,
        'n_observations': n,
        'slope_ci_lower': slope_ci_lower,
        'slope_ci_upper': slope_ci_upper,
        'fitted_values': fitted_values,
        'residuals': residuals,
        'mse': mse,
        'rmse': rmse,
        'annual_change_pct_points': annual_change_pct_points,
        'total_change': total_change,
        'total_change_pct_points': total_change_pct_points
    }
    
    return results

def perform_diagnostics(regression_results):
    """
    Perform regression diagnostics.
    
    Args:
        regression_results (dict): Results from linear regression
    
    Returns:
        dict: Diagnostic test results
    """
    print("\nPerforming regression diagnostics...")
    
    residuals = regression_results['residuals']
    n = regression_results['n_observations']
    
    diagnostics = {}
    
    # Durbin-Watson test for autocorrelation
    try:
        # Calculate Durbin-Watson statistic manually
        diff_residuals = np.diff(residuals)
        dw_statistic = np.sum(diff_residuals ** 2) / np.sum(residuals ** 2)
        diagnostics['durbin_watson'] = dw_statistic
    except Exception as e:
        print(f"Warning: Could not calculate Durbin-Watson statistic: {e}")
        diagnostics['durbin_watson'] = None
    
    # Test for normality of residuals
    try:
        # Jarque-Bera test
        jb_stat, jb_p_value = jarque_bera(residuals)
        diagnostics['jarque_bera_stat'] = jb_stat
        diagnostics['jarque_bera_p_value'] = jb_p_value
        
        # Shapiro-Wilk test (more appropriate for small samples)
        if n <= 50:
            sw_stat, sw_p_value = stats.shapiro(residuals)
            diagnostics['shapiro_wilk_stat'] = sw_stat
            diagnostics['shapiro_wilk_p_value'] = sw_p_value
    except Exception as e:
        print(f"Warning: Could not perform normality tests: {e}")
    
    # Outlier detection using standardized residuals
    try:
        std_residuals = residuals / np.std(residuals)
        outliers = np.abs(std_residuals) > 2.0  # 2 standard deviations
        diagnostics['outlier_count'] = np.sum(outliers)
        diagnostics['outlier_indices'] = np.where(outliers)[0]
    except Exception as e:
        print(f"Warning: Could not perform outlier detection: {e}")
    
    return diagnostics

def interpret_results(regression_results, diagnostics):
    """
    Interpret regression results and diagnostics.
    
    Args:
        regression_results (dict): Results from linear regression
        diagnostics (dict): Diagnostic test results
    
    Returns:
        dict: Interpretation and conclusions
    """
    print("\nInterpreting results...")
    
    interpretation = {}
    
    # Statistical significance
    is_significant = regression_results['p_value'] < 0.05
    interpretation['is_significant'] = is_significant
    
    # Trend direction
    slope = regression_results['slope']
    if slope > 0:
        trend_direction = "increasing"
    elif slope < 0:
        trend_direction = "decreasing"
    else:
        trend_direction = "no change"
    
    interpretation['trend_direction'] = trend_direction
    
    # Effect size assessment
    r_squared = regression_results['r_squared']
    if r_squared >= 0.7:
        effect_size = "large"
    elif r_squared >= 0.3:
        effect_size = "medium"
    elif r_squared >= 0.1:
        effect_size = "small"
    else:
        effect_size = "negligible"
    
    interpretation['effect_size'] = effect_size
    
    # Model quality assessment
    model_warnings = []
    
    if regression_results['n_observations'] < 10:
        model_warnings.append("Small sample size may affect reliability")
    
    if diagnostics.get('outlier_count', 0) > 0:
        model_warnings.append(f"{diagnostics['outlier_count']} potential outliers detected")
    
    if diagnostics.get('durbin_watson'):
        dw = diagnostics['durbin_watson']
        if dw < 1.5 or dw > 2.5:
            model_warnings.append("Potential autocorrelation in residuals")
    
    interpretation['model_warnings'] = model_warnings
    
    return interpretation

def save_results(data_dir, valid_data, regression_results, diagnostics, interpretation):
    """
    Save comprehensive results to text file.
    
    Args:
        data_dir (Path): Directory to save results
        valid_data (pd.DataFrame): Valid data used in analysis
        regression_results (dict): Regression analysis results
        diagnostics (dict): Diagnostic test results
        interpretation (dict): Interpretation and conclusions
    """
    output_file = data_dir / "step9_regression_results.txt"
    
    with open(output_file, 'w') as f:
        f.write("NEW BRUNSWICK GOVERNMENT REAPPOINTMENT PROPORTION TREND ANALYSIS\n")
        f.write("=" * 70 + "\n\n")
        
        # Data Summary
        f.write("DATA SUMMARY\n")
        f.write("-" * 20 + "\n")
        f.write(f"Number of observations: {regression_results['n_observations']}\n")
        f.write(f"Year range: {valid_data['year'].min()}-{valid_data['year'].max()}\n")
        f.write(f"Proportion range: {valid_data['reappointment_proportion'].min():.1%}-{valid_data['reappointment_proportion'].max():.1%}\n\n")
        
        # Regression Equation
        f.write("REGRESSION EQUATION\n")
        f.write("-" * 20 + "\n")
        f.write(f"Reappointment Proportion = {regression_results['intercept']:.6f} + {regression_results['slope']:.6f} × Year\n\n")
        
        # Statistical Results
        f.write("STATISTICAL RESULTS\n")
        f.write("-" * 20 + "\n")
        f.write(f"Slope (β₁): {regression_results['slope']:.6f}\n")
        f.write(f"Intercept (β₀): {regression_results['intercept']:.6f}\n")
        f.write(f"R-squared: {regression_results['r_squared']:.4f}\n")
        f.write(f"Correlation coefficient (r): {regression_results['r_value']:.4f}\n")
        f.write(f"P-value: {regression_results['p_value']:.6f}\n")
        f.write(f"Standard error of slope: {regression_results['std_err']:.6f}\n")
        f.write(f"95% CI for slope: [{regression_results['slope_ci_lower']:.6f}, {regression_results['slope_ci_upper']:.6f}]\n")
        f.write(f"Root Mean Squared Error: {regression_results['rmse']:.6f}\n\n")
        
        # Trend Analysis
        f.write("TREND ANALYSIS\n")
        f.write("-" * 20 + "\n")
        f.write(f"Annual change: {regression_results['annual_change_pct_points']:.4f} percentage points per year\n")
        f.write(f"Total change over period: {regression_results['total_change_pct_points']:.4f} percentage points\n")
        f.write(f"Trend direction: {interpretation['trend_direction']}\n")
        f.write(f"Statistical significance: {'Yes' if interpretation['is_significant'] else 'No'} (p < 0.05)\n")
        f.write(f"Effect size: {interpretation['effect_size']}\n\n")
        
        # Diagnostic Tests
        f.write("DIAGNOSTIC TESTS\n")
        f.write("-" * 20 + "\n")
        if diagnostics.get('durbin_watson'):
            f.write(f"Durbin-Watson statistic: {diagnostics['durbin_watson']:.4f}\n")
        if diagnostics.get('jarque_bera_stat'):
            f.write(f"Jarque-Bera test: statistic={diagnostics['jarque_bera_stat']:.4f}, p-value={diagnostics['jarque_bera_p_value']:.4f}\n")
        if diagnostics.get('shapiro_wilk_stat'):
            f.write(f"Shapiro-Wilk test: statistic={diagnostics['shapiro_wilk_stat']:.4f}, p-value={diagnostics['shapiro_wilk_p_value']:.4f}\n")
        f.write(f"Outliers detected: {diagnostics.get('outlier_count', 0)}\n\n")
        
        # Model Warnings
        if interpretation['model_warnings']:
            f.write("MODEL WARNINGS\n")
            f.write("-" * 20 + "\n")
            for warning in interpretation['model_warnings']:
                f.write(f"• {warning}\n")
            f.write("\n")
        
        # Conclusions
        f.write("CONCLUSIONS\n")
        f.write("-" * 20 + "\n")
        f.write(f"The government-wide reappointment proportion shows a {interpretation['trend_direction']} trend over the 12-year period.\n")
        f.write(f"This trend is {'statistically significant' if interpretation['is_significant'] else 'not statistically significant'} (p = {regression_results['p_value']:.4f}).\n")
        f.write(f"The model explains {regression_results['r_squared']:.1%} of the variance in reappointment proportions.\n")
        if interpretation['is_significant']:
            f.write(f"The annual change is {abs(regression_results['annual_change_pct_points']):.4f} percentage points per year.\n")
            f.write(f"Over the entire period, the proportion has changed by {regression_results['total_change_pct_points']:+.4f} percentage points.\n")
    
    print(f"Detailed results saved to: {output_file}")

def main():
    """Main execution function."""
    try:
        print("New Brunswick Government Reappointment Proportion Trend Analysis")
        print("=" * 70)
        
        # Define paths
        data_dir = Path("scripts/claudesonnet4/version1/execution3/analysis_data")
        
        # Load data
        df = load_annual_proportions(data_dir)
        
        # Prepare regression data
        x_values, y_values, valid_data = prepare_regression_data(df)
        
        # Perform linear regression
        regression_results = perform_linear_regression(x_values, y_values)
        
        # Perform diagnostics
        diagnostics = perform_diagnostics(regression_results)
        
        # Interpret results
        interpretation = interpret_results(regression_results, diagnostics)
        
        # Save comprehensive results
        save_results(data_dir, valid_data, regression_results, diagnostics, interpretation)
        
        # Print final answer
        print(f"\n{'='*70}")
        print("FINAL ANSWER")
        print(f"{'='*70}")
        
        trend_word = interpretation['trend_direction'].upper()
        significance = "STATISTICALLY SIGNIFICANT" if interpretation['is_significant'] else "NOT STATISTICALLY SIGNIFICANT"
        
        print(f"The government-wide reappointment proportion trend is {trend_word} over the 12-year period.")
        print(f"This trend is {significance} (p = {regression_results['p_value']:.4f}).")
        
        if interpretation['is_significant']:
            print(f"Annual change: {regression_results['annual_change_pct_points']:+.4f} percentage points per year")
            print(f"Total change: {regression_results['total_change_pct_points']:+.4f} percentage points over the period")
        
        print(f"Model fit: R² = {regression_results['r_squared']:.4f} ({interpretation['effect_size']} effect size)")
        
        print("\nTrend analysis completed successfully!")
        
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()