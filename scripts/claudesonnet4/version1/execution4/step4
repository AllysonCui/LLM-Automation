#!/usr/bin/env python3
"""
Script to create appointment counts by organization and year from New Brunswick government data.
Creates a pivot table with organizations as rows and years as columns.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_step3_data(input_file):
    """
    Load the dataset from step 3.
    
    Args:
        input_file (str): Path to the input CSV file
    
    Returns:
        pd.DataFrame: Loaded dataset
    """
    print(f"Loading data from: {input_file}")
    
    try:
        df = pd.read_csv(input_file)
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
        return df
        
    except FileNotFoundError:
        raise FileNotFoundError(f"Input file not found: {input_file}")
    except Exception as e:
        raise Exception(f"Error loading data: {str(e)}")

def validate_data_quality(df):
    """
    Validate data quality and report issues.
    
    Args:
        df (pd.DataFrame): Input dataset
    
    Returns:
        pd.DataFrame: Cleaned dataset
    """
    print("\nValidating data quality...")
    
    # Check for required columns
    required_cols = ['org', 'year']
    missing_cols = [col for col in required_cols if col not in df.columns]
    
    if missing_cols:
        raise ValueError(f"Missing required columns: {missing_cols}")
    
    original_count = len(df)
    
    # Report on missing values
    org_missing = df['org'].isna().sum()
    year_missing = df['year'].isna().sum()
    
    print(f"Data quality check:")
    print(f"  Organization missing: {org_missing:,} ({org_missing/original_count*100:.1f}%)")
    print(f"  Year missing:         {year_missing:,} ({year_missing/original_count*100:.1f}%)")
    
    # Clean data for analysis
    df_clean = df.copy()
    
    # Handle missing organizations
    if org_missing > 0:
        print(f"  → Filling missing organizations with 'Unknown Organization'")
        df_clean['org'] = df_clean['org'].fillna('Unknown Organization')
    
    # Handle missing years
    if year_missing > 0:
        print(f"  → Excluding records with missing years from counts")
        df_clean = df_clean.dropna(subset=['year'])
    
    # Validate year values
    valid_years = df_clean['year'].apply(lambda x: isinstance(x, (int, float)) and 2000 <= x <= 2030)
    invalid_years = (~valid_years).sum()
    
    if invalid_years > 0:
        print(f"  → Found {invalid_years} records with invalid years (outside 2000-2030)")
        df_clean = df_clean[valid_years]
    
    # Convert year to integer
    df_clean['year'] = df_clean['year'].astype(int)
    
    final_count = len(df_clean)
    excluded_count = original_count - final_count
    
    if excluded_count > 0:
        print(f"  → Excluded {excluded_count:,} records from analysis")
    
    print(f"  → Clean dataset: {final_count:,} records")
    
    return df_clean

def create_appointment_counts(df):
    """
    Create appointment counts by organization and year.
    
    Args:
        df (pd.DataFrame): Clean dataset
    
    Returns:
        pd.DataFrame: Pivot table with counts
    """
    print("\nCreating appointment counts by organization and year...")
    
    # Group by organization and year, count appointments
    counts = df.groupby(['org', 'year']).size().reset_index(name='appointments')
    
    print(f"Generated counts for {len(counts)} organization-year combinations")
    
    # Create pivot table
    pivot_table = counts.pivot(index='org', columns='year', values='appointments')
    
    # Fill missing values with 0 (no appointments in that year)
    pivot_table = pivot_table.fillna(0).astype(int)
    
    # Sort by total appointments (descending)
    pivot_table['Total'] = pivot_table.sum(axis=1)
    pivot_table = pivot_table.sort_values('Total', ascending=False)
    
    print(f"Created pivot table: {pivot_table.shape[0]} organizations × {pivot_table.shape[1]-1} years")
    
    return pivot_table

def analyze_appointment_patterns(pivot_table):
    """
    Analyze appointment patterns and identify key insights.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with appointment counts
    """
    print("\n" + "="*60)
    print("APPOINTMENT COUNTS ANALYSIS")
    print("="*60)
    
    # Basic statistics
    total_appointments = pivot_table['Total'].sum()
    num_organizations = len(pivot_table)
    year_columns = [col for col in pivot_table.columns if col != 'Total']
    year_range = f"{min(year_columns)}-{max(year_columns)}"
    
    print(f"Summary statistics:")
    print(f"  Total appointments:     {total_appointments:,}")
    print(f"  Organizations:          {num_organizations:,}")
    print(f"  Year range:             {year_range}")
    print(f"  Average per org:        {total_appointments/num_organizations:.1f}")
    
    # Top organizations by total appointments
    print(f"\nTop 10 organizations by total appointments:")
    top_orgs = pivot_table.head(10)
    for i, (org, row) in enumerate(top_orgs.iterrows(), 1):
        total = row['Total']
        years_active = (row[year_columns] > 0).sum()
        print(f"  {i:2d}. {org:<50} {total:4d} appointments ({years_active} years)")
    
    # Yearly totals
    print(f"\nAppointments by year:")
    yearly_totals = pivot_table[year_columns].sum().sort_index()
    for year, total in yearly_totals.items():
        print(f"  {year}: {total:,} appointments")
    
    # Organizations with highest single-year counts
    print(f"\nHighest single-year appointment counts:")
    max_values = []
    for _, row in pivot_table.iterrows():
        org = row.name
        year_data = row[year_columns]
        max_year = year_data.idxmax()
        max_count = year_data.max()
        max_values.append((org, max_year, max_count))
    
    max_values.sort(key=lambda x: x[2], reverse=True)
    for i, (org, year, count) in enumerate(max_values[:5], 1):
        print(f"  {i}. {org} in {year}: {count} appointments")
    
    # Data quality insights
    print(f"\nData quality insights:")
    zero_orgs = (pivot_table['Total'] == 0).sum()
    single_appointment_orgs = (pivot_table['Total'] == 1).sum()
    
    print(f"  Organizations with 0 appointments: {zero_orgs}")
    print(f"  Organizations with 1 appointment:  {single_appointment_orgs}")
    
    # Year coverage
    years_with_data = (pivot_table[year_columns].sum() > 0).sum()
    print(f"  Years with appointment data:       {years_with_data}/{len(year_columns)}")

def save_counts_table(pivot_table, output_dir="scripts/claudesonnet4/version1/execution4/analysis_data"):
    """
    Save appointment counts table to CSV file.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with counts
        output_dir (str): Output directory path
    
    Returns:
        str: Path to saved file
    """
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # Define output file path
    output_file = os.path.join(output_dir, "step4_employee_counts.csv")
    
    # Save to CSV with organization names as index
    pivot_table.to_csv(output_file, index=True)
    print(f"\n✓ Appointment counts table saved to: {output_file}")
    
    return output_file

def display_summary_table(pivot_table, max_rows=20):
    """
    Display a formatted summary of the pivot table.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with counts
        max_rows (int): Maximum number of rows to display
    """
    print(f"\nSummary table (showing top {max_rows} organizations):")
    print("-" * 80)
    
    # Select columns to display (limit if too many years)
    year_columns = [col for col in pivot_table.columns if col != 'Total']
    if len(year_columns) > 10:
        # Show first 5, last 5, and total
        display_cols = year_columns[:5] + year_columns[-5:] + ['Total']
        print("Note: Showing first 5 and last 5 years due to space constraints")
    else:
        display_cols = year_columns + ['Total']
    
    # Display table
    display_table = pivot_table[display_cols].head(max_rows)
    
    # Format for better readability
    pd.set_option('display.max_columns', None)
    pd.set_option('display.width', None)
    pd.set_option('display.max_colwidth', 50)
    
    print(display_table.to_string())
    
    if len(pivot_table) > max_rows:
        print(f"\n... and {len(pivot_table) - max_rows} more organizations")

def main():
    """Main execution function."""
    try:
        print("New Brunswick Appointments Data - Employee Counts by Organization")
        print("="*70)
        
        # Define input file path
        input_file = "scripts/claudesonnet4/version1/execution4/analysis_data/step3_repeats_marked.csv"
        
        # Load data from step 3
        df = load_step3_data(input_file)
        
        # Validate data quality
        df_clean = validate_data_quality(df)
        
        # Create appointment counts
        pivot_table = create_appointment_counts(df_clean)
        
        # Analyze patterns
        analyze_appointment_patterns(pivot_table)
        
        # Display summary table
        display_summary_table(pivot_table)
        
        # Save counts table
        output_file = save_counts_table(pivot_table)
        
        print(f"\n✓ Process completed successfully!")
        print(f"Employee counts table available at: {output_file}")
        
    except Exception as e:
        print(f"\n✗ Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()