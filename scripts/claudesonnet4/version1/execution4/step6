#!/usr/bin/env python3
"""
Script to calculate reappointment rates by merging employee counts and reappointment counts.
Creates comprehensive table with reappointment rates for each organization-year combination.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_count_data(employee_file, reappointment_file):
    """
    Load both employee counts and reappointment counts datasets.
    
    Args:
        employee_file (str): Path to employee counts CSV
        reappointment_file (str): Path to reappointment counts CSV
    
    Returns:
        tuple: (employee_counts_df, reappointment_counts_df)
    """
    print("Loading count datasets...")
    
    try:
        # Load employee counts
        print(f"Loading employee counts from: {employee_file}")
        employee_df = pd.read_csv(employee_file, index_col=0)
        print(f"✓ Employee counts: {employee_df.shape[0]} organizations × {employee_df.shape[1]} columns")
        
        # Load reappointment counts
        print(f"Loading reappointment counts from: {reappointment_file}")
        reappointment_df = pd.read_csv(reappointment_file, index_col=0)
        
        if len(reappointment_df) == 0:
            print("! Reappointment counts file is empty - creating empty DataFrame")
            reappointment_df = pd.DataFrame()
        else:
            print(f"✓ Reappointment counts: {reappointment_df.shape[0]} organizations × {reappointment_df.shape[1]} columns")
        
        return employee_df, reappointment_df
        
    except FileNotFoundError as e:
        raise FileNotFoundError(f"Count file not found: {e}")
    except Exception as e:
        raise Exception(f"Error loading count data: {str(e)}")

def validate_and_prepare_data(employee_df, reappointment_df):
    """
    Validate and prepare the count datasets for merging.
    
    Args:
        employee_df (pd.DataFrame): Employee counts pivot table
        reappointment_df (pd.DataFrame): Reappointment counts pivot table
    
    Returns:
        tuple: (prepared_employee_df, prepared_reappointment_df, year_columns)
    """
    print("\nValidating and preparing data for merging...")
    
    # Handle empty reappointment data
    if len(reappointment_df) == 0:
        print("! No reappointment data available - all reappointment rates will be 0")
        # Create empty reappointment DataFrame with same structure as employee data
        if len(employee_df) > 0:
            reappointment_df = pd.DataFrame(0, 
                                          index=employee_df.index, 
                                          columns=employee_df.columns)
        else:
            print("! No employee data available either")
            return pd.DataFrame(), pd.DataFrame(), []
    
    # Get year columns (exclude 'Total' column if present)
    employee_years = [col for col in employee_df.columns if col != 'Total' and isinstance(col, (int, float))]
    reappointment_years = [col for col in reappointment_df.columns if col != 'Total' and isinstance(col, (int, float))]
    
    # Convert column names to integers if they aren't already
    employee_df.columns = [int(col) if col != 'Total' else col for col in employee_df.columns]
    reappointment_df.columns = [int(col) if col != 'Total' else col for col in reappointment_df.columns]
    
    # Get updated year columns
    employee_years = [col for col in employee_df.columns if col != 'Total']
    reappointment_years = [col for col in reappointment_df.columns if col != 'Total']
    
    # Find common years
    common_years = sorted(set(employee_years) & set(reappointment_years))
    all_years = sorted(set(employee_years) | set(reappointment_years))
    
    print(f"Year analysis:")
    print(f"  Employee data years: {len(employee_years)} years ({min(employee_years) if employee_years else 'N/A'}-{max(employee_years) if employee_years else 'N/A'})")
    print(f"  Reappointment data years: {len(reappointment_years)} years ({min(reappointment_years) if reappointment_years else 'N/A'}-{max(reappointment_years) if reappointment_years else 'N/A'})")
    print(f"  Common years: {len(common_years)} years")
    print(f"  Using all available years: {all_years}")
    
    # Ensure both DataFrames have the same year columns
    for year in all_years:
        if year not in employee_df.columns:
            employee_df[year] = 0
            print(f"  Added missing year {year} to employee data (filled with 0)")
        if year not in reappointment_df.columns:
            reappointment_df[year] = 0
            print(f"  Added missing year {year} to reappointment data (filled with 0)")
    
    # Sort columns
    year_cols_sorted = sorted([col for col in employee_df.columns if col != 'Total'])
    other_cols = [col for col in employee_df.columns if col == 'Total']
    employee_df = employee_df[year_cols_sorted + other_cols]
    reappointment_df = reappointment_df[year_cols_sorted + other_cols]
    
    return employee_df, reappointment_df, year_cols_sorted

def merge_and_calculate_rates(employee_df, reappointment_df, year_columns):
    """
    Merge the datasets and calculate reappointment rates.
    
    Args:
        employee_df (pd.DataFrame): Employee counts pivot table
        reappointment_df (pd.DataFrame): Reappointment counts pivot table
        year_columns (list): List of year columns to process
    
    Returns:
        pd.DataFrame: Comprehensive table with reappointment rates
    """
    print("\nMerging datasets and calculating reappointment rates...")
    
    if len(year_columns) == 0:
        print("! No year columns to process")
        return pd.DataFrame()
    
    # Create list to store results
    results = []
    
    # Get all organizations from both datasets
    all_orgs = set(employee_df.index) | set(reappointment_df.index)
    print(f"Processing {len(all_orgs)} organizations across {len(year_columns)} years...")
    
    # Process each organization-year combination
    for org in all_orgs:
        for year in year_columns:
            # Get employee count (default to 0 if missing)
            if org in employee_df.index and year in employee_df.columns:
                total_employees = employee_df.loc[org, year]
            else:
                total_employees = 0
            
            # Get reappointment count (default to 0 if missing)
            if org in reappointment_df.index and year in reappointment_df.columns:
                reappointments = reappointment_df.loc[org, year]
            else:
                reappointments = 0
            
            # Calculate reappointment rate with division by zero handling
            if total_employees > 0:
                reappointment_rate = reappointments / total_employees
            else:
                # Handle division by zero
                if reappointments > 0:
                    # This shouldn't happen logically, but handle it
                    reappointment_rate = np.nan
                    print(f"  Warning: {org} in {year} has {reappointments} reappointments but 0 total employees")
                else:
                    reappointment_rate = 0.0
            
            # Add to results
            results.append({
                'org': org,
                'year': year,
                'total_employees': int(total_employees),
                'reappointments': int(reappointments),
                'reappointment_rate': reappointment_rate
            })
    
    # Create DataFrame from results
    results_df = pd.DataFrame(results)
    
    # Sort by organization and year
    results_df = results_df.sort_values(['org', 'year'])
    
    print(f"✓ Created comprehensive table: {len(results_df)} organization-year combinations")
    
    return results_df

def validate_calculated_rates(df):
    """
    Validate the calculated reappointment rates.
    
    Args:
        df (pd.DataFrame): Results DataFrame with calculated rates
    """
    if len(df) == 0:
        print("! No data to validate")
        return
    
    print("\nValidating calculated reappointment rates...")
    
    # Basic validation statistics
    total_records = len(df)
    records_with_employees = (df['total_employees'] > 0).sum()
    records_with_reappointments = (df['reappointments'] > 0).sum()
    records_with_rates = df['reappointment_rate'].notna().sum()
    
    print(f"Validation statistics:")
    print(f"  Total records: {total_records:,}")
    print(f"  Records with employees: {records_with_employees:,} ({records_with_employees/total_records*100:.1f}%)")
    print(f"  Records with reappointments: {records_with_reappointments:,} ({records_with_reappointments/total_records*100:.1f}%)")
    print(f"  Records with valid rates: {records_with_rates:,} ({records_with_rates/total_records*100:.1f}%)")
    
    # Check for data quality issues
    invalid_rates = (df['reappointment_rate'] > 1.0).sum()
    if invalid_rates > 0:
        print(f"  WARNING: {invalid_rates} records have reappointment rate > 100%")
        problematic = df[df['reappointment_rate'] > 1.0][['org', 'year', 'total_employees', 'reappointments', 'reappointment_rate']]
        print("  Problematic records:")
        print(problematic.to_string(index=False))
    
    # Rate distribution
    valid_rates = df[df['reappointment_rate'].notna() & (df['reappointment_rate'] > 0)]
    if len(valid_rates) > 0:
        print(f"\nReappointment rate distribution (non-zero rates only):")
        print(f"  Count: {len(valid_rates):,}")
        print(f"  Mean: {valid_rates['reappointment_rate'].mean():.3f}")
        print(f"  Median: {valid_rates['reappointment_rate'].median():.3f}")
        print(f"  Min: {valid_rates['reappointment_rate'].min():.3f}")
        print(f"  Max: {valid_rates['reappointment_rate'].max():.3f}")
    else:
        print(f"\nNo valid non-zero reappointment rates found")

def analyze_top_organizations(df):
    """
    Analyze organizations with the highest average reappointment rates.
    
    Args:
        df (pd.DataFrame): Results DataFrame with calculated rates
    """
    if len(df) == 0:
        print("! No data available for organization analysis")
        return
    
    print("\n" + "="*70)
    print("ORGANIZATIONS WITH HIGHEST AVERAGE REAPPOINTMENT RATES")
    print("="*70)
    
    # Calculate average reappointment rates by organization
    # Only include records where we have employees (to avoid division by zero cases)
    valid_data = df[(df['total_employees'] > 0) & (df['reappointment_rate'].notna())].copy()
    
    if len(valid_data) == 0:
        print("No valid data for calculating average rates")
        return
    
    org_stats = valid_data.groupby('org').agg({
        'reappointment_rate': ['mean', 'count'],
        'total_employees': 'sum',
        'reappointments': 'sum'
    }).round(4)
    
    # Flatten column names
    org_stats.columns = ['avg_reappointment_rate', 'years_with_data', 'total_employees', 'total_reappointments']
    
    # Calculate overall rate as well
    org_stats['overall_rate'] = org_stats['total_reappointments'] / org_stats['total_employees']
    
    # Filter organizations with at least 2 years of data and some employees
    org_filtered = org_stats[
        (org_stats['years_with_data'] >= 2) & 
        (org_stats['total_employees'] >= 5)
    ].copy()
    
    if len(org_filtered) == 0:
        print("No organizations meet the criteria (≥2 years of data, ≥5 total employees)")
        return
    
    # Sort by average reappointment rate
    org_filtered = org_filtered.sort_values('avg_reappointment_rate', ascending=False)
    
    print(f"Top organizations by average reappointment rate:")
    print(f"(Minimum criteria: ≥2 years of data, ≥5 total employees)\n")
    
    # Display top 15 organizations
    top_orgs = org_filtered.head(15)
    
    print(f"{'Rank':<4} {'Organization':<45} {'Avg Rate':<8} {'Years':<5} {'Total Emp':<9} {'Total Reapp':<10} {'Overall Rate':<12}")
    print("-" * 100)
    
    for i, (org, row) in enumerate(top_orgs.iterrows(), 1):
        avg_rate = f"{row['avg_reappointment_rate']:.3f}"
        years = f"{row['years_with_data']:.0f}"
        total_emp = f"{row['total_employees']:.0f}"
        total_reapp = f"{row['total_reappointments']:.0f}"
        overall_rate = f"{row['overall_rate']:.3f}"
        
        print(f"{i:<4} {org:<45} {avg_rate:<8} {years:<5} {total_emp:<9} {total_reapp:<10} {overall_rate:<12}")
    
    # Summary statistics
    print(f"\nSummary statistics for qualifying organizations ({len(org_filtered)}):")
    print(f"  Average reappointment rate: {org_filtered['avg_reappointment_rate'].mean():.3f}")
    print(f"  Median reappointment rate: {org_filtered['avg_reappointment_rate'].median():.3f}")
    print(f"  Highest rate: {org_filtered['avg_reappointment_rate'].max():.3f}")
    print(f"  Organizations with >50% avg rate: {(org_filtered['avg_reappointment_rate'] > 0.5).sum()}")

def save_reappointment_rates(df, output_dir="scripts/claudesonnet4/version1/execution4/analysis_data"):
    """
    Save reappointment rates table to CSV file.
    
    Args:
        df (pd.DataFrame): Results DataFrame with reappointment rates
        output_dir (str): Output directory path
    
    Returns:
        str: Path to saved file
    """
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # Define output file path
    output_file = os.path.join(output_dir, "step6_reappointment_rates.csv")
    
    # Save to CSV
    df.to_csv(output_file, index=False)
    print(f"\n✓ Reappointment rates table saved to: {output_file}")
    
    return output_file

def main():
    """Main execution function."""
    try:
        print("New Brunswick Appointments Data - Reappointment Rate Calculator")
        print("="*68)
        
        # Define input file paths
        data_dir = "scripts/claudesonnet4/version1/execution4/analysis_data"
        employee_file = os.path.join(data_dir, "step4_employee_counts.csv")
        reappointment_file = os.path.join(data_dir, "step5_reappointment_counts.csv")
        
        # Load count datasets
        employee_df, reappointment_df = load_count_data(employee_file, reappointment_file)
        
        # Validate and prepare data
        employee_df, reappointment_df, year_columns = validate_and_prepare_data(employee_df, reappointment_df)
        
        # Merge and calculate rates
        results_df = merge_and_calculate_rates(employee_df, reappointment_df, year_columns)
        
        # Validate calculated rates
        validate_calculated_rates(results_df)
        
        # Analyze top organizations
        analyze_top_organizations(results_df)
        
        # Save results
        output_file = save_reappointment_rates(results_df)
        
        print(f"\n✓ Process completed successfully!")
        print(f"Reappointment rates table available at: {output_file}")
        
    except Exception as e:
        print(f"\n✗ Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()