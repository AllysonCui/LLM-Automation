#!/usr/bin/env python3
"""
Reappointment Marker for New Brunswick Government Appointments Data

This script identifies reappointments by analyzing unique combinations of name, 
position, and organization, then marks subsequent occurrences as reappointments
based on chronological order.

Author: Claude Sonnet 4
Version: 1.0
Execution: 5
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import re
from datetime import datetime

def normalize_name(name):
    """
    Normalize name for better matching by removing extra spaces, 
    standardizing case, and handling common variations.
    
    Args:
        name: Raw name string
    
    Returns:
        Normalized name string
    """
    if pd.isna(name):
        return name
    
    # Convert to string and strip whitespace
    name = str(name).strip()
    
    # Remove extra spaces between words
    name = re.sub(r'\s+', ' ', name)
    
    # Standardize case (title case)
    name = name.title()
    
    # Handle common abbreviations and variations
    name = re.sub(r'\bDr\.?\b', 'Dr.', name)
    name = re.sub(r'\bMr\.?\b', 'Mr.', name)
    name = re.sub(r'\bMs\.?\b', 'Ms.', name)
    name = re.sub(r'\bMrs\.?\b', 'Mrs.', name)
    
    return name

def normalize_position(position):
    """
    Normalize position titles for better matching.
    
    Args:
        position: Raw position string
    
    Returns:
        Normalized position string
    """
    if pd.isna(position):
        return position
    
    # Convert to string and strip whitespace
    position = str(position).strip()
    
    # Remove extra spaces
    position = re.sub(r'\s+', ' ', position)
    
    # Standardize case
    position = position.title()
    
    return position

def normalize_org(org):
    """
    Normalize organization names for better matching.
    
    Args:
        org: Raw organization string
    
    Returns:
        Normalized organization string
    """
    if pd.isna(org):
        return org
    
    # Convert to string and strip whitespace
    org = str(org).strip()
    
    # Remove extra spaces
    org = re.sub(r'\s+', ' ', org)
    
    # Standardize case
    org = org.title()
    
    return org

def main():
    """Main function to identify and mark reappointments."""
    
    # Define paths
    script_dir = Path(__file__).parent
    analysis_data_dir = script_dir / "analysis_data"
    input_file = analysis_data_dir / "step2_key_columns_data.csv"
    output_file = analysis_data_dir / "step3_repeats_marked.csv"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"ERROR: Input file not found: {input_file}")
        print("Please run the key columns extraction script first.")
        sys.exit(1)
    
    try:
        # Load the filtered dataset
        print("Loading filtered appointments dataset...")
        df = pd.read_csv(input_file)
        print(f"✓ Loaded dataset: {df.shape[0]} rows, {df.shape[1]} columns")
        
        # Validate required columns
        required_cols = ['name', 'position', 'org', 'reappointed', 'year']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            print(f"ERROR: Missing required columns: {missing_cols}")
            sys.exit(1)
        
        # Create a copy for processing
        df_processed = df.copy()
        
        # Normalize key columns for better matching
        print("Normalizing names, positions, and organizations...")
        df_processed.loc[:, 'name_normalized'] = df_processed['name'].apply(normalize_name)
        df_processed.loc[:, 'position_normalized'] = df_processed['position'].apply(normalize_position)
        df_processed.loc[:, 'org_normalized'] = df_processed['org'].apply(normalize_org)
        
        # Convert year to numeric for proper sorting
        df_processed.loc[:, 'year'] = pd.to_numeric(df_processed['year'], errors='coerce')
        
        # Sort by normalized fields and year for consistent processing
        df_processed = df_processed.sort_values(
            ['name_normalized', 'position_normalized', 'org_normalized', 'year'],
            kind='stable',
            na_position='last'
        ).reset_index(drop=True)
        
        # Track statistics
        original_reappointed_count = df_processed['reappointed'].sum() if df_processed['reappointed'].dtype == 'bool' else 0
        if df_processed['reappointed'].dtype == 'object':
            original_reappointed_count = (df_processed['reappointed'] == True).sum()
        
        print(f"Original reappointments marked: {original_reappointed_count}")
        
        # Group by normalized name, position, and organization
        print("Identifying reappointments...")
        
        # Create grouping key
        df_processed.loc[:, 'group_key'] = (
            df_processed['name_normalized'].astype(str) + '|' +
            df_processed['position_normalized'].astype(str) + '|' +
            df_processed['org_normalized'].astype(str)
        )
        
        # Process each group
        reappointments_marked = 0
        groups_processed = 0
        
        for group_key, group_df in df_processed.groupby('group_key'):
            groups_processed += 1
            
            # Skip if group has only one appointment
            if len(group_df) <= 1:
                continue
            
            # Skip if any key fields are missing
            if ('nan' in group_key.lower() or 
                'none' in group_key.lower() or 
                group_key.count('|') != 2):
                continue
            
            # Get indices for this group
            group_indices = group_df.index.tolist()
            
            # Mark all except the first (chronologically) as reappointments
            if len(group_indices) > 1:
                # First appointment stays as-is, rest are marked as reappointments
                for idx in group_indices[1:]:
                    df_processed.loc[idx, 'reappointed'] = True
                    reappointments_marked += 1
        
        print(f"✓ Processed {groups_processed} unique person-position-org combinations")
        print(f"✓ Marked {reappointments_marked} additional reappointments")
        
        # Remove temporary columns
        df_final = df_processed.drop(columns=[
            'name_normalized', 'position_normalized', 'org_normalized', 'group_key'
        ])
        
        # Sort back to original order (by year and name)
        df_final = df_final.sort_values(['year', 'name'], kind='stable', na_position='last')
        df_final = df_final.reset_index(drop=True)
        
        # Save updated dataset
        df_final.to_csv(output_file, index=False)
        print(f"✓ Updated dataset saved to: {output_file}")
        
        # Calculate final statistics
        final_reappointed_count = df_final['reappointed'].sum() if df_final['reappointed'].dtype == 'bool' else 0
        if df_final['reappointed'].dtype == 'object':
            final_reappointed_count = (df_final['reappointed'] == True).sum()
        
        print("-" * 50)
        print("REAPPOINTMENT IDENTIFICATION SUMMARY:")
        print(f"Total appointments: {len(df_final):,}")
        print(f"Original reappointments: {original_reappointed_count:,}")
        print(f"Additional reappointments identified: {reappointments_marked:,}")
        print(f"Final reappointments: {final_reappointed_count:,}")
        print(f"Improvement: +{reappointments_marked} ({(reappointments_marked/len(df_final)*100):.1f}% of total)")
        
        # Show reappointment status breakdown
        print("\nReappointment Status Breakdown:")
        print("-" * 32)
        reappoint_counts = df_final['reappointed'].value_counts(dropna=False)
        for status, count in reappoint_counts.items():
            pct = (count / len(df_final)) * 100
            print(f"{str(status):8}: {count:5,} ({pct:5.1f}%)")
        
        # Show top repeat appointees
        print("\nTop 10 People with Most Reappointments:")
        print("-" * 38)
        
        # Count reappointments by person
        reappointed_df = df_final[df_final['reappointed'] == True]
        if not reappointed_df.empty:
            top_reappointed = reappointed_df['name'].value_counts().head(10)
            for name, count in top_reappointed.items():
                name_display = str(name)[:30] + "..." if len(str(name)) > 30 else str(name)
                print(f"{name_display:33}: {count:2} reappointments")
        else:
            print("No reappointments found")
        
        print("\nReappointment marking completed successfully!")
        
    except Exception as e:
        print(f"ERROR during reappointment identification: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()