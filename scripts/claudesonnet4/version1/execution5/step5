#!/usr/bin/env python3
"""
Reappointment Counts Creator for New Brunswick Government Appointments Data

This script creates a summary table showing reappointment counts by organization 
and year, focusing specifically on appointments marked as reappointments.

Author: Claude Sonnet 4
Version: 1.0
Execution: 5
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def main():
    """Main function to create reappointment counts summary."""
    
    # Define paths
    script_dir = Path(__file__).parent
    analysis_data_dir = script_dir / "analysis_data"
    input_file = analysis_data_dir / "step3_repeats_marked.csv"
    output_file = analysis_data_dir / "step5_reappointment_counts.csv"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"ERROR: Input file not found: {input_file}")
        print("Please run the reappointment marking script first.")
        sys.exit(1)
    
    try:
        # Load the processed dataset
        print("Loading processed appointments dataset...")
        df = pd.read_csv(input_file)
        print(f"✓ Loaded dataset: {df.shape[0]} rows, {df.shape[1]} columns")
        
        # Validate required columns
        required_cols = ['org', 'year', 'reappointed']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            print(f"ERROR: Missing required columns: {missing_cols}")
            sys.exit(1)
        
        # Data quality checks
        print("\nPerforming data quality checks...")
        
        # Convert year to integer
        df.loc[:, 'year'] = pd.to_numeric(df['year'], errors='coerce').astype('Int64')
        
        # Check reappointed column data types and values
        print(f"Reappointed column dtype: {df['reappointed'].dtype}")
        print(f"Reappointed unique values: {df['reappointed'].unique()}")
        
        # Handle different possible formats for reappointed column
        if df['reappointed'].dtype == 'object':
            # Convert string representations to boolean
            df.loc[:, 'reappointed'] = df['reappointed'].map({
                'True': True, 'true': True, True: True,
                'False': False, 'false': False, False: False,
                1: True, 0: False, '1': True, '0': False
            })
        
        # Convert to boolean, handling NaN as False
        df.loc[:, 'reappointed'] = df['reappointed'].fillna(False).astype(bool)
        
        # Remove rows with missing org or year
        df_clean = df.dropna(subset=['org', 'year']).copy()
        excluded_count = len(df) - len(df_clean)
        
        if excluded_count > 0:
            print(f"✓ Excluded {excluded_count} appointments with missing org/year data")
        
        print(f"✓ Processing {len(df_clean)} valid appointments")
        
        # Show overall reappointment statistics
        total_reappointed = df_clean['reappointed'].sum()
        total_appointments = len(df_clean)
        reappointment_rate = (total_reappointed / total_appointments) * 100
        
        print(f"\nOverall Reappointment Statistics:")
        print(f"Total appointments: {total_appointments:,}")
        print(f"Total reappointments: {total_reappointed:,}")
        print(f"Reappointment rate: {reappointment_rate:.1f}%")
        
        # Filter for reappointments only
        print("\nFiltering for reappointments...")
        reappointed_df = df_clean[df_clean['reappointed'] == True].copy()
        print(f"✓ Found {len(reappointed_df)} reappointments to analyze")
        
        if reappointed_df.empty:
            print("WARNING: No reappointments found in the dataset!")
            # Create empty pivot table with proper structure
            all_years = list(range(2013, 2025))
            all_orgs = df_clean['org'].unique()
            pivot_table = pd.DataFrame(0, index=all_orgs, columns=all_years)
            pivot_table.loc[:, 'Total'] = 0
        else:
            # Debug: Show sample of reappointment data before grouping
            print("\nDEBUG: Sample reappointment records:")
            print("-" * 40)
            sample_data = reappointed_df[['org', 'year', 'name', 'position']].head(10)
            print(sample_data.to_string(index=False))
            
            # Group by organization and year, count reappointments
            print("\nCreating reappointment counts by organization and year...")
            
            # Create counts table
            reappoint_counts = reappointed_df.groupby(['org', 'year']).size().reset_index(name='reappointment_count')
            
            print(f"\nDEBUG: Sample grouped data:")
            print("-" * 30)
            print(reappoint_counts.head(10).to_string(index=False))
            print(f"Total org-year combinations with reappointments: {len(reappoint_counts)}")
            
            # Create pivot table with organizations as rows, years as columns
            pivot_table = reappoint_counts.pivot(index='org', columns='year', values='reappointment_count')
            
            # Fill missing values with 0
            pivot_table = pivot_table.fillna(0)
            
            # Ensure all years from 2013-2024 are present as columns
            all_years = list(range(2013, 2025))
            for year in all_years:
                if year not in pivot_table.columns:
                    pivot_table.loc[:, year] = 0
            
            # Convert to integers
            pivot_table = pivot_table.astype(int)
            
            # Sort columns (years) in chronological order
            pivot_table = pivot_table.reindex(sorted(pivot_table.columns), axis=1)
            
            # Add organizations that had appointments but no reappointments
            all_orgs = df_clean['org'].unique()
            missing_orgs = set(all_orgs) - set(pivot_table.index)
            
            if missing_orgs:
                print(f"✓ Adding {len(missing_orgs)} organizations with zero reappointments")
                for org in missing_orgs:
                    pivot_table.loc[org] = 0
            
            # Add total column
            pivot_table.loc[:, 'Total'] = pivot_table.sum(axis=1)
        
        # Sort by total reappointments (descending)
        pivot_table = pivot_table.sort_values('Total', ascending=False)
        
        # Validation: Check that pivot table contains actual counts
        print(f"\nValidation checks:")
        print("-" * 18)
        total_in_pivot = pivot_table['Total'].sum()
        print(f"✓ Total reappointments in pivot table: {total_in_pivot}")
        print(f"✓ Original reappointment count: {total_reappointed}")
        
        if total_in_pivot == total_reappointed:
            print("✓ Pivot table validation passed - counts match")
        else:
            print(f"WARNING: Pivot table total ({total_in_pivot}) doesn't match original count ({total_reappointed})")
        
        # Check for non-zero values
        non_zero_entries = (pivot_table.drop('Total', axis=1) > 0).sum().sum()
        print(f"✓ Non-zero entries in pivot table: {non_zero_entries}")
        
        # Save the reappointment counts table
        pivot_table.to_csv(output_file)
        print(f"✓ Reappointment counts saved to: {output_file}")
        
        print("-" * 60)
        print("REAPPOINTMENT COUNTS SUMMARY:")
        print(f"Organizations with reappointments: {(pivot_table['Total'] > 0).sum():,}")
        print(f"Organizations with zero reappointments: {(pivot_table['Total'] == 0).sum():,}")
        print(f"Total organizations: {len(pivot_table):,}")
        print(f"Years covered: {min(all_years)} - {max(all_years)}")
        print(f"Total reappointments: {pivot_table['Total'].sum():,}")
        
        # Summary statistics for organizations with reappointments
        orgs_with_reappoints = pivot_table[pivot_table['Total'] > 0]
        if not orgs_with_reappoints.empty:
            print(f"\nReappointments per organization (organizations with >0):")
            print(f"  Mean: {orgs_with_reappoints['Total'].mean():.1f}")
            print(f"  Median: {orgs_with_reappoints['Total'].median():.1f}")
            print(f"  Min: {orgs_with_reappoints['Total'].min()}")
            print(f"  Max: {orgs_with_reappoints['Total'].max()}")
        
        # Show top 15 organizations by reappointments
        print("\nTop 15 Organizations by Total Reappointments:")
        print("-" * 47)
        top_orgs = pivot_table[pivot_table['Total'] > 0].head(15)
        
        if not top_orgs.empty:
            for org, row in top_orgs.iterrows():
                org_name = str(org)[:40] + "..." if len(str(org)) > 40 else str(org)
                total = row['Total']
                print(f"{org_name:43}: {total:4} reappointments")
        else:
            print("No organizations with reappointments found")
        
        # Show year-over-year reappointment trends
        print(f"\nYear-over-Year Reappointment Totals:")
        print("-" * 37)
        year_totals = pivot_table.drop('Total', axis=1).sum(axis=0)
        
        for year, total in year_totals.items():
            print(f"{year}: {total:4} reappointments")
        
        # Show sample of the pivot table
        print(f"\nSample of Reappointment Counts Table (Top 10 Organizations):")
        print("-" * 67)
        
        # Display first few columns and total for top 10 organizations
        sample_cols = [col for col in pivot_table.columns[:6]] + ['Total']
        sample_table = pivot_table.head(10)[sample_cols]
        
        print(sample_table.to_string())
        
        print("\nReappointment counts analysis completed successfully!")
        
    except Exception as e:
        print(f"ERROR during reappointment counts creation: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()