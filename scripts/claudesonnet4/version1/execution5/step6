#!/usr/bin/env python3
"""
Reappointment Rates Calculator for New Brunswick Government Appointments Data

This script merges appointment counts and reappointment counts to calculate 
reappointment rates for each organization-year combination, providing insights 
into hiring patterns and retention practices.

Author: Claude Sonnet 4
Version: 1.0
Execution: 5
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def main():
    """Main function to calculate reappointment rates."""
    
    # Define paths
    script_dir = Path(__file__).parent
    analysis_data_dir = script_dir / "analysis_data"
    appointment_counts_file = analysis_data_dir / "step4_appointment_counts.csv"
    reappointment_counts_file = analysis_data_dir / "step5_reappointment_counts.csv"
    output_file = analysis_data_dir / "step6_reappointment_rates.csv"
    
    # Check if input files exist
    if not appointment_counts_file.exists():
        print(f"ERROR: Appointment counts file not found: {appointment_counts_file}")
        print("Please run the appointment counts script first.")
        sys.exit(1)
    
    if not reappointment_counts_file.exists():
        print(f"ERROR: Reappointment counts file not found: {reappointment_counts_file}")
        print("Please run the reappointment counts script first.")
        sys.exit(1)
    
    try:
        # Load both datasets
        print("Loading appointment counts and reappointment counts...")
        
        # Load appointment counts (organizations as index, years as columns)
        appointment_df = pd.read_csv(appointment_counts_file, index_col=0)
        print(f"✓ Loaded appointment counts: {appointment_df.shape[0]} organizations, {appointment_df.shape[1]} columns")
        
        # Load reappointment counts (organizations as index, years as columns)
        reappointment_df = pd.read_csv(reappointment_counts_file, index_col=0)
        print(f"✓ Loaded reappointment counts: {reappointment_df.shape[0]} organizations, {reappointment_df.shape[1]} columns")
        
        # Remove 'Total' columns if they exist
        if 'Total' in appointment_df.columns:
            appointment_df = appointment_df.drop('Total', axis=1)
        if 'Total' in reappointment_df.columns:
            reappointment_df = reappointment_df.drop('Total', axis=1)
        
        print(f"✓ After removing Total columns: Appointment {appointment_df.shape}, Reappointment {reappointment_df.shape}")
        
        # Ensure both dataframes have the same years as columns
        all_years = sorted(set(appointment_df.columns) | set(reappointment_df.columns))
        year_columns = [col for col in all_years if str(col).isdigit()]
        
        print(f"✓ Processing years: {min(year_columns)} - {max(year_columns)}")
        
        # Align both dataframes to have the same columns
        for year in year_columns:
            if year not in appointment_df.columns:
                appointment_df.loc[:, year] = 0
            if year not in reappointment_df.columns:
                reappointment_df.loc[:, year] = 0
        
        # Keep only year columns
        appointment_df = appointment_df[year_columns]
        reappointment_df = reappointment_df[year_columns]
        
        # Get all unique organizations from both datasets
        all_orgs = sorted(set(appointment_df.index) | set(reappointment_df.index))
        
        # Ensure both dataframes have the same organizations
        appointment_df = appointment_df.reindex(all_orgs, fill_value=0)
        reappointment_df = reappointment_df.reindex(all_orgs, fill_value=0)
        
        print(f"✓ Aligned datasets: {len(all_orgs)} organizations, {len(year_columns)} years")
        
        # Convert pivot tables to long format
        print("\nConverting to long format for rate calculations...")
        
        # Melt appointment counts
        appointment_long = appointment_df.reset_index().melt(
            id_vars=['org'], 
            var_name='year', 
            value_name='total_appointments'
        )
        
        # Melt reappointment counts
        reappointment_long = reappointment_df.reset_index().melt(
            id_vars=['org'], 
            var_name='year', 
            value_name='reappointments'
        )
        
        # Merge the datasets
        print("Merging appointment and reappointment data...")
        merged_df = pd.merge(
            appointment_long, 
            reappointment_long, 
            on=['org', 'year'], 
            how='outer'
        )
        
        # Fill missing values with 0
        merged_df.loc[:, 'total_appointments'] = merged_df['total_appointments'].fillna(0).astype(int)
        merged_df.loc[:, 'reappointments'] = merged_df['reappointments'].fillna(0).astype(int)
        merged_df.loc[:, 'year'] = merged_df['year'].astype(int)
        
        print(f"✓ Merged dataset: {len(merged_df)} org-year combinations")
        
        # Calculate reappointment rates with proper handling of division by zero
        print("Calculating reappointment rates...")
        
        # Handle division by zero: set rate to 0 when total_appointments is 0
        merged_df.loc[:, 'reappointment_rate'] = np.where(
            merged_df['total_appointments'] > 0,
            merged_df['reappointments'] / merged_df['total_appointments'],
            0.0
        )
        
        # Data validation
        print("\nPerforming data validation...")
        
        # Check for invalid rates (should be between 0 and 1)
        invalid_rates = (merged_df['reappointment_rate'] < 0) | (merged_df['reappointment_rate'] > 1)
        if invalid_rates.any():
            print(f"WARNING: {invalid_rates.sum()} invalid reappointment rates found")
            invalid_cases = merged_df[invalid_rates]
            print("Sample invalid cases:")
            print(invalid_cases.head())
        else:
            print("✓ All reappointment rates are valid (0-1 range)")
        
        # Check for cases where reappointments > total_appointments
        impossible_cases = merged_df['reappointments'] > merged_df['total_appointments']
        if impossible_cases.any():
            print(f"WARNING: {impossible_cases.sum()} cases where reappointments > total appointments")
            problem_cases = merged_df[impossible_cases]
            print("Sample problematic cases:")
            print(problem_cases.head())
        else:
            print("✓ No cases where reappointments exceed total appointments")
        
        # Sort by organization and year
        merged_df = merged_df.sort_values(['org', 'year']).reset_index(drop=True)
        
        # Save the results
        merged_df.to_csv(output_file, index=False)
        print(f"✓ Reappointment rates saved to: {output_file}")
        
        print("-" * 70)
        print("REAPPOINTMENT RATES SUMMARY:")
        
        # Overall statistics
        total_records = len(merged_df)
        records_with_appointments = (merged_df['total_appointments'] > 0).sum()
        records_with_reappointments = (merged_df['reappointments'] > 0).sum()
        
        print(f"Total org-year combinations: {total_records:,}")
        print(f"Combinations with appointments: {records_with_appointments:,} ({records_with_appointments/total_records*100:.1f}%)")
        print(f"Combinations with reappointments: {records_with_reappointments:,} ({records_with_reappointments/total_records*100:.1f}%)")
        
        # Statistics for non-zero rates
        non_zero_rates = merged_df[merged_df['reappointment_rate'] > 0]
        if not non_zero_rates.empty:
            print(f"\nReappointment Rate Statistics (non-zero rates only):")
            print(f"  Count: {len(non_zero_rates):,}")
            print(f"  Mean: {non_zero_rates['reappointment_rate'].mean():.3f}")
            print(f"  Median: {non_zero_rates['reappointment_rate'].median():.3f}")
            print(f"  Min: {non_zero_rates['reappointment_rate'].min():.3f}")
            print(f"  Max: {non_zero_rates['reappointment_rate'].max():.3f}")
        
        # Calculate average reappointment rates by organization
        print("\nCalculating average reappointment rates by organization...")
        
        # Only consider org-years with appointments for average calculation
        orgs_with_data = merged_df[merged_df['total_appointments'] > 0].copy()
        
        if not orgs_with_data.empty:
            org_avg_rates = orgs_with_data.groupby('org').agg({
                'reappointment_rate': 'mean',
                'total_appointments': 'sum',
                'reappointments': 'sum',
                'year': 'count'  # Number of years with data
            }).round(3)
            
            org_avg_rates.columns = ['avg_reappointment_rate', 'total_appointments_all_years', 'total_reappointments_all_years', 'years_with_data']
            
            # Filter organizations with at least some activity
            active_orgs = org_avg_rates[org_avg_rates['total_appointments_all_years'] >= 10].copy()
            active_orgs = active_orgs.sort_values('avg_reappointment_rate', ascending=False)
            
            print(f"\nTop 15 Organizations by Average Reappointment Rate:")
            print(f"(Organizations with 10+ total appointments across all years)")
            print("-" * 80)
            
            top_orgs = active_orgs.head(15)
            for org, row in top_orgs.iterrows():
                org_name = str(org)[:35] + "..." if len(str(org)) > 35 else str(org)
                rate = row['avg_reappointment_rate']
                total_emp = row['total_appointments_all_years']
                total_reapp = row['total_reappointments_all_years']
                years = row['years_with_data']
                print(f"{org_name:38}: {rate:.3f} ({total_reapp:3}/{total_emp:3} across {years:2} years)")
        
        # Show sample of the final dataset
        print(f"\nSample of Final Dataset (First 10 Records):")
        print("-" * 50)
        sample_df = merged_df.head(10)[['org', 'year', 'total_appointments', 'reappointments', 'reappointment_rate']]
        print(sample_df.to_string(index=False))
        
        # Show organizations with consistently high rates
        if not orgs_with_data.empty:
            high_rate_threshold = 0.5
            high_rate_orgs = org_avg_rates[org_avg_rates['avg_reappointment_rate'] >= high_rate_threshold]
            
            if not high_rate_orgs.empty:
                print(f"\nOrganizations with Average Reappointment Rate ≥ {high_rate_threshold}:")
                print("-" * 55)
                for org, row in high_rate_orgs.iterrows():
                    org_name = str(org)[:40] + "..." if len(str(org)) > 40 else str(org)
                    rate = row['avg_reappointment_rate']
                    print(f"{org_name:43}: {rate:.3f}")
            else:
                print(f"\nNo organizations with average reappointment rate ≥ {high_rate_threshold}")
        
        print("\nReappointment rates calculation completed successfully!")
        
    except Exception as e:
        print(f"ERROR during reappointment rates calculation: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()