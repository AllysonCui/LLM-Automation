#!/usr/bin/env python3
"""
Yearly Maximum Reappointment Rates Analyzer for New Brunswick Government Data

This script identifies the organization with the highest reappointment rate for each year,
creates a time series analysis, and generates visualizations.

Author: Claude Sonnet 4
Version: 1.0
Execution: 5
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime

def handle_ties(group, tie_method='first_alphabetical'):
    """
    Handle ties when multiple organizations have the same maximum rate.
    
    Args:
        group: DataFrame group with tied organizations
        tie_method: Method to break ties
    
    Returns:
        Single row DataFrame with the selected organization
    """
    if tie_method == 'first_alphabetical':
        # Choose the first organization alphabetically
        return group.sort_values('org').iloc[0:1]
    elif tie_method == 'most_employees':
        # Choose organization with most total employees
        return group.nlargest(1, 'total_employees')
    elif tie_method == 'most_reappointments':
        # Choose organization with most reappointments
        return group.nlargest(1, 'reappointments')
    else:
        # Default: return first occurrence
        return group.iloc[0:1]

def main():
    """Main function to analyze yearly maximum reappointment rates."""
    
    # Define paths
    script_dir = Path(__file__).parent
    analysis_data_dir = script_dir / "analysis_data"
    input_file = analysis_data_dir / "step6_reappointment_rates.csv"
    output_csv = analysis_data_dir / "step7_yearly_max_rates.csv"
    output_png = analysis_data_dir / "step7_yearly_max_rates.png"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"ERROR: Input file not found: {input_file}")
        print("Please run the reappointment rates calculation script first.")
        sys.exit(1)
    
    try:
        # Load the reappointment rates
        print("Loading reappointment rates dataset...")
        df = pd.read_csv(input_file)
        print(f"✓ Loaded dataset: {df.shape[0]} rows, {df.shape[1]} columns")
        
        # Check for required columns
        required_columns = ['org', 'year', 'total_employees', 'reappointments', 'reappointment_rate']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"ERROR: Missing required columns: {missing_columns}")
            sys.exit(1)
        
        print("\nAnalyzing yearly maximum reappointment rates...")
        print("-" * 50)
        
        # Filter for valid data - organizations with at least some activity
        # We'll focus on cases where there are actual employees (total_employees > 0)
        # and valid reappointment rates (not NaN)
        valid_data = df[
            (df['total_employees'] > 0) & 
            (df['reappointment_rate'].notna()) &
            (df['reappointment_rate'] >= 0)
        ].copy()
        
        print(f"Valid records for analysis: {len(valid_data):,} out of {len(df):,}")
        
        if len(valid_data) == 0:
            print("ERROR: No valid data found for analysis!")
            sys.exit(1)
        
        # Get unique years
        years = sorted(valid_data['year'].unique())
        print(f"Years with data: {len(years)} ({min(years)} - {max(years)})")
        
        # Analyze each year
        yearly_results = []
        tie_cases = []
        
        print(f"\nAnalyzing year-by-year maximum rates:")
        print("-" * 40)
        
        for year in years:
            year_data = valid_data[valid_data['year'] == year]
            
            if len(year_data) == 0:
                print(f"{year}: No valid data")
                continue
            
            # Find maximum reappointment rate for this year
            max_rate = year_data['reappointment_rate'].max()
            
            # Find all organizations with this maximum rate
            max_orgs = year_data[year_data['reappointment_rate'] == max_rate]
            
            if len(max_orgs) > 1:
                # Handle ties
                tie_info = {
                    'year': year,
                    'max_rate': max_rate,
                    'tied_orgs': len(max_orgs),
                    'organizations': max_orgs['org'].tolist()
                }
                tie_cases.append(tie_info)
                
                print(f"{year}: TIE - {len(max_orgs)} organizations at {100*max_rate:.1f}%")
                
                # Apply tie-breaking method
                selected_org = handle_ties(max_orgs, tie_method='first_alphabetical')
            else:
                selected_org = max_orgs
                print(f"{year}: {selected_org.iloc[0]['org'][:40]}... - {100*max_rate:.1f}%")
            
            # Add to results
            result = {
                'year': year,
                'top_org': selected_org.iloc[0]['org'],
                'max_rate': max_rate,
                'total_employees': selected_org.iloc[0]['total_employees'],
                'reappointments': selected_org.iloc[0]['reappointments']
            }
            yearly_results.append(result)
        
        # Create results DataFrame
        results_df = pd.DataFrame(yearly_results)
        
        # Save results to CSV
        output_columns = ['year', 'top_org', 'max_rate']
        results_df[output_columns].to_csv(output_csv, index=False)
        print(f"\n✓ Yearly maximum rates saved to: {output_csv}")
        
        # Handle tie cases
        if tie_cases:
            print(f"\nTie Cases Handled ({len(tie_cases)} total):")
            print("-" * 35)
            print("Tie-breaking method: First alphabetically")
            
            for tie in tie_cases:
                orgs_str = ", ".join([org[:20] + "..." if len(org) > 20 else org for org in tie['organizations'][:3]])
                if len(tie['organizations']) > 3:
                    orgs_str += f" (and {len(tie['organizations'])-3} more)"
                print(f"{tie['year']}: {tie['tied_orgs']} orgs at {100*tie['max_rate']:.1f}% - {orgs_str}")
        
        # Create visualization
        print(f"\nCreating visualization...")
        print("-" * 25)
        
        plt.figure(figsize=(14, 8))
        
        # Create the plot
        plt.plot(results_df['year'], results_df['max_rate'] * 100, 
                marker='o', linewidth=2, markersize=6, color='darkblue')
        
        # Customize the plot
        plt.title('Highest Organizational Reappointment Rate by Year\nNew Brunswick Government Appointments', 
                 fontsize=16, fontweight='bold', pad=20)
        plt.xlabel('Year', fontsize=12, fontweight='bold')
        plt.ylabel('Maximum Reappointment Rate (%)', fontsize=12, fontweight='bold')
        
        # Format axes
        plt.grid(True, alpha=0.3, linestyle='--')
        plt.xticks(results_df['year'], rotation=45)
        
        # Add value labels on points
        for i, row in results_df.iterrows():
            plt.annotate(f'{100*row["max_rate"]:.1f}%', 
                        (row['year'], row['max_rate'] * 100),
                        textcoords="offset points", 
                        xytext=(0,10), 
                        ha='center', fontsize=9)
        
        # Adjust layout and save
        plt.tight_layout()
        plt.savefig(output_png, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"✓ Visualization saved to: {output_png}")
        
        # Print summary statistics
        print("-" * 50)
        print("YEARLY MAXIMUM RATES SUMMARY:")
        
        if len(results_df) > 0:
            print(f"Years analyzed: {len(results_df)}")
            print(f"Average maximum rate: {100*results_df['max_rate'].mean():.1f}%")
            print(f"Highest rate observed: {100*results_df['max_rate'].max():.1f}% in {results_df.loc[results_df['max_rate'].idxmax(), 'year']}")
            print(f"Lowest rate observed: {100*results_df['max_rate'].min():.1f}% in {results_df.loc[results_df['max_rate'].idxmin(), 'year']}")
        
        # Show year-by-year results
        print(f"\nComplete Year-by-Year Results:")
        print("-" * 35)
        print(f"{'Year':<6} {'Organization':<40} {'Rate':<8} {'Employees':<10} {'Reapp.'}")
        print("-" * 70)
        
        for _, row in results_df.iterrows():
            org_name = row['top_org'][:37] + "..." if len(row['top_org']) > 37 else row['top_org']
            year = int(row['year'])
            rate = f"{100*row['max_rate']:.1f}%"
            employees = int(row['total_employees'])
            reapp = int(row['reappointments'])
            
            print(f"{year:<6} {org_name:<40} {rate:<8} {employees:<10} {reapp}")
        
        # Identify organizations that appear multiple times
        org_counts = results_df['top_org'].value_counts()
        frequent_orgs = org_counts[org_counts > 1]
        
        if len(frequent_orgs) > 0:
            print(f"\nOrganizations with Multiple Peak Years:")
            print("-" * 40)
            for org, count in frequent_orgs.items():
                years_list = results_df[results_df['top_org'] == org]['year'].tolist()
                org_name = org[:35] + "..." if len(org) > 35 else org
                print(f"{org_name:38}: {count} years ({', '.join(map(str, years_list))})")
        
        # Show trend analysis
        if len(results_df) > 1:
            print(f"\nTrend Analysis:")
            print("-" * 16)
            
            # Calculate year-over-year changes
            results_df_sorted = results_df.sort_values('year')
            rate_changes = results_df_sorted['max_rate'].diff().dropna()
            
            increasing_years = (rate_changes > 0).sum()
            decreasing_years = (rate_changes < 0).sum()
            stable_years = (rate_changes == 0).sum()
            
            print(f"Years with increasing max rate: {increasing_years}")
            print(f"Years with decreasing max rate: {decreasing_years}")
            print(f"Years with stable max rate: {stable_years}")
            
            if len(rate_changes) > 0:
                avg_change = rate_changes.mean()
                print(f"Average year-over-year change: {100*avg_change:+.2f} percentage points")
        
        print("\nYearly maximum rates analysis completed successfully!")
        
    except Exception as e:
        print(f"ERROR during yearly maximum rates analysis: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()