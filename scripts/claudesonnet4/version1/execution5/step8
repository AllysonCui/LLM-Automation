#!/usr/bin/env python3
"""
Annual Reappointment Proportions Calculator for New Brunswick Government Appointments Data

This script calculates the government-wide reappointment proportion for each year,
providing insights into overall reappointment trends across the entire government.

Author: Claude Sonnet 4
Version: 1.0
Execution: 5
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt
from datetime import datetime

def main():
    """Main function to calculate annual reappointment proportions."""
    
    # Define paths
    script_dir = Path(__file__).parent
    analysis_data_dir = script_dir / "analysis_data"
    input_file = analysis_data_dir / "step3_repeats_marked.csv"
    output_file = analysis_data_dir / "step8_annual_proportions.csv"
    plot_file = analysis_data_dir / "step8_annual_reappointment_proportions.png"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"ERROR: Input file not found: {input_file}")
        print("Please run the reappointment marking script first.")
        sys.exit(1)
    
    try:
        # Load the dataset with reappointment flags
        print("Loading dataset with reappointment flags...")
        df = pd.read_csv(input_file)
        print(f"✓ Loaded dataset: {df.shape[0]} rows, {df.shape[1]} columns")
        
        # Validate required columns
        required_cols = ['year', 'reappointed']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            print(f"ERROR: Missing required columns: {missing_cols}")
            sys.exit(1)
        
        # Data quality checks
        print("\nPerforming data quality checks...")
        
        # Convert year to numeric
        df.loc[:, 'year'] = pd.to_numeric(df['year'], errors='coerce')
        
        # Handle reappointed column - ensure it's boolean
        print(f"Reappointed column dtype: {df['reappointed'].dtype}")
        print(f"Reappointed unique values: {df['reappointed'].unique()}")
        
        # Convert reappointed to boolean, handling various formats
        if df['reappointed'].dtype == 'object':
            df.loc[:, 'reappointed'] = df['reappointed'].map({
                'True': True, 'true': True, True: True,
                'False': False, 'false': False, False: False,
                1: True, 0: False, '1': True, '0': False
            })
        
        # Fill NaN values in reappointed with False and convert to boolean
        df.loc[:, 'reappointed'] = df['reappointed'].fillna(False).astype(bool)
        
        # Remove rows with missing years
        df_clean = df.dropna(subset=['year']).copy()
        excluded_count = len(df) - len(df_clean)
        
        if excluded_count > 0:
            print(f"✓ Excluded {excluded_count} records with missing year data")
        
        # Filter for years 2013-2024
        target_years = list(range(2013, 2025))
        df_years = df_clean[df_clean['year'].isin(target_years)].copy()
        
        print(f"✓ Processing {len(df_years)} appointments from {min(target_years)}-{max(target_years)}")
        
        if df_years.empty:
            print("ERROR: No data found for target years!")
            sys.exit(1)
        
        # Calculate annual proportions
        print("\nCalculating annual reappointment proportions...")
        
        annual_results = []
        
        for year in target_years:
            year_data = df_years[df_years['year'] == year]
            
            if year_data.empty:
                print(f"  {year}: No data available")
                annual_results.append({
                    'year': year,
                    'total_appointments': 0,
                    'total_reappointments': 0,
                    'reappointment_proportion': 0.0
                })
                continue
            
            # Count totals for this year
            total_appointments = len(year_data)
            total_reappointments = year_data['reappointed'].sum()
            
            # Calculate proportion
            if total_appointments > 0:
                reappointment_proportion = total_reappointments / total_appointments
            else:
                reappointment_proportion = 0.0
            
            # Store results
            annual_results.append({
                'year': year,
                'total_appointments': total_appointments,
                'total_reappointments': total_reappointments,
                'reappointment_proportion': reappointment_proportion
            })
            
            # Print year results
            print(f"  {year}: {total_reappointments:4}/{total_appointments:4} = {reappointment_proportion:.3f} ({reappointment_proportion*100:.1f}%)")
        
        # Create results DataFrame
        results_df = pd.DataFrame(annual_results)
        
        # Save results
        results_df.to_csv(output_file, index=False)
        print(f"\n✓ Annual proportions saved to: {output_file}")
        
        # Create visualization
        print("Creating time series visualization...")
        
        # Filter out years with no data for plotting
        plot_data = results_df[results_df['total_appointments'] > 0].copy()
        
        if plot_data.empty:
            print("WARNING: No data available for visualization")
        else:
            plt.figure(figsize=(12, 8))
            
            # Create the main plot
            plt.plot(plot_data['year'], plot_data['reappointment_proportion'], 
                    marker='o', linewidth=3, markersize=10, 
                    color='#D2691E', markerfacecolor='#8B4513', markeredgewidth=2, markeredgecolor='white')
            
            # Customize the plot
            plt.title('Government-Wide Annual Reappointment Proportions\nNew Brunswick Government Appointments (2013-2024)', 
                     fontsize=16, fontweight='bold', pad=20)
            plt.xlabel('Year', fontsize=12, fontweight='bold')
            plt.ylabel('Reappointment Proportion', fontsize=12, fontweight='bold')
            
            # Format y-axis as percentage
            plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: f'{y:.0%}'))
            
            # Set x-axis to show all years with data
            plt.xticks(plot_data['year'], rotation=45)
            
            # Add grid
            plt.grid(True, alpha=0.3, linestyle='--')
            
            # Add data point labels
            for idx, row in plot_data.iterrows():
                plt.annotate(f"{row['reappointment_proportion']:.1%}\n({row['total_reappointments']}/{row['total_appointments']})", 
                           (row['year'], row['reappointment_proportion']),
                           textcoords="offset points", 
                           xytext=(0,20), 
                           ha='center', fontsize=9,
                           bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.8))
            
            # Add trend line
            if len(plot_data) > 1:
                z = np.polyfit(plot_data['year'], plot_data['reappointment_proportion'], 1)
                p = np.poly1d(z)
                plt.plot(plot_data['year'], p(plot_data['year']), "--", alpha=0.7, color='red', linewidth=2, label=f'Trend Line')
                plt.legend()
            
            # Set y-axis limits to show full range
            y_min = max(0, plot_data['reappointment_proportion'].min() - 0.05)
            y_max = min(1, plot_data['reappointment_proportion'].max() + 0.05)
            plt.ylim(y_min, y_max)
            
            # Tight layout
            plt.tight_layout()
            
            # Save plot
            plt.savefig(plot_file, dpi=300, bbox_inches='tight')
            print(f"✓ Visualization saved to: {plot_file}")
            
            plt.close()
        
        print("-" * 70)
        print("ANNUAL REAPPOINTMENT PROPORTIONS SUMMARY:")
        
        # Overall statistics
        years_with_data = results_df[results_df['total_appointments'] > 0]
        
        if not years_with_data.empty:
            print(f"Years with data: {len(years_with_data)}")
            print(f"Year range: {years_with_data['year'].min()} - {years_with_data['year'].max()}")
            
            # Total across all years
            total_all_appointments = years_with_data['total_appointments'].sum()
            total_all_reappointments = years_with_data['total_reappointments'].sum()
            overall_proportion = total_all_reappointments / total_all_appointments if total_all_appointments > 0 else 0
            
            print(f"Total appointments (all years): {total_all_appointments:,}")
            print(f"Total reappointments (all years): {total_all_reappointments:,}")
            print(f"Overall proportion: {overall_proportion:.3f} ({overall_proportion*100:.1f}%)")
            
            # Year-by-year statistics
            print(f"\nAnnual proportion statistics:")
            print(f"  Mean: {years_with_data['reappointment_proportion'].mean():.3f}")
            print(f"  Median: {years_with_data['reappointment_proportion'].median():.3f}")
            print(f"  Min: {years_with_data['reappointment_proportion'].min():.3f} (Year {years_with_data.loc[years_with_data['reappointment_proportion'].idxmin(), 'year']})")
            print(f"  Max: {years_with_data['reappointment_proportion'].max():.3f} (Year {years_with_data.loc[years_with_data['reappointment_proportion'].idxmax(), 'year']})")
            
            # Trend analysis
            if len(years_with_data) > 1:
                print(f"\nTrend Analysis:")
                print("-" * 15)
                
                # Calculate trend
                x = np.arange(len(years_with_data))
                y = years_with_data['reappointment_proportion'].values
                trend_slope = np.polyfit(x, y, 1)[0]
                
                trend_desc = "stable"
                if abs(trend_slope) >= 0.005:
                    trend_desc = "increasing" if trend_slope > 0 else "decreasing"
                
                annual_change = trend_slope * 100  # Convert to percentage points per year
                print(f"Overall trend: {trend_desc}")
                print(f"Average annual change: {annual_change:+.1f} percentage points per year")
                
                # Compare first and last periods
                first_period = years_with_data.head(3)['reappointment_proportion'].mean()
                last_period = years_with_data.tail(3)['reappointment_proportion'].mean()
                period_change = last_period - first_period
                
                print(f"First 3 years average: {first_period:.3f}")
                print(f"Last 3 years average: {last_period:.3f}")
                print(f"Period change: {period_change:+.3f} ({period_change*100:+.1f} percentage points)")
        
        # Display complete results table
        print(f"\nComplete Annual Results:")
        print("-" * 27)
        print(results_df.to_string(index=False, float_format='%.3f'))
        
        print("\nAnnual proportions analysis completed successfully!")
        
    except Exception as e:
        print(f"ERROR during annual proportions calculation: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()