#!/usr/bin/env python3
"""
Regression Analysis for Government-Wide Reappointment Trends

This script performs comprehensive statistical analysis of the government-wide 
reappointment proportion trends over the 12-year period (2013-2024), including
linear regression, statistical significance testing, and diagnostic checks.

Author: Claude Sonnet 4
Version: 1.0
Execution: 5
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
from scipy import stats
from scipy.stats import linregress, jarque_bera, shapiro
import warnings

def durbin_watson_test(residuals):
    """
    Calculate Durbin-Watson test statistic for autocorrelation in residuals.
    
    Args:
        residuals: Array of regression residuals
    
    Returns:
        Durbin-Watson test statistic (0-4, around 2 indicates no autocorrelation)
    """
    if len(residuals) < 2:
        return np.nan
    
    diff_residuals = np.diff(residuals)
    dw_statistic = np.sum(diff_residuals**2) / np.sum(residuals**2)
    return dw_statistic

def detect_outliers(x, y, residuals, threshold=2.0):
    """
    Detect outliers using standardized residuals.
    
    Args:
        x: Independent variable values
        y: Dependent variable values
        residuals: Regression residuals
        threshold: Z-score threshold for outlier detection
    
    Returns:
        List of outlier indices and their details
    """
    if len(residuals) == 0:
        return []
    
    std_residuals = residuals / np.std(residuals)
    outlier_indices = np.where(np.abs(std_residuals) > threshold)[0]
    
    outliers = []
    for idx in outlier_indices:
        outliers.append({
            'index': idx,
            'year': x[idx],
            'proportion': y[idx],
            'residual': residuals[idx],
            'std_residual': std_residuals[idx]
        })
    
    return outliers

def calculate_confidence_intervals(slope, intercept, x, y, confidence_level=0.95):
    """
    Calculate confidence intervals for regression parameters.
    
    Args:
        slope: Regression slope
        intercept: Regression intercept
        x: Independent variable values
        y: Dependent variable values
        confidence_level: Confidence level (default 0.95 for 95% CI)
    
    Returns:
        Dictionary with confidence intervals
    """
    n = len(x)
    if n <= 2:
        return {'slope_ci': (np.nan, np.nan), 'intercept_ci': (np.nan, np.nan)}
    
    # Calculate residuals and standard error
    y_pred = slope * x + intercept
    residuals = y - y_pred
    mse = np.sum(residuals**2) / (n - 2)
    
    # Calculate standard errors
    x_mean = np.mean(x)
    sxx = np.sum((x - x_mean)**2)
    
    se_slope = np.sqrt(mse / sxx)
    se_intercept = np.sqrt(mse * (1/n + x_mean**2/sxx))
    
    # Calculate t-critical value
    alpha = 1 - confidence_level
    t_critical = stats.t.ppf(1 - alpha/2, n - 2)
    
    # Calculate confidence intervals
    slope_ci = (slope - t_critical * se_slope, slope + t_critical * se_slope)
    intercept_ci = (intercept - t_critical * se_intercept, intercept + t_critical * se_intercept)
    
    return {
        'slope_ci': slope_ci,
        'intercept_ci': intercept_ci,
        'se_slope': se_slope,
        'se_intercept': se_intercept
    }

def main():
    """Main function to perform regression analysis."""
    
    # Define paths
    script_dir = Path(__file__).parent
    analysis_data_dir = script_dir / "analysis_data"
    input_file = analysis_data_dir / "step8_annual_proportions.csv"
    output_file = analysis_data_dir / "step9_regression_results.txt"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"ERROR: Input file not found: {input_file}")
        print("Please run the annual proportions calculation script first.")
        sys.exit(1)
    
    try:
        # Load the annual proportions dataset
        print("Loading annual government-wide proportions...")
        df = pd.read_csv(input_file)
        print(f"✓ Loaded dataset: {df.shape[0]} rows, {df.shape[1]} columns")
        
        # Validate required columns
        required_cols = ['year', 'reappointment_proportion']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            print(f"ERROR: Missing required columns: {missing_cols}")
            sys.exit(1)
        
        # Data preparation
        print("\nPreparing data for regression analysis...")
        
        # Filter out years with no appointments (proportion would be meaningless)
        df_valid = df[df['total_appointments'] > 0].copy()
        
        if df_valid.empty:
            print("ERROR: No valid data points for regression analysis!")
            sys.exit(1)
        
        print(f"✓ Using {len(df_valid)} data points for analysis")
        
        # Extract variables for regression
        x = df_valid['year'].values  # Independent variable (year)
        y = df_valid['reappointment_proportion'].values  # Dependent variable (proportion)
        
        # Basic data validation
        if len(x) < 3:
            print("ERROR: Insufficient data points for meaningful regression analysis!")
            sys.exit(1)
        
        print(f"✓ Year range: {x.min()} - {x.max()}")
        print(f"✓ Proportion range: {y.min():.3f} - {y.max():.3f}")
        
        # Perform linear regression
        print("\nPerforming linear regression analysis...")
        
        slope, intercept, r_value, p_value, std_err = linregress(x, y)
        r_squared = r_value**2
        
        print(f"✓ Regression completed")
        print(f"  Slope: {slope:.6f}")
        print(f"  R-squared: {r_squared:.4f}")
        print(f"  P-value: {p_value:.6f}")
        
        # Calculate confidence intervals
        ci_results = calculate_confidence_intervals(slope, intercept, x, y)
        
        # Calculate predicted values and residuals
        y_pred = slope * x + intercept
        residuals = y - y_pred
        
        # Perform regression diagnostics
        print("\nPerforming regression diagnostics...")
        
        # Durbin-Watson test for autocorrelation
        dw_statistic = durbin_watson_test(residuals)
        
        # Outlier detection
        outliers = detect_outliers(x, y, residuals, threshold=2.0)
        
        # Normality tests for residuals
        if len(residuals) >= 8:
            shapiro_stat, shapiro_p = shapiro(residuals)
        else:
            shapiro_stat, shapiro_p = np.nan, np.nan
        
        if len(residuals) >= 8:
            jb_stat, jb_p = jarque_bera(residuals)
        else:
            jb_stat, jb_p = np.nan, np.nan
        
        # Statistical significance and trend determination
        is_significant = p_value < 0.05
        
        if is_significant:
            if slope > 0:
                trend_direction = "INCREASING"
                trend_desc = "statistically significant increasing trend"
            else:
                trend_direction = "DECREASING"
                trend_desc = "statistically significant decreasing trend"
        else:
            trend_direction = "NO SIGNIFICANT TREND"
            trend_desc = "no statistically significant trend"
        
        # Calculate practical significance
        annual_change_pp = slope * 100  # Convert to percentage points
        total_change_pp = annual_change_pp * (x.max() - x.min())
        
        # Prepare detailed results for output file
        results_text = []
        results_text.append("=" * 80)
        results_text.append("STATISTICAL ANALYSIS OF GOVERNMENT-WIDE REAPPOINTMENT TRENDS")
        results_text.append("New Brunswick Government Appointments (2013-2024)")
        results_text.append("=" * 80)
        results_text.append("")
        
        # Data summary
        results_text.append("DATA SUMMARY:")
        results_text.append("-" * 40)
        results_text.append(f"Analysis period: {x.min()} - {x.max()}")
        results_text.append(f"Number of data points: {len(x)}")
        results_text.append(f"Years analyzed: {', '.join(map(str, sorted(x)))}")
        results_text.append("")
        
        results_text.append("Reappointment proportion statistics:")
        results_text.append(f"  Mean: {np.mean(y):.4f} ({np.mean(y)*100:.2f}%)")
        results_text.append(f"  Median: {np.median(y):.4f} ({np.median(y)*100:.2f}%)")
        results_text.append(f"  Standard deviation: {np.std(y):.4f}")
        results_text.append(f"  Minimum: {np.min(y):.4f} ({np.min(y)*100:.2f}%) in {x[np.argmin(y)]}")
        results_text.append(f"  Maximum: {np.max(y):.4f} ({np.max(y)*100:.2f}%) in {x[np.argmax(y)]}")
        results_text.append("")
        
        # Regression results
        results_text.append("LINEAR REGRESSION RESULTS:")
        results_text.append("-" * 40)
        results_text.append(f"Regression equation: Y = {slope:.6f} * X + {intercept:.6f}")
        results_text.append(f"Where Y = reappointment proportion, X = year")
        results_text.append("")
        
        results_text.append("Statistical measures:")
        results_text.append(f"  Slope (β₁): {slope:.6f}")
        results_text.append(f"  Intercept (β₀): {intercept:.6f}")
        results_text.append(f"  Correlation coefficient (r): {r_value:.4f}")
        results_text.append(f"  R-squared (R²): {r_squared:.4f}")
        results_text.append(f"  Standard error: {std_err:.6f}")
        results_text.append(f"  P-value: {p_value:.6f}")
        results_text.append("")
        
        # Confidence intervals
        if not np.isnan(ci_results['slope_ci'][0]):
            results_text.append("95% Confidence Intervals:")
            results_text.append(f"  Slope: [{ci_results['slope_ci'][0]:.6f}, {ci_results['slope_ci'][1]:.6f}]")
            results_text.append(f"  Intercept: [{ci_results['intercept_ci'][0]:.6f}, {ci_results['intercept_ci'][1]:.6f}]")
            results_text.append("")
        
        # Practical significance
        results_text.append("PRACTICAL SIGNIFICANCE:")
        results_text.append("-" * 40)
        results_text.append(f"Annual change: {annual_change_pp:+.3f} percentage points per year")
        results_text.append(f"Total change over period: {total_change_pp:+.3f} percentage points")
        results_text.append(f"Relative change: {(total_change_pp/np.mean(y*100)):+.1f}% of mean proportion")
        results_text.append("")
        
        # Statistical significance
        results_text.append("STATISTICAL SIGNIFICANCE:")
        results_text.append("-" * 40)
        results_text.append(f"Significance level: α = 0.05")
        results_text.append(f"P-value: {p_value:.6f}")
        results_text.append(f"Is significant: {'YES' if is_significant else 'NO'}")
        results_text.append(f"Trend direction: {trend_direction}")
        results_text.append("")
        
        # Regression diagnostics
        results_text.append("REGRESSION DIAGNOSTICS:")
        results_text.append("-" * 40)
        results_text.append(f"Durbin-Watson statistic: {dw_statistic:.4f}")
        dw_interpretation = "No autocorrelation" if 1.5 <= dw_statistic <= 2.5 else "Possible autocorrelation"
        results_text.append(f"  Interpretation: {dw_interpretation}")
        results_text.append("")
        
        if not np.isnan(shapiro_p):
            results_text.append(f"Normality tests (residuals):")
            results_text.append(f"  Shapiro-Wilk test: statistic={shapiro_stat:.4f}, p-value={shapiro_p:.4f}")
            results_text.append(f"  Jarque-Bera test: statistic={jb_stat:.4f}, p-value={jb_p:.4f}")
            residuals_normal = shapiro_p > 0.05 and jb_p > 0.05
            results_text.append(f"  Residuals appear normal: {'YES' if residuals_normal else 'NO'}")
            results_text.append("")
        
        if outliers:
            results_text.append(f"Outliers detected ({len(outliers)}):")
            for outlier in outliers:
                results_text.append(f"  Year {outlier['year']}: proportion={outlier['proportion']:.4f}, std_residual={outlier['std_residual']:.2f}")
        else:
            results_text.append("No outliers detected (threshold: |z| > 2.0)")
        results_text.append("")
        
        # Final conclusions
        results_text.append("CONCLUSIONS:")
        results_text.append("-" * 40)
        results_text.append(f"1. The government-wide reappointment proportion shows a {trend_desc}")
        results_text.append(f"   over the {x.max() - x.min()}-year period from {x.min()} to {x.max()}.")
        results_text.append("")
        
        if is_significant:
            results_text.append(f"2. The trend is statistically significant (p = {p_value:.4f} < 0.05),")
            results_text.append(f"   indicating a real change in reappointment practices over time.")
        else:
            results_text.append(f"2. The trend is NOT statistically significant (p = {p_value:.4f} ≥ 0.05),")
            results_text.append(f"   suggesting no systematic change in reappointment practices over time.")
        results_text.append("")
        
        results_text.append(f"3. The model explains {r_squared*100:.1f}% of the variation in")
        results_text.append(f"   reappointment proportions (R² = {r_squared:.4f}).")
        results_text.append("")
        
        if abs(annual_change_pp) >= 0.5:
            results_text.append(f"4. The practical significance is MODERATE to HIGH:")
            results_text.append(f"   Annual change of {annual_change_pp:+.2f} percentage points represents")
            results_text.append(f"   a meaningful shift in government appointment practices.")
        else:
            results_text.append(f"4. The practical significance is LOW:")
            results_text.append(f"   Annual change of {annual_change_pp:+.2f} percentage points represents")
            results_text.append(f"   a relatively small shift in government appointment practices.")
        results_text.append("")
        
        # Save results to file
        with open(output_file, 'w') as f:
            f.write('\n'.join(results_text))
        
        print(f"✓ Detailed results saved to: {output_file}")
        
        # Print key results to console
        print("\n" + "=" * 70)
        print("REGRESSION ANALYSIS SUMMARY")
        print("=" * 70)
        
        print(f"\nData: {len(x)} years ({x.min()}-{x.max()})")
        print(f"Regression equation: Y = {slope:.6f} * Year + {intercept:.6f}")
        print(f"R-squared: {r_squared:.4f}")
        print(f"P-value: {p_value:.6f}")
        print(f"Annual change: {annual_change_pp:+.3f} percentage points per year")
        print(f"Total change: {total_change_pp:+.3f} percentage points over {x.max()-x.min()} years")
        
        print(f"\n" + "-" * 70)
        print("FINAL ANSWER:")
        print("-" * 70)
        
        if is_significant:
            significance_text = "IS statistically significant"
        else:
            significance_text = "is NOT statistically significant"
        
        print(f"The government-wide reappointment proportion trend is {trend_direction}")
        print(f"over the 12-year period and {significance_text} (p = {p_value:.4f}).")
        
        if is_significant:
            print(f"\nThe reappointment proportion is changing by {annual_change_pp:+.3f} percentage")
            print(f"points per year, representing a {trend_direction.lower()} trend in")
            print(f"New Brunswick government reappointment practices.")
        else:
            print(f"\nWhile there appears to be a {trend_direction.replace('NO SIGNIFICANT TREND', 'slight trend').lower()},")
            print(f"the change is not statistically significant and could be due to")
            print(f"random variation rather than a systematic policy shift.")
        
        print("\nRegression analysis completed successfully!")
        
    except Exception as e:
        print(f"ERROR during regression analysis: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()