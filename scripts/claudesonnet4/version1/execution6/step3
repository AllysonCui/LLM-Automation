#!/usr/bin/env python3

"""
Reappointment Marker for New Brunswick Government Appointments

This script identifies and marks reappointments by analyzing unique combinations
of name, position, and organization. It marks all occurrences except the first
(chronologically) as reappointments and updates the reappointed column.

The script handles name variations, missing dates, and other edge cases
using pandas best practices.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import re
from difflib import SequenceMatcher


def load_key_columns_data(file_path="scripts/claudesonnet4/version1/execution6/analysis_data/step2_key_columns_data.csv"):
    """
    Load the key columns dataset from step 2.
    
    Args:
        file_path (str): Path to the key columns dataset file
    
    Returns:
        pd.DataFrame: Loaded dataset
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Key columns dataset not found at: {file_path}")
        
        df = pd.read_csv(file_path, encoding='utf-8')
        print(f"✓ Loaded key columns dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
        
        return df
        
    except Exception as e:
        print(f"ERROR loading key columns dataset: {str(e)}")
        raise


def normalize_name(name):
    """
    Normalize name strings for better matching.
    
    Args:
        name (str): Raw name string
    
    Returns:
        str: Normalized name string
    """
    
    if pd.isna(name) or not isinstance(name, str):
        return ""
    
    # Convert to lowercase and strip whitespace
    normalized = str(name).lower().strip()
    
    # Remove extra whitespace
    normalized = re.sub(r'\s+', ' ', normalized)
    
    # Remove common prefixes and suffixes
    prefixes = ['mr.', 'mrs.', 'ms.', 'dr.', 'prof.', 'hon.']
    suffixes = ['jr.', 'sr.', 'ii', 'iii', 'phd', 'md']
    
    for prefix in prefixes:
        if normalized.startswith(prefix + ' '):
            normalized = normalized[len(prefix):].strip()
    
    for suffix in suffixes:
        if normalized.endswith(' ' + suffix):
            normalized = normalized[:-len(suffix)].strip()
    
    return normalized


def normalize_text_field(text):
    """
    Normalize text fields (position, org) for better matching.
    
    Args:
        text (str): Raw text string
    
    Returns:
        str: Normalized text string
    """
    
    if pd.isna(text) or not isinstance(text, str):
        return ""
    
    # Convert to lowercase and strip whitespace
    normalized = str(text).lower().strip()
    
    # Remove extra whitespace
    normalized = re.sub(r'\s+', ' ', normalized)
    
    # Remove common organizational suffixes
    org_suffixes = ['inc.', 'ltd.', 'corp.', 'llc']
    for suffix in org_suffixes:
        if normalized.endswith(' ' + suffix):
            normalized = normalized[:-len(suffix)].strip()
    
    return normalized


def prepare_data_for_analysis(df):
    """
    Prepare the dataset for reappointment analysis by normalizing key fields.
    
    Args:
        df (pd.DataFrame): Input dataset
    
    Returns:
        pd.DataFrame: Dataset with normalized fields
    """
    
    print("Preparing data for reappointment analysis...")
    
    # Create a copy to avoid modifying the original
    df_prepared = df.copy()
    
    # Ensure required columns exist
    required_columns = ['name', 'position', 'org', 'year']
    missing_columns = [col for col in required_columns if col not in df_prepared.columns]
    
    if missing_columns:
        raise ValueError(f"Missing required columns: {missing_columns}")
    
    # Normalize key fields for matching
    df_prepared.loc[:, 'name_normalized'] = df_prepared['name'].apply(normalize_name)
    df_prepared.loc[:, 'position_normalized'] = df_prepared['position'].apply(normalize_text_field)
    df_prepared.loc[:, 'org_normalized'] = df_prepared['org'].apply(normalize_text_field)
    
    # Validate data types
    if 'year' in df_prepared.columns:
        df_prepared.loc[:, 'year'] = pd.to_numeric(df_prepared['year'], errors='coerce')
    
    # Initialize reappointed column if it doesn't exist or convert to boolean
    if 'reappointed' not in df_prepared.columns:
        df_prepared.loc[:, 'reappointed'] = False
    else:
        # Convert existing reappointed column to boolean
        df_prepared.loc[:, 'reappointed'] = df_prepared['reappointed'].astype(bool)
    
    # Remove rows with missing critical information
    initial_rows = len(df_prepared)
    df_prepared = df_prepared.dropna(subset=['name_normalized', 'position_normalized', 'org_normalized'])
    
    # Remove rows with empty normalized fields
    df_prepared = df_prepared.loc[
        (df_prepared['name_normalized'] != '') & 
        (df_prepared['position_normalized'] != '') & 
        (df_prepared['org_normalized'] != '')
    ]
    
    final_rows = len(df_prepared)
    
    if initial_rows != final_rows:
        print(f"  Removed {initial_rows - final_rows:,} rows with missing critical information")
    
    print(f"✓ Prepared dataset: {final_rows:,} rows ready for analysis")
    
    return df_prepared


def identify_reappointments(df):
    """
    Identify and mark reappointments based on unique combinations of name, position, and org.
    
    Args:
        df (pd.DataFrame): Prepared dataset with normalized fields
    
    Returns:
        pd.DataFrame: Dataset with updated reappointed column
    """
    
    print("Identifying reappointments...")
    print("-" * 40)
    
    # Create a copy for modifications
    df_updated = df.copy()
    
    # Track statistics
    original_reappointments = df_updated['reappointed'].sum()
    groups_processed = 0
    reappointments_identified = 0
    
    # Group by normalized name, position, and organization
    groupby_cols = ['name_normalized', 'position_normalized', 'org_normalized']
    
    try:
        grouped = df_updated.groupby(groupby_cols, dropna=False)
        
        for group_key, group_df in grouped:
            groups_processed += 1
            
            # Skip groups with only one record
            if len(group_df) <= 1:
                continue
            
            # Sort by year (chronologically) - handle missing years
            group_indices = group_df.index.tolist()
            
            # Create a DataFrame for sorting with the indices
            sort_df = group_df.copy()
            sort_df.loc[:, 'original_index'] = group_indices
            
            # Sort by year, handling NaN values (put them at the end)
            sort_df = sort_df.sort_values(
                ['year', 'original_index'], 
                kind='stable', 
                na_position='last'
            )
            
            # Get the sorted indices
            sorted_indices = sort_df['original_index'].tolist()
            
            # Mark all except the first occurrence as reappointments
            if len(sorted_indices) > 1:
                reappointment_indices = sorted_indices[1:]  # All except first
                
                # Update the reappointed column for these indices
                df_updated.loc[reappointment_indices, 'reappointed'] = True
                
                reappointments_identified += len(reappointment_indices)
                
                # Print information about this group
                name = group_df['name'].iloc[0]
                position = group_df['position'].iloc[0]
                org = group_df['org'].iloc[0]
                years = sort_df['year'].tolist()
                
                print(f"  {name} | {position} | {org}")
                print(f"    Years: {years} → {len(reappointment_indices)} reappointments marked")
        
        print(f"\n✓ Processed {groups_processed:,} unique combinations")
        print(f"✓ Identified {reappointments_identified:,} additional reappointments")
        
    except Exception as e:
        print(f"ERROR during reappointment identification: {str(e)}")
        raise
    
    return df_updated, original_reappointments, reappointments_identified


def save_updated_dataset(df, output_dir="scripts/claudesonnet4/version1/execution6/analysis_data"):
    """
    Save the dataset with marked reappointments.
    
    Args:
        df (pd.DataFrame): Dataset with updated reappointed column
        output_dir (str): Directory to save the output file
    """
    
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # Remove the normalized columns before saving
    columns_to_remove = ['name_normalized', 'position_normalized', 'org_normalized']
    df_final = df.drop(columns=[col for col in columns_to_remove if col in df.columns])
    
    # Define output file path
    output_file = os.path.join(output_dir, "step3_repeats_marked.csv")
    
    try:
        # Save to CSV
        df_final.to_csv(output_file, index=False, encoding='utf-8')
        print(f"✓ Saved updated dataset to: {output_file}")
        
        return output_file
        
    except Exception as e:
        print(f"ERROR saving file: {str(e)}")
        raise


def print_reappointment_statistics(df, original_count, identified_count):
    """
    Print detailed statistics about reappointment identification.
    
    Args:
        df (pd.DataFrame): Final dataset
        original_count (int): Original number of reappointments
        identified_count (int): Number of additional reappointments identified
    """
    
    print("\n" + "=" * 60)
    print("REAPPOINTMENT IDENTIFICATION SUMMARY")
    print("=" * 60)
    
    total_records = len(df)
    final_reappointments = df['reappointed'].sum()
    
    print(f"Total records processed: {total_records:,}")
    print(f"Original reappointments: {original_count:,}")
    print(f"Additional reappointments identified: {identified_count:,}")
    print(f"Total reappointments (final): {final_reappointments:,}")
    
    # Calculate percentages
    if total_records > 0:
        reappointment_rate = (final_reappointments / total_records) * 100
        print(f"Overall reappointment rate: {reappointment_rate:.1f}%")
    
    # Year-wise breakdown if available
    if 'year' in df.columns and not df['year'].isnull().all():
        print(f"\nReappointments by year:")
        year_stats = df.groupby('year')['reappointed'].agg(['count', 'sum']).reset_index()
        year_stats.columns = ['year', 'total_appointments', 'reappointments']
        year_stats.loc[:, 'reappointment_rate'] = (year_stats['reappointments'] / year_stats['total_appointments']) * 100
        
        for _, row in year_stats.iterrows():
            year = int(row['year']) if not pd.isna(row['year']) else 'Unknown'
            total = int(row['total_appointments'])
            reappts = int(row['reappointments'])
            rate = row['reappointment_rate']
            print(f"  {year}: {reappts:,}/{total:,} ({rate:.1f}%)")
    
    # Top organizations with most reappointments
    if 'org' in df.columns:
        print(f"\nTop 5 organizations by reappointments:")
        org_reappointments = df.loc[df['reappointed'] == True, 'org'].value_counts().head(5)
        
        for org, count in org_reappointments.items():
            print(f"  {org}: {count:,} reappointments")


def main():
    """Main execution function."""
    
    print("Reappointment Marker for NB Government Appointments")
    print("=" * 60)
    
    try:
        # Load the key columns dataset
        df = load_key_columns_data()
        
        # Prepare data for analysis
        df_prepared = prepare_data_for_analysis(df)
        
        # Identify and mark reappointments
        df_updated, original_count, identified_count = identify_reappointments(df_prepared)
        
        # Save the updated dataset
        output_file = save_updated_dataset(df_updated)
        
        # Print comprehensive statistics
        print_reappointment_statistics(df_updated, original_count, identified_count)
        
        print(f"\n✓ Reappointment marking completed successfully!")
        print(f"✓ Output saved to: {output_file}")
        
    except Exception as e:
        print(f"\n❌ Process failed: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()