#!/usr/bin/env python3

"""
Appointment Counts by Organization and Year

This script loads the dataset from step 3, groups by organization and year,
and creates a summary table showing appointment counts for each organization
across all years.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys


def load_marked_data(file_path="scripts/claudesonnet4/version1/execution6/analysis_data/step3_repeats_marked.csv"):
    """
    Load the dataset with marked reappointments from step 3.
    
    Args:
        file_path (str): Path to the marked dataset file
    
    Returns:
        pd.DataFrame: Loaded dataset
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Marked dataset not found at: {file_path}")
        
        df = pd.read_csv(file_path, encoding='utf-8')
        print(f"✓ Loaded marked dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
        
        return df
        
    except Exception as e:
        print(f"ERROR loading marked dataset: {str(e)}")
        raise


def validate_and_prepare_data(df):
    """
    Validate and prepare the dataset for counting analysis.
    
    Args:
        df (pd.DataFrame): Input dataset
    
    Returns:
        pd.DataFrame: Cleaned and validated dataset
    """
    
    print("Validating and preparing data...")
    
    # Check required columns
    required_columns = ['org', 'year']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        raise ValueError(f"Missing required columns: {missing_columns}")
    
    # Create a copy for modifications
    df_clean = df.copy()
    
    # Track initial row count
    initial_rows = len(df_clean)
    
    # Convert year to numeric, handling any errors
    df_clean.loc[:, 'year'] = pd.to_numeric(df_clean['year'], errors='coerce')
    
    # Clean organization names - strip whitespace and handle missing values
    df_clean.loc[:, 'org'] = df_clean['org'].astype(str).str.strip()
    
    # Remove rows with missing critical information
    df_clean = df_clean.dropna(subset=['org', 'year'])
    
    # Remove rows where org is empty string or 'nan'
    df_clean = df_clean.loc[
        (df_clean['org'] != '') & 
        (df_clean['org'] != 'nan') & 
        (df_clean['org'] != 'None')
    ]
    
    # Validate year ranges (reasonable government appointment years)
    valid_year_mask = (df_clean['year'] >= 2000) & (df_clean['year'] <= 2030)
    invalid_years = df_clean.loc[~valid_year_mask, 'year'].value_counts()
    
    if len(invalid_years) > 0:
        print(f"  WARNING: Found {len(invalid_years)} records with invalid years: {invalid_years.index.tolist()}")
        df_clean = df_clean.loc[valid_year_mask]
    
    final_rows = len(df_clean)
    
    if initial_rows != final_rows:
        print(f"  Removed {initial_rows - final_rows:,} rows with invalid data")
    
    print(f"✓ Data validation complete: {final_rows:,} valid records")
    
    return df_clean


def create_counts_summary(df):
    """
    Create a summary table of appointment counts by organization and year.
    
    Args:
        df (pd.DataFrame): Cleaned dataset
    
    Returns:
        pd.DataFrame: Summary table with organizations as rows and years as columns
    """
    
    print("Creating appointment counts summary...")
    
    try:
        # Group by organization and year, count appointments
        counts_df = df.groupby(['org', 'year']).size().reset_index(name='appointment_count')
        
        # Create pivot table with organizations as rows and years as columns
        summary_table = counts_df.pivot(index='org', columns='year', values='appointment_count')
        
        # Fill missing values with 0
        summary_table = summary_table.fillna(0).astype(int)
        
        # Sort columns (years) in ascending order
        summary_table = summary_table.sort_index(axis=1)
        
        # Sort rows by total appointments (descending)
        summary_table.loc[:, 'Total'] = summary_table.sum(axis=1)
        summary_table = summary_table.sort_values('Total', ascending=False)
        
        print(f"✓ Created summary table: {len(summary_table)} organizations × {len(summary_table.columns)-1} years")
        
        return summary_table
        
    except Exception as e:
        print(f"ERROR creating summary table: {str(e)}")
        raise


def save_counts_summary(summary_table, output_dir="scripts/claudesonnet4/version1/execution6/analysis_data"):
    """
    Save the appointment counts summary to CSV file.
    
    Args:
        summary_table (pd.DataFrame): Summary table with counts
        output_dir (str): Directory to save the output file
    """
    
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # Define output file path
    output_file = os.path.join(output_dir, "step4_appointment_counts.csv")
    
    try:
        # Save to CSV
        summary_table.to_csv(output_file, encoding='utf-8')
        print(f"✓ Saved appointment counts to: {output_file}")
        
        return output_file
        
    except Exception as e:
        print(f"ERROR saving file: {str(e)}")
        raise


def validate_counts(summary_table, original_df):
    """
    Validate that the counts are reasonable and match expected totals.
    
    Args:
        summary_table (pd.DataFrame): Summary table with counts
        original_df (pd.DataFrame): Original dataset for validation
    """
    
    print("Validating appointment counts...")
    
    # Check total counts match
    summary_total = summary_table.drop('Total', axis=1).sum().sum()
    original_total = len(original_df)
    
    if summary_total != original_total:
        print(f"  WARNING: Count mismatch - Summary: {summary_total:,}, Original: {original_total:,}")
    else:
        print(f"✓ Count validation passed: {summary_total:,} total appointments")
    
    # Check for unreasonably high counts (potential data quality issues)
    max_count = summary_table.drop('Total', axis=1).max().max()
    if max_count > 1000:
        print(f"  WARNING: Very high appointment count detected: {max_count}")
    
    # Check for organizations with zero appointments across all years
    zero_orgs = summary_table.loc[summary_table['Total'] == 0]
    if len(zero_orgs) > 0:
        print(f"  WARNING: {len(zero_orgs)} organizations with zero appointments")


def print_summary_statistics(summary_table):
    """
    Print detailed statistics about the appointment counts.
    
    Args:
        summary_table (pd.DataFrame): Summary table with counts
    """
    
    print("\n" + "=" * 60)
    print("APPOINTMENT COUNTS SUMMARY")
    print("=" * 60)
    
    # Basic statistics
    total_organizations = len(summary_table)
    year_columns = [col for col in summary_table.columns if col != 'Total']
    years_covered = len(year_columns)
    total_appointments = summary_table['Total'].sum()
    
    print(f"Total organizations: {total_organizations:,}")
    print(f"Years covered: {years_covered} ({min(year_columns):.0f}-{max(year_columns):.0f})")
    print(f"Total appointments: {total_appointments:,}")
    
    # Top organizations by total appointments
    print(f"\nTop 10 organizations by total appointments:")
    top_orgs = summary_table.nlargest(10, 'Total')
    for i, (org, row) in enumerate(top_orgs.iterrows(), 1):
        total = int(row['Total'])
        print(f"  {i:2d}. {org}: {total:,} appointments")
    
    # Year-wise statistics
    print(f"\nAppointments by year:")
    year_totals = summary_table[year_columns].sum().sort_index()
    for year, count in year_totals.items():
        print(f"  {year:.0f}: {count:,} appointments")
    
    # Organizations statistics
    print(f"\nOrganization statistics:")
    org_stats = summary_table['Total'].describe()
    print(f"  Mean appointments per org: {org_stats['mean']:.1f}")
    print(f"  Median appointments per org: {org_stats['50%']:.1f}")
    print(f"  Max appointments (single org): {org_stats['max']:.0f}")
    print(f"  Min appointments (single org): {org_stats['min']:.0f}")
    
    # Show sample of the summary table
    print(f"\nSample of summary table (top 5 organizations):")
    display_table = summary_table.head(5)
    
    # Format for better display
    print(display_table.to_string(max_cols=None, max_rows=None))


def main():
    """Main execution function."""
    
    print("Appointment Counts by Organization and Year")
    print("=" * 60)
    
    try:
        # Load the marked dataset from step 3
        df = load_marked_data()
        
        # Validate and prepare the data
        df_clean = validate_and_prepare_data(df)
        
        # Create the summary table
        summary_table = create_counts_summary(df_clean)
        
        # Validate the counts
        validate_counts(summary_table, df_clean)
        
        # Save the summary table
        output_file = save_counts_summary(summary_table)
        
        # Print comprehensive statistics
        print_summary_statistics(summary_table)
        
        print(f"\n✓ Appointment counts analysis completed successfully!")
        print(f"✓ Output saved to: {output_file}")
        
    except Exception as e:
        print(f"\n❌ Process failed: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()