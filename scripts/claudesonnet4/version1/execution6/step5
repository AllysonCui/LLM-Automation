#!/usr/bin/env python3

"""
Reappointment Counts by Organization and Year

This script loads the dataset from step 3, filters for reappointments,
and creates a summary table showing reappointment counts by organization
and year with proper debugging and validation.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys


def load_marked_data(file_path="scripts/claudesonnet4/version1/execution6/analysis_data/step3_repeats_marked.csv"):
    """
    Load the dataset with marked reappointments from step 3.
    
    Args:
        file_path (str): Path to the marked dataset file
    
    Returns:
        pd.DataFrame: Loaded dataset
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Marked dataset not found at: {file_path}")
        
        df = pd.read_csv(file_path, encoding='utf-8')
        print(f"✓ Loaded marked dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
        
        return df
        
    except Exception as e:
        print(f"ERROR loading marked dataset: {str(e)}")
        raise


def filter_and_prepare_reappointments(df):
    """
    Filter for reappointments and prepare data for analysis.
    
    Args:
        df (pd.DataFrame): Input dataset
    
    Returns:
        pd.DataFrame: Filtered dataset with only reappointments
    """
    
    print("Filtering for reappointments...")
    
    # Check required columns
    required_columns = ['reappointed', 'org', 'year']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        raise ValueError(f"Missing required columns: {missing_columns}")
    
    # Create a copy for modifications
    df_clean = df.copy()
    
    # Convert reappointed to boolean if it's not already
    df_clean.loc[:, 'reappointed'] = df_clean['reappointed'].astype(bool)
    
    # Convert year to integer, handling any errors
    df_clean.loc[:, 'year'] = pd.to_numeric(df_clean['year'], errors='coerce').astype('Int64')
    
    # Clean organization names
    df_clean.loc[:, 'org'] = df_clean['org'].astype(str).str.strip()
    
    # Remove rows with missing critical information
    initial_rows = len(df_clean)
    df_clean = df_clean.dropna(subset=['org', 'year', 'reappointed'])
    
    # Remove rows where org is empty or invalid
    df_clean = df_clean.loc[
        (df_clean['org'] != '') & 
        (df_clean['org'] != 'nan') & 
        (df_clean['org'] != 'None')
    ]
    
    # Validate year ranges
    valid_year_mask = (df_clean['year'] >= 2000) & (df_clean['year'] <= 2030)
    df_clean = df_clean.loc[valid_year_mask]
    
    final_rows = len(df_clean)
    if initial_rows != final_rows:
        print(f"  Removed {initial_rows - final_rows:,} rows with invalid data")
    
    # Filter for reappointments only
    reappointments_df = df_clean.loc[df_clean['reappointed'] == True].copy()
    
    total_appointments = len(df_clean)
    total_reappointments = len(reappointments_df)
    
    print(f"✓ Total valid appointments: {total_appointments:,}")
    print(f"✓ Total reappointments: {total_reappointments:,} ({(total_reappointments/total_appointments)*100:.1f}%)")
    
    return reappointments_df


def create_grouped_data_with_debugging(df):
    """
    Group reappointments by organization and year with debugging output.
    
    Args:
        df (pd.DataFrame): Filtered reappointments dataset
    
    Returns:
        pd.DataFrame: Grouped data with counts
    """
    
    print("Grouping reappointments by organization and year...")
    
    try:
        # Group by organization and year, count reappointments
        grouped_df = df.groupby(['org', 'year']).size().reset_index(name='reappointment_count')
        
        print(f"✓ Created {len(grouped_df):,} organization-year combinations")
        
        # Debug output: Show sample grouped data
        print(f"\nDEBUG: Sample grouped data (first 10 rows):")
        print("-" * 50)
        sample_data = grouped_df.head(10)
        for _, row in sample_data.iterrows():
            org = row['org']
            year = int(row['year'])
            count = int(row['reappointment_count'])
            print(f"  {org} | {year} | {count} reappointments")
        
        # Show top organizations by total reappointments
        org_totals = grouped_df.groupby('org')['reappointment_count'].sum().sort_values(ascending=False)
        print(f"\nDEBUG: Top 5 organizations by total reappointments:")
        for org, count in org_totals.head(5).items():
            print(f"  {org}: {count} total reappointments")
        
        # Show year distribution
        year_totals = grouped_df.groupby('year')['reappointment_count'].sum().sort_index()
        print(f"\nDEBUG: Reappointments by year:")
        for year, count in year_totals.items():
            print(f"  {year}: {count} reappointments")
        
        return grouped_df
        
    except Exception as e:
        print(f"ERROR during grouping: {str(e)}")
        raise


def create_reappointment_pivot_table(grouped_df):
    """
    Create a pivot table with organizations as rows and years as columns.
    
    Args:
        grouped_df (pd.DataFrame): Grouped data with counts
    
    Returns:
        pd.DataFrame: Pivot table with reappointment counts
    """
    
    print("Creating reappointment pivot table...")
    
    try:
        # Create pivot table
        pivot_table = grouped_df.pivot(index='org', columns='year', values='reappointment_count')
        
        # Fill missing values with 0 and convert to integers
        pivot_table = pivot_table.fillna(0).astype(int)
        
        # Ensure year columns are integers (not floats)
        pivot_table.columns = pivot_table.columns.astype(int)
        
        # Sort columns (years) in ascending order
        pivot_table = pivot_table.sort_index(axis=1)
        
        # Add total column
        pivot_table.loc[:, 'Total'] = pivot_table.sum(axis=1)
        
        # Sort rows by total reappointments (descending)
        pivot_table = pivot_table.sort_values('Total', ascending=False)
        
        print(f"✓ Created pivot table: {len(pivot_table)} organizations × {len(pivot_table.columns)-1} years")
        
        # Validation: Check that pivot table contains actual counts
        total_reappointments = pivot_table['Total'].sum()
        original_total = grouped_df['reappointment_count'].sum()
        
        if total_reappointments != original_total:
            print(f"  WARNING: Count mismatch - Pivot: {total_reappointments}, Original: {original_total}")
        else:
            print(f"✓ Pivot table validation passed: {total_reappointments:,} total reappointments")
        
        # Check for organizations with actual reappointments (not all zeros)
        orgs_with_reappointments = (pivot_table['Total'] > 0).sum()
        print(f"✓ Organizations with reappointments: {orgs_with_reappointments:,}/{len(pivot_table):,}")
        
        return pivot_table
        
    except Exception as e:
        print(f"ERROR creating pivot table: {str(e)}")
        raise


def save_reappointment_counts(pivot_table, output_dir="scripts/claudesonnet4/version1/execution6/analysis_data"):
    """
    Save the reappointment counts summary to CSV file.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with reappointment counts
        output_dir (str): Directory to save the output file
    """
    
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # Define output file path
    output_file = os.path.join(output_dir, "step5_reappointment_counts.csv")
    
    try:
        # Save to CSV
        pivot_table.to_csv(output_file, encoding='utf-8')
        print(f"✓ Saved reappointment counts to: {output_file}")
        
        return output_file
        
    except Exception as e:
        print(f"ERROR saving file: {str(e)}")
        raise


def print_reappointment_statistics(pivot_table):
    """
    Print detailed statistics about reappointment patterns.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with reappointment counts
    """
    
    print("\n" + "=" * 60)
    print("REAPPOINTMENT PATTERNS SUMMARY")
    print("=" * 60)
    
    # Basic statistics
    total_organizations = len(pivot_table)
    year_columns = [col for col in pivot_table.columns if col != 'Total']
    years_covered = len(year_columns)
    total_reappointments = pivot_table['Total'].sum()
    
    print(f"Total organizations analyzed: {total_organizations:,}")
    print(f"Years covered: {years_covered} ({min(year_columns)}-{max(year_columns)})")
    print(f"Total reappointments: {total_reappointments:,}")
    
    # Organizations with reappointments
    orgs_with_reappointments = (pivot_table['Total'] > 0).sum()
    orgs_without_reappointments = (pivot_table['Total'] == 0).sum()
    
    print(f"Organizations with reappointments: {orgs_with_reappointments:,} ({(orgs_with_reappointments/total_organizations)*100:.1f}%)")
    print(f"Organizations without reappointments: {orgs_without_reappointments:,} ({(orgs_without_reappointments/total_organizations)*100:.1f}%)")
    
    # Top organizations by reappointments
    print(f"\nTop 10 organizations by total reappointments:")
    top_orgs = pivot_table.loc[pivot_table['Total'] > 0].nlargest(10, 'Total')
    for i, (org, row) in enumerate(top_orgs.iterrows(), 1):
        total = int(row['Total'])
        print(f"  {i:2d}. {org}: {total:,} reappointments")
    
    # Year-wise reappointment patterns
    print(f"\nReappointments by year:")
    year_totals = pivot_table[year_columns].sum().sort_index()
    for year, count in year_totals.items():
        print(f"  {year}: {count:,} reappointments")
    
    # Reappointment statistics
    print(f"\nReappointment statistics (organizations with reappointments only):")
    active_orgs = pivot_table.loc[pivot_table['Total'] > 0, 'Total']
    if len(active_orgs) > 0:
        stats = active_orgs.describe()
        print(f"  Mean reappointments per active org: {stats['mean']:.1f}")
        print(f"  Median reappointments per active org: {stats['50%']:.1f}")
        print(f"  Max reappointments (single org): {stats['max']:.0f}")
        print(f"  Min reappointments (single org): {stats['min']:.0f}")
    
    # Show sample of the pivot table (only organizations with reappointments)
    print(f"\nSample of reappointment counts (top 5 organizations with reappointments):")
    sample_table = pivot_table.loc[pivot_table['Total'] > 0].head(5)
    
    if len(sample_table) > 0:
        print(sample_table.to_string(max_cols=None, max_rows=None))
    else:
        print("  No organizations with reappointments found.")


def main():
    """Main execution function."""
    
    print("Reappointment Counts by Organization and Year")
    print("=" * 60)
    
    try:
        # Load the marked dataset from step 3
        df = load_marked_data()
        
        # Filter for reappointments and prepare data
        reappointments_df = filter_and_prepare_reappointments(df)
        
        # Create grouped data with debugging output
        grouped_df = create_grouped_data_with_debugging(reappointments_df)
        
        # Create pivot table
        pivot_table = create_reappointment_pivot_table(grouped_df)
        
        # Save the pivot table
        output_file = save_reappointment_counts(pivot_table)
        
        # Print comprehensive statistics
        print_reappointment_statistics(pivot_table)
        
        print(f"\n✓ Reappointment counts analysis completed successfully!")
        print(f"✓ Output saved to: {output_file}")
        
    except Exception as e:
        print(f"\n❌ Process failed: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()