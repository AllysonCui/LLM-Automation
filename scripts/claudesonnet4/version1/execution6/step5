#!/usr/bin/env python3

"""
Reappointment Counts Creator for New Brunswick Government Appointments

This script analyzes reappointment patterns by creating a summary table of
reappointment counts by organization and year. It filters for records marked
as reappointments and creates a pivot table similar to the employee counts.

Output Format:
- Rows: Organizations
- Columns: Years (2013-2024)
- Values: Number of reappointments
- Missing values handled as 0

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys


def load_marked_data(file_path="scripts/claudesonnet4/version1/execution6/analysis_data/step3_repeats_marked.csv"):
    """
    Load the dataset with marked reappointments from step 3.
    
    Args:
        file_path (str): Path to the marked dataset file
    
    Returns:
        pd.DataFrame: Loaded dataset
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Marked dataset not found at: {file_path}")
        
        df = pd.read_csv(file_path, encoding='utf-8')
        print(f"✓ Loaded marked dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
        
        # Validate required columns
        required_cols = ['org', 'year', 'reappointed']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            raise ValueError(f"Missing required columns: {missing_cols}")
        
        return df
        
    except Exception as e:
        print(f"ERROR loading marked dataset: {str(e)}")
        raise


def validate_and_clean_reappointment_data(df):
    """
    Validate and clean the data for reappointment analysis.
    
    Args:
        df (pd.DataFrame): Input dataset
    
    Returns:
        pd.DataFrame: Cleaned dataset
        dict: Data quality statistics
    """
    
    print("\nValidating and cleaning reappointment data...")
    print("-" * 45)
    
    stats = {
        'original_rows': len(df),
        'missing_org': 0,
        'missing_year': 0,
        'missing_reappointed': 0,
        'invalid_year': 0,
        'cleaned_rows': 0,
        'total_reappointments': 0
    }
    
    df_clean = df.copy()
    
    # Handle reappointed column - convert to boolean
    print(f"  • Processing reappointed column...")
    
    # Check for missing reappointed values
    missing_reappointed_mask = df_clean['reappointed'].isnull()
    stats['missing_reappointed'] = missing_reappointed_mask.sum()
    
    if stats['missing_reappointed'] > 0:
        print(f"    - Found {stats['missing_reappointed']:,} records with missing reappointed status")
        # Assume missing reappointed values are False
        df_clean.loc[missing_reappointed_mask, 'reappointed'] = False
    
    # Convert reappointed to boolean
    if df_clean['reappointed'].dtype == 'object':
        df_clean['reappointed'] = df_clean['reappointed'].astype(str).str.lower()
        df_clean['reappointed'] = df_clean['reappointed'].isin(['true', '1', 'yes', 'y'])
    else:
        df_clean['reappointed'] = df_clean['reappointed'].astype(bool)
    
    # Count total reappointments before filtering
    stats['total_reappointments'] = df_clean['reappointed'].sum()
    print(f"    - Total reappointments found: {stats['total_reappointments']:,}")
    
    # Check for missing organizations
    missing_org_mask = df_clean['org'].isnull() | (df_clean['org'].astype(str).str.strip() == '')
    stats['missing_org'] = missing_org_mask.sum()
    
    if stats['missing_org'] > 0:
        print(f"  • Found {stats['missing_org']:,} records with missing organization")
        # Replace missing org with 'Unknown Organization'
        df_clean.loc[missing_org_mask, 'org'] = 'Unknown Organization'
    
    # Check for missing years
    missing_year_mask = df_clean['year'].isnull()
    stats['missing_year'] = missing_year_mask.sum()
    
    if stats['missing_year'] > 0:
        print(f"  • Found {stats['missing_year']:,} records with missing year")
        # Remove records with missing years
        df_clean = df_clean[~missing_year_mask].copy()
    
    # Check for invalid years (outside reasonable range)
    if len(df_clean) > 0:
        df_clean['year'] = pd.to_numeric(df_clean['year'], errors='coerce')
        
        # Define reasonable year range (2010-2030)
        min_year, max_year = 2010, 2030
        invalid_year_mask = (df_clean['year'] < min_year) | (df_clean['year'] > max_year) | df_clean['year'].isnull()
        stats['invalid_year'] = invalid_year_mask.sum()
        
        if stats['invalid_year'] > 0:
            print(f"  • Found {stats['invalid_year']:,} records with invalid years")
            # Remove records with invalid years
            df_clean = df_clean[~invalid_year_mask].copy()
        
        # Convert year to integer
        df_clean['year'] = df_clean['year'].astype(int)
    
    # Clean organization names
    df_clean['org'] = df_clean['org'].astype(str).str.strip()
    
    stats['cleaned_rows'] = len(df_clean)
    
    print(f"  • Data cleaning complete")
    print(f"  • Retained {stats['cleaned_rows']:,} of {stats['original_rows']:,} records")
    
    return df_clean, stats


def filter_and_debug_reappointments(df):
    """
    Filter for reappointments and show debugging information.
    
    Args:
        df (pd.DataFrame): Cleaned dataset
    
    Returns:
        pd.DataFrame: Filtered dataset with only reappointments
    """
    
    print("\nFiltering for reappointments...")
    print("-" * 32)
    
    # Filter for reappointments only
    reappointments_df = df[df['reappointed'] == True].copy()
    
    print(f"  • Total records: {len(df):,}")
    print(f"  • Reappointments: {len(reappointments_df):,}")
    print(f"  • Reappointment rate: {(len(reappointments_df)/len(df)*100):.1f}%")
    
    if len(reappointments_df) == 0:
        print("  ⚠️  WARNING: No reappointments found in dataset!")
        return reappointments_df
    
    # Show sample of reappointments data
    print(f"\nSample reappointments data:")
    sample_cols = ['name', 'org', 'year', 'reappointed'] if 'name' in reappointments_df.columns else ['org', 'year', 'reappointed']
    sample_data = reappointments_df[sample_cols].head(5)
    print(sample_data.to_string(index=False))
    
    # Show breakdown by year
    if len(reappointments_df) > 0:
        year_breakdown = reappointments_df['year'].value_counts().sort_index()
        print(f"\nReappointments by year:")
        for year, count in year_breakdown.items():
            print(f"  {year}: {count:,}")
    
    return reappointments_df


def create_reappointment_counts_table(df):
    """
    Create a summary table of reappointment counts by organization and year.
    
    Args:
        df (pd.DataFrame): Dataset filtered for reappointments
    
    Returns:
        pd.DataFrame: Pivot table with organizations as rows, years as columns
    """
    
    print("\nCreating reappointment counts table...")
    print("-" * 40)
    
    if len(df) == 0:
        print("  • No reappointments to process - creating empty table")
        # Create empty DataFrame with proper structure
        empty_df = pd.DataFrame(columns=['org', 'year', 'count'])
        pivot_table = empty_df.pivot(index='org', columns='year', values='count')
        pivot_table = pivot_table.fillna(0).astype(int)
        return pivot_table
    
    # Group by organization and year, count reappointments
    counts_df = df.groupby(['org', 'year']).size().reset_index(name='count')
    
    print(f"  • Generated counts for {len(counts_df):,} org-year combinations")
    
    # Show sample of grouped data for debugging
    print(f"\nSample grouped data before pivot:")
    sample_grouped = counts_df.head(10)
    print(sample_grouped.to_string(index=False))
    
    if len(counts_df) > 10:
        print(f"  ... and {len(counts_df) - 10} more combinations")
    
    # Create pivot table
    pivot_table = counts_df.pivot(index='org', columns='year', values='count')
    
    # Fill missing values with 0 and convert to int
    pivot_table = pivot_table.fillna(0).astype(int)
    
    # Ensure year columns are integers (not floats)
    pivot_table.columns = pivot_table.columns.astype(int)
    
    # Sort columns (years) in ascending order
    pivot_table = pivot_table.reindex(sorted(pivot_table.columns), axis=1)
    
    # Add total column and sort rows by total reappointments (descending)
    pivot_table['Total'] = pivot_table.sum(axis=1)
    pivot_table = pivot_table.sort_values('Total', ascending=False)
    
    print(f"  • Created pivot table: {pivot_table.shape[0]} organizations × {pivot_table.shape[1]-1} years")
    
    return pivot_table


def validate_reappointment_counts(df_original, pivot_table):
    """
    Validate that the reappointment counts are accurate.
    
    Args:
        df_original (pd.DataFrame): Original filtered reappointments dataset
        pivot_table (pd.DataFrame): Pivot table with counts
    
    Returns:
        dict: Validation results
    """
    
    print("\nValidating reappointment counts...")
    print("-" * 35)
    
    validation = {
        'total_reappointments_original': len(df_original),
        'total_reappointments_pivot': 0,
        'match': False,
        'non_zero_counts': 0,
        'organizations_with_reappointments': 0,
        'max_reappointments_per_org_year': 0,
        'years_with_reappointments': 0
    }
    
    if len(pivot_table) > 0:
        # Calculate total from pivot table (excluding 'Total' column)
        year_columns = [col for col in pivot_table.columns if col != 'Total']
        validation['total_reappointments_pivot'] = pivot_table[year_columns].sum().sum()
        
        # Count non-zero entries
        validation['non_zero_counts'] = (pivot_table[year_columns] > 0).sum().sum()
        
        # Count organizations with any reappointments
        validation['organizations_with_reappointments'] = (pivot_table['Total'] > 0).sum()
        
        # Find maximum reappointments per org-year
        validation['max_reappointments_per_org_year'] = pivot_table[year_columns].max().max()
        
        # Count years with any reappointments
        validation['years_with_reappointments'] = (pivot_table[year_columns].sum() > 0).sum()
    
    # Check if totals match
    validation['match'] = validation['total_reappointments_original'] == validation['total_reappointments_pivot']
    
    print(f"  • Original reappointments: {validation['total_reappointments_original']:,}")
    print(f"  • Pivot table sum: {validation['total_reappointments_pivot']:,}")
    print(f"  • Totals match: {validation['match']}")
    print(f"  • Non-zero counts: {validation['non_zero_counts']:,}")
    print(f"  • Organizations with reappointments: {validation['organizations_with_reappointments']:,}")
    print(f"  • Years with reappointments: {validation['years_with_reappointments']:,}")
    print(f"  • Max reappointments per org-year: {validation['max_reappointments_per_org_year']:,}")
    
    if not validation['match']:
        print("  ⚠️  WARNING: Total counts don't match - possible data issue")
    
    if validation['non_zero_counts'] == 0 and validation['total_reappointments_original'] > 0:
        print("  ⚠️  WARNING: Pivot table contains only zeros despite having reappointment data")
    
    return validation


def save_reappointment_counts_table(pivot_table, output_dir="scripts/claudesonnet4/version1/execution6/analysis_data"):
    """
    Save the reappointment counts table to CSV file.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with reappointment counts
        output_dir (str): Directory to save the output file
    """
    
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # Define output file path
    output_file = os.path.join(output_dir, "step5_reappointment_counts.csv")
    
    try:
        # Save to CSV with organization as index
        pivot_table.to_csv(output_file, encoding='utf-8')
        print(f"✓ Saved reappointment counts table to: {output_file}")
        
    except Exception as e:
        print(f"ERROR saving file: {str(e)}")
        raise


def print_reappointment_summary_statistics(pivot_table):
    """
    Print summary statistics about reappointment patterns.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with reappointment counts
    """
    
    print("\n" + "=" * 70)
    print("REAPPOINTMENT PATTERNS SUMMARY")
    print("=" * 70)
    
    if len(pivot_table) == 0:
        print("No reappointments found in the dataset.")
        return
    
    year_columns = [col for col in pivot_table.columns if col != 'Total']
    
    # Overall statistics
    total_reappointments = pivot_table['Total'].sum()
    total_organizations = len(pivot_table)
    orgs_with_reappointments = (pivot_table['Total'] > 0).sum()
    
    print(f"Total reappointments: {total_reappointments:,}")
    print(f"Organizations analyzed: {total_organizations:,}")
    print(f"Organizations with reappointments: {orgs_with_reappointments:,}")
    print(f"Years covered: {min(year_columns) if year_columns else 'N/A'}-{max(year_columns) if year_columns else 'N/A'}")
    
    if orgs_with_reappointments > 0:
        print(f"Average reappointments per organization (with reappointments): {total_reappointments/orgs_with_reappointments:.1f}")
    
    # Top organizations by reappointments
    top_orgs = pivot_table[pivot_table['Total'] > 0].head(10)
    
    if len(top_orgs) > 0:
        print(f"\nTop organizations by total reappointments:")
        for i, (org, row) in enumerate(top_orgs.iterrows(), 1):
            print(f"  {i:2}. {org[:60]:<60} {row['Total']:>4,}")
    
    # Year-wise reappointment totals
    if year_columns:
        print(f"\nReappointments by year:")
        year_totals = pivot_table[year_columns].sum().sort_index()
        
        for year, total in year_totals.items():
            if total > 0:  # Only show years with reappointments
                print(f"  {year}: {total:,}")
    
    # Organizations with consistent reappointment patterns
    if len(year_columns) >= 3 and len(top_orgs) > 0:
        print(f"\nOrganizations with reappointments in multiple years:")
        multi_year_orgs = pivot_table[(pivot_table[year_columns] > 0).sum(axis=1) >= 3]
        
        for i, (org, row) in enumerate(multi_year_orgs.head(5).iterrows(), 1):
            years_with_reappointments = (row[year_columns] > 0).sum()
            print(f"  {i}. {org[:50]:<50} ({years_with_reappointments} years)")
    
    # Display sample of the pivot table
    print(f"\nSample of reappointment counts table (top 5 organizations):")
    if len(pivot_table) > 0:
        sample_table = pivot_table.head(5)
        
        # Format for display - show Total and up to 8 years
        display_cols = ['Total'] + [col for col in year_columns if col in sample_table.columns][:8]
        sample_display = sample_table[display_cols]
        
        print(sample_display.to_string())
        
        if len(year_columns) > 8:
            print(f"  ... and {len(year_columns) - 8} more year columns")
    else:
        print("  No data to display")


def main():
    """Main execution function."""
    
    print("Reappointment Counts Creator for NB Government Appointments")
    print("=" * 65)
    
    try:
        # Load the marked dataset
        df = load_marked_data()
        
        # Validate and clean the data
        df_clean, quality_stats = validate_and_clean_reappointment_data(df)
        
        # Filter for reappointments and show debugging info
        reappointments_df = filter_and_debug_reappointments(df_clean)
        
        # Create reappointment counts table
        pivot_table = create_reappointment_counts_table(reappointments_df)
        
        # Validate reappointment counts
        validation_results = validate_reappointment_counts(reappointments_df, pivot_table)
        
        # Save the reappointment counts table
        save_reappointment_counts_table(pivot_table)
        
        # Print summary statistics
        print_reappointment_summary_statistics(pivot_table)
        
        print(f"\n✓ Reappointment counts creation completed successfully!")
        
    except Exception as e:
        print(f"\n❌ Process failed: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()