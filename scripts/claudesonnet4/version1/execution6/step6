#!/usr/bin/env python3

"""
Reappointment Rates Calculator

This script loads appointment counts and reappointment counts, merges them,
and calculates reappointment rates for each organization-year combination.
Handles division by zero and missing data cases appropriately.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys


def load_appointment_counts(file_path="scripts/claudesonnet4/version1/execution6/analysis_data/step4_appointment_counts.csv"):
    """
    Load the appointment counts dataset from step 4.
    
    Args:
        file_path (str): Path to the appointment counts file
    
    Returns:
        pd.DataFrame: Appointment counts data in long format
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Appointment counts file not found at: {file_path}")
        
        # Read the CSV with org as index
        df_wide = pd.read_csv(file_path, encoding='utf-8', index_col=0)
        print(f"✓ Loaded appointment counts: {len(df_wide)} organizations × {len(df_wide.columns)} columns")
        
        # Remove 'Total' column if it exists
        if 'Total' in df_wide.columns:
            df_wide = df_wide.drop('Total', axis=1)
        
        # Convert to long format
        df_long = df_wide.reset_index().melt(
            id_vars=['org'], 
            var_name='year', 
            value_name='total_appointments'
        )
        
        # Convert year to integer and total_appointments to integer
        df_long.loc[:, 'year'] = df_long['year'].astype(int)
        df_long.loc[:, 'total_appointments'] = df_long['total_appointments'].astype(int)
        
        print(f"✓ Converted to long format: {len(df_long):,} org-year combinations")
        
        return df_long
        
    except Exception as e:
        print(f"ERROR loading appointment counts: {str(e)}")
        raise


def load_reappointment_counts(file_path="scripts/claudesonnet4/version1/execution6/analysis_data/step5_reappointment_counts.csv"):
    """
    Load the reappointment counts dataset from step 5.
    
    Args:
        file_path (str): Path to the reappointment counts file
    
    Returns:
        pd.DataFrame: Reappointment counts data in long format
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Reappointment counts file not found at: {file_path}")
        
        # Read the CSV with org as index
        df_wide = pd.read_csv(file_path, encoding='utf-8', index_col=0)
        print(f"✓ Loaded reappointment counts: {len(df_wide)} organizations × {len(df_wide.columns)} columns")
        
        # Remove 'Total' column if it exists
        if 'Total' in df_wide.columns:
            df_wide = df_wide.drop('Total', axis=1)
        
        # Convert to long format
        df_long = df_wide.reset_index().melt(
            id_vars=['org'], 
            var_name='year', 
            value_name='reappointments'
        )
        
        # Convert year to integer and reappointments to integer
        df_long.loc[:, 'year'] = df_long['year'].astype(int)
        df_long.loc[:, 'reappointments'] = df_long['reappointments'].astype(int)
        
        print(f"✓ Converted to long format: {len(df_long):,} org-year combinations")
        
        return df_long
        
    except Exception as e:
        print(f"ERROR loading reappointment counts: {str(e)}")
        raise


def merge_datasets(appointment_df, reappointment_df):
    """
    Merge appointment counts and reappointment counts datasets.
    
    Args:
        appointment_df (pd.DataFrame): Appointment counts in long format
        reappointment_df (pd.DataFrame): Reappointment counts in long format
    
    Returns:
        pd.DataFrame: Merged dataset
    """
    
    print("Merging appointment and reappointment datasets...")
    
    try:
        # Merge on org and year using left join (keep all appointment records)
        merged_df = appointment_df.merge(
            reappointment_df, 
            on=['org', 'year'], 
            how='left'
        )
        
        # Fill missing reappointments with 0
        merged_df.loc[:, 'reappointments'] = merged_df['reappointments'].fillna(0).astype(int)
        
        print(f"✓ Merged datasets: {len(merged_df):,} org-year combinations")
        
        # Validation checks
        appointment_total = appointment_df['total_appointments'].sum()
        reappointment_total = reappointment_df['reappointments'].sum()
        merged_appointment_total = merged_df['total_appointments'].sum()
        merged_reappointment_total = merged_df['reappointments'].sum()
        
        print(f"  Appointment totals - Original: {appointment_total:,}, Merged: {merged_appointment_total:,}")
        print(f"  Reappointment totals - Original: {reappointment_total:,}, Merged: {merged_reappointment_total:,}")
        
        if appointment_total != merged_appointment_total:
            print(f"  WARNING: Appointment count mismatch during merge")
        
        if reappointment_total != merged_reappointment_total:
            print(f"  WARNING: Reappointment count mismatch during merge")
        
        return merged_df
        
    except Exception as e:
        print(f"ERROR merging datasets: {str(e)}")
        raise


def calculate_reappointment_rates(merged_df):
    """
    Calculate reappointment rates with proper handling of edge cases.
    
    Args:
        merged_df (pd.DataFrame): Merged dataset
    
    Returns:
        pd.DataFrame: Dataset with reappointment rates calculated
    """
    
    print("Calculating reappointment rates...")
    
    # Create a copy for modifications
    df_rates = merged_df.copy()
    
    # Handle division by zero cases
    zero_appointments = (df_rates['total_appointments'] == 0).sum()
    if zero_appointments > 0:
        print(f"  Found {zero_appointments:,} org-year combinations with zero appointments")
    
    # Calculate reappointment rate, handling division by zero
    df_rates.loc[:, 'reappointment_rate'] = np.where(
        df_rates['total_appointments'] > 0,
        df_rates['reappointments'] / df_rates['total_appointments'],
        0.0  # Set rate to 0 when no appointments
    )
    
    # Data validation
    total_combinations = len(df_rates)
    valid_rates = (~df_rates['reappointment_rate'].isna()).sum()
    
    print(f"✓ Calculated rates for {valid_rates:,}/{total_combinations:,} combinations")
    
    # Check for any impossible rates (> 1.0)
    impossible_rates = (df_rates['reappointment_rate'] > 1.0).sum()
    if impossible_rates > 0:
        print(f"  WARNING: Found {impossible_rates:,} combinations with reappointment rate > 100%")
        
        # Show examples of impossible rates
        high_rates = df_rates.loc[df_rates['reappointment_rate'] > 1.0].head(5)
        print("  Examples of high rates:")
        for _, row in high_rates.iterrows():
            org = row['org']
            year = int(row['year'])
            appointments = int(row['total_appointments'])
            reappts = int(row['reappointments'])
            rate = row['reappointment_rate']
            print(f"    {org} ({year}): {reappts}/{appointments} = {rate:.2f}")
    
    # Summary statistics
    print(f"  Reappointment rate statistics:")
    rate_stats = df_rates['reappointment_rate'].describe()
    print(f"    Mean: {rate_stats['mean']:.3f} ({rate_stats['mean']*100:.1f}%)")
    print(f"    Median: {rate_stats['50%']:.3f} ({rate_stats['50%']*100:.1f}%)")
    print(f"    Max: {rate_stats['max']:.3f} ({rate_stats['max']*100:.1f}%)")
    
    return df_rates


def save_reappointment_rates(df, output_dir="scripts/claudesonnet4/version1/execution6/analysis_data"):
    """
    Save the reappointment rates dataset to CSV file.
    
    Args:
        df (pd.DataFrame): Dataset with reappointment rates
        output_dir (str): Directory to save the output file
    """
    
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # Define output file path
    output_file = os.path.join(output_dir, "step6_reappointment_rates.csv")
    
    try:
        # Reorder columns for better readability
        column_order = ['org', 'year', 'total_appointments', 'reappointments', 'reappointment_rate']
        df_output = df[column_order].copy()
        
        # Sort by organization and year for better readability
        df_output = df_output.sort_values(['org', 'year'])
        
        # Save to CSV
        df_output.to_csv(output_file, index=False, encoding='utf-8')
        print(f"✓ Saved reappointment rates to: {output_file}")
        
        return output_file
        
    except Exception as e:
        print(f"ERROR saving file: {str(e)}")
        raise


def analyze_highest_reappointment_rates(df):
    """
    Analyze and print organizations with the highest average reappointment rates.
    
    Args:
        df (pd.DataFrame): Dataset with reappointment rates
    """
    
    print("\n" + "=" * 60)
    print("REAPPOINTMENT RATES ANALYSIS")
    print("=" * 60)
    
    # Basic statistics
    total_combinations = len(df)
    total_organizations = df['org'].nunique()
    total_years = df['year'].nunique()
    
    print(f"Total org-year combinations: {total_combinations:,}")
    print(f"Unique organizations: {total_organizations:,}")
    print(f"Years covered: {total_years} ({df['year'].min()}-{df['year'].max()})")
    
    # Overall statistics
    total_appointments = df['total_appointments'].sum()
    total_reappointments = df['reappointments'].sum()
    overall_rate = total_reappointments / total_appointments if total_appointments > 0 else 0
    
    print(f"Overall totals: {total_reappointments:,} reappointments / {total_appointments:,} appointments = {overall_rate:.3f} ({overall_rate*100:.1f}%)")
    
    # Calculate average reappointment rates by organization
    # Only include organizations with at least some appointments
    org_stats = df.loc[df['total_appointments'] > 0].groupby('org').agg({
        'total_appointments': 'sum',
        'reappointments': 'sum',
        'reappointment_rate': 'mean',
        'year': 'count'
    }).rename(columns={'year': 'years_active'})
    
    # Calculate overall rate for each organization
    org_stats.loc[:, 'overall_rate'] = org_stats['reappointments'] / org_stats['total_appointments']
    
    # Filter organizations with meaningful data (at least 5 total appointments and 2+ years)
    significant_orgs = org_stats.loc[
        (org_stats['total_appointments'] >= 5) & 
        (org_stats['years_active'] >= 2)
    ].copy()
    
    print(f"\nOrganizations with significant data: {len(significant_orgs):,} (≥5 appointments, ≥2 years)")
    
    if len(significant_orgs) > 0:
        # Top organizations by average reappointment rate
        print(f"\nTop 10 organizations by average reappointment rate:")
        top_by_avg = significant_orgs.nlargest(10, 'reappointment_rate')
        
        for i, (org, row) in enumerate(top_by_avg.iterrows(), 1):
            avg_rate = row['reappointment_rate']
            overall_rate = row['overall_rate']
            appointments = int(row['total_appointments'])
            reappts = int(row['reappointments'])
            years = int(row['years_active'])
            
            print(f"  {i:2d}. {org}")
            print(f"      Avg rate: {avg_rate:.3f} ({avg_rate*100:.1f}%), Overall: {overall_rate:.3f} ({overall_rate*100:.1f}%)")
            print(f"      Total: {reappts}/{appointments} appointments over {years} years")
        
        # Top organizations by overall reappointment rate
        print(f"\nTop 10 organizations by overall reappointment rate:")
        top_by_overall = significant_orgs.nlargest(10, 'overall_rate')
        
        for i, (org, row) in enumerate(top_by_overall.iterrows(), 1):
            overall_rate = row['overall_rate']
            appointments = int(row['total_appointments'])
            reappts = int(row['reappointments'])
            years = int(row['years_active'])
            
            print(f"  {i:2d}. {org}: {overall_rate:.3f} ({overall_rate*100:.1f}%)")
            print(f"      {reappts}/{appointments} appointments over {years} years")
    
    # Year-wise trends
    print(f"\nReappointment rate trends by year:")
    year_trends = df.groupby('year').agg({
        'total_appointments': 'sum',
        'reappointments': 'sum'
    })
    year_trends.loc[:, 'rate'] = year_trends['reappointments'] / year_trends['total_appointments']
    
    for year, row in year_trends.iterrows():
        rate = row['rate']
        appointments = int(row['total_appointments'])
        reappts = int(row['reappointments'])
        print(f"  {year}: {rate:.3f} ({rate*100:.1f}%) - {reappts:,}/{appointments:,}")


def main():
    """Main execution function."""
    
    print("Reappointment Rates Calculator")
    print("=" * 60)
    
    try:
        # Load both datasets
        appointment_df = load_appointment_counts()
        reappointment_df = load_reappointment_counts()
        
        # Merge the datasets
        merged_df = merge_datasets(appointment_df, reappointment_df)
        
        # Calculate reappointment rates
        rates_df = calculate_reappointment_rates(merged_df)
        
        # Save the results
        output_file = save_reappointment_rates(rates_df)
        
        # Analyze and print highest reappointment rates
        analyze_highest_reappointment_rates(rates_df)
        
        print(f"\n✓ Reappointment rates calculation completed successfully!")
        print(f"✓ Output saved to: {output_file}")
        
    except Exception as e:
        print(f"\n❌ Process failed: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()