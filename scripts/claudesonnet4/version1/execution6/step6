#!/usr/bin/env python3

"""
Reappointment Rates Calculator for New Brunswick Government Appointments

This script merges employee counts and reappointment counts to calculate
reappointment rates for each organization-year combination. It handles
edge cases like division by zero and missing data appropriately.

Formula: reappointment_rate = reappointments / total_employees

Output Format:
- org: Organization name
- year: Year
- total_employees: Total appointments for that org/year
- reappointments: Number of reappointments for that org/year
- reappointment_rate: Percentage (0-100)

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys


def load_employee_counts(file_path="scripts/claudesonnet4/version1/execution6/analysis_data/step4_employee_counts.csv"):
    """
    Load the employee counts dataset from step 4.
    
    Args:
        file_path (str): Path to the employee counts file
    
    Returns:
        pd.DataFrame: Employee counts pivot table
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Employee counts file not found at: {file_path}")
        
        df = pd.read_csv(file_path, encoding='utf-8', index_col=0)
        print(f"✓ Loaded employee counts: {df.shape[0]} organizations × {df.shape[1]} columns")
        
        # Remove 'Total' column if it exists for processing
        if 'Total' in df.columns:
            df = df.drop('Total', axis=1)
            print(f"  • Removed 'Total' column for processing")
        
        return df
        
    except Exception as e:
        print(f"ERROR loading employee counts: {str(e)}")
        raise


def load_reappointment_counts(file_path="scripts/claudesonnet4/version1/execution6/analysis_data/step5_reappointment_counts.csv"):
    """
    Load the reappointment counts dataset from step 5.
    
    Args:
        file_path (str): Path to the reappointment counts file
    
    Returns:
        pd.DataFrame: Reappointment counts pivot table
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Reappointment counts file not found at: {file_path}")
        
        df = pd.read_csv(file_path, encoding='utf-8', index_col=0)
        print(f"✓ Loaded reappointment counts: {df.shape[0]} organizations × {df.shape[1]} columns")
        
        # Remove 'Total' column if it exists for processing
        if 'Total' in df.columns:
            df = df.drop('Total', axis=1)
            print(f"  • Removed 'Total' column for processing")
        
        return df
        
    except Exception as e:
        print(f"ERROR loading reappointment counts: {str(e)}")
        raise


def validate_and_align_datasets(employee_df, reappointment_df):
    """
    Validate and align the two datasets for proper merging.
    
    Args:
        employee_df (pd.DataFrame): Employee counts pivot table
        reappointment_df (pd.DataFrame): Reappointment counts pivot table
    
    Returns:
        tuple: (aligned_employee_df, aligned_reappointment_df, validation_stats)
    """
    
    print("\nValidating and aligning datasets...")
    print("-" * 37)
    
    validation_stats = {
        'employee_orgs': len(employee_df),
        'reappointment_orgs': len(reappointment_df),
        'employee_years': len(employee_df.columns),
        'reappointment_years': len(reappointment_df.columns),
        'common_orgs': 0,
        'common_years': 0,
        'employee_only_orgs': 0,
        'reappointment_only_orgs': 0
    }
    
    # Convert column names to integers to ensure consistency
    employee_df.columns = employee_df.columns.astype(int)
    reappointment_df.columns = reappointment_df.columns.astype(int)
    
    # Find common and unique organizations
    employee_orgs = set(employee_df.index)
    reappointment_orgs = set(reappointment_df.index)
    
    common_orgs = employee_orgs.intersection(reappointment_orgs)
    employee_only_orgs = employee_orgs - reappointment_orgs
    reappointment_only_orgs = reappointment_orgs - employee_orgs
    
    validation_stats['common_orgs'] = len(common_orgs)
    validation_stats['employee_only_orgs'] = len(employee_only_orgs)
    validation_stats['reappointment_only_orgs'] = len(reappointment_only_orgs)
    
    # Find common and unique years
    employee_years = set(employee_df.columns)
    reappointment_years = set(reappointment_df.columns)
    
    common_years = employee_years.intersection(reappointment_years)
    all_years = employee_years.union(reappointment_years)
    
    validation_stats['common_years'] = len(common_years)
    
    print(f"  • Employee counts: {validation_stats['employee_orgs']} orgs, {validation_stats['employee_years']} years")
    print(f"  • Reappointment counts: {validation_stats['reappointment_orgs']} orgs, {validation_stats['reappointment_years']} years")
    print(f"  • Common organizations: {validation_stats['common_orgs']}")
    print(f"  • Common years: {validation_stats['common_years']}")
    print(f"  • Employee-only orgs: {validation_stats['employee_only_orgs']}")
    print(f"  • Reappointment-only orgs: {validation_stats['reappointment_only_orgs']}")
    
    # Get all organizations (union of both datasets)
    all_orgs = employee_orgs.union(reappointment_orgs)
    
    # Reindex both DataFrames to have the same organizations and years
    employee_aligned = employee_df.reindex(index=sorted(all_orgs), columns=sorted(all_years), fill_value=0)
    reappointment_aligned = reappointment_df.reindex(index=sorted(all_orgs), columns=sorted(all_years), fill_value=0)
    
    print(f"  • Aligned datasets: {len(all_orgs)} orgs × {len(all_years)} years")
    
    return employee_aligned, reappointment_aligned, validation_stats


def create_comprehensive_table(employee_df, reappointment_df):
    """
    Create a comprehensive table with reappointment rates.
    
    Args:
        employee_df (pd.DataFrame): Aligned employee counts
        reappointment_df (pd.DataFrame): Aligned reappointment counts
    
    Returns:
        pd.DataFrame: Comprehensive table with rates
    """
    
    print("\nCreating comprehensive reappointment rates table...")
    print("-" * 50)
    
    # Convert pivot tables to long format
    employee_long = employee_df.stack().reset_index()
    employee_long.columns = ['org', 'year', 'total_employees']
    
    reappointment_long = reappointment_df.stack().reset_index()
    reappointment_long.columns = ['org', 'year', 'reappointments']
    
    print(f"  • Employee data: {len(employee_long):,} org-year combinations")
    print(f"  • Reappointment data: {len(reappointment_long):,} org-year combinations")
    
    # Merge the datasets
    comprehensive_df = pd.merge(
        employee_long, 
        reappointment_long, 
        on=['org', 'year'], 
        how='outer'
    )
    
    # Fill missing values with 0
    comprehensive_df['total_employees'] = comprehensive_df['total_employees'].fillna(0).astype(int)
    comprehensive_df['reappointments'] = comprehensive_df['reappointments'].fillna(0).astype(int)
    
    print(f"  • Merged data: {len(comprehensive_df):,} org-year combinations")
    
    # Calculate reappointment rates with proper handling of edge cases
    comprehensive_df['reappointment_rate'] = np.where(
        comprehensive_df['total_employees'] > 0,
        (comprehensive_df['reappointments'] / comprehensive_df['total_employees']) * 100,
        np.nan  # Use NaN for cases where total_employees is 0
    )
    
    # Handle cases where reappointments > total_employees (data quality issue)
    invalid_rates = comprehensive_df['reappointments'] > comprehensive_df['total_employees']
    invalid_count = invalid_rates.sum()
    
    if invalid_count > 0:
        print(f"  ⚠️  WARNING: Found {invalid_count} cases where reappointments > total_employees")
        # Cap the rate at 100% for these cases
        comprehensive_df.loc[invalid_rates, 'reappointment_rate'] = 100.0
    
    # Sort by organization and year
    comprehensive_df = comprehensive_df.sort_values(['org', 'year']).reset_index(drop=True)
    
    # Round reappointment rates to 2 decimal places
    comprehensive_df['reappointment_rate'] = comprehensive_df['reappointment_rate'].round(2)
    
    return comprehensive_df


def validate_comprehensive_table(comprehensive_df):
    """
    Validate the comprehensive table for data quality.
    
    Args:
        comprehensive_df (pd.DataFrame): Comprehensive table with rates
    
    Returns:
        dict: Validation statistics
    """
    
    print("\nValidating comprehensive table...")
    print("-" * 33)
    
    validation = {
        'total_combinations': len(comprehensive_df),
        'zero_employees': 0,
        'zero_reappointments': 0,
        'valid_rates': 0,
        'missing_rates': 0,
        'max_rate': 0,
        'data_quality_issues': 0
    }
    
    # Count cases with zero employees
    validation['zero_employees'] = (comprehensive_df['total_employees'] == 0).sum()
    
    # Count cases with zero reappointments
    validation['zero_reappointments'] = (comprehensive_df['reappointments'] == 0).sum()
    
    # Count valid rates (not NaN)
    validation['valid_rates'] = comprehensive_df['reappointment_rate'].notna().sum()
    validation['missing_rates'] = comprehensive_df['reappointment_rate'].isna().sum()
    
    # Find maximum rate
    if validation['valid_rates'] > 0:
        validation['max_rate'] = comprehensive_df['reappointment_rate'].max()
    
    # Check for data quality issues
    validation['data_quality_issues'] = (comprehensive_df['reappointments'] > comprehensive_df['total_employees']).sum()
    
    print(f"  • Total org-year combinations: {validation['total_combinations']:,}")
    print(f"  • Cases with zero employees: {validation['zero_employees']:,}")
    print(f"  • Cases with zero reappointments: {validation['zero_reappointments']:,}")
    print(f"  • Valid reappointment rates: {validation['valid_rates']:,}")
    print(f"  • Missing rates (NaN): {validation['missing_rates']:,}")
    print(f"  • Maximum reappointment rate: {validation['max_rate']:.2f}%")
    print(f"  • Data quality issues: {validation['data_quality_issues']:,}")
    
    return validation


def save_comprehensive_table(comprehensive_df, output_dir="scripts/claudesonnet4/version1/execution6/analysis_data"):
    """
    Save the comprehensive table to CSV file.
    
    Args:
        comprehensive_df (pd.DataFrame): Comprehensive table with rates
        output_dir (str): Directory to save the output file
    """
    
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # Define output file path
    output_file = os.path.join(output_dir, "step6_reappointment_rates.csv")
    
    try:
        # Save to CSV
        comprehensive_df.to_csv(output_file, index=False, encoding='utf-8')
        print(f"✓ Saved comprehensive table to: {output_file}")
        
    except Exception as e:
        print(f"ERROR saving file: {str(e)}")
        raise


def print_top_organizations_analysis(comprehensive_df):
    """
    Print analysis of organizations with highest average reappointment rates.
    
    Args:
        comprehensive_df (pd.DataFrame): Comprehensive table with rates
    """
    
    print("\n" + "=" * 70)
    print("ORGANIZATIONS WITH HIGHEST AVERAGE REAPPOINTMENT RATES")
    print("=" * 70)
    
    # Filter out rows with missing rates or zero employees
    valid_data = comprehensive_df[
        (comprehensive_df['reappointment_rate'].notna()) & 
        (comprehensive_df['total_employees'] > 0)
    ].copy()
    
    if len(valid_data) == 0:
        print("No valid data available for analysis.")
        return
    
    # Calculate average reappointment rate by organization
    org_stats = valid_data.groupby('org').agg({
        'total_employees': ['sum', 'mean'],
        'reappointments': ['sum', 'mean'],
        'reappointment_rate': ['mean', 'count', 'std']
    }).round(2)
    
    # Flatten column names
    org_stats.columns = [
        'total_employees_sum', 'total_employees_avg',
        'total_reappointments', 'reappointments_avg',
        'avg_reappointment_rate', 'years_with_data', 'rate_std'
    ]
    
    # Filter organizations with at least 3 years of data and minimum total employees
    filtered_stats = org_stats[
        (org_stats['years_with_data'] >= 3) & 
        (org_stats['total_employees_sum'] >= 10)
    ].copy()
    
    if len(filtered_stats) == 0:
        print("No organizations meet the criteria (≥3 years data, ≥10 total employees).")
        return
    
    # Sort by average reappointment rate
    top_orgs = filtered_stats.sort_values('avg_reappointment_rate', ascending=False)
    
    print(f"Organizations with highest average reappointment rates:")
    print(f"(Minimum 3 years of data and 10 total employees)")
    print()
    
    # Display top 10 organizations
    for i, (org, stats) in enumerate(top_orgs.head(10).iterrows(), 1):
        print(f"{i:2}. {org[:55]:<55}")
        print(f"    Average rate: {stats['avg_reappointment_rate']:>6.2f}% "
              f"(σ={stats['rate_std']:>5.2f})")
        print(f"    Total employees: {stats['total_employees_sum']:>5.0f}, "
              f"Total reappointments: {stats['total_reappointments']:>4.0f}, "
              f"Years: {stats['years_with_data']:>2.0f}")
        print()
    
    # Overall statistics
    overall_stats = {
        'total_orgs_analyzed': len(top_orgs),
        'avg_rate_across_orgs': top_orgs['avg_reappointment_rate'].mean(),
        'median_rate': top_orgs['avg_reappointment_rate'].median(),
        'highest_rate': top_orgs['avg_reappointment_rate'].max(),
        'lowest_rate': top_orgs['avg_reappointment_rate'].min()
    }
    
    print(f"Summary Statistics:")
    print(f"  Organizations analyzed: {overall_stats['total_orgs_analyzed']:,}")
    print(f"  Average reappointment rate: {overall_stats['avg_rate_across_orgs']:.2f}%")
    print(f"  Median reappointment rate: {overall_stats['median_rate']:.2f}%")
    print(f"  Highest rate: {overall_stats['highest_rate']:.2f}%")
    print(f"  Lowest rate: {overall_stats['lowest_rate']:.2f}%")
    
    # Sample of comprehensive data
    print(f"\nSample of comprehensive data (highest rates):")
    sample_data = valid_data.nlargest(10, 'reappointment_rate')[
        ['org', 'year', 'total_employees', 'reappointments', 'reappointment_rate']
    ]
    print(sample_data.to_string(index=False))


def main():
    """Main execution function."""
    
    print("Reappointment Rates Calculator for NB Government Appointments")
    print("=" * 70)
    
    try:
        # Load both datasets
        print("\nLoading datasets...")
        employee_counts = load_employee_counts()
        reappointment_counts = load_reappointment_counts()
        
        # Validate and align datasets
        employee_aligned, reappointment_aligned, validation_stats = validate_and_align_datasets(
            employee_counts, reappointment_counts
        )
        
        # Create comprehensive table with rates
        comprehensive_df = create_comprehensive_table(employee_aligned, reappointment_aligned)
        
        # Validate the comprehensive table
        validation_results = validate_comprehensive_table(comprehensive_df)
        
        # Save the comprehensive table
        save_comprehensive_table(comprehensive_df)
        
        # Print analysis of top organizations
        print_top_organizations_analysis(comprehensive_df)
        
        print(f"\n✓ Reappointment rates calculation completed successfully!")
        
    except Exception as e:
        print(f"\n❌ Process failed: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()