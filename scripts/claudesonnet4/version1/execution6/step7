#!/usr/bin/env python3

"""
Yearly Maximum Reappointment Rates Analysis

This script identifies the organization with the highest reappointment rate
for each year, handles ties appropriately, and creates a time series
visualization of the trends.

Tie-breaking approach: When multiple organizations have the same highest rate,
select the one with the most total appointments to ensure statistical significance.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker


def load_reappointment_rates(file_path="scripts/claudesonnet4/version1/execution6/analysis_data/step6_reappointment_rates.csv"):
    """
    Load the reappointment rates dataset from step 6.
    
    Args:
        file_path (str): Path to the reappointment rates file
    
    Returns:
        pd.DataFrame: Reappointment rates dataset
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Reappointment rates file not found at: {file_path}")
        
        df = pd.read_csv(file_path, encoding='utf-8')
        print(f"✓ Loaded reappointment rates: {len(df):,} org-year combinations")
        
        # Validate required columns
        required_columns = ['org', 'year', 'total_appointments', 'reappointments', 'reappointment_rate']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        # Data type validation
        df.loc[:, 'year'] = df['year'].astype(int)
        df.loc[:, 'total_appointments'] = df['total_appointments'].astype(int)
        df.loc[:, 'reappointments'] = df['reappointments'].astype(int)
        df.loc[:, 'reappointment_rate'] = df['reappointment_rate'].astype(float)
        
        print(f"✓ Data validation complete")
        
        return df
        
    except Exception as e:
        print(f"ERROR loading reappointment rates: {str(e)}")
        raise


def find_yearly_max_rates(df):
    """
    Find the organization with the highest reappointment rate for each year.
    
    Tie-breaking strategy: When multiple organizations have the same highest rate,
    select the one with the most total appointments for statistical significance.
    
    Args:
        df (pd.DataFrame): Reappointment rates dataset
    
    Returns:
        pd.DataFrame: Yearly maximum rates with top organization for each year
    """
    
    print("Finding organization with highest reappointment rate for each year...")
    print("Tie-breaking approach: Select organization with most appointments when rates are tied")
    print("-" * 70)
    
    yearly_max = []
    
    # Process each year separately
    for year in sorted(df['year'].unique()):
        year_data = df.loc[df['year'] == year].copy()
        
        # Filter out organizations with zero appointments
        year_data = year_data.loc[year_data['total_appointments'] > 0]
        
        if len(year_data) == 0:
            print(f"  {year}: No valid data")
            continue
        
        # Find the maximum reappointment rate for this year
        max_rate = year_data['reappointment_rate'].max()
        
        # Find all organizations with the maximum rate
        max_rate_orgs = year_data.loc[year_data['reappointment_rate'] == max_rate]
        
        # Handle ties by selecting organization with most appointments
        if len(max_rate_orgs) > 1:
            top_org_row = max_rate_orgs.loc[max_rate_orgs['total_appointments'].idxmax()]
            tie_info = f" (tied with {len(max_rate_orgs)-1} others, selected by appointment count)"
        else:
            top_org_row = max_rate_orgs.iloc[0]
            tie_info = ""
        
        # Store the result
        result = {
            'year': year,
            'top_org': top_org_row['org'],
            'max_rate': max_rate,
            'total_appointments': top_org_row['total_appointments'],
            'reappointments': top_org_row['reappointments'],
            'tied_organizations': len(max_rate_orgs)
        }
        yearly_max.append(result)
        
        # Print year-by-year results
        org_name = top_org_row['org']
        appointments = int(top_org_row['total_appointments'])
        reappts = int(top_org_row['reappointments'])
        rate_pct = max_rate * 100
        
        print(f"  {year}: {org_name}")
        print(f"        Rate: {max_rate:.3f} ({rate_pct:.1f}%) - {reappts}/{appointments} appointments{tie_info}")
    
    # Convert to DataFrame
    yearly_max_df = pd.DataFrame(yearly_max)
    
    print(f"\n✓ Processed {len(yearly_max_df)} years")
    
    return yearly_max_df


def create_visualization(df, output_dir="scripts/claudesonnet4/version1/execution6/analysis_data"):
    """
    Create a visualization showing the trend of maximum reappointment rates over time.
    
    Args:
        df (pd.DataFrame): Yearly maximum rates dataset
        output_dir (str): Directory to save the visualization
    """
    
    print("Creating visualization...")
    
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    try:
        # Set up the plot
        plt.figure(figsize=(12, 8))
        
        # Create the line plot
        plt.plot(df['year'], df['max_rate'] * 100, 
                marker='o', linewidth=2, markersize=6, 
                color='#2E86AB', markerfacecolor='#A23B72', 
                markeredgewidth=2, markeredgecolor='white')
        
        # Customize the plot
        plt.title('Highest Reappointment Rate by Year\nNew Brunswick Government Appointments', 
                 fontsize=16, fontweight='bold', pad=20)
        plt.xlabel('Year', fontsize=12, fontweight='bold')
        plt.ylabel('Maximum Reappointment Rate (%)', fontsize=12, fontweight='bold')
        
        # Format axes
        plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(1))
        plt.gca().yaxis.set_major_formatter(ticker.PercentFormatter(decimals=1))
        
        # Add grid
        plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5)
        
        # Rotate x-axis labels for better readability
        plt.xticks(rotation=45)
        
        # Add value labels on points
        for _, row in df.iterrows():
            year = row['year']
            rate = row['max_rate'] * 100
            plt.annotate(f'{rate:.1f}%', 
                        (year, rate), 
                        textcoords="offset points", 
                        xytext=(0,10), 
                        ha='center', fontsize=9, 
                        bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.7))
        
        # Adjust layout to prevent label cutoff
        plt.tight_layout()
        
        # Save the plot
        output_file = os.path.join(output_dir, "step7_yearly_max_rates.png")
        plt.savefig(output_file, dpi=300, bbox_inches='tight', 
                   facecolor='white', edgecolor='none')
        
        print(f"✓ Visualization saved to: {output_file}")
        
        # Close the plot to free memory
        plt.close()
        
    except Exception as e:
        print(f"ERROR creating visualization: {str(e)}")
        raise


def save_yearly_max_rates(df, output_dir="scripts/claudesonnet4/version1/execution6/analysis_data"):
    """
    Save the yearly maximum rates dataset to CSV file.
    
    Args:
        df (pd.DataFrame): Yearly maximum rates dataset
        output_dir (str): Directory to save the output file
    """
    
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # Define output file path
    output_file = os.path.join(output_dir, "step7_yearly_max_rates.csv")
    
    try:
        # Select only the required columns for output
        output_columns = ['year', 'top_org', 'max_rate']
        df_output = df[output_columns].copy()
        
        # Sort by year
        df_output = df_output.sort_values('year')
        
        # Save to CSV
        df_output.to_csv(output_file, index=False, encoding='utf-8')
        print(f"✓ Saved yearly maximum rates to: {output_file}")
        
        return output_file
        
    except Exception as e:
        print(f"ERROR saving file: {str(e)}")
        raise


def print_analysis_summary(df):
    """
    Print summary analysis of the yearly maximum rates.
    
    Args:
        df (pd.DataFrame): Yearly maximum rates dataset
    """
    
    print("\n" + "=" * 60)
    print("YEARLY MAXIMUM REAPPOINTMENT RATES SUMMARY")
    print("=" * 60)
    
    # Basic statistics
    years_analyzed = len(df)
    year_range = f"{df['year'].min()}-{df['year'].max()}"
    
    print(f"Years analyzed: {years_analyzed} ({year_range})")
    
    # Rate statistics
    print(f"\nMaximum reappointment rate statistics:")
    rate_stats = df['max_rate'].describe()
    print(f"  Mean: {rate_stats['mean']:.3f} ({rate_stats['mean']*100:.1f}%)")
    print(f"  Median: {rate_stats['50%']:.3f} ({rate_stats['50%']*100:.1f}%)")
    print(f"  Highest: {rate_stats['max']:.3f} ({rate_stats['max']*100:.1f}%)")
    print(f"  Lowest: {rate_stats['min']:.3f} ({rate_stats['min']*100:.1f}%)")
    
    # Year with highest rate
    highest_year_row = df.loc[df['max_rate'].idxmax()]
    print(f"\nYear with highest maximum rate: {highest_year_row['year']}")
    print(f"  Organization: {highest_year_row['top_org']}")
    print(f"  Rate: {highest_year_row['max_rate']:.3f} ({highest_year_row['max_rate']*100:.1f}%)")
    
    # Year with lowest rate
    lowest_year_row = df.loc[df['max_rate'].idxmin()]
    print(f"\nYear with lowest maximum rate: {lowest_year_row['year']}")
    print(f"  Organization: {lowest_year_row['top_org']}")
    print(f"  Rate: {lowest_year_row['max_rate']:.3f} ({lowest_year_row['max_rate']*100:.1f}%)")
    
    # Organizations that appeared as top multiple times
    org_counts = df['top_org'].value_counts()
    frequent_winners = org_counts.loc[org_counts > 1]
    
    if len(frequent_winners) > 0:
        print(f"\nOrganizations with highest rate multiple years:")
        for org, count in frequent_winners.items():
            years = df.loc[df['top_org'] == org, 'year'].tolist()
            print(f"  {org}: {count} years ({years})")
    else:
        print(f"\nNo organization had the highest rate in multiple years")
    
    # Tie information
    ties_info = df['tied_organizations'].describe()
    total_ties = (df['tied_organizations'] > 1).sum()
    
    print(f"\nTie information:")
    print(f"  Years with ties: {total_ties}/{years_analyzed} ({(total_ties/years_analyzed)*100:.1f}%)")
    if total_ties > 0:
        max_ties = int(ties_info['max'])
        print(f"  Maximum organizations tied: {max_ties}")


def main():
    """Main execution function."""
    
    print("Yearly Maximum Reappointment Rates Analysis")
    print("=" * 60)
    
    try:
        # Load the reappointment rates dataset
        df = load_reappointment_rates()
        
        # Find yearly maximum rates
        yearly_max_df = find_yearly_max_rates(df)
        
        # Create visualization
        create_visualization(yearly_max_df)
        
        # Save the results
        output_file = save_yearly_max_rates(yearly_max_df)
        
        # Print summary analysis
        print_analysis_summary(yearly_max_df)
        
        print(f"\n✓ Yearly maximum rates analysis completed successfully!")
        print(f"✓ CSV output saved to: {output_file}")
        print(f"✓ Visualization saved to: step7_yearly_max_rates.png")
        
    except Exception as e:
        print(f"\n❌ Process failed: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()