#!/usr/bin/env python3

"""
Annual Government-Wide Reappointment Proportions Analysis

This script calculates the overall proportion of reappointments across
the entire New Brunswick government for each year from 2013-2024,
creating a time series of government-wide reappointment trends.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker


def load_marked_data(file_path="scripts/claudesonnet4/version1/execution6/analysis_data/step3_repeats_marked.csv"):
    """
    Load the dataset with marked reappointments from step 3.
    
    Args:
        file_path (str): Path to the marked dataset file
    
    Returns:
        pd.DataFrame: Dataset with reappointment flags
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Marked dataset not found at: {file_path}")
        
        df = pd.read_csv(file_path, encoding='utf-8')
        print(f"✓ Loaded marked dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
        
        # Validate required columns
        required_columns = ['year', 'reappointed']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        return df
        
    except Exception as e:
        print(f"ERROR loading marked dataset: {str(e)}")
        raise


def prepare_data_for_analysis(df):
    """
    Prepare the dataset for annual proportion analysis.
    
    Args:
        df (pd.DataFrame): Input dataset
    
    Returns:
        pd.DataFrame: Cleaned dataset ready for analysis
    """
    
    print("Preparing data for annual proportion analysis...")
    
    # Create a copy for modifications
    df_clean = df.copy()
    
    # Convert year to integer, handling any errors
    df_clean.loc[:, 'year'] = pd.to_numeric(df_clean['year'], errors='coerce')
    
    # Convert reappointed to boolean
    df_clean.loc[:, 'reappointed'] = df_clean['reappointed'].astype(bool)
    
    # Remove rows with missing year data
    initial_rows = len(df_clean)
    df_clean = df_clean.dropna(subset=['year'])
    
    # Filter for valid years (2013-2024 range)
    df_clean = df_clean.loc[(df_clean['year'] >= 2013) & (df_clean['year'] <= 2024)]
    
    # Convert year to integer
    df_clean.loc[:, 'year'] = df_clean['year'].astype(int)
    
    final_rows = len(df_clean)
    
    if initial_rows != final_rows:
        print(f"  Removed {initial_rows - final_rows:,} rows with invalid/missing year data")
    
    print(f"✓ Data preparation complete: {final_rows:,} valid appointments")
    print(f"  Year range: {df_clean['year'].min()}-{df_clean['year'].max()}")
    
    return df_clean


def calculate_annual_proportions(df):
    """
    Calculate government-wide reappointment proportions for each year.
    
    Args:
        df (pd.DataFrame): Cleaned dataset
    
    Returns:
        pd.DataFrame: Annual proportions with year, totals, and proportions
    """
    
    print("Calculating annual government-wide reappointment proportions...")
    print("-" * 60)
    
    # Group by year and calculate totals
    annual_stats = df.groupby('year').agg({
        'reappointed': ['count', 'sum']
    }).reset_index()
    
    # Flatten column names
    annual_stats.columns = ['year', 'total_appointments', 'total_reappointments']
    
    # Calculate reappointment proportion
    annual_stats.loc[:, 'reappointment_proportion'] = (
        annual_stats['total_reappointments'] / annual_stats['total_appointments']
    )
    
    # Print year-by-year results
    print("Year-by-year government-wide reappointment proportions:")
    for _, row in annual_stats.iterrows():
        year = int(row['year'])
        total_appts = int(row['total_appointments'])
        total_reappts = int(row['total_reappointments'])
        proportion = row['reappointment_proportion']
        percentage = proportion * 100
        
        print(f"  {year}: {total_reappts:,}/{total_appts:,} = {proportion:.4f} ({percentage:.2f}%)")
    
    print(f"\n✓ Calculated proportions for {len(annual_stats)} years")
    
    return annual_stats


def create_visualization(df, output_dir="scripts/claudesonnet4/version1/execution6/analysis_data"):
    """
    Create a visualization showing the government-wide reappointment proportion trend.
    
    Args:
        df (pd.DataFrame): Annual proportions dataset
        output_dir (str): Directory to save the visualization
    """
    
    print("Creating visualization...")
    
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    try:
        # Set up the plot
        plt.figure(figsize=(12, 8))
        
        # Create the line plot
        plt.plot(df['year'], df['reappointment_proportion'] * 100, 
                marker='o', linewidth=3, markersize=8, 
                color='#1f77b4', markerfacecolor='#ff7f0e', 
                markeredgewidth=2, markeredgecolor='white')
        
        # Customize the plot
        plt.title('Government-Wide Reappointment Proportion Over Time\nNew Brunswick Government Appointments (2013-2024)', 
                 fontsize=16, fontweight='bold', pad=20)
        plt.xlabel('Year', fontsize=12, fontweight='bold')
        plt.ylabel('Reappointment Proportion (%)', fontsize=12, fontweight='bold')
        
        # Format axes
        plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(1))
        plt.gca().yaxis.set_major_formatter(ticker.PercentFormatter(decimals=1))
        
        # Set y-axis to start from 0 for better perspective
        plt.ylim(bottom=0)
        
        # Add grid
        plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5)
        
        # Rotate x-axis labels for better readability
        plt.xticks(rotation=45)
        
        # Add value labels on points
        for _, row in df.iterrows():
            year = row['year']
            proportion = row['reappointment_proportion'] * 100
            plt.annotate(f'{proportion:.1f}%', 
                        (year, proportion), 
                        textcoords="offset points", 
                        xytext=(0,12), 
                        ha='center', fontsize=10, fontweight='bold',
                        bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7))
        
        # Add trend line
        z = np.polyfit(df['year'], df['reappointment_proportion'] * 100, 1)
        p = np.poly1d(z)
        plt.plot(df['year'], p(df['year']), 
                linestyle='--', color='red', alpha=0.7, linewidth=2,
                label=f'Trend: {z[0]:.2f}% per year')
        
        # Add legend
        plt.legend(loc='upper left', fontsize=10)
        
        # Adjust layout to prevent label cutoff
        plt.tight_layout()
        
        # Save the plot
        output_file = os.path.join(output_dir, "step8_annual_reappointment_proportions.png")
        plt.savefig(output_file, dpi=300, bbox_inches='tight', 
                   facecolor='white', edgecolor='none')
        
        print(f"✓ Visualization saved to: {output_file}")
        
        # Close the plot to free memory
        plt.close()
        
    except Exception as e:
        print(f"ERROR creating visualization: {str(e)}")
        raise


def save_annual_proportions(df, output_dir="scripts/claudesonnet4/version1/execution6/analysis_data"):
    """
    Save the annual proportions dataset to CSV file.
    
    Args:
        df (pd.DataFrame): Annual proportions dataset
        output_dir (str): Directory to save the output file
    """
    
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # Define output file path
    output_file = os.path.join(output_dir, "step8_annual_proportions.csv")
    
    try:
        # Ensure proper column order
        column_order = ['year', 'total_appointments', 'total_reappointments', 'reappointment_proportion']
        df_output = df[column_order].copy()
        
        # Sort by year
        df_output = df_output.sort_values('year')
        
        # Save to CSV
        df_output.to_csv(output_file, index=False, encoding='utf-8')
        print(f"✓ Saved annual proportions to: {output_file}")
        
        return output_file
        
    except Exception as e:
        print(f"ERROR saving file: {str(e)}")
        raise


def print_trend_analysis(df):
    """
    Print detailed analysis of the annual proportion trends.
    
    Args:
        df (pd.DataFrame): Annual proportions dataset
    """
    
    print("\n" + "=" * 60)
    print("GOVERNMENT-WIDE REAPPOINTMENT TRENDS ANALYSIS")
    print("=" * 60)
    
    # Basic statistics
    years_analyzed = len(df)
    year_range = f"{df['year'].min()}-{df['year'].max()}"
    
    print(f"Years analyzed: {years_analyzed} ({year_range})")
    
    # Overall totals
    total_appointments = df['total_appointments'].sum()
    total_reappointments = df['total_reappointments'].sum()
    overall_proportion = total_reappointments / total_appointments
    
    print(f"\nOverall government totals (all years):")
    print(f"  Total appointments: {total_appointments:,}")
    print(f"  Total reappointments: {total_reappointments:,}")
    print(f"  Overall proportion: {overall_proportion:.4f} ({overall_proportion*100:.2f}%)")
    
    # Annual proportion statistics
    print(f"\nAnnual proportion statistics:")
    prop_stats = df['reappointment_proportion'].describe()
    print(f"  Mean: {prop_stats['mean']:.4f} ({prop_stats['mean']*100:.2f}%)")
    print(f"  Median: {prop_stats['50%']:.4f} ({prop_stats['50%']*100:.2f}%)")
    print(f"  Highest: {prop_stats['max']:.4f} ({prop_stats['max']*100:.2f}%)")
    print(f"  Lowest: {prop_stats['min']:.4f} ({prop_stats['min']*100:.2f}%)")
    
    # Year with highest proportion
    highest_year_row = df.loc[df['reappointment_proportion'].idxmax()]
    print(f"\nYear with highest reappointment proportion:")
    print(f"  {int(highest_year_row['year'])}: {highest_year_row['reappointment_proportion']:.4f} ({highest_year_row['reappointment_proportion']*100:.2f}%)")
    print(f"  ({int(highest_year_row['total_reappointments']):,}/{int(highest_year_row['total_appointments']):,} appointments)")
    
    # Year with lowest proportion
    lowest_year_row = df.loc[df['reappointment_proportion'].idxmin()]
    print(f"\nYear with lowest reappointment proportion:")
    print(f"  {int(lowest_year_row['year'])}: {lowest_year_row['reappointment_proportion']:.4f} ({lowest_year_row['reappointment_proportion']*100:.2f}%)")
    print(f"  ({int(lowest_year_row['total_reappointments']):,}/{int(lowest_year_row['total_appointments']):,} appointments)")
    
    # Trend analysis
    years = df['year'].values
    proportions = df['reappointment_proportion'].values * 100
    
    # Calculate linear trend
    z = np.polyfit(years, proportions, 1)
    trend_slope = z[0]
    
    print(f"\nTrend analysis:")
    print(f"  Linear trend: {trend_slope:+.3f}% per year")
    
    if abs(trend_slope) < 0.1:
        trend_desc = "relatively stable"
    elif trend_slope > 0:
        trend_desc = "increasing"
    else:
        trend_desc = "decreasing"
    
    print(f"  Overall trend: {trend_desc}")
    
    # Year-over-year changes
    df_sorted = df.sort_values('year')
    year_changes = df_sorted['reappointment_proportion'].diff() * 100
    
    print(f"\nYear-over-year changes:")
    for i, (_, row) in enumerate(df_sorted.iterrows()):
        if i == 0:  # Skip first year (no previous year to compare)
            continue
        
        year = int(row['year'])
        change = year_changes.iloc[i]
        
        if change > 0:
            change_str = f"+{change:.2f}%"
        else:
            change_str = f"{change:.2f}%"
        
        print(f"  {year}: {change_str}")


def main():
    """Main execution function."""
    
    print("Annual Government-Wide Reappointment Proportions Analysis")
    print("=" * 60)
    
    try:
        # Load the marked dataset from step 3
        df = load_marked_data()
        
        # Prepare data for analysis
        df_clean = prepare_data_for_analysis(df)
        
        # Calculate annual proportions
        annual_proportions_df = calculate_annual_proportions(df_clean)
        
        # Create visualization
        create_visualization(annual_proportions_df)
        
        # Save the results
        output_file = save_annual_proportions(annual_proportions_df)
        
        # Print trend analysis
        print_trend_analysis(annual_proportions_df)
        
        print(f"\n✓ Annual proportions analysis completed successfully!")
        print(f"✓ CSV output saved to: {output_file}")
        print(f"✓ Visualization saved to: step8_annual_reappointment_proportions.png")
        
    except Exception as e:
        print(f"\n❌ Process failed: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()