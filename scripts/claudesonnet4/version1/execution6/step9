#!/usr/bin/env python3

"""
Regression Analysis of Government-Wide Reappointment Proportion Trends

This script performs comprehensive linear regression analysis on the annual
government-wide reappointment proportions to determine if there is a statistically
significant increasing or decreasing trend over the 12-year period (2013-2024).

Includes:
- Linear regression using scipy.stats.linregress
- Comprehensive statistical measures (R², p-value, confidence intervals)
- Regression diagnostics (Durbin-Watson test, outlier detection)
- Significance testing and trend interpretation
- Detailed results output

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
from scipy import stats
from scipy.stats import linregress, t
import statsmodels.api as sm
try:
    from statsmodels.stats.diagnostic import durbin_watson
except ImportError:
    # Fallback: durbin_watson is in statsmodels.stats.stattools in some versions
    try:
        from statsmodels.stats.stattools import durbin_watson
    except ImportError:
        # Manual implementation if not available
        def durbin_watson(residuals):
            """Manual implementation of Durbin-Watson test statistic."""
            diff_resid = np.diff(residuals)
            return np.sum(diff_resid**2) / np.sum(residuals**2)

try:
    from statsmodels.stats.outliers_influence import OLSInfluence
except ImportError:
    # Fallback for Cook's distance calculation
    OLSInfluence = None


def load_annual_proportions(file_path="scripts/claudesonnet4/version1/execution6/analysis_data/step8_annual_proportions.csv"):
    """
    Load the annual government-wide proportions dataset from step 8.
    
    Args:
        file_path (str): Path to the annual proportions file
    
    Returns:
        pd.DataFrame: Annual proportions dataset
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Annual proportions file not found at: {file_path}")
        
        df = pd.read_csv(file_path, encoding='utf-8')
        print(f"✓ Loaded annual proportions: {len(df)} years of data")
        
        # Validate required columns
        required_columns = ['year', 'total_appointments', 'total_reappointments', 'reappointment_proportion']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        # Data type validation
        df.loc[:, 'year'] = df['year'].astype(int)
        df.loc[:, 'reappointment_proportion'] = df['reappointment_proportion'].astype(float)
        
        print(f"✓ Data validation complete: {df['year'].min()}-{df['year'].max()}")
        
        return df
        
    except Exception as e:
        print(f"ERROR loading annual proportions: {str(e)}")
        raise


def prepare_regression_data(df):
    """
    Prepare data for regression analysis.
    
    Args:
        df (pd.DataFrame): Annual proportions dataset
    
    Returns:
        tuple: (X, Y) arrays for regression where X=year, Y=proportion
    """
    
    print("Preparing data for regression analysis...")
    
    # Sort by year to ensure proper ordering
    df_sorted = df.sort_values('year').copy()
    
    # Extract X (year) and Y (reappointment proportion)
    X = df_sorted['year'].values
    Y = df_sorted['reappointment_proportion'].values
    
    # Convert proportion to percentage points for easier interpretation
    Y_percent = Y * 100
    
    print(f"✓ Regression data prepared:")
    print(f"  X (Year): {X.min()}-{X.max()} ({len(X)} observations)")
    print(f"  Y (Proportion): {Y_percent.min():.2f}%-{Y_percent.max():.2f}%")
    
    return X, Y, Y_percent, df_sorted


def perform_linear_regression(X, Y):
    """
    Perform linear regression analysis using scipy.stats.linregress.
    
    Args:
        X (numpy.array): Independent variable (year)
        Y (numpy.array): Dependent variable (proportion)
    
    Returns:
        dict: Comprehensive regression results
    """
    
    print("Performing linear regression analysis...")
    
    try:
        # Perform linear regression
        slope, intercept, r_value, p_value, std_err = linregress(X, Y)
        
        # Calculate additional statistics
        n = len(X)
        r_squared = r_value ** 2
        
        # Degrees of freedom
        df_residual = n - 2
        
        # Calculate t-statistic for slope
        t_stat = slope / std_err
        
        # Calculate 95% confidence interval for slope
        t_critical = t.ppf(0.975, df_residual)  # Two-tailed test, alpha=0.05
        margin_error = t_critical * std_err
        slope_ci_lower = slope - margin_error
        slope_ci_upper = slope + margin_error
        
        # Calculate predicted values and residuals
        Y_pred = slope * X + intercept
        residuals = Y - Y_pred
        
        # Calculate standard error of the estimate
        sse = np.sum(residuals ** 2)
        se_estimate = np.sqrt(sse / df_residual)
        
        # Compile results
        results = {
            'slope': slope,
            'intercept': intercept,
            'r_value': r_value,
            'r_squared': r_squared,
            'p_value': p_value,
            'std_err': std_err,
            't_statistic': t_stat,
            'n_observations': n,
            'df_residual': df_residual,
            'slope_ci_lower': slope_ci_lower,
            'slope_ci_upper': slope_ci_upper,
            'se_estimate': se_estimate,
            'Y_predicted': Y_pred,
            'residuals': residuals,
            'X': X,
            'Y': Y
        }
        
        print(f"✓ Linear regression completed")
        print(f"  Slope: {slope:.6f} ± {std_err:.6f}")
        print(f"  R²: {r_squared:.4f}")
        print(f"  p-value: {p_value:.6f}")
        
        return results
        
    except Exception as e:
        print(f"ERROR during regression analysis: {str(e)}")
        raise


def perform_regression_diagnostics(results):
    """
    Perform regression diagnostics including Durbin-Watson test and outlier detection.
    
    Args:
        results (dict): Regression results
    
    Returns:
        dict: Diagnostic test results
    """
    
    print("Performing regression diagnostics...")
    
    try:
        residuals = results['residuals']
        X = results['X']
        Y = results['Y']
        
        # Durbin-Watson test for autocorrelation
        dw_statistic = durbin_watson(residuals)
        
        # Outlier detection using standardized residuals
        std_residuals = residuals / np.std(residuals)
        outlier_threshold = 2.0  # Standard threshold for outliers
        outliers = np.abs(std_residuals) > outlier_threshold
        n_outliers = np.sum(outliers)
        
        # Cook's distance for influential observations
        cooks_d = None
        n_influential = 0
        influential_indices = np.array([])
        
        if OLSInfluence is not None:
            try:
                # Using statsmodels for more sophisticated diagnostics
                X_with_const = sm.add_constant(X)
                model = sm.OLS(Y, X_with_const).fit()
                influence = OLSInfluence(model)
                cooks_d = influence.cooks_distance[0]
                
                # High Cook's distance threshold (typically 4/n)
                cooks_threshold = 4 / len(Y)
                high_influence = cooks_d > cooks_threshold
                n_influential = np.sum(high_influence)
                influential_indices = np.where(high_influence)[0]
            except Exception as e:
                print(f"  Warning: Could not calculate Cook's distance: {str(e)}")
                cooks_d = np.zeros(len(Y))  # Fallback
        else:
            print("  Warning: Cook's distance calculation not available")
            cooks_d = np.zeros(len(Y))  # Fallback
        
        # Normality test of residuals (Shapiro-Wilk)
        shapiro_stat, shapiro_p = stats.shapiro(residuals)
        
        diagnostics = {
            'durbin_watson': dw_statistic,
            'n_outliers': n_outliers,
            'outlier_indices': np.where(outliers)[0],
            'standardized_residuals': std_residuals,
            'cooks_distance': cooks_d,
            'n_influential': n_influential,
            'influential_indices': influential_indices,
            'shapiro_stat': shapiro_stat,
            'shapiro_p': shapiro_p
        }
        
        print(f"✓ Regression diagnostics completed")
        print(f"  Durbin-Watson: {dw_statistic:.3f}")
        print(f"  Outliers: {n_outliers}")
        print(f"  Influential points: {n_influential}")
        
        return diagnostics
        
    except Exception as e:
        print(f"ERROR during diagnostic analysis: {str(e)}")
        raise


def interpret_results(results, diagnostics, df_sorted):
    """
    Interpret regression results and provide statistical conclusions.
    
    Args:
        results (dict): Regression results
        diagnostics (dict): Diagnostic test results
        df_sorted (pd.DataFrame): Original data sorted by year
    
    Returns:
        dict: Interpretation and conclusions
    """
    
    print("Interpreting regression results...")
    
    # Statistical significance
    alpha = 0.05
    is_significant = results['p_value'] < alpha
    
    # Trend direction
    slope = results['slope']
    if slope > 0:
        trend_direction = "increasing"
    elif slope < 0:
        trend_direction = "decreasing"
    else:
        trend_direction = "no change"
    
    # Convert slope to percentage points per year
    slope_percent_per_year = slope * 100
    
    # Calculate total change over the period
    year_span = df_sorted['year'].max() - df_sorted['year'].min()
    total_change_percent = slope_percent_per_year * year_span
    
    # Calculate actual observed change
    initial_proportion = df_sorted.iloc[0]['reappointment_proportion'] * 100
    final_proportion = df_sorted.iloc[-1]['reappointment_proportion'] * 100
    observed_change = final_proportion - initial_proportion
    
    # Model quality assessment
    r_squared = results['r_squared']
    if r_squared >= 0.7:
        model_quality = "good"
    elif r_squared >= 0.5:
        model_quality = "moderate"
    else:
        model_quality = "poor"
    
    # Autocorrelation assessment
    dw = diagnostics['durbin_watson']
    if 1.5 <= dw <= 2.5:
        autocorrelation = "no significant autocorrelation"
    elif dw < 1.5:
        autocorrelation = "positive autocorrelation detected"
    else:
        autocorrelation = "negative autocorrelation detected"
    
    interpretation = {
        'is_significant': is_significant,
        'significance_level': alpha,
        'trend_direction': trend_direction,
        'slope_percent_per_year': slope_percent_per_year,
        'total_change_percent': total_change_percent,
        'observed_change_percent': observed_change,
        'year_span': year_span,
        'model_quality': model_quality,
        'autocorrelation': autocorrelation,
        'initial_proportion_percent': initial_proportion,
        'final_proportion_percent': final_proportion
    }
    
    print(f"✓ Results interpretation completed")
    print(f"  Trend: {trend_direction}")
    print(f"  Significant: {'Yes' if is_significant else 'No'}")
    print(f"  Annual change: {slope_percent_per_year:+.3f} percentage points")
    
    return interpretation


def save_detailed_results(results, diagnostics, interpretation, df_sorted, 
                         output_dir="scripts/claudesonnet4/version1/execution6/analysis_data"):
    """
    Save detailed statistical results to a text file.
    
    Args:
        results (dict): Regression results
        diagnostics (dict): Diagnostic test results
        interpretation (dict): Result interpretation
        df_sorted (pd.DataFrame): Original data
        output_dir (str): Directory to save results
    """
    
    print("Saving detailed statistical results...")
    
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # Define output file path
    output_file = os.path.join(output_dir, "step9_regression_results.txt")
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("REGRESSION ANALYSIS OF GOVERNMENT-WIDE REAPPOINTMENT PROPORTION TRENDS\n")
            f.write("=" * 80 + "\n\n")
            
            # Data summary
            f.write("DATA SUMMARY\n")
            f.write("-" * 40 + "\n")
            f.write(f"Time period: {df_sorted['year'].min()}-{df_sorted['year'].max()}\n")
            f.write(f"Number of observations: {len(df_sorted)}\n")
            f.write(f"Total appointments (all years): {df_sorted['total_appointments'].sum():,}\n")
            f.write(f"Total reappointments (all years): {df_sorted['total_reappointments'].sum():,}\n")
            f.write(f"Initial proportion ({df_sorted['year'].min()}): {interpretation['initial_proportion_percent']:.3f}%\n")
            f.write(f"Final proportion ({df_sorted['year'].max()}): {interpretation['final_proportion_percent']:.3f}%\n")
            f.write(f"Observed change: {interpretation['observed_change_percent']:+.3f} percentage points\n\n")
            
            # Regression equation
            f.write("REGRESSION EQUATION\n")
            f.write("-" * 40 + "\n")
            f.write(f"Y = {results['slope']:.6f} * X + {results['intercept']:.6f}\n")
            f.write(f"Where: Y = reappointment proportion, X = year\n\n")
            
            # Statistical results
            f.write("STATISTICAL RESULTS\n")
            f.write("-" * 40 + "\n")
            f.write(f"Slope coefficient: {results['slope']:.6f}\n")
            f.write(f"Standard error: {results['std_err']:.6f}\n")
            f.write(f"t-statistic: {results['t_statistic']:.3f}\n")
            f.write(f"p-value: {results['p_value']:.6f}\n")
            f.write(f"R-squared: {results['r_squared']:.4f}\n")
            f.write(f"Correlation coefficient: {results['r_value']:.4f}\n")
            f.write(f"Standard error of estimate: {results['se_estimate']:.6f}\n")
            f.write(f"Degrees of freedom: {results['df_residual']}\n\n")
            
            # Confidence intervals
            f.write("CONFIDENCE INTERVALS (95%)\n")
            f.write("-" * 40 + "\n")
            f.write(f"Slope: [{results['slope_ci_lower']:.6f}, {results['slope_ci_upper']:.6f}]\n")
            f.write(f"Annual change: [{results['slope_ci_lower']*100:+.3f}, {results['slope_ci_upper']*100:+.3f}] percentage points\n\n")
            
            # Diagnostic tests
            f.write("REGRESSION DIAGNOSTICS\n")
            f.write("-" * 40 + "\n")
            f.write(f"Durbin-Watson statistic: {diagnostics['durbin_watson']:.3f}\n")
            f.write(f"Autocorrelation assessment: {interpretation['autocorrelation']}\n")
            f.write(f"Number of outliers: {diagnostics['n_outliers']}\n")
            f.write(f"Number of influential points: {diagnostics['n_influential']}\n")
            f.write(f"Shapiro-Wilk normality test: W={diagnostics['shapiro_stat']:.3f}, p={diagnostics['shapiro_p']:.3f}\n")
            f.write(f"Model quality: {interpretation['model_quality']} (R² = {results['r_squared']:.3f})\n\n")
            
            # Trend analysis
            f.write("TREND ANALYSIS\n")
            f.write("-" * 40 + "\n")
            f.write(f"Trend direction: {interpretation['trend_direction']}\n")
            f.write(f"Annual change: {interpretation['slope_percent_per_year']:+.3f} percentage points per year\n")
            f.write(f"Total change over {interpretation['year_span']} years: {interpretation['total_change_percent']:+.3f} percentage points\n")
            f.write(f"Statistical significance: {'Yes' if interpretation['is_significant'] else 'No'} (α = {interpretation['significance_level']})\n\n")
            
            # Conclusions
            f.write("CONCLUSIONS\n")
            f.write("-" * 40 + "\n")
            
            if interpretation['is_significant']:
                f.write(f"The government-wide reappointment proportion shows a statistically significant ")
                f.write(f"{interpretation['trend_direction']} trend over the 12-year period (p = {results['p_value']:.3f} < 0.05).\n\n")
                
                f.write(f"The proportion {interpretation['trend_direction']} by an average of ")
                f.write(f"{abs(interpretation['slope_percent_per_year']):.3f} percentage points per year, ")
                f.write(f"with a total change of {interpretation['total_change_percent']:+.3f} percentage points ")
                f.write(f"from {df_sorted['year'].min()} to {df_sorted['year'].max()}.\n\n")
            else:
                f.write(f"The government-wide reappointment proportion does not show a statistically significant ")
                f.write(f"trend over the 12-year period (p = {results['p_value']:.3f} ≥ 0.05).\n\n")
                
                f.write(f"While there appears to be a {interpretation['trend_direction']} trend of ")
                f.write(f"{interpretation['slope_percent_per_year']:+.3f} percentage points per year, ")
                f.write(f"this change is not statistically significant and could be due to random variation.\n\n")
            
            f.write(f"The linear model explains {results['r_squared']*100:.1f}% of the variance in reappointment proportions ")
            f.write(f"({interpretation['model_quality']} fit).\n")
            
        print(f"✓ Detailed results saved to: {output_file}")
        return output_file
        
    except Exception as e:
        print(f"ERROR saving results: {str(e)}")
        raise


def print_final_answer(interpretation, results):
    """
    Print the final answer to the research question.
    
    Args:
        interpretation (dict): Result interpretation
        results (dict): Regression results
    """
    
    print("\n" + "=" * 80)
    print("FINAL ANSWER")
    print("=" * 80)
    
    trend = interpretation['trend_direction']
    significant = interpretation['is_significant']
    slope_per_year = interpretation['slope_percent_per_year']
    p_value = results['p_value']
    total_change = interpretation['total_change_percent']
    
    print(f"Research Question: Is the government-wide reappointment proportion trend")
    print(f"increasing or declining over the 12-year period, and is it statistically significant?\n")
    
    print(f"ANSWER:")
    print(f"The government-wide reappointment proportion is {trend.upper()} over the")
    print(f"12-year period (2013-2024).\n")
    
    print(f"Statistical Significance: {'YES' if significant else 'NO'}")
    print(f"- p-value: {p_value:.6f} ({'< 0.05' if significant else '≥ 0.05'})")
    print(f"- The trend is {'statistically significant' if significant else 'NOT statistically significant'}.\n")
    
    print(f"Magnitude of Change:")
    print(f"- Annual change: {slope_per_year:+.3f} percentage points per year")
    print(f"- Total change: {total_change:+.3f} percentage points over 12 years")
    
    if significant:
        print(f"\nConclusion: There is strong statistical evidence that the New Brunswick")
        print(f"government's reappointment proportion is {trend} significantly over time.")
    else:
        print(f"\nConclusion: There is insufficient statistical evidence to conclude that")
        print(f"the New Brunswick government's reappointment proportion is changing over time.")


def main():
    """Main execution function."""
    
    print("Regression Analysis of Government-Wide Reappointment Trends")
    print("=" * 80)
    
    try:
        # Load the annual proportions data
        df = load_annual_proportions()
        
        # Prepare data for regression
        X, Y, Y_percent, df_sorted = prepare_regression_data(df)
        
        # Perform linear regression
        results = perform_linear_regression(X, Y)
        
        # Perform regression diagnostics
        diagnostics = perform_regression_diagnostics(results)
        
        # Interpret results
        interpretation = interpret_results(results, diagnostics, df_sorted)
        
        # Save detailed results
        output_file = save_detailed_results(results, diagnostics, interpretation, df_sorted)
        
        # Print final answer
        print_final_answer(interpretation, results)
        
        print(f"\n✓ Regression analysis completed successfully!")
        print(f"✓ Detailed results saved to: {output_file}")
        
    except Exception as e:
        print(f"\n❌ Analysis failed: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()