#!/usr/bin/env python3
"""
New Brunswick Government Appointments Data Combiner

This script loads appointment data from 2013-2024 CSV files, adds year columns,
combines them into a single dataset, and saves the result.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_and_combine_appointments():
    """
    Load all appointment CSV files from 2013-2024, add year columns, and combine.
    
    Returns:
        pd.DataFrame: Combined dataset with all appointments
    """
    
    # Define the years to process
    years = range(2013, 2025)  # 2013 through 2024
    
    # List to store individual DataFrames
    dataframes = []
    
    print("Loading appointment data files...")
    
    for year in years:
        filename = f"raw_data/appointments_{year}.csv"
        
        try:
            # Check if file exists
            if not os.path.exists(filename):
                print(f"Warning: File {filename} not found. Skipping...")
                continue
            
            # Load the CSV file
            df = pd.read_csv(filename)
            
            # Add year column
            df['year'] = year
            
            # Store the DataFrame
            dataframes.append(df)
            
            print(f"Loaded {filename}: {df.shape[0]} rows, {df.shape[1]} columns")
            
        except Exception as e:
            print(f"Error loading {filename}: {str(e)}")
            continue
    
    # Check if we have any data to combine
    if not dataframes:
        raise ValueError("No valid CSV files were loaded. Please check file paths and formats.")
    
    # Combine all DataFrames
    print("\nCombining datasets...")
    combined_df = pd.concat(dataframes, ignore_index=True)
    
    return combined_df

def save_combined_data(df, output_dir="scripts/claudesonnet4/version1/execution7/analysis_data"):
    """
    Save the combined dataset to the specified directory.
    
    Args:
        df (pd.DataFrame): Combined dataset to save
        output_dir (str): Directory to save the output file
    """
    
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # Define output filename
    output_file = os.path.join(output_dir, "step1_combined_appointments.csv")
    
    try:
        # Save the combined dataset
        df.to_csv(output_file, index=False)
        print(f"\nCombined dataset saved to: {output_file}")
        
    except Exception as e:
        print(f"Error saving file: {str(e)}")
        raise

def print_dataset_info(df):
    """
    Print basic information about the combined dataset.
    
    Args:
        df (pd.DataFrame): Dataset to analyze
    """
    
    print("\n" + "="*50)
    print("COMBINED DATASET SUMMARY")
    print("="*50)
    
    print(f"Dataset shape: {df.shape}")
    print(f"Total appointments: {df.shape[0]:,}")
    print(f"Total columns: {df.shape[1]}")
    
    print(f"\nColumn names:")
    for i, col in enumerate(df.columns, 1):
        print(f"  {i:2d}. {col}")
    
    print(f"\nAppointments by year:")
    year_counts = df['year'].value_counts().sort_index()
    for year, count in year_counts.items():
        print(f"  {year}: {count:,} appointments")
    
    print(f"\nData types:")
    print(df.dtypes)
    
    print(f"\nMissing values per column:")
    missing_counts = df.isnull().sum()
    for col, count in missing_counts.items():
        if count > 0:
            print(f"  {col}: {count:,} ({count/len(df)*100:.1f}%)")
    
    if missing_counts.sum() == 0:
        print("  No missing values found!")

def main():
    """
    Main execution function.
    """
    
    print("New Brunswick Government Appointments Data Combiner")
    print("="*55)
    
    try:
        # Load and combine all appointment data
        combined_df = load_and_combine_appointments()
        
        # Save the combined dataset
        save_combined_data(combined_df)
        
        # Print dataset information
        print_dataset_info(combined_df)
        
        print("\n" + "="*50)
        print("Script completed successfully!")
        print("="*50)
        
    except Exception as e:
        print(f"\nError: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()