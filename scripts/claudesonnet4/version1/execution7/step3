#!/usr/bin/env python3
"""
New Brunswick Government Appointments Reappointment Marker

This script identifies and marks reappointments by analyzing unique combinations
of name, position, and organization, marking all occurrences except the first
chronologically as reappointments.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import re

def normalize_name(name):
    """
    Normalize a name string for better matching.
    
    Args:
        name (str): Original name string
    
    Returns:
        str: Normalized name string
    """
    
    if pd.isna(name):
        return ""
    
    # Convert to string and strip whitespace
    name = str(name).strip()
    
    # Convert to lowercase
    name = name.lower()
    
    # Remove common prefixes and suffixes
    prefixes = ['mr.', 'mrs.', 'ms.', 'dr.', 'prof.', 'hon.']
    suffixes = ['jr.', 'sr.', 'ii', 'iii', 'iv']
    
    for prefix in prefixes:
        if name.startswith(prefix):
            name = name[len(prefix):].strip()
    
    for suffix in suffixes:
        if name.endswith(suffix):
            name = name[:-len(suffix)].strip()
    
    # Remove extra spaces and normalize
    name = re.sub(r'\s+', ' ', name)
    
    return name

def normalize_position(position):
    """
    Normalize a position string for better matching.
    
    Args:
        position (str): Original position string
    
    Returns:
        str: Normalized position string
    """
    
    if pd.isna(position):
        return ""
    
    # Convert to string, strip, and lowercase
    position = str(position).strip().lower()
    
    # Remove common words that might vary
    remove_words = ['the', 'a', 'an', 'of', 'and', '&']
    words = position.split()
    words = [word for word in words if word not in remove_words]
    
    # Rejoin and normalize spaces
    position = ' '.join(words)
    position = re.sub(r'\s+', ' ', position)
    
    return position

def normalize_org(org):
    """
    Normalize an organization string for better matching.
    
    Args:
        org (str): Original organization string
    
    Returns:
        str: Normalized organization string
    """
    
    if pd.isna(org):
        return ""
    
    # Convert to string, strip, and lowercase
    org = str(org).strip().lower()
    
    # Common abbreviations and variations
    replacements = {
        'department': 'dept',
        'corporation': 'corp',
        'incorporated': 'inc',
        'limited': 'ltd',
        'company': 'co',
        'association': 'assoc',
        'university': 'univ',
        'college': 'coll'
    }
    
    for full, abbrev in replacements.items():
        org = org.replace(full, abbrev)
    
    # Remove common words
    remove_words = ['the', 'of', 'and', '&']
    words = org.split()
    words = [word for word in words if word not in remove_words]
    
    # Rejoin and normalize spaces
    org = ' '.join(words)
    org = re.sub(r'\s+', ' ', org)
    
    return org

def create_grouping_key(df):
    """
    Create normalized grouping keys for identifying the same person/position/org combinations.
    
    Args:
        df (pd.DataFrame): Input DataFrame
    
    Returns:
        pd.DataFrame: DataFrame with added normalized columns
    """
    
    print("Creating normalized grouping keys...")
    
    # Create normalized columns
    df = df.copy()
    df.loc[:, 'name_normalized'] = df['name'].apply(normalize_name)
    df.loc[:, 'position_normalized'] = df['position'].apply(normalize_position)
    df.loc[:, 'org_normalized'] = df['org'].apply(normalize_org)
    
    # Create composite grouping key
    df.loc[:, 'grouping_key'] = (
        df['name_normalized'] + '|' + 
        df['position_normalized'] + '|' + 
        df['org_normalized']
    )
    
    return df

def identify_reappointments(df):
    """
    Identify and mark reappointments based on grouping keys.
    
    Args:
        df (pd.DataFrame): Input DataFrame with grouping keys
    
    Returns:
        pd.DataFrame: DataFrame with updated reappointment flags
        dict: Statistics about reappointments identified
    """
    
    print("Identifying reappointments...")
    
    # Create a copy to avoid modifying original
    df = df.copy()
    
    # Sort by grouping key and year for consistent ordering
    df = df.sort_values(['grouping_key', 'year'], kind='stable')
    
    # Initialize counters
    stats = {
        'total_records': len(df),
        'unique_combinations': 0,
        'combinations_with_repeats': 0,
        'original_reappointments': 0,
        'newly_identified_reappointments': 0,
        'total_reappointments_after': 0
    }
    
    # Count original reappointments
    if 'reappointed' in df.columns:
        stats['original_reappointments'] = df['reappointed'].sum()
    else:
        # If reappointed column doesn't exist, create it
        df.loc[:, 'reappointed'] = False
        stats['original_reappointments'] = 0
    
    # Group by the composite key
    grouped = df.groupby('grouping_key')
    stats['unique_combinations'] = len(grouped)
    
    # Track which records to mark as reappointments
    reappointment_indices = []
    
    for group_key, group in grouped:
        # Skip empty groups
        if len(group) == 0:
            continue
            
        # If group has only one record, it's not a reappointment
        if len(group) == 1:
            continue
            
        stats['combinations_with_repeats'] += 1
        
        # Sort group by year to get chronological order
        group_sorted = group.sort_values('year', kind='stable')
        
        # Get indices of all records except the first (chronologically)
        indices_to_mark = group_sorted.index.tolist()[1:]  # Convert Index to list
        reappointment_indices.extend(indices_to_mark)
    
    # Mark reappointments
    if reappointment_indices:
        df.loc[reappointment_indices, 'reappointed'] = True
    
    # Calculate final statistics
    stats['newly_identified_reappointments'] = len(reappointment_indices)
    stats['total_reappointments_after'] = df['reappointed'].sum()
    
    return df, stats

def validate_data_types(df):
    """
    Validate and fix data types before processing.
    
    Args:
        df (pd.DataFrame): Input DataFrame
    
    Returns:
        pd.DataFrame: DataFrame with validated data types
    """
    
    print("Validating data types...")
    
    # Ensure required columns exist
    required_columns = ['name', 'position', 'org', 'year']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        raise ValueError(f"Missing required columns: {missing_columns}")
    
    # Convert year to numeric if it's not already
    if df['year'].dtype != 'int64':
        try:
            df.loc[:, 'year'] = pd.to_numeric(df['year'], errors='coerce')
        except Exception as e:
            print(f"Warning: Could not convert year to numeric: {e}")
    
    # Ensure reappointed column exists and is boolean
    if 'reappointed' not in df.columns:
        df.loc[:, 'reappointed'] = False
    else:
        # Convert to boolean, handling various representations
        df.loc[:, 'reappointed'] = df['reappointed'].astype(bool)
    
    # Fill missing values with empty strings for text columns
    text_columns = ['name', 'position', 'org']
    for col in text_columns:
        df.loc[:, col] = df[col].fillna('')
    
    return df

def print_statistics(stats):
    """
    Print detailed statistics about reappointment identification.
    
    Args:
        stats (dict): Statistics dictionary
    """
    
    print("\n" + "="*60)
    print("REAPPOINTMENT IDENTIFICATION STATISTICS")
    print("="*60)
    
    print(f"Total records processed: {stats['total_records']:,}")
    print(f"Unique name/position/org combinations: {stats['unique_combinations']:,}")
    print(f"Combinations with multiple appointments: {stats['combinations_with_repeats']:,}")
    
    print(f"\nReappointment counts:")
    print(f"  Originally marked as reappointments: {stats['original_reappointments']:,}")
    print(f"  Newly identified reappointments: {stats['newly_identified_reappointments']:,}")
    print(f"  Total reappointments after processing: {stats['total_reappointments_after']:,}")
    
    if stats['total_records'] > 0:
        reappointment_rate = (stats['total_reappointments_after'] / stats['total_records']) * 100
        print(f"  Reappointment rate: {reappointment_rate:.1f}%")
    
    if stats['unique_combinations'] > 0:
        repeat_rate = (stats['combinations_with_repeats'] / stats['unique_combinations']) * 100
        print(f"  Combinations with repeats: {repeat_rate:.1f}%")

def load_key_columns_data(file_path):
    """
    Load the key columns dataset from step 2.
    
    Args:
        file_path (str): Path to the key columns dataset
    
    Returns:
        pd.DataFrame: Loaded dataset
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Key columns dataset not found at: {file_path}")
        
        df = pd.read_csv(file_path)
        print(f"Loaded key columns dataset: {df.shape[0]:,} rows, {df.shape[1]} columns")
        
        return df
        
    except Exception as e:
        print(f"Error loading key columns dataset: {str(e)}")
        raise

def save_marked_dataset(df, output_dir, filename="step3_repeats_marked.csv"):
    """
    Save the dataset with marked reappointments.
    
    Args:
        df (pd.DataFrame): Dataset with marked reappointments
        output_dir (str): Directory to save the output file
        filename (str): Name of the output file
    """
    
    # Ensure output directory exists
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    output_path = os.path.join(output_dir, filename)
    
    try:
        # Remove temporary columns before saving
        columns_to_remove = ['name_normalized', 'position_normalized', 'org_normalized', 'grouping_key']
        df_to_save = df.drop(columns=[col for col in columns_to_remove if col in df.columns])
        
        df_to_save.to_csv(output_path, index=False)
        print(f"\nDataset with marked reappointments saved to: {output_path}")
        
    except Exception as e:
        print(f"Error saving file: {str(e)}")
        raise

def main():
    """
    Main execution function.
    """
    
    print("New Brunswick Government Appointments Reappointment Marker")
    print("="*65)
    
    # Define file paths
    data_dir = "scripts/claudesonnet4/version1/execution7/analysis_data"
    input_file = os.path.join(data_dir, "step2_key_columns_data.csv")
    
    try:
        # Load the key columns dataset
        df = load_key_columns_data(input_file)
        
        # Validate data types
        df = validate_data_types(df)
        
        # Create grouping keys
        df = create_grouping_key(df)
        
        # Identify and mark reappointments
        df, stats = identify_reappointments(df)
        
        # Save the updated dataset
        save_marked_dataset(df, data_dir)
        
        # Print statistics
        print_statistics(stats)
        
        print("\n" + "="*60)
        print("Reappointment marking completed successfully!")
        print("="*60)
        
    except Exception as e:
        print(f"\nError: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()