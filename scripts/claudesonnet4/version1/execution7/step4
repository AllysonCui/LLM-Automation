#!/usr/bin/env python3
"""
New Brunswick Government Appointments Appointment Counts Summary

This script groups appointment data by organization and year, creates a summary
table with appointment counts, and identifies organizations with the most appointments.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_marked_dataset(file_path):
    """
    Load the dataset with marked reappointments from step 3.
    
    Args:
        file_path (str): Path to the marked dataset
    
    Returns:
        pd.DataFrame: Loaded dataset
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Marked dataset not found at: {file_path}")
        
        df = pd.read_csv(file_path)
        print(f"Loaded marked dataset: {df.shape[0]:,} rows, {df.shape[1]} columns")
        
        return df
        
    except Exception as e:
        print(f"Error loading marked dataset: {str(e)}")
        raise

def validate_data_for_counting(df):
    """
    Validate and clean data before creating counts.
    
    Args:
        df (pd.DataFrame): Input DataFrame
    
    Returns:
        pd.DataFrame: Validated DataFrame
        dict: Validation statistics
    """
    
    print("Validating data for counting...")
    
    # Initialize validation stats
    validation_stats = {
        'original_records': len(df),
        'missing_org': 0,
        'missing_year': 0,
        'invalid_year': 0,
        'valid_records': 0
    }
    
    # Check required columns
    required_columns = ['org', 'year']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        raise ValueError(f"Missing required columns: {missing_columns}")
    
    # Create a copy for validation
    df_clean = df.copy()
    
    # Count and handle missing organizations
    missing_org_mask = df_clean['org'].isna() | (df_clean['org'].astype(str).str.strip() == '')
    validation_stats['missing_org'] = missing_org_mask.sum()
    
    if validation_stats['missing_org'] > 0:
        print(f"Warning: {validation_stats['missing_org']} records have missing organization")
        # Fill missing org with 'Unknown Organization'
        df_clean.loc[missing_org_mask, 'org'] = 'Unknown Organization'
    
    # Count and handle missing years
    missing_year_mask = df_clean['year'].isna()
    validation_stats['missing_year'] = missing_year_mask.sum()
    
    if validation_stats['missing_year'] > 0:
        print(f"Warning: {validation_stats['missing_year']} records have missing year")
        # Remove records with missing years as they can't be grouped properly
        df_clean = df_clean[~missing_year_mask]
    
    # Validate year values
    try:
        df_clean.loc[:, 'year'] = pd.to_numeric(df_clean['year'], errors='coerce')
        invalid_year_mask = df_clean['year'].isna()
        validation_stats['invalid_year'] = invalid_year_mask.sum()
        
        if validation_stats['invalid_year'] > 0:
            print(f"Warning: {validation_stats['invalid_year']} records have invalid year values")
            # Remove records with invalid years
            df_clean = df_clean[~invalid_year_mask]
    
    except Exception as e:
        print(f"Error processing year values: {e}")
        raise
    
    # Ensure year is integer
    df_clean.loc[:, 'year'] = df_clean['year'].astype(int)
    
    # Check for reasonable year range (assuming data from 2000-2030)
    unreasonable_year_mask = (df_clean['year'] < 2000) | (df_clean['year'] > 2030)
    unreasonable_years = unreasonable_year_mask.sum()
    
    if unreasonable_years > 0:
        print(f"Warning: {unreasonable_years} records have unreasonable year values")
        print(f"Year range in data: {df_clean['year'].min()} to {df_clean['year'].max()}")
    
    validation_stats['valid_records'] = len(df_clean)
    
    return df_clean, validation_stats

def create_counts_summary(df):
    """
    Create appointment counts summary by organization and year.
    
    Args:
        df (pd.DataFrame): Validated DataFrame
    
    Returns:
        pd.DataFrame: Pivot table with counts
        pd.DataFrame: Summary statistics
    """
    
    print("Creating appointment counts summary...")
    
    # Group by organization and year, count appointments
    grouped_counts = df.groupby(['org', 'year']).size().reset_index(name='appointment_count')
    
    # Create pivot table with organizations as rows, years as columns
    pivot_table = grouped_counts.pivot(index='org', columns='year', values='appointment_count')
    
    # Fill missing values with 0 (no appointments for that org/year combination)
    pivot_table = pivot_table.fillna(0).astype(int)
    
    # Sort columns (years) in ascending order
    pivot_table = pivot_table.reindex(sorted(pivot_table.columns), axis=1)
    
    # Add total column
    pivot_table['Total'] = pivot_table.sum(axis=1)
    
    # Sort by total appointments (descending)
    pivot_table = pivot_table.sort_values('Total', ascending=False)
    
    # Create summary statistics
    summary_stats = pd.DataFrame({
        'Organization': pivot_table.index,
        'Total_Appointments': pivot_table['Total'],
        'Years_Active': (pivot_table.drop('Total', axis=1) > 0).sum(axis=1),
        'Peak_Year_Appointments': pivot_table.drop('Total', axis=1).max(axis=1),
        'Average_Per_Year': pivot_table.drop('Total', axis=1).mean(axis=1).round(1)
    }).reset_index(drop=True)
    
    return pivot_table, summary_stats

def print_summary_analysis(pivot_table, summary_stats, validation_stats):
    """
    Print detailed analysis of the appointment counts.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with counts
        summary_stats (pd.DataFrame): Summary statistics
        validation_stats (dict): Validation statistics
    """
    
    print("\n" + "="*70)
    print("APPOINTMENT COUNTS SUMMARY ANALYSIS")
    print("="*70)
    
    # Data validation summary
    print("Data Validation Summary:")
    print(f"  Original records: {validation_stats['original_records']:,}")
    print(f"  Records with missing org: {validation_stats['missing_org']:,}")
    print(f"  Records with missing year: {validation_stats['missing_year']:,}")
    print(f"  Records with invalid year: {validation_stats['invalid_year']:,}")
    print(f"  Valid records processed: {validation_stats['valid_records']:,}")
    
    # Overall statistics
    print(f"\nOverall Statistics:")
    print(f"  Unique organizations: {len(pivot_table):,}")
    print(f"  Year range: {pivot_table.columns[0]} to {pivot_table.columns[-2]}")  # Exclude 'Total' column
    print(f"  Total appointments: {pivot_table['Total'].sum():,}")
    
    # Top organizations
    print(f"\nTop 10 Organizations by Total Appointments:")
    top_orgs = summary_stats.head(10)
    for i, row in top_orgs.iterrows():
        print(f"  {i+1:2d}. {row['Organization'][:50]:<50} {row['Total_Appointments']:>4} appointments")
    
    # Year-by-year totals
    print(f"\nAppointments by Year:")
    year_totals = pivot_table.drop('Total', axis=1).sum()
    for year, total in year_totals.items():
        print(f"  {year}: {total:,} appointments")
    
    # Organizations with highest peak year
    print(f"\nOrganizations with Highest Single-Year Appointments:")
    peak_orgs = summary_stats.nlargest(5, 'Peak_Year_Appointments')
    for i, row in peak_orgs.iterrows():
        print(f"  {row['Organization'][:50]:<50} {row['Peak_Year_Appointments']:>3} appointments (peak year)")
    
    # Most consistent organizations (active across most years)
    print(f"\nMost Consistently Active Organizations:")
    consistent_orgs = summary_stats.nlargest(5, 'Years_Active')
    for i, row in consistent_orgs.iterrows():
        print(f"  {row['Organization'][:50]:<50} Active in {row['Years_Active']} years")

def save_counts_summary(pivot_table, output_dir, filename="step4_appointment_counts.csv"):
    """
    Save the appointment counts summary to CSV.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with counts
        output_dir (str): Directory to save the output file
        filename (str): Name of the output file
    """
    
    # Ensure output directory exists
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    output_path = os.path.join(output_dir, filename)
    
    try:
        # Reset index to include organization as a regular column
        output_df = pivot_table.reset_index()
        output_df.to_csv(output_path, index=False)
        print(f"\nAppointment counts summary saved to: {output_path}")
        
    except Exception as e:
        print(f"Error saving file: {str(e)}")
        raise

def display_sample_table(pivot_table, max_rows=10, max_cols=8):
    """
    Display a sample of the pivot table for review.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table to display
        max_rows (int): Maximum number of rows to display
        max_cols (int): Maximum number of columns to display
    """
    
    print(f"\nSample of Appointment Counts Table (showing top {max_rows} organizations):")
    print("="*70)
    
    # Select columns to display (first few years + Total)
    display_cols = pivot_table.columns.tolist()
    if len(display_cols) > max_cols:
        # Show first few years and Total
        year_cols = [col for col in display_cols if col != 'Total'][:max_cols-1]
        display_cols = year_cols + ['Total']
    
    sample_table = pivot_table.head(max_rows)[display_cols]
    
    # Format for better display
    print(sample_table.to_string())
    
    if len(pivot_table) > max_rows:
        print(f"\n... and {len(pivot_table) - max_rows} more organizations")

def main():
    """
    Main execution function.
    """
    
    print("New Brunswick Government Appointments Appointment Counts Summary")
    print("="*70)
    
    # Define file paths
    data_dir = "scripts/claudesonnet4/version1/execution7/analysis_data"
    input_file = os.path.join(data_dir, "step3_repeats_marked.csv")
    
    try:
        # Load the marked dataset
        df = load_marked_dataset(input_file)
        
        # Validate data for counting
        df_clean, validation_stats = validate_data_for_counting(df)
        
        # Create counts summary
        pivot_table, summary_stats = create_counts_summary(df_clean)
        
        # Save the counts summary
        save_counts_summary(pivot_table, data_dir)
        
        # Display sample table
        display_sample_table(pivot_table)
        
        # Print detailed analysis
        print_summary_analysis(pivot_table, summary_stats, validation_stats)
        
        print("\n" + "="*70)
        print("Appointment counts summary completed successfully!")
        print("="*70)
        
    except Exception as e:
        print(f"\nError: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()