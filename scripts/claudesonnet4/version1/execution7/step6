#!/usr/bin/env python3
"""
New Brunswick Government Appointments Reappointment Rates Calculator

This script merges appointment counts and reappointment counts to calculate
reappointment rates for each organization/year combination.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_counts_data(appointment_counts_path, reappointment_counts_path):
    """
    Load both appointment counts and reappointment counts datasets.
    
    Args:
        appointment_counts_path (str): Path to appointment counts CSV
        reappointment_counts_path (str): Path to reappointment counts CSV
    
    Returns:
        tuple: (appointment_counts_df, reappointment_counts_df)
    """
    
    print("Loading counts datasets...")
    
    # Load appointment counts
    try:
        if not os.path.exists(appointment_counts_path):
            raise FileNotFoundError(f"appointment counts file not found: {appointment_counts_path}")
        
        appointment_df = pd.read_csv(appointment_counts_path)
        print(f"Loaded appointment counts: {appointment_df.shape[0]:,} organizations")
        
    except Exception as e:
        print(f"Error loading appointment counts: {str(e)}")
        raise
    
    # Load reappointment counts
    try:
        if not os.path.exists(reappointment_counts_path):
            raise FileNotFoundError(f"Reappointment counts file not found: {reappointment_counts_path}")
        
        reappointment_df = pd.read_csv(reappointment_counts_path)
        print(f"Loaded reappointment counts: {reappointment_df.shape[0]:,} organizations")
        
    except Exception as e:
        print(f"Error loading reappointment counts: {str(e)}")
        raise
    
    return appointment_df, reappointment_df

def validate_counts_data(appointment_df, reappointment_df):
    """
    Validate the structure and content of both counts datasets.
    
    Args:
        appointment_df (pd.DataFrame): appointment counts dataset
        reappointment_df (pd.DataFrame): Reappointment counts dataset
    
    Returns:
        tuple: (validated_appointment_df, validated_reappointment_df, validation_stats)
    """
    
    print("Validating counts datasets...")
    
    validation_stats = {
        'appointment_orgs': len(appointment_df),
        'reappointment_orgs': len(reappointment_df),
        'appointment_years': [],
        'reappointment_years': [],
        'common_years': [],
        'empty_reappointment_data': len(reappointment_df) == 0
    }
    
    # Validate appointment counts structure
    if 'org' not in appointment_df.columns:
        raise ValueError("appointment counts dataset missing 'org' column")
    
    # Get year columns from appointment counts (exclude 'org' and 'Total')
    appointment_year_cols = [col for col in appointment_df.columns if col not in ['org', 'Total']]
    validation_stats['appointment_years'] = sorted([int(col) for col in appointment_year_cols if str(col).isdigit()])
    
    # Handle empty reappointment data
    if len(reappointment_df) == 0 or 'org' not in reappointment_df.columns:
        print("Warning: Reappointment counts dataset is empty or missing 'org' column")
        validation_stats['reappointment_years'] = []
        validation_stats['common_years'] = validation_stats['appointment_years']
        
        # Create empty reappointment DataFrame with proper structure
        reappointment_df = pd.DataFrame(columns=['org'] + [str(year) for year in validation_stats['appointment_years']])
        
    else:
        # Get year columns from reappointment counts
        reappointment_year_cols = [col for col in reappointment_df.columns if col not in ['org', 'Total']]
        validation_stats['reappointment_years'] = sorted([int(col) for col in reappointment_year_cols if str(col).isdigit()])
        
        # Find common years
        validation_stats['common_years'] = sorted(list(set(validation_stats['appointment_years']) & set(validation_stats['reappointment_years'])))
    
    print(f"appointment data years: {validation_stats['appointment_years']}")
    print(f"Reappointment data years: {validation_stats['reappointment_years']}")
    print(f"Common years for analysis: {validation_stats['common_years']}")
    
    return appointment_df, reappointment_df, validation_stats

def reshape_to_long_format(df, id_col='org', value_name='count'):
    """
    Reshape wide format counts data to long format.
    
    Args:
        df (pd.DataFrame): Wide format DataFrame
        id_col (str): Column to use as identifier
        value_name (str): Name for the value column
    
    Returns:
        pd.DataFrame: Long format DataFrame
    """
    
    # Get year columns (exclude org and Total)
    year_cols = [col for col in df.columns if col not in [id_col, 'Total']]
    
    if not year_cols:
        # Return empty DataFrame with proper structure
        return pd.DataFrame(columns=[id_col, 'year', value_name])
    
    # Melt to long format
    long_df = df.melt(
        id_vars=[id_col],
        value_vars=year_cols,
        var_name='year',
        value_name=value_name
    )
    
    # Convert year to integer
    long_df['year'] = long_df['year'].astype(int)
    
    # Fill missing values with 0
    long_df[value_name] = long_df[value_name].fillna(0).astype(int)
    
    return long_df

def merge_and_calculate_rates(appointment_long, reappointment_long):
    """
    Merge appointment and reappointment data and calculate reappointment rates.
    
    Args:
        appointment_long (pd.DataFrame): Long format appointment counts
        reappointment_long (pd.DataFrame): Long format reappointment counts
    
    Returns:
        pd.DataFrame: Merged data with reappointment rates
        dict: Calculation statistics
    """
    
    print("Merging datasets and calculating reappointment rates...")
    
    # Merge on org and year
    merged_df = pd.merge(
        appointment_long,
        reappointment_long,
        on=['org', 'year'],
        how='left'  # Keep all appointment records
    )
    
    # Fill missing reappointments with 0
    merged_df['reappointments'] = merged_df['reappointments'].fillna(0).astype(int)
    
    # Rename columns for clarity
    merged_df = merged_df.rename(columns={'count': 'total_appointments'})
    
    # Calculate reappointment rates, handling division by zero
    merged_df['reappointment_rate'] = np.where(
        merged_df['total_appointments'] > 0,
        merged_df['reappointments'] / merged_df['total_appointments'],
        0.0
    )
    
    # Round reappointment rate to reasonable precision
    merged_df['reappointment_rate'] = merged_df['reappointment_rate'].round(4)
    
    # Calculate statistics
    calc_stats = {
        'total_records': len(merged_df),
        'records_with_appointments': (merged_df['total_appointments'] > 0).sum(),
        'records_with_reappointments': (merged_df['reappointments'] > 0).sum(),
        'records_with_rates': (merged_df['reappointment_rate'] > 0).sum(),
        'division_by_zero_cases': (merged_df['total_appointments'] == 0).sum(),
        'max_reappointment_rate': merged_df['reappointment_rate'].max(),
        'avg_reappointment_rate': merged_df[merged_df['total_appointments'] > 0]['reappointment_rate'].mean()
    }
    
    return merged_df, calc_stats

def analyze_reappointment_rates(df):
    """
    Analyze reappointment rates and identify top organizations.
    
    Args:
        df (pd.DataFrame): Merged dataset with reappointment rates
    
    Returns:
        dict: Analysis results
    """
    
    print("Analyzing reappointment rates...")
    
    # Filter out records with no appointments (avoid division by zero cases)
    valid_df = df[df['total_appointments'] > 0].copy()
    
    if len(valid_df) == 0:
        print("Warning: No valid records with appointments found!")
        return {}
    
    # Calculate average reappointment rate by organization
    org_avg_rates = valid_df.groupby('org').agg({
        'total_appointments': 'sum',
        'reappointments': 'sum',
        'reappointment_rate': 'mean'
    }).round(4)
    
    # Calculate overall reappointment rate for each org
    org_avg_rates['overall_rate'] = np.where(
        org_avg_rates['total_appointments'] > 0,
        org_avg_rates['reappointments'] / org_avg_rates['total_appointments'],
        0.0
    ).round(4)
    
    # Add number of years active
    org_avg_rates['years_active'] = valid_df.groupby('org')['year'].nunique()
    
    # Sort by overall reappointment rate
    org_avg_rates = org_avg_rates.sort_values('overall_rate', ascending=False)
    
    analysis_results = {
        'org_summary': org_avg_rates,
        'top_by_overall_rate': org_avg_rates.head(10),
        'top_by_avg_rate': org_avg_rates.sort_values('reappointment_rate', ascending=False).head(10)
    }
    
    return analysis_results

def print_analysis_results(merged_df, calc_stats, analysis_results):
    """
    Print comprehensive analysis of reappointment rates.
    
    Args:
        merged_df (pd.DataFrame): Merged dataset
        calc_stats (dict): Calculation statistics
        analysis_results (dict): Analysis results
    """
    
    print("\n" + "="*70)
    print("REAPPOINTMENT RATES ANALYSIS")
    print("="*70)
    
    # Data processing summary
    print("Data Processing Summary:")
    print(f"  Total org/year records: {calc_stats['total_records']:,}")
    print(f"  Records with appointments: {calc_stats['records_with_appointments']:,}")
    print(f"  Records with reappointments: {calc_stats['records_with_reappointments']:,}")
    print(f"  Records with positive rates: {calc_stats['records_with_rates']:,}")
    print(f"  Division by zero cases: {calc_stats['division_by_zero_cases']:,}")
    
    # Overall statistics
    if calc_stats['avg_reappointment_rate'] is not None:
        print(f"\nOverall Statistics:")
        print(f"  Average reappointment rate: {calc_stats['avg_reappointment_rate']:.1%}")
        print(f"  Maximum reappointment rate: {calc_stats['max_reappointment_rate']:.1%}")
    
    # Top organizations analysis
    if analysis_results and 'top_by_overall_rate' in analysis_results:
        print(f"\nTop 10 Organizations by Overall Reappointment Rate:")
        top_orgs = analysis_results['top_by_overall_rate']
        
        for i, (org, row) in enumerate(top_orgs.iterrows(), 1):
            rate_pct = row['overall_rate'] * 100
            print(f"  {i:2d}. {org[:45]:<45} {rate_pct:>5.1f}% ({row['reappointments']:>3}/{row['total_appointments']:>3})")
    
    # Year-by-year summary
    print(f"\nReappointment Rates by Year:")
    year_summary = merged_df[merged_df['total_appointments'] > 0].groupby('year').agg({
        'total_appointments': 'sum',
        'reappointments': 'sum'
    })
    year_summary['rate'] = year_summary['reappointments'] / year_summary['total_appointments']
    
    for year, row in year_summary.iterrows():
        rate_pct = row['rate'] * 100
        print(f"  {year}: {rate_pct:>5.1f}% ({row['reappointments']:>4}/{row['total_appointments']:>4})")

def save_reappointment_rates(df, output_dir, filename="step6_reappointment_rates.csv"):
    """
    Save the reappointment rates dataset to CSV.
    
    Args:
        df (pd.DataFrame): Dataset with reappointment rates
        output_dir (str): Directory to save the output file
        filename (str): Name of the output file
    """
    
    # Ensure output directory exists
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    output_path = os.path.join(output_dir, filename)
    
    try:
        # Sort by org and year for consistent output
        df_sorted = df.sort_values(['org', 'year'])
        df_sorted.to_csv(output_path, index=False)
        print(f"\nReappointment rates saved to: {output_path}")
        
    except Exception as e:
        print(f"Error saving file: {str(e)}")
        raise

def display_sample_rates_table(df, max_rows=15):
    """
    Display a sample of the reappointment rates table.
    
    Args:
        df (pd.DataFrame): Reappointment rates dataset
        max_rows (int): Maximum number of rows to display
    """
    
    print(f"\nSample of Reappointment Rates Table (showing {max_rows} records):")
    print("="*80)
    
    # Show a mix of records with and without reappointments
    sample_df = df.head(max_rows)[['org', 'year', 'total_appointments', 'reappointments', 'reappointment_rate']].copy()
    
    # Format for better display
    sample_df['rate_pct'] = (sample_df['reappointment_rate'] * 100).round(1)
    sample_df = sample_df.drop('reappointment_rate', axis=1)
    
    print(sample_df.to_string(index=False))
    
    if len(df) > max_rows:
        print(f"\n... and {len(df) - max_rows} more records")

def main():
    """
    Main execution function.
    """
    
    print("New Brunswick Government Appointments Reappointment Rates Calculator")
    print("="*80)
    
    # Define file paths
    data_dir = "scripts/claudesonnet4/version1/execution7/analysis_data"
    appointment_counts_path = os.path.join(data_dir, "step4_appointment_counts.csv")
    reappointment_counts_path = os.path.join(data_dir, "step5_reappointment_counts.csv")
    
    try:
        # Load both datasets
        appointment_df, reappointment_df = load_counts_data(appointment_counts_path, reappointment_counts_path)
        
        # Validate datasets
        appointment_df, reappointment_df, validation_stats = validate_counts_data(appointment_df, reappointment_df)
        
        # Reshape to long format
        appointment_long = reshape_to_long_format(appointment_df, value_name='count')
        reappointment_long = reshape_to_long_format(reappointment_df, value_name='reappointments')
        
        # Merge and calculate rates
        merged_df, calc_stats = merge_and_calculate_rates(appointment_long, reappointment_long)
        
        # Analyze reappointment rates
        analysis_results = analyze_reappointment_rates(merged_df)
        
        # Save the results
        save_reappointment_rates(merged_df, data_dir)
        
        # Display sample table
        display_sample_rates_table(merged_df)
        
        # Print comprehensive analysis
        print_analysis_results(merged_df, calc_stats, analysis_results)
        
        print("\n" + "="*80)
        print("Reappointment rates calculation completed successfully!")
        print("="*80)
        
    except Exception as e:
        print(f"\nError: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()