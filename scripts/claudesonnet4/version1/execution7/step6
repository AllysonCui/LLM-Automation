#!/usr/bin/env python3
"""
New Brunswick Government Appointments Reappointment Counts Summary

This script filters for reappointments and creates a summary table showing
reappointment counts by organization and year.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_marked_dataset(file_path):
    """
    Load the dataset with marked reappointments from step 3.
    
    Args:
        file_path (str): Path to the marked dataset
    
    Returns:
        pd.DataFrame: Loaded dataset
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Marked dataset not found at: {file_path}")
        
        df = pd.read_csv(file_path)
        print(f"Loaded marked dataset: {df.shape[0]:,} rows, {df.shape[1]} columns")
        
        return df
        
    except Exception as e:
        print(f"Error loading marked dataset: {str(e)}")
        raise

def validate_reappointment_data(df):
    """
    Validate data for reappointment analysis.
    
    Args:
        df (pd.DataFrame): Input DataFrame
    
    Returns:
        pd.DataFrame: Validated DataFrame
        dict: Validation statistics
    """
    
    print("Validating data for reappointment analysis...")
    
    # Initialize validation stats
    validation_stats = {
        'original_records': len(df),
        'missing_reappointed': 0,
        'missing_org': 0,
        'missing_year': 0,
        'invalid_year': 0,
        'total_reappointments': 0,
        'valid_reappointments': 0
    }
    
    # Check required columns
    required_columns = ['reappointed', 'org', 'year']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        raise ValueError(f"Missing required columns: {missing_columns}")
    
    # Create a copy for validation
    df_clean = df.copy()
    
    # Handle missing reappointed values
    missing_reappointed_mask = df_clean['reappointed'].isna()
    validation_stats['missing_reappointed'] = missing_reappointed_mask.sum()
    
    if validation_stats['missing_reappointed'] > 0:
        print(f"Warning: {validation_stats['missing_reappointed']} records have missing reappointed values")
        # Assume missing reappointed values are False
        df_clean.loc[missing_reappointed_mask, 'reappointed'] = False
    
    # Convert reappointed to boolean
    df_clean.loc[:, 'reappointed'] = df_clean['reappointed'].astype(bool)
    validation_stats['total_reappointments'] = df_clean['reappointed'].sum()
    
    # Handle missing organizations
    missing_org_mask = df_clean['org'].isna() | (df_clean['org'].astype(str).str.strip() == '')
    validation_stats['missing_org'] = missing_org_mask.sum()
    
    if validation_stats['missing_org'] > 0:
        print(f"Warning: {validation_stats['missing_org']} records have missing organization")
        # Fill missing org with 'Unknown Organization'
        df_clean.loc[missing_org_mask, 'org'] = 'Unknown Organization'
    
    # Handle missing years
    missing_year_mask = df_clean['year'].isna()
    validation_stats['missing_year'] = missing_year_mask.sum()
    
    if validation_stats['missing_year'] > 0:
        print(f"Warning: {validation_stats['missing_year']} records have missing year")
        # Remove records with missing years
        df_clean = df_clean[~missing_year_mask]
    
    # Validate and convert year values
    try:
        df_clean.loc[:, 'year'] = pd.to_numeric(df_clean['year'], errors='coerce')
        invalid_year_mask = df_clean['year'].isna()
        validation_stats['invalid_year'] = invalid_year_mask.sum()
        
        if validation_stats['invalid_year'] > 0:
            print(f"Warning: {validation_stats['invalid_year']} records have invalid year values")
            # Remove records with invalid years
            df_clean = df_clean[~invalid_year_mask]
    
    except Exception as e:
        print(f"Error processing year values: {e}")
        raise
    
    # Ensure year is integer
    df_clean.loc[:, 'year'] = df_clean['year'].astype(int)
    
    # Count valid reappointments after cleaning
    validation_stats['valid_reappointments'] = df_clean['reappointed'].sum()
    
    return df_clean, validation_stats

def filter_and_debug_reappointments(df):
    """
    Filter for reappointments and show debugging information.
    
    Args:
        df (pd.DataFrame): Validated DataFrame
    
    Returns:
        pd.DataFrame: Filtered DataFrame with only reappointments
    """
    
    print("Filtering for reappointments...")
    
    # Filter for reappointments only
    reappointments_df = df[df['reappointed'] == True].copy()
    
    print(f"Total records: {len(df):,}")
    print(f"Reappointment records: {len(reappointments_df):,}")
    print(f"Reappointment rate: {len(reappointments_df)/len(df)*100:.1f}%")
    
    if len(reappointments_df) == 0:
        print("Warning: No reappointments found in the dataset!")
        return reappointments_df
    
    # Show debugging information
    print(f"\nDebugging - Sample reappointment records:")
    print(reappointments_df[['name', 'org', 'year', 'reappointed']].head(10).to_string(index=False))
    
    # Show year distribution of reappointments
    print(f"\nReappointments by year:")
    year_counts = reappointments_df['year'].value_counts().sort_index()
    for year, count in year_counts.items():
        print(f"  {year}: {count:,} reappointments")
    
    # Show top organizations with reappointments
    print(f"\nTop 10 organizations with reappointments:")
    org_counts = reappointments_df['org'].value_counts().head(10)
    for i, (org, count) in enumerate(org_counts.items(), 1):
        print(f"  {i:2d}. {org[:50]:<50} {count:>3} reappointments")
    
    return reappointments_df

def create_reappointment_summary(df):
    """
    Create reappointment counts summary by organization and year.
    
    Args:
        df (pd.DataFrame): DataFrame with reappointments only
    
    Returns:
        pd.DataFrame: Pivot table with reappointment counts
    """
    
    print("\nCreating reappointment counts summary...")
    
    if len(df) == 0:
        print("No reappointments to summarize!")
        # Return empty DataFrame with proper structure
        return pd.DataFrame()
    
    # Group by organization and year, count reappointments
    grouped_counts = df.groupby(['org', 'year']).size().reset_index(name='reappointment_count')
    
    print(f"\nDebugging - Sample grouped data before pivot:")
    print(grouped_counts.head(10).to_string(index=False))
    print(f"Total org-year combinations with reappointments: {len(grouped_counts):,}")
    
    # Create pivot table with organizations as rows, years as columns
    pivot_table = grouped_counts.pivot(index='org', columns='year', values='reappointment_count')
    
    # Fill missing values with 0 (no reappointments for that org/year combination)
    pivot_table = pivot_table.fillna(0)
    
    # Ensure all values are integers (not floats)
    pivot_table = pivot_table.astype(int)
    
    # Sort columns (years) in ascending order
    pivot_table = pivot_table.reindex(sorted(pivot_table.columns), axis=1)
    
    # Add total column
    pivot_table['Total'] = pivot_table.sum(axis=1)
    
    # Sort by total reappointments (descending)
    pivot_table = pivot_table.sort_values('Total', ascending=False)
    
    return pivot_table

def validate_pivot_table(pivot_table):
    """
    Validate that the pivot table contains actual counts rather than just zeros.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table to validate
    
    Returns:
        dict: Validation results
    """
    
    print("Validating pivot table...")
    
    validation_results = {
        'has_data': len(pivot_table) > 0,
        'has_nonzero_counts': False,
        'total_reappointments': 0,
        'organizations_with_reappointments': 0,
        'years_with_reappointments': 0
    }
    
    if len(pivot_table) == 0:
        print("Warning: Pivot table is empty!")
        return validation_results
    
    # Check for non-zero counts
    year_columns = [col for col in pivot_table.columns if col != 'Total']
    if year_columns:
        non_zero_counts = (pivot_table[year_columns] > 0).sum().sum()
        validation_results['has_nonzero_counts'] = non_zero_counts > 0
        validation_results['total_reappointments'] = pivot_table['Total'].sum()
        validation_results['organizations_with_reappointments'] = (pivot_table['Total'] > 0).sum()
        validation_results['years_with_reappointments'] = (pivot_table[year_columns].sum() > 0).sum()
    
    print(f"Validation results:")
    print(f"  Organizations with reappointments: {validation_results['organizations_with_reappointments']:,}")
    print(f"  Years with reappointments: {validation_results['years_with_reappointments']:,}")
    print(f"  Total reappointments: {validation_results['total_reappointments']:,}")
    print(f"  Has non-zero counts: {validation_results['has_nonzero_counts']}")
    
    return validation_results

def print_reappointment_analysis(pivot_table, validation_stats):
    """
    Print detailed analysis of reappointment patterns.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with reappointment counts
        validation_stats (dict): Validation statistics
    """
    
    print("\n" + "="*70)
    print("REAPPOINTMENT COUNTS SUMMARY ANALYSIS")
    print("="*70)
    
    # Data validation summary
    print("Data Processing Summary:")
    print(f"  Original records: {validation_stats['original_records']:,}")
    print(f"  Total reappointments identified: {validation_stats['total_reappointments']:,}")
    print(f"  Valid reappointments after cleaning: {validation_stats['valid_reappointments']:,}")
    
    if len(pivot_table) == 0:
        print("\nNo reappointments found in the dataset!")
        return
    
    # Overall statistics
    print(f"\nReappointment Statistics:")
    print(f"  Organizations with reappointments: {len(pivot_table):,}")
    year_columns = [col for col in pivot_table.columns if col != 'Total']
    if year_columns:
        print(f"  Year range: {min(year_columns)} to {max(year_columns)}")
        print(f"  Total reappointments: {pivot_table['Total'].sum():,}")
    
    # Top organizations by reappointments
    if len(pivot_table) > 0:
        print(f"\nTop 10 Organizations by Total Reappointments:")
        top_orgs = pivot_table.head(10)
        for i, (org, row) in enumerate(top_orgs.iterrows(), 1):
            print(f"  {i:2d}. {org[:50]:<50} {row['Total']:>3} reappointments")
    
    # Year-by-year reappointment totals
    if year_columns:
        print(f"\nReappointments by Year:")
        year_totals = pivot_table[year_columns].sum()
        for year, total in year_totals.items():
            print(f"  {year}: {total:,} reappointments")

def save_reappointment_summary(pivot_table, output_dir, filename="step5_reappointment_counts.csv"):
    """
    Save the reappointment counts summary to CSV.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with reappointment counts
        output_dir (str): Directory to save the output file
        filename (str): Name of the output file
    """
    
    # Ensure output directory exists
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    output_path = os.path.join(output_dir, filename)
    
    try:
        if len(pivot_table) == 0:
            # Create empty DataFrame with proper structure
            empty_df = pd.DataFrame(columns=['org'])
            empty_df.to_csv(output_path, index=False)
            print(f"\nEmpty reappointment counts summary saved to: {output_path}")
        else:
            # Reset index to include organization as a regular column
            output_df = pivot_table.reset_index()
            output_df.to_csv(output_path, index=False)
            print(f"\nReappointment counts summary saved to: {output_path}")
        
    except Exception as e:
        print(f"Error saving file: {str(e)}")
        raise

def display_sample_reappointment_table(pivot_table, max_rows=10, max_cols=8):
    """
    Display a sample of the reappointment pivot table for review.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table to display
        max_rows (int): Maximum number of rows to display
        max_cols (int): Maximum number of columns to display
    """
    
    if len(pivot_table) == 0:
        print("\nNo reappointment data to display.")
        return
    
    print(f"\nSample of Reappointment Counts Table (showing top {max_rows} organizations):")
    print("="*70)
    
    # Select columns to display (first few years + Total)
    display_cols = pivot_table.columns.tolist()
    if len(display_cols) > max_cols:
        # Show first few years and Total
        year_cols = [col for col in display_cols if col != 'Total'][:max_cols-1]
        display_cols = year_cols + ['Total']
    
    sample_table = pivot_table.head(max_rows)[display_cols]
    
    # Format for better display
    print(sample_table.to_string())
    
    if len(pivot_table) > max_rows:
        print(f"\n... and {len(pivot_table) - max_rows} more organizations")

def main():
    """
    Main execution function.
    """
    
    print("New Brunswick Government Appointments Reappointment Counts Summary")
    print("="*75)
    
    # Define file paths
    data_dir = "scripts/claudesonnet4/version1/execution7/analysis_data"
    input_file = os.path.join(data_dir, "step3_repeats_marked.csv")
    
    try:
        # Load the marked dataset
        df = load_marked_dataset(input_file)
        
        # Validate data for reappointment analysis
        df_clean, validation_stats = validate_reappointment_data(df)
        
        # Filter for reappointments and show debugging info
        reappointments_df = filter_and_debug_reappointments(df_clean)
        
        # Create reappointment counts summary
        pivot_table = create_reappointment_summary(reappointments_df)
        
        # Validate the pivot table
        validation_results = validate_pivot_table(pivot_table)
        
        # Save the reappointment counts summary
        save_reappointment_summary(pivot_table, data_dir)
        
        # Display sample table
        display_sample_reappointment_table(pivot_table)
        
        # Print detailed analysis
        print_reappointment_analysis(pivot_table, validation_stats)
        
        print("\n" + "="*75)
        print("Reappointment counts summary completed successfully!")
        print("="*75)
        
    except Exception as e:
        print(f"\nError: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()