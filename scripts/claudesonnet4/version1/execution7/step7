#!/usr/bin/env python3
"""
New Brunswick Government Appointments Yearly Maximum Reappointment Rates

This script identifies the organization with the highest reappointment rate
for each year and creates a time series visualization.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

def load_reappointment_rates(file_path):
    """
    Load the reappointment rates dataset from step 6.
    
    Args:
        file_path (str): Path to the reappointment rates CSV
    
    Returns:
        pd.DataFrame: Loaded reappointment rates dataset
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Reappointment rates file not found: {file_path}")
        
        df = pd.read_csv(file_path)
        print(f"Loaded reappointment rates: {df.shape[0]:,} records")
        
        return df
        
    except Exception as e:
        print(f"Error loading reappointment rates: {str(e)}")
        raise

def validate_rates_data(df):
    """
    Validate the reappointment rates dataset.
    
    Args:
        df (pd.DataFrame): Reappointment rates dataset
    
    Returns:
        pd.DataFrame: Validated dataset
        dict: Validation statistics
    """
    
    print("Validating reappointment rates data...")
    
    # Check required columns
    required_columns = ['org', 'year', 'total_appointments', 'reappointments', 'reappointment_rate']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        raise ValueError(f"Missing required columns: {missing_columns}")
    
    # Validation statistics
    validation_stats = {
        'total_records': len(df),
        'unique_years': df['year'].nunique(),
        'unique_orgs': df['org'].nunique(),
        'records_with_appointments': (df['total_appointments'] > 0).sum(),
        'records_with_reappointments': (df['reappointments'] > 0).sum(),
        'records_with_positive_rates': (df['reappointment_rate'] > 0).sum(),
        'year_range': (df['year'].min(), df['year'].max()) if len(df) > 0 else (None, None)
    }
    
    print(f"Validation Summary:")
    print(f"  Total records: {validation_stats['total_records']:,}")
    print(f"  Unique years: {validation_stats['unique_years']:,}")
    print(f"  Unique organizations: {validation_stats['unique_orgs']:,}")
    print(f"  Records with appointments: {validation_stats['records_with_appointments']:,}")
    print(f"  Records with reappointments: {validation_stats['records_with_reappointments']:,}")
    print(f"  Records with positive rates: {validation_stats['records_with_positive_rates']:,}")
    if validation_stats['year_range'][0] is not None:
        print(f"  Year range: {validation_stats['year_range'][0]} to {validation_stats['year_range'][1]}")
    
    return df, validation_stats

def find_yearly_max_rates(df):
    """
    Find the organization with the highest reappointment rate for each year.
    
    Tie-breaking approach:
    1. First, select organizations with the highest reappointment rate
    2. If tied, select the organization with more total appointments
    3. If still tied, select the organization with more reappointments
    4. If still tied, select alphabetically first organization name
    
    Args:
        df (pd.DataFrame): Reappointment rates dataset
    
    Returns:
        pd.DataFrame: Yearly maximum rates
        dict: Processing statistics
    """
    
    print("Finding yearly maximum reappointment rates...")
    print("Tie-breaking approach:")
    print("  1. Highest reappointment rate")
    print("  2. If tied: Most total appointments") 
    print("  3. If tied: Most reappointments")
    print("  4. If tied: Alphabetically first organization name")
    
    # Filter for records with appointments to avoid division by zero cases
    valid_df = df[df['total_appointments'] > 0].copy()
    
    if len(valid_df) == 0:
        print("Warning: No valid records with appointments found!")
        return pd.DataFrame(columns=['year', 'top_org', 'max_rate']), {}
    
    yearly_max_list = []
    processing_stats = {
        'years_processed': 0,
        'years_with_ties': 0,
        'total_ties_resolved': 0,
        'years_with_zero_rates': 0
    }
    
    # Group by year and find maximum for each
    for year, year_group in valid_df.groupby('year'):
        processing_stats['years_processed'] += 1
        
        # Find the maximum reappointment rate for this year
        max_rate = year_group['reappointment_rate'].max()
        
        if max_rate == 0:
            processing_stats['years_with_zero_rates'] += 1
        
        # Get all organizations with the maximum rate
        max_rate_orgs = year_group[year_group['reappointment_rate'] == max_rate].copy()
        
        # Handle ties
        if len(max_rate_orgs) > 1:
            processing_stats['years_with_ties'] += 1
            processing_stats['total_ties_resolved'] += len(max_rate_orgs) - 1
            
            print(f"  {year}: {len(max_rate_orgs)} organizations tied at {max_rate:.1%}")
            
            # Tie-breaker 1: Most total appointments
            max_appointments = max_rate_orgs['total_appointments'].max()
            max_rate_orgs = max_rate_orgs[max_rate_orgs['total_appointments'] == max_appointments]
            
            if len(max_rate_orgs) > 1:
                # Tie-breaker 2: Most reappointments
                max_reappointments = max_rate_orgs['reappointments'].max()
                max_rate_orgs = max_rate_orgs[max_rate_orgs['reappointments'] == max_reappointments]
                
                if len(max_rate_orgs) > 1:
                    # Tie-breaker 3: Alphabetically first organization
                    max_rate_orgs = max_rate_orgs.sort_values('org')
        
        # Select the top organization (first after tie-breaking)
        top_org_row = max_rate_orgs.iloc[0]
        
        yearly_max_list.append({
            'year': year,
            'top_org': top_org_row['org'],
            'max_rate': max_rate,
            'total_appointments': top_org_row['total_appointments'],
            'reappointments': top_org_row['reappointments']
        })
    
    # Create DataFrame from results
    yearly_max_df = pd.DataFrame(yearly_max_list)
    yearly_max_df = yearly_max_df.sort_values('year')
    
    return yearly_max_df, processing_stats

def create_visualization(yearly_max_df, output_dir):
    """
    Create a visualization showing the yearly maximum reappointment rates trend.
    
    Args:
        yearly_max_df (pd.DataFrame): Yearly maximum rates data
        output_dir (str): Directory to save the visualization
    """
    
    print("Creating visualization...")
    
    if len(yearly_max_df) == 0:
        print("Warning: No data to visualize!")
        return
    
    # Set up the plot
    plt.figure(figsize=(12, 8))
    
    # Create the main plot
    plt.plot(yearly_max_df['year'], yearly_max_df['max_rate'] * 100, 
             marker='o', linewidth=2, markersize=6, color='#2E86AB')
    
    # Customize the plot
    plt.title('Highest Reappointment Rate by Year\nNew Brunswick Government Appointments', 
              fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Year', fontsize=12, fontweight='bold')
    plt.ylabel('Reappointment Rate (%)', fontsize=12, fontweight='bold')
    
    # Format y-axis as percentage
    plt.gca().yaxis.set_major_formatter(ticker.PercentFormatter(decimals=1))
    
    # Set x-axis to show all years
    if len(yearly_max_df) > 1:
        year_range = yearly_max_df['year'].max() - yearly_max_df['year'].min()
        if year_range <= 15:
            plt.xticks(yearly_max_df['year'])
        else:
            # For larger ranges, show every few years
            step = max(1, year_range // 10)
            years_to_show = yearly_max_df['year'][::step].tolist()
            if yearly_max_df['year'].iloc[-1] not in years_to_show:
                years_to_show.append(yearly_max_df['year'].iloc[-1])
            plt.xticks(years_to_show)
    
    # Add grid for better readability
    plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5)
    
    # Rotate x-axis labels if needed
    plt.xticks(rotation=45)
    
    # Add annotations for extreme values
    max_rate_idx = yearly_max_df['max_rate'].idxmax()
    max_rate_year = yearly_max_df.loc[max_rate_idx, 'year']
    max_rate_value = yearly_max_df.loc[max_rate_idx, 'max_rate'] * 100
    max_rate_org = yearly_max_df.loc[max_rate_idx, 'top_org']
    
    # Annotate the highest point
    plt.annotate(f'Peak: {max_rate_value:.1f}%\\n{max_rate_org[:30]}...\\n({max_rate_year})',
                xy=(max_rate_year, max_rate_value),
                xytext=(10, 10), textcoords='offset points',
                bbox=dict(boxstyle='round,pad=0.5', fc='yellow', alpha=0.7),
                arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'),
                fontsize=9)
    
    # Adjust layout to prevent label cutoff
    plt.tight_layout()
    
    # Save the plot
    output_path = os.path.join(output_dir, "step7_yearly_max_rates.png")
    plt.savefig(output_path, dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"Visualization saved to: {output_path}")

def print_yearly_results(yearly_max_df, processing_stats):
    """
    Print the year-by-year results.
    
    Args:
        yearly_max_df (pd.DataFrame): Yearly maximum rates data
        processing_stats (dict): Processing statistics
    """
    
    print("\n" + "="*80)
    print("YEARLY MAXIMUM REAPPOINTMENT RATES")
    print("="*80)
    
    # Processing summary
    print("Processing Summary:")
    print(f"  Years processed: {processing_stats['years_processed']:,}")
    print(f"  Years with ties: {processing_stats['years_with_ties']:,}")
    print(f"  Total ties resolved: {processing_stats['total_ties_resolved']:,}")
    print(f"  Years with zero rates: {processing_stats['years_with_zero_rates']:,}")
    
    if len(yearly_max_df) == 0:
        print("\nNo yearly maximum rates to display!")
        return
    
    # Year-by-year results
    print(f"\nYear-by-Year Maximum Reappointment Rates:")
    print("-" * 80)
    print(f"{'Year':<6} {'Rate':<8} {'Org':<50} {'Appointments':<10} {'Reapp.'}")
    print("-" * 80)
    
    for _, row in yearly_max_df.iterrows():
        rate_pct = row['max_rate'] * 100
        org_name = row['top_org'][:47] + "..." if len(row['top_org']) > 50 else row['top_org']
        print(f"{row['year']:<6} {rate_pct:>6.1f}% {org_name:<50} {row['total_appointments']:>6} {row['reappointments']:>6}")
    
    # Summary statistics
    print(f"\nSummary Statistics:")
    if len(yearly_max_df) > 0:
        avg_max_rate = yearly_max_df['max_rate'].mean() * 100
        highest_rate = yearly_max_df['max_rate'].max() * 100
        lowest_rate = yearly_max_df['max_rate'].min() * 100
        
        print(f"  Average yearly maximum rate: {avg_max_rate:.1f}%")
        print(f"  Highest rate achieved: {highest_rate:.1f}%")
        print(f"  Lowest yearly maximum: {lowest_rate:.1f}%")
        
        # Most frequent top organizations
        top_org_counts = yearly_max_df['top_org'].value_counts()
        print(f"\nOrganizations appearing most as yearly leaders:")
        for i, (org, count) in enumerate(top_org_counts.head(5).items(), 1):
            years_list = yearly_max_df[yearly_max_df['top_org'] == org]['year'].tolist()
            years_str = ', '.join(map(str, sorted(years_list)))
            print(f"  {i}. {org[:50]:<50} ({count} times: {years_str})")

def save_yearly_max_rates(yearly_max_df, output_dir, filename="step7_yearly_max_rates.csv"):
    """
    Save the yearly maximum rates dataset to CSV.
    
    Args:
        yearly_max_df (pd.DataFrame): Yearly maximum rates data
        output_dir (str): Directory to save the output file
        filename (str): Name of the output file
    """
    
    # Ensure output directory exists
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    output_path = os.path.join(output_dir, filename)
    
    try:
        # Select only the required columns for output
        output_df = yearly_max_df[['year', 'top_org', 'max_rate']].copy()
        output_df.to_csv(output_path, index=False)
        print(f"\nYearly maximum rates saved to: {output_path}")
        
    except Exception as e:
        print(f"Error saving file: {str(e)}")
        raise

def main():
    """
    Main execution function.
    """
    
    print("New Brunswick Government Appointments Yearly Maximum Reappointment Rates")
    print("="*85)
    
    # Define file paths
    data_dir = "scripts/claudesonnet4/version1/execution7/analysis_data"
    input_file = os.path.join(data_dir, "step6_reappointment_rates.csv")
    
    try:
        # Load reappointment rates
        df = load_reappointment_rates(input_file)
        
        # Validate data
        df, validation_stats = validate_rates_data(df)
        
        # Find yearly maximum rates
        yearly_max_df, processing_stats = find_yearly_max_rates(df)
        
        # Save results
        save_yearly_max_rates(yearly_max_df, data_dir)
        
        # Create visualization
        create_visualization(yearly_max_df, data_dir)
        
        # Print results
        print_yearly_results(yearly_max_df, processing_stats)
        
        print("\n" + "="*85)
        print("Yearly maximum reappointment rates analysis completed successfully!")
        print("="*85)
        
    except Exception as e:
        print(f"\nError: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()