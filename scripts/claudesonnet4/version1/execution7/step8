#!/usr/bin/env python3
"""
New Brunswick Government Appointments Annual Reappointment Proportions

This script calculates the overall proportion of reappointments across the
entire New Brunswick government for each year from 2013-2024.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

def load_marked_dataset(file_path):
    """
    Load the dataset with marked reappointments from step 3.
    
    Args:
        file_path (str): Path to the marked dataset
    
    Returns:
        pd.DataFrame: Loaded dataset
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Marked dataset not found: {file_path}")
        
        df = pd.read_csv(file_path)
        print(f"Loaded marked dataset: {df.shape[0]:,} records")
        
        return df
        
    except Exception as e:
        print(f"Error loading marked dataset: {str(e)}")
        raise

def validate_data_for_proportions(df):
    """
    Validate data for calculating annual proportions.
    
    Args:
        df (pd.DataFrame): Input DataFrame
    
    Returns:
        pd.DataFrame: Validated DataFrame
        dict: Validation statistics
    """
    
    print("Validating data for annual proportions calculation...")
    
    # Check required columns
    required_columns = ['year', 'reappointed']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        raise ValueError(f"Missing required columns: {missing_columns}")
    
    # Create validation statistics
    validation_stats = {
        'original_records': len(df),
        'missing_year': 0,
        'missing_reappointed': 0,
        'invalid_year': 0,
        'valid_records': 0
    }
    
    # Create a copy for validation
    df_clean = df.copy()
    
    # Handle missing years
    missing_year_mask = df_clean['year'].isna()
    validation_stats['missing_year'] = missing_year_mask.sum()
    
    if validation_stats['missing_year'] > 0:
        print(f"Warning: {validation_stats['missing_year']} records have missing year")
        # Remove records with missing years
        df_clean = df_clean[~missing_year_mask]
    
    # Validate and convert year values
    try:
        df_clean.loc[:, 'year'] = pd.to_numeric(df_clean['year'], errors='coerce')
        invalid_year_mask = df_clean['year'].isna()
        validation_stats['invalid_year'] = invalid_year_mask.sum()
        
        if validation_stats['invalid_year'] > 0:
            print(f"Warning: {validation_stats['invalid_year']} records have invalid year values")
            # Remove records with invalid years
            df_clean = df_clean[~invalid_year_mask]
    
    except Exception as e:
        print(f"Error processing year values: {e}")
        raise
    
    # Ensure year is integer
    df_clean.loc[:, 'year'] = df_clean['year'].astype(int)
    
    # Handle missing reappointed values
    missing_reappointed_mask = df_clean['reappointed'].isna()
    validation_stats['missing_reappointed'] = missing_reappointed_mask.sum()
    
    if validation_stats['missing_reappointed'] > 0:
        print(f"Warning: {validation_stats['missing_reappointed']} records have missing reappointed values")
        # Assume missing reappointed values are False
        df_clean.loc[missing_reappointed_mask, 'reappointed'] = False
    
    # Convert reappointed to boolean
    df_clean.loc[:, 'reappointed'] = df_clean['reappointed'].astype(bool)
    
    validation_stats['valid_records'] = len(df_clean)
    
    print(f"Validation Summary:")
    print(f"  Original records: {validation_stats['original_records']:,}")
    print(f"  Missing year: {validation_stats['missing_year']:,}")
    print(f"  Invalid year: {validation_stats['invalid_year']:,}")
    print(f"  Missing reappointed: {validation_stats['missing_reappointed']:,}")
    print(f"  Valid records: {validation_stats['valid_records']:,}")
    
    return df_clean, validation_stats

def calculate_annual_proportions(df):
    """
    Calculate annual reappointment proportions for the entire government.
    
    Args:
        df (pd.DataFrame): Validated DataFrame
    
    Returns:
        pd.DataFrame: Annual proportions data
        dict: Calculation statistics
    """
    
    print("Calculating annual reappointment proportions...")
    
    # Group by year and calculate totals
    annual_stats = df.groupby('year').agg({
        'reappointed': ['count', 'sum']
    }).round(4)
    
    # Flatten column names
    annual_stats.columns = ['total_appointments', 'total_reappointments']
    
    # Calculate reappointment proportion
    annual_stats['reappointment_proportion'] = np.where(
        annual_stats['total_appointments'] > 0,
        annual_stats['total_reappointments'] / annual_stats['total_appointments'],
        0.0
    )
    
    # Round proportion to 4 decimal places
    annual_stats['reappointment_proportion'] = annual_stats['reappointment_proportion'].round(4)
    
    # Reset index to make year a column
    annual_stats = annual_stats.reset_index()
    
    # Ensure we have all years from 2013-2024
    expected_years = list(range(2013, 2025))
    missing_years = set(expected_years) - set(annual_stats['year'])
    
    if missing_years:
        print(f"Warning: Missing data for years: {sorted(missing_years)}")
        
        # Add missing years with zero values
        missing_rows = []
        for year in missing_years:
            missing_rows.append({
                'year': year,
                'total_appointments': 0,
                'total_reappointments': 0,
                'reappointment_proportion': 0.0
            })
        
        missing_df = pd.DataFrame(missing_rows)
        annual_stats = pd.concat([annual_stats, missing_df], ignore_index=True)
    
    # Sort by year
    annual_stats = annual_stats.sort_values('year')
    
    # Calculate statistics
    calc_stats = {
        'years_with_data': (annual_stats['total_appointments'] > 0).sum(),
        'years_without_data': (annual_stats['total_appointments'] == 0).sum(),
        'total_appointments_all_years': annual_stats['total_appointments'].sum(),
        'total_reappointments_all_years': annual_stats['total_reappointments'].sum(),
        'overall_proportion': annual_stats['total_reappointments'].sum() / annual_stats['total_appointments'].sum() if annual_stats['total_appointments'].sum() > 0 else 0,
        'avg_annual_proportion': annual_stats[annual_stats['total_appointments'] > 0]['reappointment_proportion'].mean(),
        'min_proportion': annual_stats[annual_stats['total_appointments'] > 0]['reappointment_proportion'].min(),
        'max_proportion': annual_stats[annual_stats['total_appointments'] > 0]['reappointment_proportion'].max()
    }
    
    return annual_stats, calc_stats

def create_proportion_visualization(annual_stats, output_dir):
    """
    Create a visualization showing the annual reappointment proportion trend.
    
    Args:
        annual_stats (pd.DataFrame): Annual proportions data
        output_dir (str): Directory to save the visualization
    """
    
    print("Creating annual proportions visualization...")
    
    # Filter for years with data
    data_years = annual_stats[annual_stats['total_appointments'] > 0].copy()
    
    if len(data_years) == 0:
        print("Warning: No data to visualize!")
        return
    
    # Set up the plot
    plt.figure(figsize=(12, 8))
    
    # Create the main plot
    plt.plot(data_years['year'], data_years['reappointment_proportion'] * 100, 
             marker='o', linewidth=3, markersize=8, color='#D64545', 
             markerfacecolor='#D64545', markeredgecolor='white', markeredgewidth=2)
    
    # Customize the plot
    plt.title('Government-wide Reappointment Proportion Trend\nNew Brunswick Government Appointments (2013-2024)', 
              fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Year', fontsize=12, fontweight='bold')
    plt.ylabel('Reappointment Proportion (%)', fontsize=12, fontweight='bold')
    
    # Format y-axis as percentage
    plt.gca().yaxis.set_major_formatter(ticker.PercentFormatter(decimals=1))
    
    # Set x-axis to show all years with data
    plt.xticks(data_years['year'])
    
    # Add grid for better readability
    plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5)
    
    # Rotate x-axis labels
    plt.xticks(rotation=45)
    
    # Add a horizontal line for the overall average
    if len(data_years) > 1:
        avg_proportion = data_years['reappointment_proportion'].mean() * 100
        plt.axhline(y=avg_proportion, color='gray', linestyle='--', alpha=0.7, linewidth=1)
        plt.text(data_years['year'].iloc[-1], avg_proportion + 0.5, 
                f'Average: {avg_proportion:.1f}%', 
                horizontalalignment='right', fontsize=10, color='gray')
    
    # Annotate highest and lowest points
    if len(data_years) > 1:
        max_idx = data_years['reappointment_proportion'].idxmax()
        min_idx = data_years['reappointment_proportion'].idxmin()
        
        max_year = data_years.loc[max_idx, 'year']
        max_prop = data_years.loc[max_idx, 'reappointment_proportion'] * 100
        min_year = data_years.loc[min_idx, 'year']
        min_prop = data_years.loc[min_idx, 'reappointment_proportion'] * 100
        
        # Annotate highest point
        plt.annotate(f'Peak: {max_prop:.1f}%\n({max_year})',
                    xy=(max_year, max_prop),
                    xytext=(10, 10), textcoords='offset points',
                    bbox=dict(boxstyle='round,pad=0.5', fc='lightgreen', alpha=0.7),
                    arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'),
                    fontsize=9)
        
        # Annotate lowest point
        plt.annotate(f'Low: {min_prop:.1f}%\n({min_year})',
                    xy=(min_year, min_prop),
                    xytext=(10, -15), textcoords='offset points',
                    bbox=dict(boxstyle='round,pad=0.5', fc='lightcoral', alpha=0.7),
                    arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'),
                    fontsize=9)
    
    # Set y-axis to start from 0 for better perspective
    plt.ylim(bottom=0)
    
    # Adjust layout to prevent label cutoff
    plt.tight_layout()
    
    # Save the plot
    output_path = os.path.join(output_dir, "step8_annual_reappointment_proportions.png")
    plt.savefig(output_path, dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"Visualization saved to: {output_path}")

def print_annual_results(annual_stats, calc_stats, validation_stats):
    """
    Print the year-by-year proportions and summary statistics.
    
    Args:
        annual_stats (pd.DataFrame): Annual proportions data
        calc_stats (dict): Calculation statistics
        validation_stats (dict): Validation statistics
    """
    
    print("\n" + "="*70)
    print("ANNUAL GOVERNMENT-WIDE REAPPOINTMENT PROPORTIONS")
    print("="*70)
    
    # Data processing summary
    print("Data Processing Summary:")
    print(f"  Original records: {validation_stats['original_records']:,}")
    print(f"  Valid records processed: {validation_stats['valid_records']:,}")
    print(f"  Years with appointment data: {calc_stats['years_with_data']:,}")
    print(f"  Years without data: {calc_stats['years_without_data']:,}")
    
    # Overall statistics
    print(f"\nOverall Government Statistics:")
    print(f"  Total appointments (all years): {calc_stats['total_appointments_all_years']:,}")
    print(f"  Total reappointments (all years): {calc_stats['total_reappointments_all_years']:,}")
    print(f"  Overall reappointment proportion: {calc_stats['overall_proportion']:.1%}")
    
    if calc_stats['avg_annual_proportion'] is not None:
        print(f"  Average annual proportion: {calc_stats['avg_annual_proportion']:.1%}")
        print(f"  Highest annual proportion: {calc_stats['max_proportion']:.1%}")
        print(f"  Lowest annual proportion: {calc_stats['min_proportion']:.1%}")
    
    # Year-by-year results
    print(f"\nYear-by-Year Reappointment Proportions:")
    print("-" * 70)
    print(f"{'Year':<6} {'Total Apps':<12} {'Reapps':<8} {'Proportion':<12} {'Percentage'}")
    print("-" * 70)
    
    for _, row in annual_stats.iterrows():
        if row['total_appointments'] > 0:
            proportion_pct = row['reappointment_proportion'] * 100
            print(f"{row['year']:<6} {row['total_appointments']:>10,} {row['total_reappointments']:>6,} "
                  f"{row['reappointment_proportion']:>10.4f} {proportion_pct:>9.1f}%")
        else:
            print(f"{row['year']:<6} {'No data':>10} {'No data':>6} {'No data':>10} {'No data':>9}")
    
    # Trend analysis
    data_years = annual_stats[annual_stats['total_appointments'] > 0]
    if len(data_years) > 1:
        print(f"\nTrend Analysis:")
        first_year = data_years.iloc[0]
        last_year = data_years.iloc[-1]
        
        change = (last_year['reappointment_proportion'] - first_year['reappointment_proportion']) * 100
        print(f"  Change from {first_year['year']} to {last_year['year']}: {change:+.1f} percentage points")
        
        if change > 0:
            print(f"  Trend: Increasing reappointment proportion")
        elif change < 0:
            print(f"  Trend: Decreasing reappointment proportion")
        else:
            print(f"  Trend: Stable reappointment proportion")

def save_annual_proportions(annual_stats, output_dir, filename="step8_annual_proportions.csv"):
    """
    Save the annual proportions dataset to CSV.
    
    Args:
        annual_stats (pd.DataFrame): Annual proportions data
        output_dir (str): Directory to save the output file
        filename (str): Name of the output file
    """
    
    # Ensure output directory exists
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    output_path = os.path.join(output_dir, filename)
    
    try:
        annual_stats.to_csv(output_path, index=False)
        print(f"\nAnnual proportions saved to: {output_path}")
        
    except Exception as e:
        print(f"Error saving file: {str(e)}")
        raise

def main():
    """
    Main execution function.
    """
    
    print("New Brunswick Government Appointments Annual Reappointment Proportions")
    print("="*75)
    
    # Define file paths
    data_dir = "scripts/claudesonnet4/version1/execution7/analysis_data"
    input_file = os.path.join(data_dir, "step3_repeats_marked.csv")
    
    try:
        # Load the marked dataset
        df = load_marked_dataset(input_file)
        
        # Validate data for proportions calculation
        df_clean, validation_stats = validate_data_for_proportions(df)
        
        # Calculate annual proportions
        annual_stats, calc_stats = calculate_annual_proportions(df_clean)
        
        # Save results
        save_annual_proportions(annual_stats, data_dir)
        
        # Create visualization
        create_proportion_visualization(annual_stats, data_dir)
        
        # Print results
        print_annual_results(annual_stats, calc_stats, validation_stats)
        
        print("\n" + "="*75)
        print("Annual reappointment proportions calculation completed successfully!")
        print("="*75)
        
    except Exception as e:
        print(f"\nError: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()