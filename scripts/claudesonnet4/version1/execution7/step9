#!/usr/bin/env python3
"""
New Brunswick Government Appointments Regression Analysis

This script performs comprehensive regression analysis on government-wide
reappointment proportion trends to determine if there is a statistically
significant increasing or decreasing trend over the 12-year period.

Author: Claude Sonnet 4
Date: June 30, 2025
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
from scipy import stats
from scipy.stats import linregress, normaltest, jarque_bera
import warnings

def load_annual_proportions(file_path):
    """
    Load the annual government-wide proportions from step 8.
    
    Args:
        file_path (str): Path to the annual proportions CSV
    
    Returns:
        pd.DataFrame: Loaded annual proportions dataset
    """
    
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Annual proportions file not found: {file_path}")
        
        df = pd.read_csv(file_path)
        print(f"Loaded annual proportions: {df.shape[0]:,} years")
        
        return df
        
    except Exception as e:
        print(f"Error loading annual proportions: {str(e)}")
        raise

def prepare_regression_data(df):
    """
    Prepare data for regression analysis.
    
    Args:
        df (pd.DataFrame): Annual proportions dataset
    
    Returns:
        tuple: (years, proportions, data_summary)
    """
    
    print("Preparing data for regression analysis...")
    
    # Validate required columns
    required_columns = ['year', 'total_appointments', 'reappointment_proportion']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        raise ValueError(f"Missing required columns: {missing_columns}")
    
    # Filter for years with actual data (total_appointments > 0)
    valid_data = df[df['total_appointments'] > 0].copy()
    
    if len(valid_data) < 3:
        raise ValueError(f"Insufficient data for regression analysis. Need at least 3 years, found {len(valid_data)}")
    
    # Sort by year
    valid_data = valid_data.sort_values('year')
    
    # Extract variables for regression
    years = valid_data['year'].values
    proportions = valid_data['reappointment_proportion'].values
    
    # Create data summary
    data_summary = {
        'total_years': len(df),
        'years_with_data': len(valid_data),
        'year_range': (years.min(), years.max()),
        'proportion_range': (proportions.min(), proportions.max()),
        'mean_proportion': proportions.mean(),
        'std_proportion': proportions.std(),
        'years_analyzed': years.tolist(),
        'proportions_analyzed': proportions.tolist()
    }
    
    print(f"Data Summary:")
    print(f"  Years with data: {data_summary['years_with_data']} out of {data_summary['total_years']}")
    print(f"  Year range: {data_summary['year_range'][0]} to {data_summary['year_range'][1]}")
    print(f"  Proportion range: {data_summary['proportion_range'][0]:.4f} to {data_summary['proportion_range'][1]:.4f}")
    print(f"  Mean proportion: {data_summary['mean_proportion']:.4f}")
    
    return years, proportions, data_summary

def perform_linear_regression(years, proportions):
    """
    Perform linear regression analysis using scipy.stats.linregress.
    
    Args:
        years (np.array): Year values (X variable)
        proportions (np.array): Reappointment proportions (Y variable)
    
    Returns:
        dict: Comprehensive regression results
    """
    
    print("Performing linear regression analysis...")
    
    # Perform linear regression
    slope, intercept, r_value, p_value, std_err = linregress(years, proportions)
    
    # Calculate additional statistics
    n = len(years)
    r_squared = r_value ** 2
    adjusted_r_squared = 1 - (1 - r_squared) * (n - 1) / (n - 2) if n > 2 else r_squared
    
    # Calculate fitted values and residuals
    fitted_values = slope * years + intercept
    residuals = proportions - fitted_values
    
    # Calculate confidence intervals for slope (95%)
    # t-critical value for 95% CI with (n-2) degrees of freedom
    df = n - 2
    t_critical = stats.t.ppf(0.975, df) if df > 0 else np.inf
    slope_ci_margin = t_critical * std_err
    slope_ci_lower = slope - slope_ci_margin
    slope_ci_upper = slope + slope_ci_margin
    
    # Calculate confidence intervals for predictions
    # Standard error of prediction
    x_mean = years.mean()
    ss_x = np.sum((years - x_mean) ** 2)
    mse = np.sum(residuals ** 2) / df if df > 0 else np.inf
    
    # Calculate annual change in percentage points
    annual_change_pp = slope * 100  # Convert to percentage points
    
    # Calculate total change over the period
    year_span = years.max() - years.min()
    total_change_pp = annual_change_pp * year_span
    
    regression_results = {
        'slope': slope,
        'intercept': intercept,
        'r_value': r_value,
        'r_squared': r_squared,
        'adjusted_r_squared': adjusted_r_squared,
        'p_value': p_value,
        'std_err': std_err,
        'slope_ci_lower': slope_ci_lower,
        'slope_ci_upper': slope_ci_upper,
        'fitted_values': fitted_values,
        'residuals': residuals,
        'n': n,
        'df': df,
        'mse': mse,
        'annual_change_pp': annual_change_pp,
        'total_change_pp': total_change_pp,
        'year_span': year_span
    }
    
    return regression_results

def perform_regression_diagnostics(years, proportions, regression_results):
    """
    Perform regression diagnostics including Durbin-Watson test and outlier detection.
    
    Args:
        years (np.array): Year values
        proportions (np.array): Reappointment proportions
        regression_results (dict): Regression results
    
    Returns:
        dict: Diagnostic results
    """
    
    print("Performing regression diagnostics...")
    
    residuals = regression_results['residuals']
    n = len(residuals)
    
    # Durbin-Watson test for autocorrelation
    def durbin_watson(residuals):
        """Calculate Durbin-Watson statistic"""
        diff = np.diff(residuals)
        return np.sum(diff ** 2) / np.sum(residuals ** 2)
    
    dw_statistic = durbin_watson(residuals)
    
    # Interpret Durbin-Watson statistic
    # Values around 2 indicate no autocorrelation
    # Values < 1 or > 3 indicate potential autocorrelation issues
    if dw_statistic < 1.5:
        dw_interpretation = "Positive autocorrelation detected"
    elif dw_statistic > 2.5:
        dw_interpretation = "Negative autocorrelation detected"
    else:
        dw_interpretation = "No significant autocorrelation"
    
    # Outlier detection using standardized residuals
    residual_std = np.std(residuals)
    standardized_residuals = residuals / residual_std if residual_std > 0 else residuals
    
    # Identify potential outliers (|standardized residual| > 2)
    outlier_threshold = 2
    outlier_mask = np.abs(standardized_residuals) > outlier_threshold
    outlier_years = years[outlier_mask]
    outlier_proportions = proportions[outlier_mask]
    outlier_residuals = residuals[outlier_mask]
    
    # Test for normality of residuals
    try:
        # Shapiro-Wilk test (better for small samples)
        shapiro_stat, shapiro_p = stats.shapiro(residuals)
        normality_test = "Shapiro-Wilk"
        normality_stat = shapiro_stat
        normality_p = shapiro_p
    except:
        try:
            # Jarque-Bera test as fallback
            jb_stat, jb_p = jarque_bera(residuals)
            normality_test = "Jarque-Bera"
            normality_stat = jb_stat
            normality_p = jb_p
        except:
            normality_test = "Unable to perform"
            normality_stat = np.nan
            normality_p = np.nan
    
    diagnostics = {
        'durbin_watson_statistic': dw_statistic,
        'durbin_watson_interpretation': dw_interpretation,
        'outlier_count': len(outlier_years),
        'outlier_years': outlier_years.tolist(),
        'outlier_proportions': outlier_proportions.tolist(),
        'outlier_residuals': outlier_residuals.tolist(),
        'standardized_residuals': standardized_residuals.tolist(),
        'normality_test': normality_test,
        'normality_statistic': normality_stat,
        'normality_p_value': normality_p,
        'residual_mean': np.mean(residuals),
        'residual_std': residual_std
    }
    
    return diagnostics

def interpret_results(regression_results, diagnostics, data_summary):
    """
    Interpret regression results and provide conclusions.
    
    Args:
        regression_results (dict): Regression results
        diagnostics (dict): Diagnostic results
        data_summary (dict): Data summary
    
    Returns:
        dict: Interpretation and conclusions
    """
    
    print("Interpreting regression results...")
    
    slope = regression_results['slope']
    p_value = regression_results['p_value']
    r_squared = regression_results['r_squared']
    annual_change_pp = regression_results['annual_change_pp']
    total_change_pp = regression_results['total_change_pp']
    
    # Determine trend direction
    if slope > 0:
        trend_direction = "increasing"
        trend_description = "upward"
    elif slope < 0:
        trend_direction = "decreasing"
        trend_description = "downward"
    else:
        trend_direction = "stable"
        trend_description = "flat"
    
    # Determine statistical significance
    significance_level = 0.05
    is_significant = p_value < significance_level
    
    # Create interpretation
    if is_significant:
        significance_description = f"statistically significant (p = {p_value:.4f} < 0.05)"
        conclusion_certainty = "There is strong statistical evidence"
    else:
        significance_description = f"not statistically significant (p = {p_value:.4f} â‰¥ 0.05)"
        conclusion_certainty = "There is insufficient statistical evidence"
    
    # Overall conclusion
    main_conclusion = f"{conclusion_certainty} of a {trend_direction} trend in government-wide reappointment proportions over the {regression_results['year_span']}-year period."
    
    # Practical significance assessment
    if abs(annual_change_pp) < 0.1:
        practical_significance = "negligible"
    elif abs(annual_change_pp) < 0.5:
        practical_significance = "small"
    elif abs(annual_change_pp) < 1.0:
        practical_significance = "moderate"
    else:
        practical_significance = "large"
    
    interpretation = {
        'trend_direction': trend_direction,
        'trend_description': trend_description,
        'is_statistically_significant': is_significant,
        'significance_description': significance_description,
        'conclusion_certainty': conclusion_certainty,
        'main_conclusion': main_conclusion,
        'practical_significance': practical_significance,
        'model_quality': 'good' if r_squared > 0.7 else 'moderate' if r_squared > 0.4 else 'poor',
        'data_quality_concerns': diagnostics['outlier_count'] > 0 or diagnostics['durbin_watson_statistic'] < 1.5 or diagnostics['durbin_watson_statistic'] > 2.5
    }
    
    return interpretation

def save_detailed_results(years, proportions, data_summary, regression_results, diagnostics, interpretation, output_dir):
    """
    Save comprehensive statistical results to a text file.
    
    Args:
        years (np.array): Year values
        proportions (np.array): Proportion values
        data_summary (dict): Data summary
        regression_results (dict): Regression results
        diagnostics (dict): Diagnostic results
        interpretation (dict): Interpretation results
        output_dir (str): Output directory
    """
    
    # Ensure output directory exists
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    output_path = os.path.join(output_dir, "step9_regression_results.txt")
    
    try:
        with open(output_path, 'w') as f:
            f.write("NEW BRUNSWICK GOVERNMENT APPOINTMENTS\n")
            f.write("REGRESSION ANALYSIS OF REAPPOINTMENT PROPORTION TRENDS\n")
            f.write("=" * 70 + "\n\n")
            
            # Data Summary
            f.write("DATA SUMMARY\n")
            f.write("-" * 20 + "\n")
            f.write(f"Years analyzed: {data_summary['years_with_data']} out of {data_summary['total_years']} total years\n")
            f.write(f"Time period: {data_summary['year_range'][0]} to {data_summary['year_range'][1]}\n")
            f.write(f"Years included: {', '.join(map(str, data_summary['years_analyzed']))}\n")
            f.write(f"Mean reappointment proportion: {data_summary['mean_proportion']:.4f} ({data_summary['mean_proportion']*100:.2f}%)\n")
            f.write(f"Standard deviation: {data_summary['std_proportion']:.4f}\n")
            f.write(f"Range: {data_summary['proportion_range'][0]:.4f} to {data_summary['proportion_range'][1]:.4f}\n\n")
            
            # Regression Results
            f.write("REGRESSION ANALYSIS RESULTS\n")
            f.write("-" * 30 + "\n")
            f.write(f"Model: Reappointment Proportion = {regression_results['intercept']:.6f} + {regression_results['slope']:.6f} * Year\n\n")
            f.write(f"Slope (trend coefficient): {regression_results['slope']:.6f}\n")
            f.write(f"Intercept: {regression_results['intercept']:.6f}\n")
            f.write(f"R-squared: {regression_results['r_squared']:.4f}\n")
            f.write(f"Adjusted R-squared: {regression_results['adjusted_r_squared']:.4f}\n")
            f.write(f"Correlation coefficient (r): {regression_results['r_value']:.4f}\n")
            f.write(f"P-value: {regression_results['p_value']:.6f}\n")
            f.write(f"Standard error of slope: {regression_results['std_err']:.6f}\n")
            f.write(f"95% Confidence interval for slope: [{regression_results['slope_ci_lower']:.6f}, {regression_results['slope_ci_upper']:.6f}]\n")
            f.write(f"Degrees of freedom: {regression_results['df']}\n")
            f.write(f"Mean squared error: {regression_results['mse']:.8f}\n\n")
            
            # Trend Analysis
            f.write("TREND ANALYSIS\n")
            f.write("-" * 15 + "\n")
            f.write(f"Annual change: {regression_results['annual_change_pp']:.4f} percentage points per year\n")
            f.write(f"Total change over {regression_results['year_span']} years: {regression_results['total_change_pp']:.4f} percentage points\n")
            f.write(f"Trend direction: {interpretation['trend_direction'].upper()}\n")
            f.write(f"Statistical significance: {interpretation['significance_description']}\n")
            f.write(f"Practical significance: {interpretation['practical_significance']}\n\n")
            
            # Regression Diagnostics
            f.write("REGRESSION DIAGNOSTICS\n")
            f.write("-" * 22 + "\n")
            f.write(f"Durbin-Watson statistic: {diagnostics['durbin_watson_statistic']:.4f}\n")
            f.write(f"Autocorrelation assessment: {diagnostics['durbin_watson_interpretation']}\n")
            f.write(f"Outliers detected: {diagnostics['outlier_count']}\n")
            if diagnostics['outlier_count'] > 0:
                f.write(f"Outlier years: {', '.join(map(str, diagnostics['outlier_years']))}\n")
            f.write(f"Residual normality test: {diagnostics['normality_test']}\n")
            if not np.isnan(diagnostics['normality_p_value']):
                f.write(f"Normality p-value: {diagnostics['normality_p_value']:.4f}\n")
            f.write(f"Residual mean: {diagnostics['residual_mean']:.6f} (should be â‰ˆ 0)\n")
            f.write(f"Residual standard deviation: {diagnostics['residual_std']:.6f}\n\n")
            
            # Model Quality Assessment
            f.write("MODEL QUALITY ASSESSMENT\n")
            f.write("-" * 25 + "\n")
            f.write(f"Model fit quality: {interpretation['model_quality'].upper()}\n")
            f.write(f"R-squared interpretation: {regression_results['r_squared']*100:.1f}% of variance explained\n")
            if interpretation['data_quality_concerns']:
                f.write("Data quality concerns: Present (see diagnostics above)\n")
            else:
                f.write("Data quality concerns: None detected\n")
            f.write("\n")
            
            # Conclusions
            f.write("CONCLUSIONS\n")
            f.write("-" * 12 + "\n")
            f.write(f"Main finding: {interpretation['main_conclusion']}\n\n")
            
            if interpretation['is_statistically_significant']:
                f.write("STATISTICAL SIGNIFICANCE: YES\n")
                f.write(f"The {interpretation['trend_direction']} trend is statistically significant at the 0.05 level.\n")
            else:
                f.write("STATISTICAL SIGNIFICANCE: NO\n")
                f.write("The trend is not statistically significant at the 0.05 level.\n")
            
            f.write(f"\nTREND DIRECTION: {interpretation['trend_direction'].upper()}\n")
            if regression_results['slope'] > 0:
                f.write("The reappointment proportion shows an increasing trend over time.\n")
            elif regression_results['slope'] < 0:
                f.write("The reappointment proportion shows a decreasing trend over time.\n")
            else:
                f.write("The reappointment proportion shows no clear trend over time.\n")
            
            # Final Answer
            f.write("\n" + "=" * 70 + "\n")
            f.write("FINAL ANSWER\n")
            f.write("=" * 70 + "\n")
            f.write(f"Is the government-wide reappointment proportion trend {interpretation['trend_direction']}? YES\n")
            f.write(f"Is this trend statistically significant? {'YES' if interpretation['is_statistically_significant'] else 'NO'}\n")
            f.write(f"Annual change: {regression_results['annual_change_pp']:.4f} percentage points per year\n")
            f.write(f"P-value: {regression_results['p_value']:.6f}\n")
        
        print(f"\nDetailed results saved to: {output_path}")
        
    except Exception as e:
        print(f"Error saving results file: {str(e)}")
        raise

def print_final_answer(interpretation, regression_results):
    """
    Print the final answer clearly.
    
    Args:
        interpretation (dict): Interpretation results
        regression_results (dict): Regression results
    """
    
    print("\n" + "=" * 80)
    print("FINAL ANSWER")
    print("=" * 80)
    
    print(f"\nQUESTION: Is the government-wide reappointment proportion trend increasing")
    print(f"or declining over the 12-year period, and is it statistically significant?")
    
    print(f"\nANSWER:")
    print(f"â€¢ TREND DIRECTION: {interpretation['trend_direction'].upper()}")
    print(f"â€¢ STATISTICAL SIGNIFICANCE: {'YES' if interpretation['is_statistically_significant'] else 'NO'}")
    print(f"â€¢ ANNUAL CHANGE: {regression_results['annual_change_pp']:.4f} percentage points per year")
    print(f"â€¢ TOTAL CHANGE: {regression_results['total_change_pp']:.4f} percentage points over {regression_results['year_span']} years")
    print(f"â€¢ P-VALUE: {regression_results['p_value']:.6f}")
    print(f"â€¢ R-SQUARED: {regression_results['r_squared']:.4f}")
    
    print(f"\nCONCLUSION:")
    print(f"{interpretation['main_conclusion']}")
    
    if interpretation['is_statistically_significant']:
        print(f"\nThe {interpretation['trend_direction']} trend is statistically significant,")
        print(f"meaning we can be confident this is a real pattern and not due to random variation.")
    else:
        print(f"\nThe trend is not statistically significant,")
        print(f"meaning we cannot rule out that the observed pattern is due to random variation.")

def main():
    """
    Main execution function.
    """
    
    print("New Brunswick Government Appointments Regression Analysis")
    print("=" * 60)
    
    # Define file paths
    data_dir = "scripts/claudesonnet4/version1/execution7/analysis_data"
    input_file = os.path.join(data_dir, "step8_annual_proportions.csv")
    
    try:
        # Load annual proportions
        df = load_annual_proportions(input_file)
        
        # Prepare data for regression
        years, proportions, data_summary = prepare_regression_data(df)
        
        # Perform linear regression
        regression_results = perform_linear_regression(years, proportions)
        
        # Perform regression diagnostics
        diagnostics = perform_regression_diagnostics(years, proportions, regression_results)
        
        # Interpret results
        interpretation = interpret_results(regression_results, diagnostics, data_summary)
        
        # Save detailed results
        save_detailed_results(years, proportions, data_summary, regression_results, 
                            diagnostics, interpretation, data_dir)
        
        # Print final answer
        print_final_answer(interpretation, regression_results)
        
        print("\n" + "=" * 60)
        print("Regression analysis completed successfully!")
        print("=" * 60)
        
    except Exception as e:
        print(f"\nError: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()