#!/usr/bin/env python3
"""
New Brunswick Government Appointments Data Combiner
==================================================

This script loads CSV files containing New Brunswick government appointment data 
from 2013-2024, adds year columns, combines them into a single DataFrame, and 
saves the result.

Author: Claude Sonnet 4
Created: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_and_combine_appointments():
    """
    Load all appointment CSV files from 2013-2024 and combine into single DataFrame.
    
    Assumptions:
    - All CSV files have the same column structure
    - Files are named 'appointments_YYYY.csv' where YYYY is the year
    - Files are located in 'raw_data/' directory
    - All files use UTF-8 encoding
    
    Returns:
        pd.DataFrame: Combined dataset with added 'year' column
    """
    
    # Create output directory if it doesn't exist
    output_dir = Path("scripts/claudesonnet4/version1/execution8/analysis_data")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # List to store individual DataFrames
    dataframes = []
    
    # Years to process
    years = range(2013, 2025)  # 2013 through 2024
    
    print("Loading appointment data files...")
    print("-" * 40)
    
    for year in years:
        filename = f"raw_data/appointments_{year}.csv"
        
        try:
            # Check if file exists
            if not os.path.exists(filename):
                print(f"WARNING: File {filename} not found, skipping...")
                continue
            
            # Load CSV file
            df = pd.read_csv(filename, encoding='utf-8')
            
            # Add year column
            df['year'] = year
            
            # Add to list
            dataframes.append(df)
            
            print(f"✓ Loaded {filename}: {df.shape[0]} rows, {df.shape[1]} columns")
            
        except FileNotFoundError:
            print(f"ERROR: File {filename} not found, skipping...")
            continue
        except pd.errors.EmptyDataError:
            print(f"ERROR: File {filename} is empty, skipping...")
            continue
        except Exception as e:
            print(f"ERROR: Failed to load {filename}: {str(e)}")
            continue
    
    # Check if any files were loaded
    if not dataframes:
        print("ERROR: No valid CSV files were loaded!")
        sys.exit(1)
    
    print(f"\nSuccessfully loaded {len(dataframes)} files")
    print("-" * 40)
    
    # Combine all DataFrames
    try:
        combined_df = pd.concat(dataframes, ignore_index=True)
        print(f"✓ Combined all datasets successfully")
        
    except Exception as e:
        print(f"ERROR: Failed to combine datasets: {str(e)}")
        sys.exit(1)
    
    # Save combined dataset
    output_file = output_dir / "step1_combined_appointments.csv"
    
    try:
        combined_df.to_csv(output_file, index=False, encoding='utf-8')
        print(f"✓ Saved combined dataset to: {output_file}")
        
    except Exception as e:
        print(f"ERROR: Failed to save combined dataset: {str(e)}")
        sys.exit(1)
    
    return combined_df

def print_dataset_info(df):
    """
    Print basic information about the combined dataset.
    
    Args:
        df (pd.DataFrame): The combined appointments dataset
    """
    print("\nCOMBINED DATASET SUMMARY")
    print("=" * 50)
    
    # Basic shape information
    print(f"Shape: {df.shape[0]:,} rows × {df.shape[1]} columns")
    
    # Year distribution
    if 'year' in df.columns:
        year_counts = df['year'].value_counts().sort_index()
        print(f"\nRecords by year:")
        for year, count in year_counts.items():
            print(f"  {year}: {count:,} appointments")
    
    # Column information
    print(f"\nColumns ({len(df.columns)}):")
    for i, col in enumerate(df.columns, 1):
        non_null_count = df[col].notna().sum()
        null_percentage = (df[col].isna().sum() / len(df)) * 100
        print(f"  {i:2d}. {col:<15} - {non_null_count:,} non-null ({null_percentage:.1f}% missing)")
    
    # Memory usage
    memory_usage_mb = df.memory_usage(deep=True).sum() / (1024 * 1024)
    print(f"\nMemory usage: {memory_usage_mb:.2f} MB")
    
    # Data types
    print(f"\nData types:")
    dtype_counts = df.dtypes.value_counts()
    for dtype, count in dtype_counts.items():
        print(f"  {dtype}: {count} columns")

def main():
    """Main execution function."""
    print("NEW BRUNSWICK GOVERNMENT APPOINTMENTS DATA COMBINER")
    print("=" * 60)
    
    try:
        # Load and combine all datasets
        combined_df = load_and_combine_appointments()
        
        # Print dataset information
        print_dataset_info(combined_df)
        
        print(f"\n✓ Process completed successfully!")
        print(f"Combined dataset saved with {combined_df.shape[0]:,} total appointments")
        
    except KeyboardInterrupt:
        print("\n\nProcess interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nFATAL ERROR: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()