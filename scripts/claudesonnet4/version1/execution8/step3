#!/usr/bin/env python3
"""
New Brunswick Government Appointments Reappointment Marker
=========================================================

This script identifies and marks reappointments by analyzing unique combinations
of name, position, and organization, marking all occurrences except the first
chronologically as reappointments.

Author: Claude Sonnet 4
Created: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import re
from typing import Tuple, Dict

def normalize_name(name):
    """
    Normalize names to handle variations and potential duplicates.
    
    Args:
        name (str): Original name
        
    Returns:
        str: Normalized name
    """
    if pd.isna(name):
        return name
    
    # Convert to string and strip whitespace
    name_str = str(name).strip()
    
    # Convert to lowercase for comparison
    name_lower = name_str.lower()
    
    # Remove extra whitespace between words
    name_clean = re.sub(r'\s+', ' ', name_lower)
    
    # Remove common prefixes/suffixes that might cause duplicates
    # (Dr., Mr., Mrs., Ms., Jr., Sr., etc.)
    prefixes = ['dr.', 'mr.', 'mrs.', 'ms.', 'prof.', 'professor']
    suffixes = ['jr.', 'sr.', 'ii', 'iii', 'iv']
    
    words = name_clean.split()
    
    # Remove prefixes
    if words and words[0] in prefixes:
        words = words[1:]
    
    # Remove suffixes
    if words and words[-1] in suffixes:
        words = words[:-1]
    
    return ' '.join(words)

def create_sort_key(df):
    """
    Create a sorting key for chronological ordering.
    
    Args:
        df (pd.DataFrame): DataFrame with year column
        
    Returns:
        pd.Series: Sort key for chronological ordering
    """
    # Primary sort by year
    sort_key = df['year'].fillna(9999)  # Put missing years at the end
    
    return sort_key

def identify_reappointments(df):
    """
    Identify and mark reappointments based on name, position, and organization.
    
    Args:
        df (pd.DataFrame): Input dataset
        
    Returns:
        pd.DataFrame: Dataset with updated reappointed column
    """
    print("Identifying reappointments...")
    print("-" * 40)
    
    # Create a copy to avoid modifying the original
    result_df = df.copy()
    
    # Normalize names for comparison
    result_df['normalized_name'] = result_df['name'].apply(normalize_name)
    
    # Create grouping columns, handling missing values
    result_df['position_clean'] = result_df['position'].fillna('UNKNOWN_POSITION')
    result_df['org_clean'] = result_df['org'].fillna('UNKNOWN_ORG')
    
    # Track statistics
    original_reappointments = result_df['reappointed'].sum() if result_df['reappointed'].dtype == 'bool' else 0
    newly_identified = 0
    groups_processed = 0
    
    # Group by normalized name, position, and organization
    grouping_cols = ['normalized_name', 'position_clean', 'org_clean']
    
    try:
        grouped = result_df.groupby(grouping_cols, dropna=False)
        
        print(f"Processing {len(grouped)} unique combinations...")
        
        for name_key, group in grouped:
            groups_processed += 1
            
            # Skip groups with only one appointment
            if len(group) <= 1:
                continue
            
            # Skip groups where normalized name is NaN
            if pd.isna(name_key[0]):
                continue
            
            # Sort group chronologically using stable sort
            group_sorted = group.sort_values('year', kind='stable', na_position='last')
            
            # Get indices for this group
            group_indices = group_sorted.index.tolist()
            
            # Mark all except the first as reappointments
            if len(group_indices) > 1:
                # Keep the first appointment as original
                first_idx = group_indices[0]
                reappointment_indices = group_indices[1:]
                
                # Update reappointed column for subsequent appointments
                for idx in reappointment_indices:
                    if not result_df.loc[idx, 'reappointed']:  # Only count if not already marked
                        newly_identified += 1
                    result_df.loc[idx, 'reappointed'] = True
                
                # Print sample of what was found (for first few groups)
                if groups_processed <= 5:
                    print(f"  Group {groups_processed}: {name_key[0][:30]}... at {name_key[2][:30]}...")
                    print(f"    Found {len(reappointment_indices)} reappointments")
    
    except Exception as e:
        print(f"ERROR during grouping: {str(e)}")
        raise
    
    # Remove temporary columns
    result_df = result_df.drop(columns=['normalized_name', 'position_clean', 'org_clean'])
    
    print(f"\n✓ Processed {groups_processed} unique combinations")
    print(f"✓ Identified {newly_identified} additional reappointments")
    
    return result_df, original_reappointments, newly_identified

def validate_and_prepare_data(df):
    """
    Validate and prepare the dataset for processing.
    
    Args:
        df (pd.DataFrame): Input dataset
        
    Returns:
        pd.DataFrame: Validated and prepared dataset
    """
    print("Validating and preparing dataset...")
    
    # Check required columns
    required_cols = ['name', 'position', 'org', 'year', 'reappointed']
    missing_cols = [col for col in required_cols if col not in df.columns]
    
    if missing_cols:
        print(f"ERROR: Missing required columns: {missing_cols}")
        sys.exit(1)
    
    # Validate data types
    try:
        # Ensure year is numeric
        df['year'] = pd.to_numeric(df['year'], errors='coerce')
        
        # Ensure reappointed is boolean
        if df['reappointed'].dtype != 'bool':
            # Convert common representations to boolean
            df['reappointed'] = df['reappointed'].map({
                True: True, False: False, 'True': True, 'False': False,
                'true': True, 'false': False, 1: True, 0: False,
                'Yes': True, 'No': False, 'yes': True, 'no': False
            })
            
            # Fill remaining NaN values with False
            df['reappointed'] = df['reappointed'].fillna(False)
        
        print("✓ Data types validated and corrected")
        
    except Exception as e:
        print(f"ERROR: Data type validation failed: {str(e)}")
        sys.exit(1)
    
    return df

def print_statistics(df, original_reappointments, newly_identified):
    """
    Print detailed statistics about the reappointment identification process.
    
    Args:
        df (pd.DataFrame): Final dataset
        original_reappointments (int): Original number of reappointments
        newly_identified (int): Number of newly identified reappointments
    """
    print("\nREAPPOINTMENT IDENTIFICATION STATISTICS")
    print("=" * 50)
    
    total_appointments = len(df)
    current_reappointments = df['reappointed'].sum()
    
    print(f"Total appointments: {total_appointments:,}")
    print(f"Original reappointments: {original_reappointments:,}")
    print(f"Newly identified reappointments: {newly_identified:,}")
    print(f"Total reappointments: {current_reappointments:,}")
    
    if total_appointments > 0:
        reappointment_rate = (current_reappointments / total_appointments) * 100
        print(f"Reappointment rate: {reappointment_rate:.1f}%")
    
    # Show breakdown by year
    print(f"\nReappointments by year:")
    print("-" * 25)
    
    year_stats = df.groupby('year')['reappointed'].agg(['sum', 'count'])
    year_stats['percentage'] = (year_stats['sum'] / year_stats['count'] * 100).round(1)
    
    for year, row in year_stats.iterrows():
        if not pd.isna(year):
            print(f"  {int(year)}: {int(row['sum']):,} of {int(row['count']):,} ({row['percentage']:.1f}%)")
    
    # Show data quality
    print(f"\nData Quality:")
    print("-" * 15)
    missing_names = df['name'].isna().sum()
    missing_positions = df['position'].isna().sum()
    missing_orgs = df['org'].isna().sum()
    missing_years = df['year'].isna().sum()
    
    print(f"Missing names: {missing_names:,}")
    print(f"Missing positions: {missing_positions:,}")
    print(f"Missing organizations: {missing_orgs:,}")
    print(f"Missing years: {missing_years:,}")

def main():
    """Main execution function."""
    print("NEW BRUNSWICK APPOINTMENTS - REAPPOINTMENT MARKER")
    print("=" * 55)
    
    # Define file paths
    input_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step2_key_columns_data.csv")
    output_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step3_repeats_marked.csv")
    
    try:
        # Load the dataset
        print(f"Loading dataset from: {input_file}")
        
        if not input_file.exists():
            print(f"ERROR: Input file not found: {input_file}")
            sys.exit(1)
        
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
        
        # Validate and prepare data
        df = validate_and_prepare_data(df)
        
        # Identify reappointments
        updated_df, original_reappointments, newly_identified = identify_reappointments(df)
        
        # Save the updated dataset
        print(f"\nSaving updated dataset to: {output_file}")
        updated_df.to_csv(output_file, index=False, encoding='utf-8')
        print("✓ Dataset saved successfully")
        
        # Print statistics
        print_statistics(updated_df, original_reappointments, newly_identified)
        
        print(f"\n✓ Process completed successfully!")
        
    except KeyboardInterrupt:
        print("\n\nProcess interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nFATAL ERROR: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()