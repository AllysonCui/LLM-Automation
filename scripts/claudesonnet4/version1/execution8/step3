#!/usr/bin/env python3
"""
New Brunswick Government Appointments Reappointments Marker
==========================================================

This script identifies reappointments by analyzing unique combinations of
name, position, and organization, marking subsequent occurrences as reappointments.

Author: Claude Sonnet 4
Created: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import re
from collections import defaultdict

def normalize_name(name):
    """
    Normalize name for better matching by handling common variations.
    
    Args:
        name (str): Original name
    
    Returns:
        str: Normalized name
    """
    if pd.isna(name) or not isinstance(name, str):
        return str(name) if not pd.isna(name) else ''
    
    # Convert to lowercase and strip
    normalized = name.lower().strip()
    
    # Remove extra whitespace
    normalized = re.sub(r'\s+', ' ', normalized)
    
    # Handle common title variations
    titles = ['dr.', 'dr', 'mr.', 'mr', 'mrs.', 'mrs', 'ms.', 'ms', 'prof.', 'prof']
    for title in titles:
        if normalized.startswith(title + ' '):
            normalized = normalized[len(title):].strip()
    
    # Handle common suffix variations
    suffixes = [' jr.', ' jr', ' sr.', ' sr', ' ii', ' iii', ' iv']
    for suffix in suffixes:
        if normalized.endswith(suffix):
            normalized = normalized[:-len(suffix)].strip()
    
    # Remove periods and commas
    normalized = normalized.replace('.', '').replace(',', '')
    
    return normalized

def normalize_position(position):
    """
    Normalize position title for better matching.
    
    Args:
        position (str): Original position
    
    Returns:
        str: Normalized position
    """
    if pd.isna(position) or not isinstance(position, str):
        return str(position) if not pd.isna(position) else ''
    
    # Convert to lowercase and strip
    normalized = position.lower().strip()
    
    # Remove extra whitespace
    normalized = re.sub(r'\s+', ' ', normalized)
    
    # Remove common variations in punctuation
    normalized = normalized.replace('.', '').replace(',', '').replace('&', 'and')
    
    return normalized

def normalize_org(org):
    """
    Normalize organization name for better matching.
    
    Args:
        org (str): Original organization
    
    Returns:
        str: Normalized organization
    """
    if pd.isna(org) or not isinstance(org, str):
        return str(org) if not pd.isna(org) else ''
    
    # Convert to lowercase and strip
    normalized = org.lower().strip()
    
    # Remove extra whitespace
    normalized = re.sub(r'\s+', ' ', normalized)
    
    # Handle common abbreviations and variations
    abbreviations = {
        'department': 'dept',
        'ministry': 'min',
        'commission': 'comm',
        'corporation': 'corp',
        'limited': 'ltd',
        'incorporated': 'inc',
        '&': 'and'
    }
    
    for full, abbrev in abbreviations.items():
        normalized = normalized.replace(full, abbrev)
    
    # Remove common punctuation
    normalized = normalized.replace('.', '').replace(',', '')
    
    return normalized

def identify_reappointments(df):
    """
    Identify and mark reappointments based on name, position, and organization combinations.
    
    Args:
        df (pd.DataFrame): Input dataset
    
    Returns:
        pd.DataFrame: Dataset with updated reappointment markings
    """
    print("Identifying reappointments...")
    print("-" * 40)
    
    # Create a copy to work with
    df_updated = df.copy()
    
    # Add normalized columns for matching
    df_updated['name_normalized'] = df_updated['name'].apply(normalize_name)
    df_updated['position_normalized'] = df_updated['position'].apply(normalize_position)
    df_updated['org_normalized'] = df_updated['org'].apply(normalize_org)
    
    # Create a unique identifier for each person-position-org combination
    df_updated['combo_key'] = (
        df_updated['name_normalized'] + '|' + 
        df_updated['position_normalized'] + '|' + 
        df_updated['org_normalized']
    )
    
    # Handle missing years by assigning a default value for sorting
    df_updated['year_for_sorting'] = df_updated['year'].fillna(9999)  # Missing years go to end
    
    # Group by combination key and identify reappointments
    reappointment_stats = {
        'total_combinations': 0,
        'combinations_with_multiple': 0,
        'original_reappointments': 0,
        'newly_identified': 0,
        'total_after_update': 0
    }
    
    # Count original reappointments
    if 'reappointed' in df_updated.columns:
        original_true_count = df_updated['reappointed'].sum() if df_updated['reappointed'].dtype == bool else len(df_updated[df_updated['reappointed'] == True])
        reappointment_stats['original_reappointments'] = original_true_count
    
    # Process each unique combination
    for combo_key, group in df_updated.groupby('combo_key'):
        reappointment_stats['total_combinations'] += 1
        
        if len(group) > 1:
            reappointment_stats['combinations_with_multiple'] += 1
            
            # Sort by year (earliest first)
            group_sorted = group.sort_values('year_for_sorting')
            
            # Mark all but the first as reappointments
            indices_to_update = group_sorted.index[1:]  # All except first
            
            for idx in indices_to_update:
                # Only count as newly identified if it wasn't already marked as reappointment
                if pd.isna(df_updated.loc[idx, 'reappointed']) or df_updated.loc[idx, 'reappointed'] != True:
                    reappointment_stats['newly_identified'] += 1
                
                df_updated.loc[idx, 'reappointed'] = True
    
    # Count total reappointments after update
    total_true_count = df_updated['reappointed'].sum() if df_updated['reappointed'].dtype == bool else len(df_updated[df_updated['reappointed'] == True])
    reappointment_stats['total_after_update'] = total_true_count
    
    # Clean up temporary columns
    df_updated = df_updated.drop(columns=['name_normalized', 'position_normalized', 'org_normalized', 'combo_key', 'year_for_sorting'])
    
    return df_updated, reappointment_stats

def print_reappointment_analysis(df, stats):
    """
    Print detailed analysis of reappointment identification results.
    
    Args:
        df (pd.DataFrame): Updated dataset
        stats (dict): Statistics about reappointment identification
    """
    print("\nREAPPOINTMENT IDENTIFICATION RESULTS")
    print("=" * 50)
    
    print(f"Total unique name-position-org combinations: {stats['total_combinations']:,}")
    print(f"Combinations with multiple appointments: {stats['combinations_with_multiple']:,}")
    print(f"Original reappointments marked: {stats['original_reappointments']:,}")
    print(f"Newly identified reappointments: {stats['newly_identified']:,}")
    print(f"Total reappointments after update: {stats['total_after_update']:,}")
    
    # Calculate percentages
    total_records = len(df)
    reappointment_rate = (stats['total_after_update'] / total_records) * 100
    improvement_rate = (stats['newly_identified'] / stats['original_reappointments']) * 100 if stats['original_reappointments'] > 0 else 0
    
    print(f"\nSummary:")
    print(f"  Overall reappointment rate: {reappointment_rate:.1f}%")
    print(f"  Improvement in identification: +{improvement_rate:.1f}%")
    
    # Show examples of multiple appointments
    print(f"\nExamples of People with Multiple Appointments:")
    print("-" * 45)
    
    # Create temporary columns for analysis
    df_temp = df.copy()
    df_temp['name_norm'] = df_temp['name'].apply(normalize_name)
    df_temp['pos_norm'] = df_temp['position'].apply(normalize_position)
    df_temp['org_norm'] = df_temp['org'].apply(normalize_org)
    df_temp['combo'] = df_temp['name_norm'] + '|' + df_temp['pos_norm'] + '|' + df_temp['org_norm']
    
    # Find combinations with multiple appointments
    combo_counts = df_temp['combo'].value_counts()
    multiple_combos = combo_counts[combo_counts > 1].head(5)
    
    for i, (combo, count) in enumerate(multiple_combos.items(), 1):
        combo_records = df_temp[df_temp['combo'] == combo].sort_values('year')
        if not combo_records.empty:
            first_record = combo_records.iloc[0]
            print(f"{i}. {first_record['name']} - {first_record['position']}")
            print(f"   Organization: {first_record['org']}")
            print(f"   Years: {', '.join(map(str, sorted(combo_records['year'].dropna().astype(int))))}")
            print(f"   Total appointments: {count}")
            print()

def main():
    """Main execution function."""
    print("NEW BRUNSWICK APPOINTMENTS - REAPPOINTMENTS MARKER")
    print("=" * 55)
    
    # Define file paths
    input_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step2_key_columns_data.csv")
    output_dir = Path("scripts/claudesonnet4/version1/execution8/analysis_data")
    output_file = output_dir / "step3_repeats_marked.csv"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"ERROR: Input file not found: {input_file}")
        sys.exit(1)
    
    try:
        # Load the dataset
        print("Loading key columns dataset...")
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
        
        # Verify required columns
        required_columns = ['name', 'position', 'org', 'year']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"ERROR: Missing required columns: {', '.join(missing_columns)}")
            print(f"Available columns: {', '.join(df.columns)}")
            sys.exit(1)
        
        # Initialize reappointed column if it doesn't exist
        if 'reappointed' not in df.columns:
            df['reappointed'] = False
            print("✓ Initialized 'reappointed' column")
        
    except Exception as e:
        print(f"ERROR: Failed to load dataset: {str(e)}")
        sys.exit(1)
    
    try:
        # Identify and mark reappointments
        df_updated, stats = identify_reappointments(df)
        
        # Save the updated dataset
        df_updated.to_csv(output_file, index=False, encoding='utf-8')
        print(f"✓ Saved updated dataset to: {output_file}")
        
        # Print analysis
        print_reappointment_analysis(df_updated, stats)
        
        print(f"\n✓ Process completed successfully!")
        print(f"Updated dataset saved with {stats['newly_identified']:,} newly identified reappointments")
        
    except KeyboardInterrupt:
        print("\n\nProcess interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nFATAL ERROR: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()