#!/usr/bin/env python3
"""
New Brunswick Government Appointments Count Summary
==================================================

This script creates a summary table of appointment counts by organization and year,
providing insights into appointment patterns across different government entities.

Author: Claude Sonnet 4
Created: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def validate_data(df):
    """
    Validate the input dataset and check for data quality issues.
    
    Args:
        df (pd.DataFrame): Input dataset
        
    Returns:
        pd.DataFrame: Validated dataset
    """
    print("Validating input data...")
    print("-" * 30)
    
    # Check required columns
    required_cols = ['org', 'year']
    missing_cols = [col for col in required_cols if col not in df.columns]
    
    if missing_cols:
        print(f"ERROR: Missing required columns: {missing_cols}")
        sys.exit(1)
    
    # Validate year column
    try:
        df['year'] = pd.to_numeric(df['year'], errors='coerce')
    except Exception as e:
        print(f"ERROR: Could not convert year column to numeric: {str(e)}")
        sys.exit(1)
    
    # Check data ranges
    total_records = len(df)
    missing_org = df['org'].isna().sum()
    missing_year = df['year'].isna().sum()
    
    print(f"Total records: {total_records:,}")
    print(f"Missing organizations: {missing_org:,} ({missing_org/total_records*100:.1f}%)")
    print(f"Missing years: {missing_year:,} ({missing_year/total_records*100:.1f}%)")
    
    # Check year range reasonableness
    valid_years = df['year'].dropna()
    if len(valid_years) > 0:
        min_year = valid_years.min()
        max_year = valid_years.max()
        print(f"Year range: {int(min_year)} to {int(max_year)}")
        
        # Warn about unusual years
        if min_year < 1900 or max_year > 2030:
            print(f"WARNING: Unusual year range detected ({int(min_year)}-{int(max_year)})")
    
    print("✓ Data validation completed")
    
    return df

def create_summary_table(df):
    """
    Create a summary table with organizations as rows and years as columns.
    
    Args:
        df (pd.DataFrame): Input dataset
        
    Returns:
        pd.DataFrame: Summary table with counts
    """
    print("\nCreating summary table...")
    print("-" * 30)
    
    # Handle missing values
    df_clean = df.copy()
    
    # Replace missing organization names with a placeholder
    df_clean['org'] = df_clean['org'].fillna('Unknown Organization')
    
    # Remove records with missing years for the pivot table
    df_with_year = df_clean.dropna(subset=['year'])
    
    if len(df_with_year) == 0:
        print("ERROR: No records with valid years found")
        sys.exit(1)
    
    # Create pivot table
    try:
        summary_table = df_with_year.groupby(['org', 'year']).size().reset_index(name='appointments')
        pivot_table = summary_table.pivot(index='org', columns='year', values='appointments')
        
        # Fill missing values with 0
        pivot_table = pivot_table.fillna(0).astype(int)
        
        # Sort columns (years) in ascending order
        pivot_table = pivot_table.sort_index(axis=1)
        
        print(f"✓ Created summary table: {pivot_table.shape[0]} organizations × {pivot_table.shape[1]} years")
        
        return pivot_table
        
    except Exception as e:
        print(f"ERROR: Failed to create summary table: {str(e)}")
        sys.exit(1)

def analyze_summary_table(pivot_table):
    """
    Analyze the summary table and identify key insights.
    
    Args:
        pivot_table (pd.DataFrame): Summary table with counts
    """
    print("\nSUMMARY TABLE ANALYSIS")
    print("=" * 40)
    
    # Basic statistics
    total_appointments = pivot_table.sum().sum()
    num_organizations = len(pivot_table)
    num_years = len(pivot_table.columns)
    
    print(f"Total appointments: {total_appointments:,}")
    print(f"Number of organizations: {num_organizations:,}")
    print(f"Number of years: {num_years}")
    
    # Year range
    years = pivot_table.columns.tolist()
    print(f"Year range: {int(min(years))} to {int(max(years))}")
    
    # Organizations with most appointments (total)
    org_totals = pivot_table.sum(axis=1).sort_values(ascending=False)
    print(f"\nTop 10 Organizations by Total Appointments:")
    print("-" * 45)
    
    for i, (org, count) in enumerate(org_totals.head(10).items(), 1):
        percentage = (count / total_appointments) * 100
        print(f"{i:2d}. {org[:50]:<50} {count:,} ({percentage:.1f}%)")
    
    # Years with most appointments
    year_totals = pivot_table.sum(axis=0).sort_values(ascending=False)
    print(f"\nTop 5 Years by Total Appointments:")
    print("-" * 35)
    
    for i, (year, count) in enumerate(year_totals.head(5).items(), 1):
        percentage = (count / total_appointments) * 100
        print(f"{i}. {int(year)}: {count:,} ({percentage:.1f}%)")
    
    # Organizations with most consistent activity
    active_years = (pivot_table > 0).sum(axis=1).sort_values(ascending=False)
    print(f"\nMost Active Organizations (by years with appointments):")
    print("-" * 55)
    
    for i, (org, years_active) in enumerate(active_years.head(10).items(), 1):
        total_appts = org_totals[org]
        print(f"{i:2d}. {org[:40]:<40} {years_active}/{num_years} years ({total_appts:,} total)")
    
    # Data quality insights
    zero_counts = (pivot_table == 0).sum().sum()
    total_cells = pivot_table.shape[0] * pivot_table.shape[1]
    sparsity = (zero_counts / total_cells) * 100
    
    print(f"\nData Quality Insights:")
    print("-" * 25)
    print(f"Table sparsity: {sparsity:.1f}% (cells with zero appointments)")
    print(f"Average appointments per org per year: {total_appointments / total_cells:.1f}")

def print_summary_table_sample(pivot_table, max_rows=10, max_cols=8):
    """
    Print a sample of the summary table for review.
    
    Args:
        pivot_table (pd.DataFrame): Summary table
        max_rows (int): Maximum rows to display
        max_cols (int): Maximum columns to display
    """
    print(f"\nSUMMARY TABLE SAMPLE (showing up to {max_rows} orgs, {max_cols} years):")
    print("=" * 80)
    
    # Select subset for display
    display_table = pivot_table.iloc[:max_rows, :max_cols]
    
    # Format for better readability
    pd.set_option('display.max_columns', max_cols + 1)
    pd.set_option('display.max_rows', max_rows + 1)
    pd.set_option('display.width', None)
    
    print(display_table)
    
    if len(pivot_table) > max_rows:
        print(f"\n... and {len(pivot_table) - max_rows} more organizations")
    
    if len(pivot_table.columns) > max_cols:
        print(f"... and {len(pivot_table.columns) - max_cols} more years")

def validate_counts(pivot_table, original_df):
    """
    Validate that the counts in the summary table are reasonable.
    
    Args:
        pivot_table (pd.DataFrame): Summary table
        original_df (pd.DataFrame): Original dataset
    """
    print("\nValidating counts...")
    print("-" * 20)
    
    # Check total counts match
    summary_total = pivot_table.sum().sum()
    
    # Count original records with valid org and year
    valid_records = original_df.dropna(subset=['year'])
    original_total = len(valid_records)
    
    print(f"Original records (with valid year): {original_total:,}")
    print(f"Summary table total: {summary_total:,}")
    
    if summary_total == original_total:
        print("✓ Counts validated successfully")
    else:
        print(f"WARNING: Count mismatch detected!")
        print(f"Difference: {abs(summary_total - original_total):,}")
    
    # Check for unreasonable counts
    max_count = pivot_table.max().max()
    if max_count > 1000:
        print(f"WARNING: Very high appointment count detected: {max_count}")
    
    # Check for negative counts (shouldn't happen but good to verify)
    min_count = pivot_table.min().min()
    if min_count < 0:
        print(f"ERROR: Negative counts detected: {min_count}")

def main():
    """Main execution function."""
    print("NEW BRUNSWICK APPOINTMENTS - COUNT SUMMARY")
    print("=" * 50)
    
    # Define file paths
    input_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step3_repeats_marked.csv")
    output_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step4_appointment_counts.csv")
    
    try:
        # Load the dataset
        print(f"Loading dataset from: {input_file}")
        
        if not input_file.exists():
            print(f"ERROR: Input file not found: {input_file}")
            sys.exit(1)
        
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
        
        # Validate data
        df = validate_data(df)
        
        # Create summary table
        summary_table = create_summary_table(df)
        
        # Validate counts
        validate_counts(summary_table, df)
        
        # Save the summary table
        print(f"\nSaving summary table to: {output_file}")
        summary_table.to_csv(output_file, encoding='utf-8')
        print("✓ Summary table saved successfully")
        
        # Print sample of summary table
        print_summary_table_sample(summary_table)
        
        # Analyze the summary table
        analyze_summary_table(summary_table)
        
        print(f"\n✓ Process completed successfully!")
        print(f"Summary table created with {len(summary_table)} organizations and {len(summary_table.columns)} years")
        
    except KeyboardInterrupt:
        print("\n\nProcess interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nFATAL ERROR: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()