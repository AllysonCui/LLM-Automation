#!/usr/bin/env python3
"""
New Brunswick Government Reappointment Count Summary
===================================================

This script creates a summary table of reappointment counts by organization and year,
focusing specifically on records where reappointed=True.

Author: Claude Sonnet 4
Created: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def validate_data(df):
    """
    Validate the input dataset and check for required columns.
    
    Args:
        df (pd.DataFrame): Input dataset
        
    Returns:
        pd.DataFrame: Validated dataset
    """
    print("Validating input data...")
    print("-" * 30)
    
    # Check required columns
    required_cols = ['org', 'year', 'reappointed']
    missing_cols = [col for col in required_cols if col not in df.columns]
    
    if missing_cols:
        print(f"ERROR: Missing required columns: {missing_cols}")
        sys.exit(1)
    
    # Validate data types
    try:
        # Convert year to numeric (integer)
        df['year'] = pd.to_numeric(df['year'], errors='coerce').astype('Int64')
        
        # Ensure reappointed is boolean
        if df['reappointed'].dtype != 'bool':
            df['reappointed'] = df['reappointed'].astype(bool)
            
    except Exception as e:
        print(f"ERROR: Data type conversion failed: {str(e)}")
        sys.exit(1)
    
    # Report basic statistics
    total_records = len(df)
    missing_org = df['org'].isna().sum()
    missing_year = df['year'].isna().sum()
    reappointed_count = df['reappointed'].sum()
    
    print(f"Total records: {total_records:,}")
    print(f"Missing organizations: {missing_org:,}")
    print(f"Missing years: {missing_year:,}")
    print(f"Total reappointments: {reappointed_count:,}")
    print(f"Reappointment rate: {reappointed_count/total_records*100:.1f}%")
    
    print("✓ Data validation completed")
    
    return df

def filter_reappointments(df):
    """
    Filter the dataset to include only reappointments.
    
    Args:
        df (pd.DataFrame): Input dataset
        
    Returns:
        pd.DataFrame: Filtered dataset with only reappointments
    """
    print("\nFiltering for reappointments...")
    print("-" * 35)
    
    # Filter for reappointments only
    reappointed_df = df[df['reappointed'] == True].copy()
    
    # Remove records with missing org or year for grouping
    clean_df = reappointed_df.dropna(subset=['org', 'year'])
    
    print(f"Reappointments before cleaning: {len(reappointed_df):,}")
    print(f"Reappointments after cleaning: {len(clean_df):,}")
    print(f"Records removed (missing org/year): {len(reappointed_df) - len(clean_df):,}")
    
    if len(clean_df) == 0:
        print("ERROR: No valid reappointment records found after filtering")
        sys.exit(1)
    
    print("✓ Filtering completed")
    
    return clean_df

def debug_grouped_data(df):
    """
    Print debugging output showing sample grouped data.
    
    Args:
        df (pd.DataFrame): Filtered reappointment dataset
    """
    print("\nDEBUGGING: Sample grouped data")
    print("-" * 35)
    
    # Group by org and year, show counts
    grouped = df.groupby(['org', 'year']).size().reset_index(name='reappointments')
    
    print(f"Total org-year combinations with reappointments: {len(grouped):,}")
    
    # Show sample of grouped data
    print(f"\nSample of grouped data (first 10 rows):")
    print(grouped.head(10).to_string(index=False))
    
    if len(grouped) > 10:
        print(f"\n... and {len(grouped) - 10} more combinations")
    
    # Show organizations with most reappointments
    org_totals = grouped.groupby('org')['reappointments'].sum().sort_values(ascending=False)
    print(f"\nTop 5 organizations by total reappointments:")
    for i, (org, count) in enumerate(org_totals.head(5).items(), 1):
        print(f"{i}. {org[:50]}: {count:,}")
    
    # Show years with most reappointments
    year_totals = grouped.groupby('year')['reappointments'].sum().sort_values(ascending=False)
    print(f"\nTop 5 years by total reappointments:")
    for i, (year, count) in enumerate(year_totals.head(5).items(), 1):
        print(f"{i}. {int(year)}: {count:,}")
    
    return grouped

def create_reappointment_summary_table(grouped_df):
    """
    Create a summary table with organizations as rows and years as columns.
    
    Args:
        grouped_df (pd.DataFrame): Grouped data with counts
        
    Returns:
        pd.DataFrame: Summary table with reappointment counts
    """
    print("\nCreating reappointment summary table...")
    print("-" * 40)
    
    try:
        # Create pivot table
        pivot_table = grouped_df.pivot(index='org', columns='year', values='reappointments')
        
        # Fill missing values with 0 (organizations with no reappointments in certain years)
        pivot_table = pivot_table.fillna(0).astype(int)
        
        # Ensure year columns are integers
        pivot_table.columns = pivot_table.columns.astype(int)
        
        # Sort columns (years) in ascending order
        pivot_table = pivot_table.sort_index(axis=1)
        
        print(f"✓ Created summary table: {pivot_table.shape[0]} organizations × {pivot_table.shape[1]} years")
        
        return pivot_table
        
    except Exception as e:
        print(f"ERROR: Failed to create summary table: {str(e)}")
        sys.exit(1)

def validate_pivot_table(pivot_table, grouped_df):
    """
    Validate that the pivot table contains actual counts rather than just zeros.
    
    Args:
        pivot_table (pd.DataFrame): Summary table
        grouped_df (pd.DataFrame): Original grouped data
    """
    print("\nValidating pivot table...")
    print("-" * 25)
    
    # Check total counts match
    pivot_total = pivot_table.sum().sum()
    grouped_total = grouped_df['reappointments'].sum()
    
    print(f"Grouped data total: {grouped_total:,}")
    print(f"Pivot table total: {pivot_total:,}")
    
    if pivot_total == grouped_total:
        print("✓ Totals match - validation successful")
    else:
        print(f"ERROR: Total mismatch! Difference: {abs(pivot_total - grouped_total):,}")
        sys.exit(1)
    
    # Check for non-zero values
    non_zero_count = (pivot_table > 0).sum().sum()
    total_cells = pivot_table.shape[0] * pivot_table.shape[1]
    
    print(f"Non-zero cells: {non_zero_count:,} out of {total_cells:,}")
    print(f"Data density: {non_zero_count/total_cells*100:.1f}%")
    
    if non_zero_count == 0:
        print("ERROR: Pivot table contains only zeros!")
        sys.exit(1)
    else:
        print("✓ Pivot table contains actual reappointment counts")
    
    # Check data types
    print(f"Year column types: {[str(dtype) for dtype in pivot_table.dtypes[:5]]}")  # Show first 5
    print(f"Data values type: {pivot_table.iloc[0, 0].__class__.__name__}")

def analyze_reappointment_patterns(pivot_table):
    """
    Analyze reappointment patterns and print summary statistics.
    
    Args:
        pivot_table (pd.DataFrame): Summary table with reappointment counts
    """
    print("\nREAPPOINTMENT PATTERN ANALYSIS")
    print("=" * 40)
    
    # Basic statistics
    total_reappointments = pivot_table.sum().sum()
    num_organizations = len(pivot_table)
    num_years = len(pivot_table.columns)
    
    print(f"Total reappointments: {total_reappointments:,}")
    print(f"Organizations with reappointments: {num_organizations:,}")
    print(f"Years covered: {num_years}")
    
    # Year range
    years = pivot_table.columns.tolist()
    print(f"Year range: {min(years)} to {max(years)}")
    
    # Organizations with most reappointments
    org_totals = pivot_table.sum(axis=1).sort_values(ascending=False)
    print(f"\nTop 10 Organizations by Total Reappointments:")
    print("-" * 50)
    
    for i, (org, count) in enumerate(org_totals.head(10).items(), 1):
        percentage = (count / total_reappointments) * 100
        print(f"{i:2d}. {org[:45]:<45} {count:,} ({percentage:.1f}%)")
    
    # Years with most reappointments
    year_totals = pivot_table.sum(axis=0).sort_values(ascending=False)
    print(f"\nTop 5 Years by Reappointments:")
    print("-" * 30)
    
    for i, (year, count) in enumerate(year_totals.head(5).items(), 1):
        percentage = (count / total_reappointments) * 100
        print(f"{i}. {year}: {count:,} ({percentage:.1f}%)")
    
    # Organizations with consistent reappointment activity
    active_years = (pivot_table > 0).sum(axis=1).sort_values(ascending=False)
    print(f"\nMost Consistent Organizations (years with reappointments):")
    print("-" * 55)
    
    for i, (org, years_active) in enumerate(active_years.head(10).items(), 1):
        total_reappts = org_totals[org]
        avg_per_year = total_reappts / years_active if years_active > 0 else 0
        print(f"{i:2d}. {org[:35]:<35} {years_active}/{num_years} years ({avg_per_year:.1f} avg/year)")
    
    # Summary statistics
    avg_reappts_per_org = total_reappointments / num_organizations
    avg_reappts_per_year = total_reappointments / num_years
    
    print(f"\nSummary Statistics:")
    print("-" * 20)
    print(f"Average reappointments per organization: {avg_reappts_per_org:.1f}")
    print(f"Average reappointments per year: {avg_reappts_per_year:.1f}")

def main():
    """Main execution function."""
    print("NEW BRUNSWICK APPOINTMENTS - REAPPOINTMENT COUNTS")
    print("=" * 55)
    
    # Define file paths
    input_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step3_repeats_marked.csv")
    output_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step5_reappointment_counts.csv")
    
    try:
        # Load the dataset
        print(f"Loading dataset from: {input_file}")
        
        if not input_file.exists():
            print(f"ERROR: Input file not found: {input_file}")
            sys.exit(1)
        
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
        
        # Validate data
        df = validate_data(df)
        
        # Filter for reappointments only
        reappointed_df = filter_reappointments(df)
        
        # Debug grouped data
        grouped_df = debug_grouped_data(reappointed_df)
        
        # Create summary table
        summary_table = create_reappointment_summary_table(grouped_df)
        
        # Validate the pivot table
        validate_pivot_table(summary_table, grouped_df)
        
        # Save the summary table
        print(f"\nSaving reappointment counts to: {output_file}")
        summary_table.to_csv(output_file, encoding='utf-8')
        print("✓ Reappointment counts saved successfully")
        
        # Analyze reappointment patterns
        analyze_reappointment_patterns(summary_table)
        
        print(f"\n✓ Process completed successfully!")
        print(f"Reappointment summary created with {len(summary_table)} organizations and {len(summary_table.columns)} years")
        
    except KeyboardInterrupt:
        print("\n\nProcess interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nFATAL ERROR: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()