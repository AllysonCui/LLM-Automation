#!/usr/bin/env python3
"""
New Brunswick Government Reappointment Rate Calculator
=====================================================

This script merges appointment counts and reappointment counts to calculate
reappointment rates for each organization and year combination.

Author: Claude Sonnet 4
Created: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_and_validate_datasets():
    """
    Load both appointment counts and reappointment counts datasets.
    
    Returns:
        tuple: (appointment_counts_df, reappointment_counts_df)
    """
    print("Loading datasets...")
    print("-" * 20)
    
    # Define file paths
    appointment_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step4_appointment_counts.csv")
    reappointment_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step5_reappointment_counts.csv")
    
    # Check if files exist
    if not appointment_file.exists():
        print(f"ERROR: Appointment counts file not found: {appointment_file}")
        sys.exit(1)
    
    if not reappointment_file.exists():
        print(f"ERROR: Reappointment counts file not found: {reappointment_file}")
        sys.exit(1)
    
    try:
        # Load appointment counts
        appointment_df = pd.read_csv(appointment_file, index_col=0, encoding='utf-8')
        print(f"✓ Loaded appointment counts: {appointment_df.shape[0]} orgs × {appointment_df.shape[1]} years")
        
        # Load reappointment counts
        reappointment_df = pd.read_csv(reappointment_file, index_col=0, encoding='utf-8')
        print(f"✓ Loaded reappointment counts: {reappointment_df.shape[0]} orgs × {reappointment_df.shape[1]} years")
        
        return appointment_df, reappointment_df
        
    except Exception as e:
        print(f"ERROR: Failed to load datasets: {str(e)}")
        sys.exit(1)

def validate_datasets(appointment_df, reappointment_df):
    """
    Validate that the datasets are compatible for merging.
    
    Args:
        appointment_df (pd.DataFrame): Appointment counts dataset
        reappointment_df (pd.DataFrame): Reappointment counts dataset
    """
    print("\nValidating datasets compatibility...")
    print("-" * 40)
    
    # Check column types (should be years)
    try:
        appointment_years = set(appointment_df.columns.astype(int))
        reappointment_years = set(reappointment_df.columns.astype(int))
        
        print(f"Appointment data years: {sorted(appointment_years)}")
        print(f"Reappointment data years: {sorted(reappointment_years)}")
        
        # Find overlap
        common_years = appointment_years.intersection(reappointment_years)
        appointment_only = appointment_years - reappointment_years
        reappointment_only = reappointment_years - appointment_years
        
        print(f"Common years: {len(common_years)} ({sorted(common_years)})")
        if appointment_only:
            print(f"Appointment-only years: {sorted(appointment_only)}")
        if reappointment_only:
            print(f"Reappointment-only years: {sorted(reappointment_only)}")
        
        if len(common_years) == 0:
            print("ERROR: No overlapping years found between datasets")
            sys.exit(1)
        
    except Exception as e:
        print(f"ERROR: Could not validate year columns: {str(e)}")
        sys.exit(1)
    
    # Check organization overlap
    appointment_orgs = set(appointment_df.index)
    reappointment_orgs = set(reappointment_df.index)
    
    common_orgs = appointment_orgs.intersection(reappointment_orgs)
    appointment_only_orgs = appointment_orgs - reappointment_orgs
    reappointment_only_orgs = reappointment_orgs - appointment_orgs
    
    print(f"\nOrganization overlap:")
    print(f"Common organizations: {len(common_orgs)}")
    print(f"Appointment-only organizations: {len(appointment_only_orgs)}")
    print(f"Reappointment-only organizations: {len(reappointment_only_orgs)}")
    
    print("✓ Dataset validation completed")

def merge_datasets(appointment_df, reappointment_df):
    """
    Merge the appointment and reappointment datasets.
    
    Args:
        appointment_df (pd.DataFrame): Appointment counts dataset
        reappointment_df (pd.DataFrame): Reappointment counts dataset
        
    Returns:
        pd.DataFrame: Merged dataset in long format
    """
    print("\nMerging datasets...")
    print("-" * 20)
    
    try:
        # Convert both datasets to long format
        appointment_long = appointment_df.reset_index().melt(
            id_vars='org', 
            var_name='year', 
            value_name='total_appointments'
        )
        
        reappointment_long = reappointment_df.reset_index().melt(
            id_vars='org', 
            var_name='year', 
            value_name='reappointments'
        )
        
        # Ensure year columns are integers
        appointment_long['year'] = appointment_long['year'].astype(int)
        reappointment_long['year'] = reappointment_long['year'].astype(int)
        
        # Merge on org and year
        merged_df = pd.merge(
            appointment_long, 
            reappointment_long, 
            on=['org', 'year'], 
            how='outer'
        )
        
        # Fill missing values with 0 (important for calculations)
        merged_df['total_appointments'] = merged_df['total_appointments'].fillna(0).astype(int)
        merged_df['reappointments'] = merged_df['reappointments'].fillna(0).astype(int)
        
        print(f"✓ Merged dataset: {len(merged_df):,} org-year combinations")
        
        return merged_df
        
    except Exception as e:
        print(f"ERROR: Failed to merge datasets: {str(e)}")
        sys.exit(1)

def calculate_reappointment_rates(merged_df):
    """
    Calculate reappointment rates with proper handling of edge cases.
    
    Args:
        merged_df (pd.DataFrame): Merged dataset
        
    Returns:
        pd.DataFrame: Dataset with calculated reappointment rates
    """
    print("\nCalculating reappointment rates...")
    print("-" * 35)
    
    # Initialize reappointment_rate column
    merged_df['reappointment_rate'] = np.nan
    
    # Handle different cases
    total_combinations = len(merged_df)
    zero_appointments = (merged_df['total_appointments'] == 0).sum()
    zero_reappointments = (merged_df['reappointments'] == 0).sum()
    calculable = ((merged_df['total_appointments'] > 0)).sum()
    
    print(f"Total org-year combinations: {total_combinations:,}")
    print(f"Cases with zero appointments: {zero_appointments:,}")
    print(f"Cases with zero reappointments: {zero_reappointments:,}")
    print(f"Calculable combinations: {calculable:,}")
    
    # Calculate rates where total_appointments > 0
    mask = merged_df['total_appointments'] > 0
    merged_df.loc[mask, 'reappointment_rate'] = (
        merged_df.loc[mask, 'reappointments'] / merged_df.loc[mask, 'total_appointments']
    )
    
    # Handle division by zero cases (set to NaN, already done above)
    # Cases where total_appointments = 0 will remain NaN
    
    # Validate rates are reasonable (between 0 and 1)
    valid_rates = merged_df['reappointment_rate'].dropna()
    if len(valid_rates) > 0:
        max_rate = valid_rates.max()
        min_rate = valid_rates.min()
        
        print(f"Reappointment rate range: {min_rate:.4f} to {max_rate:.4f}")
        
        # Warn about unusually high rates
        high_rates = (valid_rates > 1.0).sum()
        if high_rates > 0:
            print(f"WARNING: {high_rates} cases with reappointment rate > 100%")
            # Show examples
            high_rate_cases = merged_df[merged_df['reappointment_rate'] > 1.0].head()
            print("Examples of high rates:")
            print(high_rate_cases[['org', 'year', 'total_appointments', 'reappointments', 'reappointment_rate']].to_string(index=False))
    
    print("✓ Reappointment rates calculated")
    
    return merged_df

def analyze_reappointment_rates(df):
    """
    Analyze and print statistics about reappointment rates.
    
    Args:
        df (pd.DataFrame): Dataset with calculated rates
    """
    print("\nREAPPOINTMENT RATE ANALYSIS")
    print("=" * 35)
    
    # Overall statistics
    valid_rates = df['reappointment_rate'].dropna()
    total_combinations = len(df)
    valid_combinations = len(valid_rates)
    
    print(f"Total combinations: {total_combinations:,}")
    print(f"Valid rate calculations: {valid_combinations:,} ({valid_combinations/total_combinations*100:.1f}%)")
    
    if len(valid_rates) > 0:
        print(f"Average reappointment rate: {valid_rates.mean():.3f} ({valid_rates.mean()*100:.1f}%)")
        print(f"Median reappointment rate: {valid_rates.median():.3f} ({valid_rates.median()*100:.1f}%)")
        print(f"Standard deviation: {valid_rates.std():.3f}")
        
        # Organizations with highest average reappointment rates
        org_rates = df.groupby('org')['reappointment_rate'].agg(['mean', 'count', 'std']).round(4)
        org_rates = org_rates.dropna(subset=['mean'])
        org_rates = org_rates[org_rates['count'] >= 2]  # At least 2 years of data
        org_rates_sorted = org_rates.sort_values('mean', ascending=False)
        
        print(f"\nTop 15 Organizations by Average Reappointment Rate:")
        print(f"(Organizations with at least 2 years of data)")
        print("-" * 70)
        print(f"{'Rank':<4} {'Organization':<35} {'Avg Rate':<10} {'Years':<6} {'Std Dev':<8}")
        print("-" * 70)
        
        for i, (org, row) in enumerate(org_rates_sorted.head(15).iterrows(), 1):
            rate_pct = row['mean'] * 100
            years = int(row['count'])
            std_dev = row['std'] if not pd.isna(row['std']) else 0
            print(f"{i:<4} {org[:34]:<35} {rate_pct:>6.1f}%   {years:<6} {std_dev:>6.3f}")
        
        # Years with highest average reappointment rates
        year_rates = df.groupby('year')['reappointment_rate'].agg(['mean', 'count']).round(4)
        year_rates = year_rates.dropna(subset=['mean'])
        year_rates_sorted = year_rates.sort_values('mean', ascending=False)
        
        print(f"\nTop 10 Years by Average Reappointment Rate:")
        print("-" * 40)
        
        for i, (year, row) in enumerate(year_rates_sorted.head(10).iterrows(), 1):
            rate_pct = row['mean'] * 100
            orgs = int(row['count'])
            print(f"{i:2d}. {int(year)}: {rate_pct:>5.1f}% (across {orgs} organizations)")
    
    else:
        print("No valid reappointment rates found for analysis")

def validate_final_dataset(df):
    """
    Validate the final dataset before saving.
    
    Args:
        df (pd.DataFrame): Final dataset
    """
    print("\nValidating final dataset...")
    print("-" * 30)
    
    # Check for required columns
    required_cols = ['org', 'year', 'total_appointments', 'reappointments', 'reappointment_rate']
    missing_cols = [col for col in required_cols if col not in df.columns]
    
    if missing_cols:
        print(f"ERROR: Missing columns in final dataset: {missing_cols}")
        sys.exit(1)
    
    # Check data types
    print(f"Data types:")
    print(f"  org: {df['org'].dtype}")
    print(f"  year: {df['year'].dtype}")
    print(f"  total_appointments: {df['total_appointments'].dtype}")
    print(f"  reappointments: {df['reappointments'].dtype}")
    print(f"  reappointment_rate: {df['reappointment_rate'].dtype}")
    
    # Check for negative values
    negative_appointments = (df['total_appointments'] < 0).sum()
    negative_reappointments = (df['reappointments'] < 0).sum()
    
    if negative_appointments > 0:
        print(f"WARNING: {negative_appointments} negative appointment counts")
    if negative_reappointments > 0:
        print(f"WARNING: {negative_reappointments} negative reappointment counts")
    
    print("✓ Final dataset validation completed")

def main():
    """Main execution function."""
    print("NEW BRUNSWICK APPOINTMENTS - REAPPOINTMENT RATE CALCULATOR")
    print("=" * 65)
    
    # Define output file path
    output_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step6_reappointment_rates.csv")
    
    try:
        # Load and validate datasets
        appointment_df, reappointment_df = load_and_validate_datasets()
        validate_datasets(appointment_df, reappointment_df)
        
        # Merge datasets
        merged_df = merge_datasets(appointment_df, reappointment_df)
        
        # Calculate reappointment rates
        final_df = calculate_reappointment_rates(merged_df)
        
        # Validate final dataset
        validate_final_dataset(final_df)
        
        # Sort by organization and year for clean output
        final_df = final_df.sort_values(['org', 'year']).reset_index(drop=True)
        
        # Save the results
        print(f"\nSaving results to: {output_file}")
        final_df.to_csv(output_file, index=False, encoding='utf-8')
        print("✓ Results saved successfully")
        
        # Analyze reappointment rates
        analyze_reappointment_rates(final_df)
        
        print(f"\n✓ Process completed successfully!")
        print(f"Reappointment rates calculated for {len(final_df):,} org-year combinations")
        
    except KeyboardInterrupt:
        print("\n\nProcess interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nFATAL ERROR: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()