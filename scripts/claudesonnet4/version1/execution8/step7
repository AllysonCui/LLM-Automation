#!/usr/bin/env python3
"""
New Brunswick Government Yearly Maximum Reappointment Rates
===========================================================

This script identifies the organization with the highest reappointment rate
for each year and creates a time series visualization.

Author: Claude Sonnet 4
Created: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

def load_reappointment_rates():
    """
    Load the reappointment rates dataset from step 6.
    
    Returns:
        pd.DataFrame: Reappointment rates dataset
    """
    print("Loading reappointment rates dataset...")
    print("-" * 40)
    
    # Define file path
    input_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step6_reappointment_rates.csv")
    
    if not input_file.exists():
        print(f"ERROR: Input file not found: {input_file}")
        sys.exit(1)
    
    try:
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"✓ Loaded dataset: {len(df):,} records")
        
        # Validate required columns
        required_cols = ['year', 'org', 'reappointment_rate']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            print(f"ERROR: Missing required columns: {missing_cols}")
            sys.exit(1)
        
        # Report basic statistics
        valid_rates = df['reappointment_rate'].dropna()
        print(f"Valid reappointment rates: {len(valid_rates):,}")
        print(f"Years covered: {df['year'].min()} to {df['year'].max()}")
        print(f"Unique organizations: {df['org'].nunique():,}")
        
        return df
        
    except Exception as e:
        print(f"ERROR: Failed to load dataset: {str(e)}")
        sys.exit(1)

def find_yearly_max_rates(df):
    """
    Find the organization with the highest reappointment rate for each year.
    
    Tie-breaking approach: When multiple organizations have the same highest rate,
    select the organization with the alphabetically first name for consistency.
    
    Args:
        df (pd.DataFrame): Reappointment rates dataset
        
    Returns:
        pd.DataFrame: Yearly maximum rates with columns: year, top_org, max_rate
    """
    print("\nFinding yearly maximum reappointment rates...")
    print("-" * 45)
    
    # Filter out records with missing reappointment rates
    valid_df = df.dropna(subset=['reappointment_rate']).copy()
    
    if len(valid_df) == 0:
        print("ERROR: No valid reappointment rates found")
        sys.exit(1)
    
    print(f"Processing {len(valid_df):,} records with valid rates")
    
    yearly_max_list = []
    tie_years = []
    
    # Group by year and find maximum rate
    for year in sorted(valid_df['year'].unique()):
        year_data = valid_df[valid_df['year'] == year]
        
        if len(year_data) == 0:
            continue
        
        # Find maximum rate for this year
        max_rate = year_data['reappointment_rate'].max()
        
        # Find all organizations with this maximum rate
        max_orgs = year_data[year_data['reappointment_rate'] == max_rate]['org'].tolist()
        
        # Handle ties by selecting alphabetically first organization
        if len(max_orgs) > 1:
            tie_years.append({
                'year': year,
                'tied_orgs': max_orgs,
                'rate': max_rate
            })
            top_org = sorted(max_orgs)[0]  # Alphabetically first
        else:
            top_org = max_orgs[0]
        
        yearly_max_list.append({
            'year': int(year),
            'top_org': top_org,
            'max_rate': max_rate
        })
    
    # Create DataFrame
    yearly_max_df = pd.DataFrame(yearly_max_list)
    
    # Report tie-breaking information
    if tie_years:
        print(f"\nTie-breaking applied for {len(tie_years)} years:")
        for tie_info in tie_years:
            tied_names = ', '.join(tie_info['tied_orgs'][:3])  # Show first 3
            if len(tie_info['tied_orgs']) > 3:
                tied_names += f" (and {len(tie_info['tied_orgs']) - 3} more)"
            print(f"  {tie_info['year']}: {len(tie_info['tied_orgs'])} orgs tied at {tie_info['rate']:.3f}")
            print(f"    Selected: {sorted(tie_info['tied_orgs'])[0]}")
            print(f"    All tied: {tied_names}")
    
    print(f"\n✓ Processed {len(yearly_max_df)} years")
    
    return yearly_max_df

def print_yearly_results(yearly_max_df):
    """
    Print the year-by-year results in a formatted table.
    
    Args:
        yearly_max_df (pd.DataFrame): Yearly maximum rates dataset
    """
    print("\nYEAR-BY-YEAR MAXIMUM REAPPOINTMENT RATES")
    print("=" * 60)
    print(f"{'Year':<6} {'Max Rate':<10} {'Organization':<45}")
    print("-" * 60)
    
    for _, row in yearly_max_df.iterrows():
        year = int(row['year'])
        rate_pct = row['max_rate'] * 100
        org = row['top_org']
        
        # Truncate long organization names
        org_display = org[:44] + "..." if len(org) > 44 else org
        
        print(f"{year:<6} {rate_pct:>6.1f}%   {org_display:<45}")
    
    # Summary statistics
    print("-" * 60)
    print(f"Average max rate: {yearly_max_df['max_rate'].mean() * 100:.1f}%")
    print(f"Highest max rate: {yearly_max_df['max_rate'].max() * 100:.1f}% in {yearly_max_df.loc[yearly_max_df['max_rate'].idxmax(), 'year']}")
    print(f"Lowest max rate: {yearly_max_df['max_rate'].min() * 100:.1f}% in {yearly_max_df.loc[yearly_max_df['max_rate'].idxmin(), 'year']}")

def create_visualization(yearly_max_df, output_file):
    """
    Create a visualization showing the trend of maximum reappointment rates over time.
    
    Args:
        yearly_max_df (pd.DataFrame): Yearly maximum rates dataset
        output_file (Path): Output file path for the visualization
    """
    print(f"\nCreating visualization...")
    print("-" * 25)
    
    try:
        # Set up the plot
        plt.figure(figsize=(12, 8))
        
        # Create the main plot
        years = yearly_max_df['year']
        rates_pct = yearly_max_df['max_rate'] * 100
        
        # Line plot with markers
        plt.plot(years, rates_pct, marker='o', linewidth=2, markersize=6, 
                color='darkblue', markerfacecolor='lightblue', markeredgecolor='darkblue')
        
        # Add horizontal line for average
        avg_rate = rates_pct.mean()
        plt.axhline(y=avg_rate, color='red', linestyle='--', alpha=0.7, linewidth=1)
        
        # Customize the plot
        plt.title('Maximum Reappointment Rate by Year\nNew Brunswick Government Appointments', 
                 fontsize=16, fontweight='bold', pad=20)
        plt.xlabel('Year', fontsize=12, fontweight='bold')
        plt.ylabel('Maximum Reappointment Rate (%)', fontsize=12, fontweight='bold')
        
        # Set y-axis to start from 0 for better context
        plt.ylim(0, max(rates_pct) * 1.1)
        
        # Customize x-axis
        plt.xticks(years[::2], rotation=45)  # Show every other year
        
        # Add grid
        plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5)
        
        # Add legend
        line_patch = mpatches.Patch(color='darkblue', label='Maximum Rate per Year')
        avg_patch = mpatches.Patch(color='red', label=f'Average ({avg_rate:.1f}%)')
        plt.legend(handles=[line_patch, avg_patch], loc='upper left')
        
        # Add annotations for highest and lowest points
        max_idx = rates_pct.idxmax()
        min_idx = rates_pct.idxmin()
        
        # Highest point
        plt.annotate(f'Highest: {rates_pct.iloc[max_idx]:.1f}%\n{years.iloc[max_idx]}',
                    xy=(years.iloc[max_idx], rates_pct.iloc[max_idx]),
                    xytext=(10, 10), textcoords='offset points',
                    bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7),
                    arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))
        
        # Lowest point
        plt.annotate(f'Lowest: {rates_pct.iloc[min_idx]:.1f}%\n{years.iloc[min_idx]}',
                    xy=(years.iloc[min_idx], rates_pct.iloc[min_idx]),
                    xytext=(10, -20), textcoords='offset points',
                    bbox=dict(boxstyle='round,pad=0.3', facecolor='lightgreen', alpha=0.7),
                    arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))
        
        # Adjust layout and save
        plt.tight_layout()
        plt.savefig(output_file, dpi=300, bbox_inches='tight', facecolor='white')
        plt.close()
        
        print(f"✓ Visualization saved to: {output_file}")
        
    except Exception as e:
        print(f"ERROR: Failed to create visualization: {str(e)}")
        # Don't exit, as the main analysis is complete

def validate_results(yearly_max_df):
    """
    Validate the yearly maximum rates results.
    
    Args:
        yearly_max_df (pd.DataFrame): Yearly maximum rates dataset
    """
    print("\nValidating results...")
    print("-" * 20)
    
    # Check for required columns
    required_cols = ['year', 'top_org', 'max_rate']
    missing_cols = [col for col in required_cols if col not in yearly_max_df.columns]
    
    if missing_cols:
        print(f"ERROR: Missing columns in results: {missing_cols}")
        sys.exit(1)
    
    # Check data ranges
    if len(yearly_max_df) == 0:
        print("ERROR: No results generated")
        sys.exit(1)
    
    # Check for valid rates (should be between 0 and reasonable upper bound)
    max_rate = yearly_max_df['max_rate'].max()
    min_rate = yearly_max_df['max_rate'].min()
    
    print(f"Rate range: {min_rate:.3f} to {max_rate:.3f}")
    
    if min_rate < 0:
        print("WARNING: Negative reappointment rates found")
    
    if max_rate > 2.0:  # 200% seems unreasonably high
        print(f"WARNING: Very high reappointment rate found: {max_rate:.3f}")
    
    # Check for missing data
    missing_orgs = yearly_max_df['top_org'].isna().sum()
    missing_rates = yearly_max_df['max_rate'].isna().sum()
    
    if missing_orgs > 0:
        print(f"WARNING: {missing_orgs} years with missing organization data")
    if missing_rates > 0:
        print(f"WARNING: {missing_rates} years with missing rate data")
    
    print("✓ Results validation completed")

def main():
    """Main execution function."""
    print("NEW BRUNSWICK APPOINTMENTS - YEARLY MAXIMUM RATES")
    print("=" * 55)
    
    # Define output file paths
    csv_output = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step7_yearly_max_rates.csv")
    png_output = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step7_yearly_max_rates.png")
    
    try:
        # Load reappointment rates
        df = load_reappointment_rates()
        
        # Find yearly maximum rates
        yearly_max_df = find_yearly_max_rates(df)
        
        # Validate results
        validate_results(yearly_max_df)
        
        # Print year-by-year results
        print_yearly_results(yearly_max_df)
        
        # Save CSV results
        print(f"\nSaving results to: {csv_output}")
        yearly_max_df.to_csv(csv_output, index=False, encoding='utf-8')
        print("✓ CSV results saved successfully")
        
        # Create visualization
        create_visualization(yearly_max_df, png_output)
        
        print(f"\n✓ Process completed successfully!")
        print(f"Analyzed {len(yearly_max_df)} years of data")
        
    except KeyboardInterrupt:
        print("\n\nProcess interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nFATAL ERROR: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()