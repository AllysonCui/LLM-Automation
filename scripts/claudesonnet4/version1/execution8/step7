#!/usr/bin/env python3
"""
New Brunswick Government Yearly Maximum Reappointment Rates
==========================================================

This script identifies the organization with the highest reappointment rate
for each year and creates a time series visualization of the trends.

Author: Claude Sonnet 4
Created: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime

def load_reappointment_rates():
    """
    Load the reappointment rates dataset from step 6.
    
    Returns:
        pd.DataFrame: Reappointment rates dataset
    """
    input_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step6_reappointment_rates.csv")
    
    if not input_file.exists():
        print(f"ERROR: Input file not found: {input_file}")
        sys.exit(1)
    
    try:
        print("Loading reappointment rates dataset...")
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
        
        # Verify required columns
        required_columns = ['org', 'year', 'reappointment_rate']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"ERROR: Missing required columns: {', '.join(missing_columns)}")
            print(f"Available columns: {', '.join(df.columns)}")
            sys.exit(1)
        
        return df
        
    except Exception as e:
        print(f"ERROR: Failed to load dataset: {str(e)}")
        sys.exit(1)

def handle_ties_in_max_rates(year_group):
    """
    Handle ties when multiple organizations have the same maximum rate.
    
    Approach: When there are ties, select the organization with:
    1. Highest total employees (more significant sample)
    2. If still tied, alphabetically first organization name (consistent deterministic choice)
    
    Args:
        year_group (pd.DataFrame): Data for a single year
    
    Returns:
        pd.Series: Row with the selected top organization
    """
    # Filter for valid (non-NaN) reappointment rates
    valid_rates = year_group[year_group['reappointment_rate'].notna()]
    
    if len(valid_rates) == 0:
        # No valid rates for this year
        return pd.Series({
            'org': 'No Data',
            'year': year_group['year'].iloc[0],
            'reappointment_rate': np.nan,
            'total_employees': 0,
            'reappointments': 0,
            'tie_count': 0
        })
    
    # Find maximum rate
    max_rate = valid_rates['reappointment_rate'].max()
    
    # Find all organizations with the maximum rate
    tied_orgs = valid_rates[valid_rates['reappointment_rate'] == max_rate]
    
    if len(tied_orgs) == 1:
        # No tie, simple case
        selected = tied_orgs.iloc[0].copy()
        selected['tie_count'] = 1
        return selected
    
    # Handle ties
    print(f"  Tie detected for year {year_group['year'].iloc[0]}: {len(tied_orgs)} organizations with rate {max_rate:.4f}")
    
    # Tiebreaker 1: Highest total employees
    max_employees = tied_orgs['total_employees'].max()
    tied_by_employees = tied_orgs[tied_orgs['total_employees'] == max_employees]
    
    if len(tied_by_employees) == 1:
        selected = tied_by_employees.iloc[0].copy()
        selected['tie_count'] = len(tied_orgs)
        print(f"    Resolved by total employees: {selected['org']}")
        return selected
    
    # Tiebreaker 2: Alphabetically first organization
    tied_sorted = tied_by_employees.sort_values('org')
    selected = tied_sorted.iloc[0].copy()
    selected['tie_count'] = len(tied_orgs)
    print(f"    Resolved alphabetically: {selected['org']}")
    
    return selected

def identify_yearly_max_rates(df):
    """
    For each year, identify the organization with the highest reappointment rate.
    
    Args:
        df (pd.DataFrame): Reappointment rates dataset
    
    Returns:
        pd.DataFrame: Yearly maximum rates with top organizations
    """
    print("\nIdentifying yearly maximum reappointment rates...")
    print("-" * 50)
    
    # Filter out records with missing or invalid data
    valid_data = df[df['reappointment_rate'].notna()].copy()
    
    if len(valid_data) == 0:
        print("ERROR: No valid reappointment rate data found!")
        sys.exit(1)
    
    print(f"Processing {len(valid_data):,} valid records across {valid_data['year'].nunique()} years")
    
    # Group by year and find maximum for each year
    yearly_max = []
    
    for year, year_group in valid_data.groupby('year'):
        print(f"\nYear {year}: {len(year_group)} organizations")
        
        # Handle ties and select top organization
        top_org_data = handle_ties_in_max_rates(year_group)
        yearly_max.append(top_org_data)
    
    # Convert to DataFrame
    result_df = pd.DataFrame(yearly_max)
    
    # Ensure proper column order and types
    result_df = result_df[['year', 'org', 'reappointment_rate', 'total_employees', 'reappointments', 'tie_count']]
    result_df['year'] = result_df['year'].astype(int)
    
    # Rename org column to top_org for clarity
    result_df = result_df.rename(columns={'org': 'top_org', 'reappointment_rate': 'max_rate'})
    
    return result_df

def create_visualization(yearly_max_df, output_dir):
    """
    Create a visualization showing the trend of maximum reappointment rates over time.
    
    Args:
        yearly_max_df (pd.DataFrame): Yearly maximum rates data
        output_dir (Path): Output directory for saving the plot
    """
    print("\nCreating visualization...")
    print("-" * 25)
    
    # Filter out years with no data
    plot_data = yearly_max_df[yearly_max_df['max_rate'].notna()].copy()
    
    if len(plot_data) == 0:
        print("WARNING: No valid data for visualization")
        return
    
    # Create the plot
    plt.figure(figsize=(12, 8))
    
    # Main line plot
    plt.plot(plot_data['year'], plot_data['max_rate'] * 100, 
             marker='o', linewidth=2, markersize=8, color='#2E86AB')
    
    # Add points for organizations with ties
    tie_data = plot_data[plot_data['tie_count'] > 1]
    if not tie_data.empty:
        plt.scatter(tie_data['year'], tie_data['max_rate'] * 100, 
                   color='red', s=100, zorder=5, alpha=0.7,
                   label=f'Tied rates ({len(tie_data)} years)')
    
    # Formatting
    plt.title('Highest Annual Reappointment Rates by Year\nNew Brunswick Government Appointments', 
              fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Year', fontsize=12, fontweight='bold')
    plt.ylabel('Maximum Reappointment Rate (%)', fontsize=12, fontweight='bold')
    
    # Format y-axis as percentage
    plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: f'{y:.1f}%'))
    
    # Set x-axis to show all years
    plt.xticks(plot_data['year'], rotation=45)
    
    # Add grid
    plt.grid(True, alpha=0.3, linestyle='--')
    
    # Add legend if there are ties
    if not tie_data.empty:
        plt.legend()
    
    # Annotate highest and lowest points
    max_idx = plot_data['max_rate'].idxmax()
    min_idx = plot_data['max_rate'].idxmin()
    
    max_point = plot_data.loc[max_idx]
    min_point = plot_data.loc[min_idx]
    
    # Annotate highest point
    plt.annotate(f'Highest: {max_point["max_rate"]*100:.2f}%\n{max_point["top_org"][:30]}...',
                xy=(max_point['year'], max_point['max_rate']*100),
                xytext=(10, 10), textcoords='offset points',
                bbox=dict(boxstyle='round,pad=0.5', fc='yellow', alpha=0.7),
                arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))
    
    # Annotate lowest point
    plt.annotate(f'Lowest: {min_point["max_rate"]*100:.2f}%\n{min_point["top_org"][:30]}...',
                xy=(min_point['year'], min_point['max_rate']*100),
                xytext=(10, -30), textcoords='offset points',
                bbox=dict(boxstyle='round,pad=0.5', fc='lightblue', alpha=0.7),
                arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))
    
    # Adjust layout
    plt.tight_layout()
    
    # Save the plot
    plot_file = output_dir / "step7_yearly_max_rates.png"
    plt.savefig(plot_file, dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"✓ Saved visualization to: {plot_file}")

def print_yearly_results(yearly_max_df):
    """
    Print year-by-year results in a formatted table.
    
    Args:
        yearly_max_df (pd.DataFrame): Yearly maximum rates data
    """
    print("\nYEAR-BY-YEAR MAXIMUM REAPPOINTMENT RATES")
    print("=" * 80)
    
    print("Year  Max Rate   Top Organization                                      Employees  Ties")
    print("-" * 85)
    
    for _, row in yearly_max_df.iterrows():
        if pd.isna(row['max_rate']):
            rate_str = "No Data"
            org_display = "No Data Available"
            employees_str = "N/A"
        else:
            rate_str = f"{row['max_rate']*100:>7.2f}%"
            org_display = row['top_org'][:50] + '...' if len(row['top_org']) > 50 else row['top_org']
            employees_str = f"{row['total_employees']:,}"
        
        tie_str = f"{row['tie_count']:,}" if row['tie_count'] > 1 else ""
        
        print(f"{row['year']}  {rate_str}   {org_display:<50} {employees_str:>9}  {tie_str}")
    
    # Summary statistics
    valid_data = yearly_max_df[yearly_max_df['max_rate'].notna()]
    if not valid_data.empty:
        print(f"\nSummary Statistics:")
        print("-" * 20)
        print(f"Years with data: {len(valid_data):,}")
        print(f"Highest rate: {valid_data['max_rate'].max()*100:.2f}% ({valid_data.loc[valid_data['max_rate'].idxmax(), 'year']})")
        print(f"Lowest rate: {valid_data['max_rate'].min()*100:.2f}% ({valid_data.loc[valid_data['max_rate'].idxmin(), 'year']})")
        print(f"Average rate: {valid_data['max_rate'].mean()*100:.2f}%")
        print(f"Years with ties: {(valid_data['tie_count'] > 1).sum():,}")

def main():
    """Main execution function."""
    print("NEW BRUNSWICK APPOINTMENTS - YEARLY MAXIMUM REAPPOINTMENT RATES")
    print("=" * 75)
    
    # Define output paths
    output_dir = Path("scripts/claudesonnet4/version1/execution8/analysis_data")
    output_file = output_dir / "step7_yearly_max_rates.csv"
    
    try:
        # Load reappointment rates
        df = load_reappointment_rates()
        
        # Identify yearly maximum rates
        yearly_max_df = identify_yearly_max_rates(df)
        
        # Create the required output format (year, top_org, max_rate)
        output_df = yearly_max_df[['year', 'top_org', 'max_rate']].copy()
        
        # Save results
        output_df.to_csv(output_file, index=False, encoding='utf-8')
        print(f"\n✓ Saved yearly maximum rates to: {output_file}")
        
        # Create visualization
        create_visualization(yearly_max_df, output_dir)
        
        # Print results
        print_yearly_results(yearly_max_df)
        
        print(f"\n✓ Process completed successfully!")
        print(f"Identified top organizations for {len(yearly_max_df):,} years")
        
    except KeyboardInterrupt:
        print("\n\nProcess interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nFATAL ERROR: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()