#!/usr/bin/env python3
"""
New Brunswick Government Annual Reappointment Proportions
========================================================

This script calculates the overall proportion of reappointments across
the entire New Brunswick government for each year from 2013-2024.

Author: Claude Sonnet 4
Created: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt

def load_reappointment_data():
    """
    Load the dataset from step 3 with reappointment flags.
    
    Returns:
        pd.DataFrame: Dataset with reappointment flags
    """
    print("Loading reappointment dataset from step 3...")
    print("-" * 45)
    
    # Define file path
    input_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step3_repeats_marked.csv")
    
    if not input_file.exists():
        print(f"ERROR: Input file not found: {input_file}")
        sys.exit(1)
    
    try:
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"✓ Loaded dataset: {len(df):,} records")
        
        # Validate required columns
        required_cols = ['year', 'reappointed']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            print(f"ERROR: Missing required columns: {missing_cols}")
            sys.exit(1)
        
        # Convert data types
        df['year'] = pd.to_numeric(df['year'], errors='coerce')
        
        # Ensure reappointed is boolean
        if df['reappointed'].dtype != 'bool':
            df['reappointed'] = df['reappointed'].astype(bool)
        
        # Report basic statistics
        valid_years = df['year'].dropna()
        print(f"Records with valid years: {len(valid_years):,}")
        print(f"Year range: {valid_years.min():.0f} to {valid_years.max():.0f}")
        print(f"Total reappointments: {df['reappointed'].sum():,}")
        
        return df
        
    except Exception as e:
        print(f"ERROR: Failed to load dataset: {str(e)}")
        sys.exit(1)

def calculate_annual_proportions(df):
    """
    Calculate annual reappointment proportions for the entire government.
    
    Args:
        df (pd.DataFrame): Dataset with reappointment flags
        
    Returns:
        pd.DataFrame: Annual proportions with columns: year, total_appointments, 
                     total_reappointments, reappointment_proportion
    """
    print("\nCalculating annual reappointment proportions...")
    print("-" * 45)
    
    # Filter out records with missing years
    valid_df = df.dropna(subset=['year']).copy()
    
    if len(valid_df) == 0:
        print("ERROR: No records with valid years found")
        sys.exit(1)
    
    print(f"Processing {len(valid_df):,} records with valid years")
    
    # Group by year and calculate totals
    annual_stats = []
    
    # Get all years in the range 2013-2024
    target_years = range(2013, 2025)
    available_years = set(valid_df['year'].astype(int))
    
    print(f"Target years: {list(target_years)}")
    print(f"Available years: {sorted(available_years)}")
    
    for year in target_years:
        year_data = valid_df[valid_df['year'] == year]
        
        if len(year_data) == 0:
            print(f"WARNING: No data found for year {year}")
            # Add zero entry for missing years
            annual_stats.append({
                'year': year,
                'total_appointments': 0,
                'total_reappointments': 0,
                'reappointment_proportion': np.nan
            })
            continue
        
        # Calculate totals for this year
        total_appointments = len(year_data)
        total_reappointments = year_data['reappointed'].sum()
        
        # Calculate proportion
        if total_appointments > 0:
            proportion = total_reappointments / total_appointments
        else:
            proportion = np.nan
        
        annual_stats.append({
            'year': year,
            'total_appointments': total_appointments,
            'total_reappointments': total_reappointments,
            'reappointment_proportion': proportion
        })
    
    # Create DataFrame
    annual_df = pd.DataFrame(annual_stats)
    
    # Report summary
    valid_years_count = (annual_df['total_appointments'] > 0).sum()
    print(f"\n✓ Calculated proportions for {valid_years_count} years with data")
    
    return annual_df

def print_annual_results(annual_df):
    """
    Print the year-by-year results in a formatted table.
    
    Args:
        annual_df (pd.DataFrame): Annual proportions dataset
    """
    print("\nANNUAL GOVERNMENT-WIDE REAPPOINTMENT PROPORTIONS")
    print("=" * 65)
    print(f"{'Year':<6} {'Total Appts':<12} {'Reappts':<10} {'Proportion':<12} {'Percentage'}")
    print("-" * 65)
    
    total_appointments_all = 0
    total_reappointments_all = 0
    
    for _, row in annual_df.iterrows():
        year = int(row['year'])
        total_appts = int(row['total_appointments'])
        total_reappts = int(row['total_reappointments'])
        proportion = row['reappointment_proportion']
        
        # Accumulate totals (excluding zero years)
        if total_appts > 0:
            total_appointments_all += total_appts
            total_reappointments_all += total_reappts
        
        if pd.isna(proportion):
            proportion_str = "N/A"
            percentage_str = "N/A"
        else:
            proportion_str = f"{proportion:.4f}"
            percentage_str = f"{proportion * 100:.1f}%"
        
        print(f"{year:<6} {total_appts:>9,}   {total_reappts:>7,}   {proportion_str:<12} {percentage_str}")
    
    # Calculate overall statistics
    print("-" * 65)
    
    if total_appointments_all > 0:
        overall_proportion = total_reappointments_all / total_appointments_all
        print(f"TOTAL  {total_appointments_all:>9,}   {total_reappointments_all:>7,}   {overall_proportion:.4f}       {overall_proportion * 100:.1f}%")
    
    # Additional statistics for years with data
    valid_proportions = annual_df['reappointment_proportion'].dropna()
    if len(valid_proportions) > 0:
        print(f"\nStatistics for years with data:")
        print(f"Average annual proportion: {valid_proportions.mean():.3f} ({valid_proportions.mean() * 100:.1f}%)")
        print(f"Highest annual proportion: {valid_proportions.max():.3f} ({valid_proportions.max() * 100:.1f}%)")
        print(f"Lowest annual proportion: {valid_proportions.min():.3f} ({valid_proportions.min() * 100:.1f}%)")

def create_visualization(annual_df, output_file):
    """
    Create a visualization showing the government-wide reappointment proportion trend over time.
    
    Args:
        annual_df (pd.DataFrame): Annual proportions dataset
        output_file (Path): Output file path for the visualization
    """
    print(f"\nCreating visualization...")
    print("-" * 25)
    
    try:
        # Filter to years with data
        plot_df = annual_df[annual_df['total_appointments'] > 0].copy()
        
        if len(plot_df) == 0:
            print("WARNING: No data available for visualization")
            return
        
        # Set up the plot
        plt.figure(figsize=(12, 8))
        
        # Create the main plot
        years = plot_df['year']
        proportions_pct = plot_df['reappointment_proportion'] * 100
        
        # Line plot with markers
        plt.plot(years, proportions_pct, marker='o', linewidth=3, markersize=8, 
                color='darkgreen', markerfacecolor='lightgreen', markeredgecolor='darkgreen',
                markeredgewidth=2)
        
        # Add horizontal line for average
        avg_proportion = proportions_pct.mean()
        plt.axhline(y=avg_proportion, color='red', linestyle='--', alpha=0.7, linewidth=2)
        
        # Customize the plot
        plt.title('Government-wide Reappointment Proportion by Year\nNew Brunswick Government Appointments', 
                 fontsize=16, fontweight='bold', pad=20)
        plt.xlabel('Year', fontsize=12, fontweight='bold')
        plt.ylabel('Reappointment Proportion (%)', fontsize=12, fontweight='bold')
        
        # Set y-axis limits for better visualization
        y_min = max(0, proportions_pct.min() - 1)
        y_max = proportions_pct.max() + 1
        plt.ylim(y_min, y_max)
        
        # Customize x-axis
        plt.xticks(years, rotation=45)
        
        # Add grid
        plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5)
        
        # Add data labels on points
        for i, (year, prop) in enumerate(zip(years, proportions_pct)):
            plt.annotate(f'{prop:.1f}%', 
                        xy=(year, prop), 
                        xytext=(0, 10), 
                        textcoords='offset points',
                        ha='center', va='bottom',
                        fontsize=9, fontweight='bold',
                        bbox=dict(boxstyle='round,pad=0.2', facecolor='white', alpha=0.8))
        
        # Add legend
        plt.legend([f'Annual Proportion', f'Average ({avg_proportion:.1f}%)'], 
                  loc='upper left', fontsize=10)
        
        # Add summary text box
        total_appts = plot_df['total_appointments'].sum()
        total_reappts = plot_df['total_reappointments'].sum()
        overall_prop = (total_reappts / total_appts) * 100
        
        textstr = f'Overall Statistics:\nTotal Appointments: {total_appts:,}\nTotal Reappointments: {total_reappts:,}\nOverall Proportion: {overall_prop:.1f}%'
        props = dict(boxstyle='round', facecolor='lightblue', alpha=0.8)
        plt.text(0.02, 0.98, textstr, transform=plt.gca().transAxes, fontsize=10,
                verticalalignment='top', bbox=props)
        
        # Adjust layout and save
        plt.tight_layout()
        plt.savefig(output_file, dpi=300, bbox_inches='tight', facecolor='white')
        plt.close()
        
        print(f"✓ Visualization saved to: {output_file}")
        
    except Exception as e:
        print(f"ERROR: Failed to create visualization: {str(e)}")
        # Don't exit, as the main analysis is complete

def validate_results(annual_df):
    """
    Validate the annual proportions results.
    
    Args:
        annual_df (pd.DataFrame): Annual proportions dataset
    """
    print("\nValidating results...")
    print("-" * 20)
    
    # Check for required columns
    required_cols = ['year', 'total_appointments', 'total_reappointments', 'reappointment_proportion']
    missing_cols = [col for col in required_cols if col not in annual_df.columns]
    
    if missing_cols:
        print(f"ERROR: Missing columns in results: {missing_cols}")
        sys.exit(1)
    
    # Check data ranges
    if len(annual_df) == 0:
        print("ERROR: No results generated")
        sys.exit(1)
    
    # Check for valid proportions
    valid_props = annual_df['reappointment_proportion'].dropna()
    if len(valid_props) > 0:
        max_prop = valid_props.max()
        min_prop = valid_props.min()
        
        print(f"Proportion range: {min_prop:.4f} to {max_prop:.4f}")
        
        if min_prop < 0:
            print("WARNING: Negative proportions found")
        
        if max_prop > 1.0:
            print(f"WARNING: Proportions > 100% found: {max_prop:.4f}")
    
    # Check for negative counts
    negative_appts = (annual_df['total_appointments'] < 0).sum()
    negative_reappts = (annual_df['total_reappointments'] < 0).sum()
    
    if negative_appts > 0:
        print(f"WARNING: {negative_appts} years with negative appointment counts")
    if negative_reappts > 0:
        print(f"WARNING: {negative_reappts} years with negative reappointment counts")
    
    print("✓ Results validation completed")

def main():
    """Main execution function."""
    print("NEW BRUNSWICK GOVERNMENT - ANNUAL REAPPOINTMENT PROPORTIONS")
    print("=" * 65)
    
    # Define output file paths
    csv_output = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step8_annual_proportions.csv")
    png_output = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step8_annual_reappointment_proportions.png")
    
    try:
        # Load reappointment data
        df = load_reappointment_data()
        
        # Calculate annual proportions
        annual_df = calculate_annual_proportions(df)
        
        # Validate results
        validate_results(annual_df)
        
        # Print year-by-year results
        print_annual_results(annual_df)
        
        # Save CSV results
        print(f"\nSaving results to: {csv_output}")
        annual_df.to_csv(csv_output, index=False, encoding='utf-8')
        print("✓ CSV results saved successfully")
        
        # Create visualization
        create_visualization(annual_df, png_output)
        
        print(f"\n✓ Process completed successfully!")
        years_with_data = (annual_df['total_appointments'] > 0).sum()
        print(f"Analyzed {years_with_data} years with appointment data")
        
    except KeyboardInterrupt:
        print("\n\nProcess interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nFATAL ERROR: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()