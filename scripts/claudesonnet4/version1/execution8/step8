#!/usr/bin/env python3
"""
New Brunswick Government Annual Reappointment Proportions
========================================================

This script calculates the overall government-wide reappointment proportions
for each year from 2013-2024 and creates a time series visualization.

Author: Claude Sonnet 4
Created: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt

def load_reappointment_data():
    """
    Load the dataset from step 3 with reappointment flags.
    
    Returns:
        pd.DataFrame: Dataset with reappointment flags
    """
    input_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step3_repeats_marked.csv")
    
    if not input_file.exists():
        print(f"ERROR: Input file not found: {input_file}")
        sys.exit(1)
    
    try:
        print("Loading reappointment dataset...")
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
        
        # Verify required columns
        required_columns = ['year', 'reappointed']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"ERROR: Missing required columns: {', '.join(missing_columns)}")
            print(f"Available columns: {', '.join(df.columns)}")
            sys.exit(1)
        
        return df
        
    except Exception as e:
        print(f"ERROR: Failed to load dataset: {str(e)}")
        sys.exit(1)

def prepare_data_for_analysis(df):
    """
    Prepare and clean data for annual proportion calculations.
    
    Args:
        df (pd.DataFrame): Raw dataset
    
    Returns:
        pd.DataFrame: Cleaned dataset ready for analysis
    """
    print("\nPreparing data for analysis...")
    print("-" * 35)
    
    df_clean = df.copy()
    
    # Convert year to numeric and handle missing values
    df_clean['year'] = pd.to_numeric(df_clean['year'], errors='coerce')
    
    # Remove records with missing years
    initial_count = len(df_clean)
    df_clean = df_clean.dropna(subset=['year'])
    removed_count = initial_count - len(df_clean)
    
    if removed_count > 0:
        print(f"✓ Removed {removed_count:,} records with missing years")
    
    # Convert year to integer
    df_clean['year'] = df_clean['year'].astype(int)
    
    # Handle reappointed column
    if 'reappointed' in df_clean.columns:
        # Convert various representations to boolean
        if df_clean['reappointed'].dtype == 'object':
            df_clean['reappointed'] = df_clean['reappointed'].map({
                'True': True, 'true': True, 'TRUE': True, 1: True, '1': True,
                'False': False, 'false': False, 'FALSE': False, 0: False, '0': False
            })
        # Fill missing values with False and convert to boolean
        df_clean['reappointed'] = df_clean['reappointed'].fillna(False).astype(bool)
    else:
        print("WARNING: 'reappointed' column not found, creating with all False values")
        df_clean['reappointed'] = False
    
    # Filter for years 2013-2024
    target_years = list(range(2013, 2025))
    df_filtered = df_clean[df_clean['year'].isin(target_years)]
    
    print(f"✓ Valid records: {len(df_clean):,}")
    print(f"✓ Records in target years (2013-2024): {len(df_filtered):,}")
    print(f"✓ Year range in data: {df_filtered['year'].min()} - {df_filtered['year'].max()}")
    
    return df_filtered

def calculate_annual_proportions(df):
    """
    Calculate annual reappointment proportions for the entire government.
    
    Args:
        df (pd.DataFrame): Cleaned dataset
    
    Returns:
        pd.DataFrame: Annual proportions with columns: year, total_appointments, 
                      total_reappointments, reappointment_proportion
    """
    print("\nCalculating annual reappointment proportions...")
    print("-" * 50)
    
    # Group by year and calculate totals
    annual_stats = []
    
    for year in sorted(df['year'].unique()):
        year_data = df[df['year'] == year]
        
        total_appointments = len(year_data)
        total_reappointments = year_data['reappointed'].sum()
        
        # Calculate proportion
        if total_appointments > 0:
            reappointment_proportion = total_reappointments / total_appointments
        else:
            reappointment_proportion = 0.0
        
        annual_stats.append({
            'year': year,
            'total_appointments': total_appointments,
            'total_reappointments': total_reappointments,
            'reappointment_proportion': reappointment_proportion
        })
        
        print(f"Year {year}: {total_appointments:,} appointments, {total_reappointments:,} reappointments ({reappointment_proportion*100:.2f}%)")
    
    # Convert to DataFrame
    result_df = pd.DataFrame(annual_stats)
    
    # Ensure all target years are represented (fill missing years with zeros)
    target_years = list(range(2013, 2025))
    existing_years = set(result_df['year'])
    missing_years = set(target_years) - existing_years
    
    if missing_years:
        print(f"\nAdding missing years with zero appointments: {sorted(missing_years)}")
        for year in missing_years:
            result_df = pd.concat([result_df, pd.DataFrame({
                'year': [year],
                'total_appointments': [0],
                'total_reappointments': [0],
                'reappointment_proportion': [0.0]
            })], ignore_index=True)
    
    # Sort by year
    result_df = result_df.sort_values('year').reset_index(drop=True)
    
    return result_df

def create_visualization(annual_df, output_dir):
    """
    Create a visualization showing the government-wide reappointment proportion trend over time.
    
    Args:
        annual_df (pd.DataFrame): Annual proportions data
        output_dir (Path): Output directory for saving the plot
    """
    print("\nCreating visualization...")
    print("-" * 25)
    
    # Filter out years with no appointments for visualization
    plot_data = annual_df[annual_df['total_appointments'] > 0].copy()
    
    if len(plot_data) == 0:
        print("WARNING: No data available for visualization")
        return
    
    # Create the plot
    plt.figure(figsize=(14, 8))
    
    # Main line plot
    plt.plot(plot_data['year'], plot_data['reappointment_proportion'] * 100, 
             marker='o', linewidth=3, markersize=8, color='#1f77b4', 
             markerfacecolor='white', markeredgewidth=2, markeredgecolor='#1f77b4')
    
    # Add data points with values
    for _, row in plot_data.iterrows():
        plt.annotate(f'{row["reappointment_proportion"]*100:.1f}%',
                    xy=(row['year'], row['reappointment_proportion']*100),
                    xytext=(0, 15), textcoords='offset points',
                    ha='center', va='bottom', fontsize=9, fontweight='bold')
    
    # Formatting
    plt.title('New Brunswick Government-Wide Reappointment Proportions\nAnnual Trends 2013-2024', 
              fontsize=16, fontweight='bold', pad=25)
    plt.xlabel('Year', fontsize=12, fontweight='bold')
    plt.ylabel('Reappointment Proportion (%)', fontsize=12, fontweight='bold')
    
    # Format y-axis as percentage
    plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: f'{y:.1f}%'))
    
    # Set x-axis to show all years with data
    plt.xticks(plot_data['year'], rotation=0)
    
    # Add grid
    plt.grid(True, alpha=0.3, linestyle='--')
    
    # Set y-axis limits with some padding
    y_min = max(0, plot_data['reappointment_proportion'].min() * 100 - 2)
    y_max = plot_data['reappointment_proportion'].max() * 100 + 5
    plt.ylim(y_min, y_max)
    
    # Add trend line
    if len(plot_data) > 1:
        z = np.polyfit(plot_data['year'], plot_data['reappointment_proportion'] * 100, 1)
        p = np.poly1d(z)
        plt.plot(plot_data['year'], p(plot_data['year']), 
                 linestyle='--', color='red', alpha=0.7, linewidth=2,
                 label=f'Trend: {z[0]:+.2f}% per year')
        plt.legend()
    
    # Add summary statistics text box
    mean_proportion = plot_data['reappointment_proportion'].mean() * 100
    min_proportion = plot_data['reappointment_proportion'].min() * 100
    max_proportion = plot_data['reappointment_proportion'].max() * 100
    
    stats_text = f'Average: {mean_proportion:.1f}%\nRange: {min_proportion:.1f}% - {max_proportion:.1f}%'
    plt.text(0.02, 0.98, stats_text, transform=plt.gca().transAxes, 
             verticalalignment='top', bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8),
             fontsize=10)
    
    # Adjust layout
    plt.tight_layout()
    
    # Save the plot
    plot_file = output_dir / "step8_annual_reappointment_proportions.png"
    plt.savefig(plot_file, dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"✓ Saved visualization to: {plot_file}")

def print_annual_results(annual_df):
    """
    Print year-by-year proportions in a formatted table.
    
    Args:
        annual_df (pd.DataFrame): Annual proportions data
    """
    print("\nGOVERNMENT-WIDE ANNUAL REAPPOINTMENT PROPORTIONS")
    print("=" * 70)
    
    print("Year   Total Appointments   Reappointments   Proportion")
    print("-" * 55)
    
    for _, row in annual_df.iterrows():
        proportion_pct = row['reappointment_proportion'] * 100
        print(f"{row['year']}        {row['total_appointments']:>8,}        {row['total_reappointments']:>8,}      {proportion_pct:>6.2f}%")
    
    # Summary statistics
    data_years = annual_df[annual_df['total_appointments'] > 0]
    if not data_years.empty:
        print(f"\nSummary Statistics:")
        print("-" * 20)
        print(f"Years with data: {len(data_years):,}")
        print(f"Total appointments (all years): {annual_df['total_appointments'].sum():,}")
        print(f"Total reappointments (all years): {annual_df['total_reappointments'].sum():,}")
        
        overall_proportion = annual_df['total_reappointments'].sum() / annual_df['total_appointments'].sum() if annual_df['total_appointments'].sum() > 0 else 0
        print(f"Overall proportion (all years): {overall_proportion*100:.2f}%")
        
        annual_avg = data_years['reappointment_proportion'].mean() * 100
        annual_min = data_years['reappointment_proportion'].min() * 100
        annual_max = data_years['reappointment_proportion'].max() * 100
        
        print(f"Average annual proportion: {annual_avg:.2f}%")
        print(f"Minimum annual proportion: {annual_min:.2f}% ({data_years.loc[data_years['reappointment_proportion'].idxmin(), 'year']})")
        print(f"Maximum annual proportion: {annual_max:.2f}% ({data_years.loc[data_years['reappointment_proportion'].idxmax(), 'year']})")

def main():
    """Main execution function."""
    print("NEW BRUNSWICK GOVERNMENT - ANNUAL REAPPOINTMENT PROPORTIONS")
    print("=" * 70)
    
    # Define output paths
    output_dir = Path("scripts/claudesonnet4/version1/execution8/analysis_data")
    output_file = output_dir / "step8_annual_proportions.csv"
    
    try:
        # Load reappointment data
        df = load_reappointment_data()
        
        # Prepare data for analysis
        df_clean = prepare_data_for_analysis(df)
        
        # Calculate annual proportions
        annual_df = calculate_annual_proportions(df_clean)
        
        # Save results
        annual_df.to_csv(output_file, index=False, encoding='utf-8')
        print(f"\n✓ Saved annual proportions to: {output_file}")
        
        # Create visualization
        create_visualization(annual_df, output_dir)
        
        # Print results
        print_annual_results(annual_df)
        
        print(f"\n✓ Process completed successfully!")
        print(f"Calculated proportions for {len(annual_df)} years (2013-2024)")
        
    except KeyboardInterrupt:
        print("\n\nProcess interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nFATAL ERROR: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()