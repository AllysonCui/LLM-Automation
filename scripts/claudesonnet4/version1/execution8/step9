#!/usr/bin/env python3
"""
New Brunswick Government Reappointment Trends - Linear Regression Analysis
=========================================================================

This script performs comprehensive linear regression analysis on government-wide
reappointment proportions to determine if there's a statistically significant
trend over the 12-year period (2013-2024).

Author: Claude Sonnet 4
Created: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
from scipy import stats
from scipy.stats import linregress
import warnings

# Try to import durbin_watson from statsmodels, with fallback implementation
try:
    from statsmodels.stats.diagnostic import durbin_watson
    HAS_STATSMODELS = True
except ImportError:
    HAS_STATSMODELS = False
    def durbin_watson(residuals):
        """
        Simple implementation of Durbin-Watson test statistic.
        DW = sum((e_t - e_{t-1})^2) / sum(e_t^2)
        """
        if len(residuals) < 2:
            return np.nan
        diff = np.diff(residuals)
        return np.sum(diff**2) / np.sum(residuals**2)

def load_annual_proportions():
    """
    Load the annual government-wide proportions from step 8.
    
    Returns:
        pd.DataFrame: Annual proportions dataset
    """
    input_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step8_annual_proportions.csv")
    
    if not input_file.exists():
        print(f"ERROR: Input file not found: {input_file}")
        sys.exit(1)
    
    try:
        print("Loading annual proportions dataset...")
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
        
        # Verify required columns
        required_columns = ['year', 'reappointment_proportion']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"ERROR: Missing required columns: {', '.join(missing_columns)}")
            print(f"Available columns: {', '.join(df.columns)}")
            sys.exit(1)
        
        return df
        
    except Exception as e:
        print(f"ERROR: Failed to load dataset: {str(e)}")
        sys.exit(1)

def prepare_regression_data(df):
    """
    Prepare data for regression analysis.
    
    Args:
        df (pd.DataFrame): Annual proportions dataset
    
    Returns:
        tuple: (X, Y, valid_data_df) where X is years, Y is proportions
    """
    print("\nPreparing data for regression analysis...")
    print("-" * 45)
    
    # Filter out years with no appointments (total_appointments = 0)
    if 'total_appointments' in df.columns:
        valid_data = df[df['total_appointments'] > 0].copy()
        excluded_years = len(df) - len(valid_data)
        if excluded_years > 0:
            print(f"✓ Excluded {excluded_years} years with zero appointments")
    else:
        # If total_appointments column not available, use all data
        valid_data = df.copy()
    
    if len(valid_data) < 3:
        print("ERROR: Insufficient data for regression analysis (need at least 3 data points)")
        sys.exit(1)
    
    # Extract X (years) and Y (proportions)
    X = valid_data['year'].values
    Y = valid_data['reappointment_proportion'].values
    
    print(f"✓ Valid data points: {len(valid_data)}")
    print(f"✓ Year range: {X.min()} - {X.max()}")
    print(f"✓ Proportion range: {Y.min():.4f} - {Y.max():.4f}")
    
    # Check for missing values
    if np.any(np.isnan(X)) or np.any(np.isnan(Y)):
        print("WARNING: Missing values detected in regression variables")
        # Remove any NaN values
        mask = ~(np.isnan(X) | np.isnan(Y))
        X = X[mask]
        Y = Y[mask]
        valid_data = valid_data.iloc[mask]
        print(f"✓ After removing NaN: {len(X)} data points")
    
    return X, Y, valid_data

def fit_linear_regression(X, Y):
    """
    Fit linear regression model and calculate comprehensive statistics.
    
    Args:
        X (np.array): Independent variable (years)
        Y (np.array): Dependent variable (proportions)
    
    Returns:
        dict: Comprehensive regression statistics
    """
    print("\nFitting linear regression model...")
    print("-" * 35)
    
    try:
        # Fit linear regression
        slope, intercept, r_value, p_value, std_err = linregress(X, Y)
        
        # Calculate additional statistics
        n = len(X)
        r_squared = r_value ** 2
        
        # Calculate residuals
        Y_pred = slope * X + intercept
        residuals = Y - Y_pred
        
        # Mean squared error and standard error of estimate
        mse = np.sum(residuals ** 2) / (n - 2)
        std_error_estimate = np.sqrt(mse)
        
        # Calculate 95% confidence intervals for slope
        t_critical = stats.t.ppf(0.975, n - 2)  # 95% confidence interval
        slope_ci_lower = slope - t_critical * std_err
        slope_ci_upper = slope + t_critical * std_err
        
        # Calculate 95% confidence intervals for intercept
        X_mean = np.mean(X)
        sum_x_squared = np.sum((X - X_mean) ** 2)
        intercept_std_err = std_error_estimate * np.sqrt(1/n + X_mean**2 / sum_x_squared)
        intercept_ci_lower = intercept - t_critical * intercept_std_err
        intercept_ci_upper = intercept + t_critical * intercept_std_err
        
        # Calculate F-statistic for overall model significance
        ss_total = np.sum((Y - np.mean(Y)) ** 2)
        ss_residual = np.sum(residuals ** 2)
        ss_regression = ss_total - ss_residual
        f_statistic = (ss_regression / 1) / (ss_residual / (n - 2))
        f_p_value = 1 - stats.f.cdf(f_statistic, 1, n - 2)
        
        regression_stats = {
            'n': n,
            'slope': slope,
            'intercept': intercept,
            'r_value': r_value,
            'r_squared': r_squared,
            'p_value': p_value,
            'std_err': std_err,
            'slope_ci_lower': slope_ci_lower,
            'slope_ci_upper': slope_ci_upper,
            'intercept_std_err': intercept_std_err,
            'intercept_ci_lower': intercept_ci_lower,
            'intercept_ci_upper': intercept_ci_upper,
            'std_error_estimate': std_error_estimate,
            'f_statistic': f_statistic,
            'f_p_value': f_p_value,
            'Y_pred': Y_pred,
            'residuals': residuals,
            'X': X,
            'Y': Y
        }
        
        print(f"✓ Regression model fitted successfully")
        print(f"✓ R-squared: {r_squared:.4f}")
        print(f"✓ P-value: {p_value:.6f}")
        
        return regression_stats
        
    except Exception as e:
        print(f"ERROR: Failed to fit regression model: {str(e)}")
        sys.exit(1)

def perform_regression_diagnostics(regression_stats):
    """
    Perform regression diagnostics including Durbin-Watson test and outlier detection.
    
    Args:
        regression_stats (dict): Regression statistics
    
    Returns:
        dict: Diagnostic results
    """
    print("\nPerforming regression diagnostics...")
    print("-" * 35)
    
    residuals = regression_stats['residuals']
    X = regression_stats['X']
    Y = regression_stats['Y']
    Y_pred = regression_stats['Y_pred']
    
    diagnostics = {}
    
    try:
        # Durbin-Watson test for autocorrelation
        dw_statistic = durbin_watson(residuals)
        diagnostics['durbin_watson'] = dw_statistic
        
        if not HAS_STATSMODELS:
            print("  Note: Using simplified Durbin-Watson implementation (statsmodels not available)")
        
        # Interpret Durbin-Watson statistic
        if dw_statistic < 1.5:
            dw_interpretation = "Positive autocorrelation detected"
        elif dw_statistic > 2.5:
            dw_interpretation = "Negative autocorrelation detected"
        else:
            dw_interpretation = "No significant autocorrelation"
        
        diagnostics['dw_interpretation'] = dw_interpretation
        
        # Outlier detection using standardized residuals
        std_residuals = residuals / np.std(residuals)
        outliers = np.abs(std_residuals) > 2.0  # Points with |standardized residual| > 2
        outlier_indices = np.where(outliers)[0]
        
        diagnostics['outlier_count'] = len(outlier_indices)
        diagnostics['outlier_years'] = X[outlier_indices] if len(outlier_indices) > 0 else []
        diagnostics['outlier_residuals'] = std_residuals[outlier_indices] if len(outlier_indices) > 0 else []
        
        # Check normality of residuals (Shapiro-Wilk test)
        if len(residuals) >= 3:
            shapiro_stat, shapiro_p = stats.shapiro(residuals)
            diagnostics['shapiro_stat'] = shapiro_stat
            diagnostics['shapiro_p'] = shapiro_p
            diagnostics['normality'] = "Normal" if shapiro_p > 0.05 else "Non-normal"
        
        # Homoscedasticity check (visual inspection of residuals vs fitted)
        # Calculate correlation between absolute residuals and fitted values
        abs_residuals = np.abs(residuals)
        homoscedasticity_corr = np.corrcoef(Y_pred, abs_residuals)[0, 1]
        diagnostics['homoscedasticity_corr'] = homoscedasticity_corr
        
        print(f"✓ Durbin-Watson statistic: {dw_statistic:.3f} ({dw_interpretation})")
        print(f"✓ Outliers detected: {len(outlier_indices)}")
        if len(outlier_indices) > 0:
            print(f"  Outlier years: {list(X[outlier_indices])}")
        
        return diagnostics
        
    except Exception as e:
        print(f"WARNING: Some diagnostic tests failed: {str(e)}")
        return diagnostics

def analyze_trend_significance(regression_stats):
    """
    Analyze trend significance and calculate practical implications.
    
    Args:
        regression_stats (dict): Regression statistics
    
    Returns:
        dict: Trend analysis results
    """
    print("\nAnalyzing trend significance...")
    print("-" * 30)
    
    slope = regression_stats['slope']
    p_value = regression_stats['p_value']
    X = regression_stats['X']
    
    # Determine trend direction
    if slope > 0:
        trend_direction = "increasing"
    elif slope < 0:
        trend_direction = "decreasing"
    else:
        trend_direction = "no change"
    
    # Determine statistical significance
    is_significant = p_value < 0.05
    significance_level = "statistically significant" if is_significant else "not statistically significant"
    
    # Calculate annual change in percentage points
    annual_change_pct_points = slope * 100  # Convert to percentage points
    
    # Calculate total change over the period
    year_span = X.max() - X.min()
    total_change_pct_points = annual_change_pct_points * year_span
    
    # Calculate predicted values at start and end of period
    start_year = X.min()
    end_year = X.max()
    start_proportion = regression_stats['slope'] * start_year + regression_stats['intercept']
    end_proportion = regression_stats['slope'] * end_year + regression_stats['intercept']
    
    trend_analysis = {
        'trend_direction': trend_direction,
        'is_significant': is_significant,
        'significance_level': significance_level,
        'annual_change_pct_points': annual_change_pct_points,
        'total_change_pct_points': total_change_pct_points,
        'year_span': year_span,
        'start_year': start_year,
        'end_year': end_year,
        'start_proportion': start_proportion,
        'end_proportion': end_proportion,
        'relative_change_percent': ((end_proportion - start_proportion) / start_proportion * 100) if start_proportion != 0 else 0
    }
    
    print(f"✓ Trend direction: {trend_direction}")
    print(f"✓ Statistical significance: {significance_level}")
    print(f"✓ Annual change: {annual_change_pct_points:+.3f} percentage points per year")
    print(f"✓ Total change ({start_year}-{end_year}): {total_change_pct_points:+.2f} percentage points")
    
    return trend_analysis

def save_comprehensive_results(regression_stats, diagnostics, trend_analysis, valid_data, output_dir):
    """
    Save detailed statistical results to a text file.
    
    Args:
        regression_stats (dict): Regression statistics
        diagnostics (dict): Diagnostic results
        trend_analysis (dict): Trend analysis results
        valid_data (pd.DataFrame): Valid data used in analysis
        output_dir (Path): Output directory
    """
    output_file = output_dir / "step9_regression_results.txt"
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("NEW BRUNSWICK GOVERNMENT REAPPOINTMENT TRENDS\n")
            f.write("Linear Regression Analysis Results\n")
            f.write("=" * 70 + "\n\n")
            
            # Data Summary
            f.write("DATA SUMMARY\n")
            f.write("-" * 20 + "\n")
            f.write(f"Analysis period: {trend_analysis['start_year']:.0f} - {trend_analysis['end_year']:.0f}\n")
            f.write(f"Number of data points: {regression_stats['n']}\n")
            f.write(f"Years analyzed: {list(regression_stats['X'])}\n")
            f.write(f"Proportions: {[f'{p:.4f}' for p in regression_stats['Y']]}\n\n")
            
            # Raw data table
            f.write("Year-by-Year Data:\n")
            f.write("Year   Proportion   Predicted   Residual\n")
            f.write("-" * 40 + "\n")
            for i in range(len(regression_stats['X'])):
                year = regression_stats['X'][i]
                actual = regression_stats['Y'][i]
                predicted = regression_stats['Y_pred'][i]
                residual = regression_stats['residuals'][i]
                f.write(f"{year:.0f}    {actual:.4f}      {predicted:.4f}     {residual:+.4f}\n")
            f.write("\n")
            
            # Regression Equation
            f.write("REGRESSION EQUATION\n")
            f.write("-" * 25 + "\n")
            f.write(f"Reappointment Proportion = {regression_stats['intercept']:.6f} + {regression_stats['slope']:.6f} × Year\n\n")
            
            # Statistical Results
            f.write("STATISTICAL RESULTS\n")
            f.write("-" * 25 + "\n")
            f.write(f"Slope (β₁): {regression_stats['slope']:.6f}\n")
            f.write(f"Intercept (β₀): {regression_stats['intercept']:.6f}\n")
            f.write(f"Correlation coefficient (r): {regression_stats['r_value']:.4f}\n")
            f.write(f"R-squared (R²): {regression_stats['r_squared']:.4f}\n")
            f.write(f"Standard error of slope: {regression_stats['std_err']:.6f}\n")
            f.write(f"Standard error of estimate: {regression_stats['std_error_estimate']:.6f}\n")
            f.write(f"F-statistic: {regression_stats['f_statistic']:.3f}\n")
            f.write(f"F p-value: {regression_stats['f_p_value']:.6f}\n")
            f.write(f"Slope p-value: {regression_stats['p_value']:.6f}\n\n")
            
            # Confidence Intervals
            f.write("95% CONFIDENCE INTERVALS\n")
            f.write("-" * 30 + "\n")
            f.write(f"Slope: [{regression_stats['slope_ci_lower']:.6f}, {regression_stats['slope_ci_upper']:.6f}]\n")
            f.write(f"Intercept: [{regression_stats['intercept_ci_lower']:.6f}, {regression_stats['intercept_ci_upper']:.6f}]\n\n")
            
            # Trend Analysis
            f.write("TREND ANALYSIS\n")
            f.write("-" * 20 + "\n")
            f.write(f"Trend direction: {trend_analysis['trend_direction'].upper()}\n")
            f.write(f"Statistical significance: {trend_analysis['significance_level'].upper()}\n")
            f.write(f"Annual change: {trend_analysis['annual_change_pct_points']:+.3f} percentage points per year\n")
            f.write(f"Total change over {trend_analysis['year_span']:.0f} years: {trend_analysis['total_change_pct_points']:+.2f} percentage points\n")
            f.write(f"Relative change: {trend_analysis['relative_change_percent']:+.1f}%\n")
            f.write(f"Starting proportion ({trend_analysis['start_year']:.0f}): {trend_analysis['start_proportion']:.4f} ({trend_analysis['start_proportion']*100:.2f}%)\n")
            f.write(f"Ending proportion ({trend_analysis['end_year']:.0f}): {trend_analysis['end_proportion']:.4f} ({trend_analysis['end_proportion']*100:.2f}%)\n\n")
            
            # Regression Diagnostics
            f.write("REGRESSION DIAGNOSTICS\n")
            f.write("-" * 30 + "\n")
            if 'durbin_watson' in diagnostics:
                f.write(f"Durbin-Watson statistic: {diagnostics['durbin_watson']:.3f}\n")
                f.write(f"Autocorrelation: {diagnostics['dw_interpretation']}\n")
            if 'outlier_count' in diagnostics:
                f.write(f"Outliers (|std residual| > 2): {diagnostics['outlier_count']}\n")
                if diagnostics['outlier_count'] > 0:
                    f.write(f"Outlier years: {list(diagnostics['outlier_years'])}\n")
            if 'normality' in diagnostics:
                f.write(f"Residual normality: {diagnostics['normality']} (Shapiro-Wilk p = {diagnostics['shapiro_p']:.4f})\n")
            f.write("\n")
            
            # Conclusions
            f.write("CONCLUSIONS\n")
            f.write("-" * 15 + "\n")
            f.write(f"1. The government-wide reappointment proportion shows a {trend_analysis['trend_direction']} trend.\n")
            f.write(f"2. This trend is {trend_analysis['significance_level']} (p = {regression_stats['p_value']:.6f}).\n")
            f.write(f"3. The model explains {regression_stats['r_squared']*100:.1f}% of the variance in reappointment proportions.\n")
            
            if trend_analysis['is_significant']:
                f.write(f"4. On average, the reappointment proportion {trend_analysis['trend_direction']} by {abs(trend_analysis['annual_change_pct_points']):.3f} percentage points per year.\n")
                f.write(f"5. Over the {trend_analysis['year_span']:.0f}-year period, the total change was {trend_analysis['total_change_pct_points']:+.2f} percentage points.\n")
            else:
                f.write(f"4. The observed trend is not statistically significant and may be due to random variation.\n")
                f.write(f"5. No strong evidence of a systematic change in reappointment practices over time.\n")
        
        print(f"\n✓ Saved comprehensive results to: {output_file}")
        
    except Exception as e:
        print(f"ERROR: Failed to save results file: {str(e)}")

def print_final_conclusion(trend_analysis, regression_stats):
    """
    Print the final answer about trend direction and significance.
    
    Args:
        trend_analysis (dict): Trend analysis results
        regression_stats (dict): Regression statistics
    """
    print("\n" + "=" * 80)
    print("FINAL CONCLUSION")
    print("=" * 80)
    
    trend = trend_analysis['trend_direction'].upper()
    significance = "STATISTICALLY SIGNIFICANT" if trend_analysis['is_significant'] else "NOT STATISTICALLY SIGNIFICANT"
    p_value = regression_stats['p_value']
    annual_change = abs(trend_analysis['annual_change_pct_points'])
    
    print(f"\nThe government-wide reappointment proportion trend is {trend} over the 12-year period")
    print(f"(2013-2024) and is {significance} (p = {p_value:.6f}).")
    
    if trend_analysis['is_significant']:
        print(f"\nThe reappointment proportion {trend_analysis['trend_direction']} by an average of")
        print(f"{annual_change:.3f} percentage points per year, representing a total change of")
        print(f"{trend_analysis['total_change_pct_points']:+.2f} percentage points over the entire period.")
        print(f"\nThis represents a {abs(trend_analysis['relative_change_percent']):.1f}% relative change from the starting level.")
    else:
        print(f"\nWhile the data shows a numerical {trend_analysis['trend_direction']} trend, it is not")
        print(f"statistically significant and may be due to random variation rather than")
        print(f"a systematic change in government reappointment practices.")
    
    print("\n" + "=" * 80)

def main():
    """Main execution function."""
    print("NEW BRUNSWICK GOVERNMENT - REAPPOINTMENT TRENDS REGRESSION ANALYSIS")
    print("=" * 75)
    
    # Define output directory
    output_dir = Path("scripts/claudesonnet4/version1/execution8/analysis_data")
    
    try:
        # Load annual proportions
        df = load_annual_proportions()
        
        # Prepare regression data
        X, Y, valid_data = prepare_regression_data(df)
        
        # Fit linear regression model
        regression_stats = fit_linear_regression(X, Y)
        
        # Perform regression diagnostics
        diagnostics = perform_regression_diagnostics(regression_stats)
        
        # Analyze trend significance
        trend_analysis = analyze_trend_significance(regression_stats)
        
        # Save comprehensive results
        save_comprehensive_results(regression_stats, diagnostics, trend_analysis, valid_data, output_dir)
        
        # Print final conclusion
        print_final_conclusion(trend_analysis, regression_stats)
        
        print(f"\n✓ Regression analysis completed successfully!")
        
    except KeyboardInterrupt:
        print("\n\nProcess interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nFATAL ERROR: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()