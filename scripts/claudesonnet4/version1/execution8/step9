#!/usr/bin/env python3
"""
New Brunswick Government Reappointment Trend Analysis
====================================================

This script performs comprehensive regression analysis on government-wide
reappointment proportions to determine statistical significance of trends
over the 12-year period (2013-2024).

Author: Claude Sonnet 4
Created: 2025-06-30
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
from scipy.stats import linregress
from scipy import stats
import warnings

def load_annual_proportions():
    """
    Load the annual government-wide proportions from step 8.
    
    Returns:
        pd.DataFrame: Annual proportions dataset
    """
    print("Loading annual government-wide proportions...")
    print("-" * 45)
    
    # Define file path
    input_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step8_annual_proportions.csv")
    
    if not input_file.exists():
        print(f"ERROR: Input file not found: {input_file}")
        sys.exit(1)
    
    try:
        df = pd.read_csv(input_file, encoding='utf-8')
        print(f"✓ Loaded dataset: {len(df)} years")
        
        # Validate required columns
        required_cols = ['year', 'reappointment_proportion']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            print(f"ERROR: Missing required columns: {missing_cols}")
            sys.exit(1)
        
        # Report basic information
        valid_data = df.dropna(subset=['reappointment_proportion'])
        print(f"Years with valid data: {len(valid_data)}")
        print(f"Year range: {df['year'].min()} to {df['year'].max()}")
        
        if len(valid_data) < 3:
            print("ERROR: Insufficient data for regression analysis (need at least 3 points)")
            sys.exit(1)
        
        return df
        
    except Exception as e:
        print(f"ERROR: Failed to load dataset: {str(e)}")
        sys.exit(1)

def prepare_regression_data(df):
    """
    Prepare data for regression analysis.
    
    Args:
        df (pd.DataFrame): Annual proportions dataset
        
    Returns:
        tuple: (X, Y, years, proportions) - cleaned arrays for analysis
    """
    print("\nPreparing data for regression analysis...")
    print("-" * 40)
    
    # Remove rows with missing reappointment proportions
    clean_df = df.dropna(subset=['reappointment_proportion']).copy()
    
    if len(clean_df) == 0:
        print("ERROR: No valid data points for regression")
        sys.exit(1)
    
    # Extract X (years) and Y (proportions)
    years = clean_df['year'].values
    proportions = clean_df['reappointment_proportion'].values
    
    # Center years for better numerical stability (optional but good practice)
    X = years - years.mean()
    Y = proportions
    
    print(f"Data points for regression: {len(X)}")
    print(f"Year range: {years.min()} to {years.max()}")
    print(f"Proportion range: {Y.min():.4f} to {Y.max():.4f}")
    
    return X, Y, years, proportions

def perform_regression_analysis(X, Y):
    """
    Perform comprehensive linear regression analysis.
    
    Args:
        X (np.array): Independent variable (centered years)
        Y (np.array): Dependent variable (proportions)
        
    Returns:
        dict: Comprehensive regression results
    """
    print("\nPerforming linear regression analysis...")
    print("-" * 40)
    
    try:
        # Perform linear regression
        slope, intercept, r_value, p_value, std_err = linregress(X, Y)
        
        # Calculate additional statistics
        n = len(X)
        r_squared = r_value ** 2
        
        # Calculate residuals
        Y_pred = slope * X + intercept
        residuals = Y - Y_pred
        
        # Calculate standard error of the estimate
        mse = np.sum(residuals**2) / (n - 2)
        se_estimate = np.sqrt(mse)
        
        # Calculate confidence intervals for slope (95%)
        t_critical = stats.t.ppf(0.975, n - 2)  # 95% CI
        slope_ci_lower = slope - t_critical * std_err
        slope_ci_upper = slope + t_critical * std_err
        
        # Store results
        results = {
            'n': n,
            'slope': slope,
            'intercept': intercept,
            'r_value': r_value,
            'r_squared': r_squared,
            'p_value': p_value,
            'std_err': std_err,
            'slope_ci_lower': slope_ci_lower,
            'slope_ci_upper': slope_ci_upper,
            't_critical': t_critical,
            'se_estimate': se_estimate,
            'residuals': residuals,
            'Y_pred': Y_pred
        }
        
        print(f"✓ Regression analysis completed")
        print(f"  Slope: {slope:.6f}")
        print(f"  R-squared: {r_squared:.4f}")
        print(f"  P-value: {p_value:.6f}")
        
        return results
        
    except Exception as e:
        print(f"ERROR: Regression analysis failed: {str(e)}")
        sys.exit(1)

def perform_diagnostics(X, Y, results):
    """
    Perform regression diagnostics including Durbin-Watson test and outlier detection.
    
    Args:
        X (np.array): Independent variable
        Y (np.array): Dependent variable  
        results (dict): Regression results
        
    Returns:
        dict: Diagnostic results
    """
    print("\nPerforming regression diagnostics...")
    print("-" * 35)
    
    residuals = results['residuals']
    n = len(residuals)
    
    # Durbin-Watson test for autocorrelation
    dw_statistic = np.sum(np.diff(residuals)**2) / np.sum(residuals**2)
    
    # Outlier detection using standardized residuals
    standardized_residuals = residuals / results['se_estimate']
    outlier_threshold = 2.0  # Common threshold
    outliers = np.abs(standardized_residuals) > outlier_threshold
    n_outliers = np.sum(outliers)
    
    # Normality test (Shapiro-Wilk if n <= 50)
    if n <= 50:
        try:
            shapiro_stat, shapiro_p = stats.shapiro(residuals)
        except Exception:
            shapiro_stat, shapiro_p = np.nan, np.nan
    else:
        shapiro_stat, shapiro_p = np.nan, np.nan
    
    diagnostics = {
        'durbin_watson': dw_statistic,
        'n_outliers': n_outliers,
        'outlier_indices': np.where(outliers)[0] if n_outliers > 0 else [],
        'shapiro_stat': shapiro_stat,
        'shapiro_p': shapiro_p,
        'standardized_residuals': standardized_residuals
    }
    
    print(f"✓ Diagnostics completed")
    print(f"  Durbin-Watson statistic: {dw_statistic:.3f}")
    print(f"  Number of outliers: {n_outliers}")
    
    return diagnostics

def calculate_trend_metrics(slope, years, results):
    """
    Calculate trend metrics including annual change and total change.
    
    Args:
        slope (float): Regression slope (per centered year)
        years (np.array): Original years
        results (dict): Regression results
        
    Returns:
        dict: Trend metrics
    """
    print("\nCalculating trend metrics...")
    print("-" * 30)
    
    # Annual change in percentage points
    annual_change_pp = slope * 100  # Convert to percentage points
    
    # Total change over the period
    period_years = years.max() - years.min()
    total_change_pp = annual_change_pp * period_years
    
    # Determine trend direction
    if slope > 0:
        trend_direction = "increasing"
    elif slope < 0:
        trend_direction = "decreasing"
    else:
        trend_direction = "no change"
    
    # Statistical significance
    is_significant = results['p_value'] < 0.05
    
    metrics = {
        'annual_change_pp': annual_change_pp,
        'total_change_pp': total_change_pp,
        'period_years': period_years,
        'trend_direction': trend_direction,
        'is_significant': is_significant
    }
    
    print(f"✓ Trend metrics calculated")
    print(f"  Annual change: {annual_change_pp:+.3f} percentage points per year")
    print(f"  Total change: {total_change_pp:+.3f} percentage points over {period_years} years")
    print(f"  Trend direction: {trend_direction}")
    print(f"  Statistically significant: {is_significant}")
    
    return metrics

def save_detailed_results(df, X, Y, years, proportions, results, diagnostics, metrics, output_file):
    """
    Save comprehensive statistical results to a text file.
    
    Args:
        df (pd.DataFrame): Original dataset
        X, Y (np.array): Regression variables
        years, proportions (np.array): Original data
        results (dict): Regression results
        diagnostics (dict): Diagnostic results
        metrics (dict): Trend metrics
        output_file (Path): Output file path
    """
    print(f"\nSaving detailed results to: {output_file}")
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("NEW BRUNSWICK GOVERNMENT REAPPOINTMENT TREND ANALYSIS\n")
            f.write("=" * 60 + "\n\n")
            
            # Data Summary
            f.write("DATA SUMMARY\n")
            f.write("-" * 20 + "\n")
            f.write(f"Total years in dataset: {len(df)}\n")
            f.write(f"Years with valid data: {results['n']}\n")
            f.write(f"Year range: {years.min()} to {years.max()}\n")
            f.write(f"Period length: {metrics['period_years']} years\n")
            f.write(f"Proportion range: {proportions.min():.4f} to {proportions.max():.4f}\n")
            f.write(f"Mean proportion: {proportions.mean():.4f}\n")
            f.write(f"Standard deviation: {proportions.std():.4f}\n\n")
            
            # Year-by-year data
            f.write("YEAR-BY-YEAR DATA\n")
            f.write("-" * 20 + "\n")
            f.write("Year  Proportion  Percentage\n")
            f.write("-" * 30 + "\n")
            for year, prop in zip(years, proportions):
                f.write(f"{int(year)}  {prop:.6f}   {prop*100:6.2f}%\n")
            f.write("\n")
            
            # Regression Results
            f.write("REGRESSION ANALYSIS RESULTS\n")
            f.write("-" * 30 + "\n")
            f.write(f"Regression equation: Y = {results['slope']:.6f} * X + {results['intercept']:.6f}\n")
            f.write(f"(where X = year - {years.mean():.1f})\n\n")
            
            f.write("Statistical Measures:\n")
            f.write(f"  Slope (β₁): {results['slope']:.8f}\n")
            f.write(f"  Intercept (β₀): {results['intercept']:.6f}\n")
            f.write(f"  Correlation coefficient (r): {results['r_value']:.6f}\n")
            f.write(f"  R-squared (R²): {results['r_squared']:.6f}\n")
            f.write(f"  P-value: {results['p_value']:.8f}\n")
            f.write(f"  Standard error of slope: {results['std_err']:.8f}\n")
            f.write(f"  Standard error of estimate: {results['se_estimate']:.6f}\n\n")
            
            f.write("95% Confidence Interval for Slope:\n")
            f.write(f"  Lower bound: {results['slope_ci_lower']:.8f}\n")
            f.write(f"  Upper bound: {results['slope_ci_upper']:.8f}\n\n")
            
            # Trend Analysis
            f.write("TREND ANALYSIS\n")
            f.write("-" * 20 + "\n")
            f.write(f"Trend direction: {metrics['trend_direction'].upper()}\n")
            f.write(f"Annual change: {metrics['annual_change_pp']:+.4f} percentage points per year\n")
            f.write(f"Total change over {metrics['period_years']} years: {metrics['total_change_pp']:+.4f} percentage points\n")
            f.write(f"Statistical significance (p < 0.05): {'YES' if metrics['is_significant'] else 'NO'}\n\n")
            
            # Diagnostics
            f.write("REGRESSION DIAGNOSTICS\n")
            f.write("-" * 25 + "\n")
            f.write(f"Durbin-Watson statistic: {diagnostics['durbin_watson']:.4f}\n")
            f.write("  (Values near 2.0 indicate no autocorrelation)\n")
            f.write(f"Number of outliers (|std residual| > 2): {diagnostics['n_outliers']}\n")
            if diagnostics['n_outliers'] > 0:
                f.write(f"  Outlier years: {[int(years[i]) for i in diagnostics['outlier_indices']]}\n")
            
            if not np.isnan(diagnostics['shapiro_p']):
                f.write(f"Shapiro-Wilk normality test p-value: {diagnostics['shapiro_p']:.4f}\n")
                f.write("  (p > 0.05 suggests residuals are normally distributed)\n")
            f.write("\n")
            
            # Statistical Interpretation
            f.write("STATISTICAL INTERPRETATION\n")
            f.write("-" * 30 + "\n")
            
            if metrics['is_significant']:
                f.write(f"The analysis shows a statistically significant {metrics['trend_direction']} trend\n")
                f.write(f"in government-wide reappointment proportions (p = {results['p_value']:.6f} < 0.05).\n\n")
                
                f.write(f"The reappointment proportion is {metrics['trend_direction']} at a rate of\n")
                f.write(f"{abs(metrics['annual_change_pp']):.4f} percentage points per year.\n\n")
                
                f.write(f"Over the {metrics['period_years']}-year period, the total change is\n")
                f.write(f"{metrics['total_change_pp']:+.4f} percentage points.\n\n")
            else:
                f.write(f"The analysis shows NO statistically significant trend in government-wide\n")
                f.write(f"reappointment proportions (p = {results['p_value']:.6f} ≥ 0.05).\n\n")
                
                f.write(f"While there appears to be a {metrics['trend_direction']} pattern,\n")
                f.write(f"this could reasonably be due to random variation.\n\n")
            
            f.write(f"The regression model explains {results['r_squared']*100:.1f}% of the variance\n")
            f.write(f"in reappointment proportions over time.\n\n")
            
            # Conclusions
            f.write("CONCLUSIONS\n")
            f.write("-" * 15 + "\n")
            
            if metrics['is_significant']:
                significance_text = "IS statistically significant"
                confidence_text = "can be confident"
            else:
                significance_text = "is NOT statistically significant"
                confidence_text = "cannot confidently conclude"
            
            f.write(f"1. The government-wide reappointment proportion trend {significance_text}.\n\n")
            
            f.write(f"2. The trend direction is {metrics['trend_direction']}, with an annual change\n")
            f.write(f"   of {metrics['annual_change_pp']:+.4f} percentage points per year.\n\n")
            
            f.write(f"3. We {confidence_text} that there is a systematic\n")
            f.write(f"   {metrics['trend_direction']} trend in reappointment proportions over time.\n\n")
            
            f.write(f"4. The analysis is based on {results['n']} years of data from {years.min()} to {years.max()}.\n")
        
        print("✓ Detailed results saved successfully")
        
    except Exception as e:
        print(f"ERROR: Failed to save results: {str(e)}")

def print_final_answer(metrics, results):
    """
    Print the final answer about trend significance.
    
    Args:
        metrics (dict): Trend metrics
        results (dict): Regression results
    """
    print("\n" + "=" * 70)
    print("FINAL ANSWER")
    print("=" * 70)
    
    if metrics['is_significant']:
        significance_answer = "YES, it is statistically significant"
        trend_strength = "strong evidence of a"
    else:
        significance_answer = "NO, it is not statistically significant"
        trend_strength = "insufficient evidence for a"
    
    print(f"\nIs the government-wide reappointment proportion trend increasing")
    print(f"or declining over the 12-year period, and is it statistically significant?")
    print(f"\nANSWER:")
    print(f"The trend is {metrics['trend_direction'].upper()} by {abs(metrics['annual_change_pp']):.4f}")
    print(f"percentage points per year (p = {results['p_value']:.6f}).")
    print(f"\n{significance_answer} (p < 0.05).")
    print(f"\nThere is {trend_strength} systematic {metrics['trend_direction']} trend")
    print(f"in New Brunswick government reappointment proportions from 2013-2024.")
    
    print("=" * 70)

def main():
    """Main execution function."""
    print("NEW BRUNSWICK GOVERNMENT - REAPPOINTMENT TREND ANALYSIS")
    print("=" * 60)
    
    # Define output file path
    output_file = Path("scripts/claudesonnet4/version1/execution8/analysis_data/step9_regression_results.txt")
    
    try:
        # Load annual proportions
        df = load_annual_proportions()
        
        # Prepare regression data
        X, Y, years, proportions = prepare_regression_data(df)
        
        # Perform regression analysis
        results = perform_regression_analysis(X, Y)
        
        # Perform diagnostics
        diagnostics = perform_diagnostics(X, Y, results)
        
        # Calculate trend metrics
        metrics = calculate_trend_metrics(results['slope'], years, results)
        
        # Save detailed results
        save_detailed_results(df, X, Y, years, proportions, results, diagnostics, metrics, output_file)
        
        # Print final answer
        print_final_answer(metrics, results)
        
        print(f"\n✓ Comprehensive regression analysis completed!")
        print(f"Detailed results saved to: {output_file}")
        
    except KeyboardInterrupt:
        print("\n\nProcess interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nFATAL ERROR: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()