#!/usr/bin/env python3
"""
New Brunswick Government Appointments Reappointments Marker
Identifies and marks reappointments based on name, position, and organization combinations.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import re

def normalize_name(name):
    """
    Normalize a name for comparison by removing extra spaces, standardizing case,
    and handling common variations.
    
    Args:
        name: String name to normalize
    
    Returns:
        str: Normalized name
    """
    if pd.isna(name) or name == '':
        return ''
    
    # Convert to string and strip whitespace
    name = str(name).strip()
    
    # Remove extra spaces and normalize case
    name = re.sub(r'\s+', ' ', name).title()
    
    # Handle common name variations
    name = re.sub(r'\bDr\.?\s+', 'Dr. ', name)
    name = re.sub(r'\bMr\.?\s+', 'Mr. ', name)
    name = re.sub(r'\bMs\.?\s+', 'Ms. ', name)
    name = re.sub(r'\bMrs\.?\s+', 'Mrs. ', name)
    
    return name

def normalize_text(text):
    """
    Normalize text fields for comparison.
    
    Args:
        text: String text to normalize
    
    Returns:
        str: Normalized text
    """
    if pd.isna(text) or text == '':
        return ''
    
    # Convert to string, strip whitespace, and normalize case
    text = str(text).strip()
    text = re.sub(r'\s+', ' ', text)
    
    return text

def main():
    """Main function to identify and mark reappointments."""
    
    # Define paths
    script_dir = Path(__file__).parent
    analysis_data_dir = script_dir / "analysis_data"
    input_file = analysis_data_dir / "step2_key_columns_data.csv"
    output_file = analysis_data_dir / "step3_repeats_marked.csv"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"✗ Error: Input file not found - {input_file}")
        print("Please ensure step2_key_columns_data.csv exists in the analysis_data directory")
        sys.exit(1)
    
    try:
        # Load the dataset
        print(f"Loading dataset from: {input_file}")
        df = pd.read_csv(input_file)
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows, {df.shape[1]} columns")
        
        # Validate required columns
        required_columns = ['name', 'position', 'org', 'year']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"✗ Error: Missing required columns: {missing_columns}")
            sys.exit(1)
        
        # Check if reappointed column exists, if not create it
        if 'reappointed' not in df.columns:
            print("⚠ Warning: 'reappointed' column not found. Creating new column initialized to False.")
            df['reappointed'] = False
        
        # Make a copy for processing
        df_processed = df.copy()
        
        # Normalize text fields for comparison
        print("\nNormalizing text fields...")
        df_processed['name_normalized'] = df_processed['name'].apply(normalize_name)
        df_processed['position_normalized'] = df_processed['position'].apply(normalize_text)
        df_processed['org_normalized'] = df_processed['org'].apply(normalize_text)
        
        # Validate data types
        print("Validating data types...")
        if df_processed['year'].dtype not in ['int64', 'float64']:
            try:
                df_processed['year'] = pd.to_numeric(df_processed['year'], errors='coerce')
            except Exception as e:
                print(f"⚠ Warning: Could not convert year to numeric: {e}")
        
        # Remove rows with missing essential information
        initial_count = len(df_processed)
        df_processed = df_processed.dropna(subset=['name_normalized', 'position_normalized', 'org_normalized', 'year'])
        
        if len(df_processed) < initial_count:
            print(f"⚠ Warning: Removed {initial_count - len(df_processed)} rows with missing essential data")
        
        # Count original reappointments
        original_reappointments = df_processed['reappointed'].sum() if 'reappointed' in df_processed.columns else 0
        print(f"\nOriginal reappointments in dataset: {original_reappointments:,}")
        
        # Group by normalized name, position, and organization
        print("\nGrouping by name, position, and organization...")
        grouped = df_processed.groupby(['name_normalized', 'position_normalized', 'org_normalized'])
        
        # Statistics tracking
        groups_with_multiple = 0
        new_reappointments = 0
        total_groups = len(grouped)
        
        print(f"Found {total_groups:,} unique combinations")
        
        # Process each group
        for group_key, group_df in grouped:
            group_size = len(group_df)
            
            if group_size > 1:
                groups_with_multiple += 1
                
                # Sort by year (chronologically) - use stable sort for consistent ordering
                group_df_sorted = group_df.sort_values('year', kind='stable')
                
                # Get indices (convert to list as per best practices)
                indices = group_df_sorted.index.tolist()
                
                # Mark all except the first as reappointments
                reappointment_indices = indices[1:]
                
                # Update reappointed column using .loc[]
                for idx in reappointment_indices:
                    # Only mark as reappointment if not already marked
                    if not df_processed.loc[idx, 'reappointed']:
                        df_processed.loc[idx, 'reappointed'] = True
                        new_reappointments += 1
        
        # Update the original dataframe
        df['reappointed'] = df_processed['reappointed']
        
        # Calculate final statistics
        final_reappointments = df['reappointed'].sum()
        
        print(f"\nProcessing complete:")
        print(f"  Groups with multiple occurrences: {groups_with_multiple:,}")
        print(f"  New reappointments identified: {new_reappointments:,}")
        print(f"  Total reappointments after processing: {final_reappointments:,}")
        
        # Save the updated dataset
        df.to_csv(output_file, index=False)
        print(f"✓ Saved updated dataset to: {output_file}")
        
        # Print detailed statistics
        print("\n" + "="*50)
        print("REAPPOINTMENTS ANALYSIS SUMMARY")
        print("="*50)
        print(f"Total appointments: {len(df):,}")
        print(f"Original reappointments: {original_reappointments:,}")
        print(f"Newly identified reappointments: {new_reappointments:,}")
        print(f"Final total reappointments: {final_reappointments:,}")
        
        reappointment_rate = (final_reappointments / len(df)) * 100
        print(f"Overall reappointment rate: {reappointment_rate:.1f}%")
        
        print("\nReappointment distribution:")
        reapp_counts = df['reappointed'].value_counts()
        for value, count in reapp_counts.items():
            pct = (count / len(df)) * 100
            print(f"  {value}: {count:,} ({pct:.1f}%)")
        
        # Show examples of identified reappointments
        if new_reappointments > 0:
            print("\nSample of newly identified reappointments:")
            newly_marked = df_processed[df_processed['reappointed'] == True].head(5)
            for idx, row in newly_marked.iterrows():
                print(f"  {row['name']} - {row['position']} at {row['org']} ({row['year']})")
        
        # Show year distribution of reappointments
        if 'year' in df.columns and final_reappointments > 0:
            print("\nReappointments by year:")
            year_reapp = df[df['reappointed'] == True]['year'].value_counts().sort_index()
            for year, count in year_reapp.items():
                print(f"  {year}: {count:,}")
        
        print("\n✓ Reappointments marking completed successfully!")
        
    except Exception as e:
        print(f"✗ Error processing dataset: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()