#!/usr/bin/env python3
"""
New Brunswick Government Reappointments Count Summary
Creates a pivot table of reappointment counts by organization and year.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def main():
    """Main function to create reappointment counts summary."""
    
    # Define paths
    script_dir = Path(__file__).parent
    analysis_data_dir = script_dir / "analysis_data"
    input_file = analysis_data_dir / "step3_repeats_marked.csv"
    output_file = analysis_data_dir / "step5_reappointment_counts.csv"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"✗ Error: Input file not found - {input_file}")
        print("Please ensure step3_repeats_marked.csv exists in the analysis_data directory")
        sys.exit(1)
    
    try:
        # Load the dataset
        print(f"Loading dataset from: {input_file}")
        df = pd.read_csv(input_file)
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows, {df.shape[1]} columns")
        
        # Validate required columns
        required_columns = ['org', 'year', 'reappointed']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"✗ Error: Missing required columns: {missing_columns}")
            sys.exit(1)
        
        # Data quality assessment
        print("\nData quality assessment:")
        initial_rows = len(df)
        
        # Check reappointed column data type and values
        print(f"  Reappointed column type: {df['reappointed'].dtype}")
        reapp_values = df['reappointed'].value_counts()
        print(f"  Reappointed value counts:")
        for value, count in reapp_values.items():
            print(f"    {value}: {count:,}")
        
        # Filter for reappointments only
        reappointments_df = df[df['reappointed'] == True].copy()
        print(f"\n✓ Filtered to reappointments only: {len(reappointments_df):,} records")
        
        if len(reappointments_df) == 0:
            print("⚠ Warning: No reappointments found in dataset")
            # Create empty pivot table with proper structure
            pivot_table = pd.DataFrame()
            pivot_table.to_csv(output_file)
            print(f"✓ Saved empty reappointment counts to: {output_file}")
            return
        
        # Clean data - remove rows with missing org or year
        missing_org = reappointments_df['org'].isna().sum()
        missing_year = reappointments_df['year'].isna().sum()
        
        print(f"  Missing organization values: {missing_org:,}")
        print(f"  Missing year values: {missing_year:,}")
        
        reappointments_clean = reappointments_df.dropna(subset=['org', 'year']).copy()
        removed_rows = len(reappointments_df) - len(reappointments_clean)
        
        if removed_rows > 0:
            print(f"  ⚠ Removed {removed_rows:,} rows with missing org/year data")
        
        # Validate and clean year data
        try:
            reappointments_clean['year'] = pd.to_numeric(reappointments_clean['year'], errors='coerce')
            
            # Remove rows where year conversion failed
            year_na_after_conversion = reappointments_clean['year'].isna().sum()
            if year_na_after_conversion > 0:
                print(f"  ⚠ Found {year_na_after_conversion:,} invalid year values")
                reappointments_clean = reappointments_clean.dropna(subset=['year'])
            
            # Convert year to integer to match appointment counts format
            reappointments_clean['year'] = reappointments_clean['year'].astype(int)
            
        except Exception as e:
            print(f"✗ Error processing year column: {e}")
            sys.exit(1)
        
        # Clean organization names
        reappointments_clean['org'] = reappointments_clean['org'].astype(str).str.strip()
        
        # Remove empty organization names
        empty_orgs = (reappointments_clean['org'] == '') | (reappointments_clean['org'] == 'nan')
        if empty_orgs.sum() > 0:
            print(f"  ⚠ Removed {empty_orgs.sum():,} rows with empty organization names")
            reappointments_clean = reappointments_clean[~empty_orgs]
        
        final_rows = len(reappointments_clean)
        print(f"  Final reappointments dataset: {final_rows:,} rows")
        
        if final_rows == 0:
            print("⚠ Warning: No valid reappointments remaining after cleaning")
            pivot_table = pd.DataFrame()
            pivot_table.to_csv(output_file)
            print(f"✓ Saved empty reappointment counts to: {output_file}")
            return
        
        # Group by organization and year, count reappointments
        print("\nGrouping and counting reappointments...")
        reapp_counts = reappointments_clean.groupby(['org', 'year']).size().reset_index(name='reappointments')
        
        print(f"✓ Generated {len(reapp_counts):,} organization-year combinations with reappointments")
        
        # Debugging output - show sample grouped data
        print("\nSample grouped data (first 10 records):")
        sample_data = reapp_counts.head(10)
        print(sample_data.to_string(index=False))
        
        if len(reapp_counts) > 10:
            print(f"... and {len(reapp_counts) - 10} more combinations")
        
        # Show year range and organization summary
        min_year = reapp_counts['year'].min()
        max_year = reapp_counts['year'].max()
        unique_orgs = reapp_counts['org'].nunique()
        
        print(f"\nReappointments data summary:")
        print(f"  Year range: {min_year} to {max_year}")
        print(f"  Organizations with reappointments: {unique_orgs:,}")
        print(f"  Total reappointment instances: {reapp_counts['reappointments'].sum():,}")
        
        # Create pivot table with organizations as rows and years as columns
        print("\nCreating pivot table...")
        pivot_table = reapp_counts.pivot(index='org', columns='year', values='reappointments')
        
        # Fill missing values with 0 (no reappointments for that org in that year)
        pivot_table = pivot_table.fillna(0).astype(int)
        
        print(f"✓ Created pivot table: {pivot_table.shape[0]} organizations × {pivot_table.shape[1]} years")
        
        # Validation - verify the pivot table contains actual counts
        total_in_pivot = pivot_table.sum().sum()
        total_from_groups = reapp_counts['reappointments'].sum()
        
        print(f"\nValidation:")
        print(f"  Total from grouped data: {total_from_groups:,}")
        print(f"  Total in pivot table: {total_in_pivot:,}")
        print(f"  ✓ Counts match: {total_in_pivot == total_from_groups}")
        
        # Check that pivot table contains non-zero values
        non_zero_cells = (pivot_table > 0).sum().sum()
        total_cells = pivot_table.shape[0] * pivot_table.shape[1]
        
        print(f"  Non-zero cells: {non_zero_cells:,} / {total_cells:,} ({(non_zero_cells/total_cells)*100:.1f}%)")
        print(f"  ✓ Contains actual reappointment data: {non_zero_cells > 0}")
        
        # Add total column and row
        pivot_table['Total'] = pivot_table.sum(axis=1)
        
        # Add total row
        total_row = pivot_table.sum(axis=0)
        total_row.name = 'TOTAL'
        pivot_table = pd.concat([pivot_table, total_row.to_frame().T])
        
        # Save the pivot table
        pivot_table.to_csv(output_file)
        print(f"✓ Saved reappointment counts to: {output_file}")
        
        # Print summary statistics
        print("\n" + "="*70)
        print("REAPPOINTMENT PATTERNS SUMMARY")
        print("="*70)
        
        # Exclude the TOTAL row for organization statistics
        org_data = pivot_table.drop('TOTAL', errors='ignore')
        
        print(f"Organizations with reappointments: {len(org_data):,}")
        print(f"Total reappointments: {org_data['Total'].sum():,}")
        
        # Top organizations by total reappointments
        top_reapp_orgs = org_data.nlargest(10, 'Total')
        print(f"\nTop 10 organizations by total reappointments:")
        for i, (org, row) in enumerate(top_reapp_orgs.iterrows(), 1):
            print(f"  {i:2d}. {org}: {row['Total']:,} reappointments")
        
        # Years with most reappointments
        years_cols = [col for col in org_data.columns if col != 'Total']
        year_totals = org_data[years_cols].sum(axis=0)
        top_years = year_totals.nlargest(5)
        
        print(f"\nTop 5 years by reappointments:")
        for i, (year, count) in enumerate(top_years.items(), 1):
            print(f"  {i}. {year}: {count:,} reappointments")
        
        # Organizations active in multiple years for reappointments
        active_years = (org_data[years_cols] > 0).sum(axis=1)
        multi_year_reapp_orgs = (active_years > 1).sum()
        
        print(f"\nOrganizations with reappointments in multiple years: {multi_year_reapp_orgs:,}")
        print(f"Average years with reappointments per organization: {active_years.mean():.1f}")
        
        # Show sample of the pivot table
        print(f"\nReappointment counts table (showing first 10 organizations):")
        display_cols = years_cols[:6] + ['Total'] if len(years_cols) > 6 else years_cols + ['Total']
        display_table = org_data.head(10)[display_cols]
        
        print(display_table.to_string())
        
        if len(org_data) > 10:
            print(f"\n... and {len(org_data) - 10} more organizations")
        
        print("\n✓ Reappointment counts analysis completed successfully!")
        
    except Exception as e:
        print(f"✗ Error processing dataset: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()