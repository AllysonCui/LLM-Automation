#!/usr/bin/env python3
"""
New Brunswick Government Reappointment Rates Calculator
Merges appointment counts and reappointment counts to calculate reappointment rates.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_pivot_table(file_path, data_type_name):
    """
    Load a pivot table CSV file and convert to long format.
    
    Args:
        file_path: Path to the CSV file
        data_type_name: Name for the value column (e.g., 'total_appointments', 'reappointments')
    
    Returns:
        DataFrame in long format with columns: org, year, value_column
    """
    try:
        print(f"  Attempting to load: {file_path}")
        
        # First try loading with index_col=0 (organizations as index)
        try:
            df = pd.read_csv(file_path, index_col=0)
            print(f"  Loaded with index_col=0: {df.shape}")
            print(f"  Index name: {df.index.name}")
            print(f"  Columns: {list(df.columns)}")
            
        except Exception:
            # If that fails, try loading without specifying index
            df = pd.read_csv(file_path)
            print(f"  Loaded without index_col: {df.shape}")
            print(f"  Columns: {list(df.columns)}")
            
            # Set first column as index if it looks like organization names
            if len(df.columns) > 1:
                first_col = df.columns[0]
                if any(keyword in first_col.lower() for keyword in ['org', 'organization']):
                    df = df.set_index(first_col)
                    print(f"  Set '{first_col}' as index")
        
        # Ensure index has a name for reset_index
        if df.index.name is None:
            df.index.name = 'org'
        
        # Remove total row and column if they exist
        if 'TOTAL' in df.index:
            df = df.drop('TOTAL')
            print("  Removed TOTAL row")
        if 'Total' in df.columns:
            df = df.drop('Total', axis=1)
            print("  Removed Total column")
        
        print(f"  Final pivot shape: {df.shape}")
        print(f"  Year columns: {list(df.columns)}")
        
        # Convert to long format
        df_reset = df.reset_index()
        print(f"  After reset_index: {list(df_reset.columns)}")
        
        # Get the organization column name (should be first after reset_index)
        org_col = df_reset.columns[0]
        
        df_long = df_reset.melt(
            id_vars=[org_col], 
            var_name='year', 
            value_name=data_type_name
        )
        
        # Rename organization column to 'org' for consistency
        df_long = df_long.rename(columns={org_col: 'org'})
        
        print(f"  After melt: {df_long.shape}")
        
        # Convert year to integer and handle any conversion issues
        df_long['year'] = pd.to_numeric(df_long['year'], errors='coerce')
        df_long = df_long.dropna(subset=['year'])
        df_long['year'] = df_long['year'].astype(int)
        
        # Ensure value column is numeric
        df_long[data_type_name] = pd.to_numeric(df_long[data_type_name], errors='coerce').fillna(0)
        
        print(f"  Final long format: {df_long.shape}")
        print(f"  Sample data:")
        print(df_long.head(3).to_string(index=False))
        
        return df_long
        
    except Exception as e:
        print(f"✗ Error loading {file_path}: {e}")
        import traceback
        traceback.print_exc()
        return None

def main():
    """Main function to calculate reappointment rates."""
    
    # Define paths
    script_dir = Path(__file__).parent
    analysis_data_dir = script_dir / "analysis_data"
    
    appointment_counts_file = analysis_data_dir / "step4_appointment_counts.csv"
    reappointment_counts_file = analysis_data_dir / "step5_reappointment_counts.csv"
    output_file = analysis_data_dir / "step6_reappointment_rates.csv"
    
    # Check if input files exist
    if not appointment_counts_file.exists():
        print(f"✗ Error: Appointment counts file not found - {appointment_counts_file}")
        sys.exit(1)
    
    if not reappointment_counts_file.exists():
        print(f"✗ Error: Reappointment counts file not found - {reappointment_counts_file}")
        sys.exit(1)
    
    try:
        # Load appointment counts
        print(f"Loading appointment counts from: {appointment_counts_file}")
        appointment_df = load_pivot_table(appointment_counts_file, 'total_appointments')
        
        if appointment_df is None:
            sys.exit(1)
        
        print(f"✓ Loaded appointment counts: {len(appointment_df):,} org-year combinations")
        
        # Load reappointment counts
        print(f"Loading reappointment counts from: {reappointment_counts_file}")
        reappointment_df = load_pivot_table(reappointment_counts_file, 'reappointments')
        
        if reappointment_df is None:
            sys.exit(1)
        
        print(f"✓ Loaded reappointment counts: {len(reappointment_df):,} org-year combinations")
        
        # Data validation
        print("\nData validation:")
        print(f"  Appointment counts - Organizations: {appointment_df['org'].nunique():,}, Years: {appointment_df['year'].nunique()}")
        print(f"  Reappointment counts - Organizations: {reappointment_df['org'].nunique():,}, Years: {reappointment_df['year'].nunique()}")
        
        # Check year ranges
        emp_year_range = f"{appointment_df['year'].min()}-{appointment_df['year'].max()}"
        reapp_year_range = f"{reappointment_df['year'].min()}-{reappointment_df['year'].max()}"
        print(f"  Appointment counts year range: {emp_year_range}")
        print(f"  Reappointment counts year range: {reapp_year_range}")
        
        # Merge the datasets
        print("\nMerging datasets...")
        merged_df = pd.merge(
            appointment_df, 
            reappointment_df, 
            on=['org', 'year'], 
            how='left'  # Keep all appointment count records
        )
        
        # Fill missing reappointments with 0 (organizations with no reappointments)
        merged_df['reappointments'] = merged_df['reappointments'].fillna(0).astype(int)
        
        print(f"✓ Merged datasets: {len(merged_df):,} org-year combinations")
        
        # Data quality checks
        print("\nData quality checks:")
        
        # Check for zero appointment counts
        zero_appointments = (merged_df['total_appointments'] == 0).sum()
        print(f"  Records with zero appointments: {zero_appointments:,}")
        
        # Check for negative values
        negative_appointments = (merged_df['total_appointments'] < 0).sum()
        negative_reapps = (merged_df['reappointments'] < 0).sum()
        print(f"  Records with negative appointments: {negative_appointments:,}")
        print(f"  Records with negative reappointments: {negative_reapps:,}")
        
        # Check for reappointments > total appointments (data integrity issue)
        invalid_ratios = (merged_df['reappointments'] > merged_df['total_appointments']).sum()
        print(f"  Records where reappointments > total appointments: {invalid_ratios:,}")
        
        if invalid_ratios > 0:
            print("  ⚠ Warning: Some organizations have more reappointments than total appointments")
            print("    This may indicate data quality issues or different counting methodologies")
        
        # Calculate reappointment rates
        print("\nCalculating reappointment rates...")
        
        # Handle division by zero: set rate to 0 when total_appointments is 0
        merged_df['reappointment_rate'] = np.where(
            merged_df['total_appointments'] == 0,
            0.0,
            merged_df['reappointments'] / merged_df['total_appointments']
        )
        
        # Handle cases where reappointments > appointments (cap at 1.0 or 100%)
        capped_rates = (merged_df['reappointment_rate'] > 1.0).sum()
        if capped_rates > 0:
            print(f"  ⚠ Capping {capped_rates:,} rates above 100% to 100%")
            merged_df['reappointment_rate'] = np.minimum(merged_df['reappointment_rate'], 1.0)
        
        # Round reappointment rate to 4 decimal places for cleaner output
        merged_df['reappointment_rate'] = merged_df['reappointment_rate'].round(4)
        
        print(f"✓ Calculated reappointment rates for {len(merged_df):,} combinations")
        
        # Create final dataset with specified columns
        final_df = merged_df[['org', 'year', 'total_appointments', 'reappointments', 'reappointment_rate']].copy()
        
        # Sort by organization and year for better readability
        final_df = final_df.sort_values(['org', 'year'])
        
        # Save the results
        final_df.to_csv(output_file, index=False)
        print(f"✓ Saved reappointment rates to: {output_file}")
        
        # Print summary statistics
        print("\n" + "="*70)
        print("REAPPOINTMENT RATES SUMMARY")
        print("="*70)
        
        total_combinations = len(final_df)
        combinations_with_reapps = (final_df['reappointments'] > 0).sum()
        
        print(f"Total org-year combinations: {total_combinations:,}")
        print(f"Combinations with reappointments: {combinations_with_reapps:,}")
        print(f"Combinations with no reappointments: {total_combinations - combinations_with_reapps:,}")
        
        # Overall statistics
        total_appointments = final_df['total_appointments'].sum()
        total_reappointments = final_df['reappointments'].sum()
        overall_rate = total_reappointments / total_appointments if total_appointments > 0 else 0
        
        print(f"\nOverall statistics:")
        print(f"  Total appointments across all years: {total_appointments:,}")
        print(f"  Total reappointments across all years: {total_reappointments:,}")
        print(f"  Overall reappointment rate: {overall_rate:.1%}")
        
        # Calculate average reappointment rates by organization
        org_avg_rates = final_df.groupby('org').agg({
            'total_appointments': 'sum',
            'reappointments': 'sum',
            'reappointment_rate': 'mean'  # Average of yearly rates
        }).reset_index()
        
        # Calculate weighted average rate (total reappointments / total appointments)
        org_avg_rates['weighted_avg_rate'] = np.where(
            org_avg_rates['total_appointments'] > 0,
            org_avg_rates['reappointments'] / org_avg_rates['total_appointments'],
            0
        )
        
        # Filter organizations with meaningful data (at least 5 total appointments)
        significant_orgs = org_avg_rates[org_avg_rates['total_appointments'] >= 5].copy()
        
        # Top organizations by average reappointment rate
        top_orgs_by_rate = significant_orgs.nlargest(10, 'weighted_avg_rate')
        
        print(f"\nTop 10 organizations by average reappointment rate (min. 5 appointments):")
        for i, (_, row) in enumerate(top_orgs_by_rate.iterrows(), 1):
            rate_pct = row['weighted_avg_rate'] * 100
            print(f"  {i:2d}. {row['org']}")
            print(f"      Rate: {rate_pct:.1f}% ({row['reappointments']:.0f}/{row['total_appointments']:.0f})")
        
        # Show distribution of reappointment rates
        print(f"\nReappointment rate distribution:")
        rate_bins = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 1.0]
        rate_labels = ['0-10%', '10-20%', '20-30%', '30-40%', '40-50%', '50%+']
        
        # Only consider combinations with appointments > 0
        non_zero_df = final_df[final_df['total_appointments'] > 0]
        rate_distribution = pd.cut(non_zero_df['reappointment_rate'], bins=rate_bins, labels=rate_labels, include_lowest=True)
        rate_counts = rate_distribution.value_counts()
        
        for label, count in rate_counts.items():
            pct = (count / len(non_zero_df)) * 100
            print(f"  {label}: {count:,} ({pct:.1f}%)")
        
        # Sample of high reappointment rate cases
        high_rate_threshold = 0.3  # 30%
        high_rate_cases = final_df[
            (final_df['reappointment_rate'] >= high_rate_threshold) & 
            (final_df['total_appointments'] >= 3)
        ].nlargest(5, 'reappointment_rate')
        
        if len(high_rate_cases) > 0:
            print(f"\nSample high reappointment rate cases (≥30%, min. 3 appointments):")
            for _, row in high_rate_cases.iterrows():
                rate_pct = row['reappointment_rate'] * 100
                print(f"  {row['org']} ({row['year']}): {rate_pct:.1f}% ({row['reappointments']}/{row['total_appointments']})")
        
        print("\n✓ Reappointment rates analysis completed successfully!")
        
    except Exception as e:
        print(f"✗ Error processing datasets: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()