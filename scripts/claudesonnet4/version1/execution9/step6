#!/usr/bin/env python3
"""
New Brunswick Government Reappointment Rate Calculator
Merges employee counts and reappointment counts to calculate reappointment rates.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_pivot_table(file_path, table_type):
    """
    Load a pivot table and convert it to long format.
    
    Args:
        file_path: Path to the CSV file
        table_type: String describing the type of table for error messages
    
    Returns:
        DataFrame: Long format DataFrame with org, year, and count columns
    """
    try:
        # Load the pivot table
        pivot_df = pd.read_csv(file_path, index_col=0)
        
        # Check if Total column exists and remove it
        if 'Total' in pivot_df.columns:
            pivot_df = pivot_df.drop('Total', axis=1)
        
        # Convert to long format
        long_df = pivot_df.reset_index().melt(
            id_vars=[pivot_df.index.name or 'org_cleaned'], 
            var_name='year', 
            value_name='count'
        )
        
        # Rename the organization column to 'org'
        long_df = long_df.rename(columns={long_df.columns[0]: 'org'})
        
        # Ensure year is integer
        long_df['year'] = pd.to_numeric(long_df['year'], errors='coerce').astype('Int64')
        
        # Ensure count is numeric and handle NaN values
        long_df['count'] = pd.to_numeric(long_df['count'], errors='coerce').fillna(0)
        
        print(f"✓ Loaded {table_type}: {len(long_df):,} org-year combinations")
        return long_df
        
    except Exception as e:
        print(f"✗ Error loading {table_type} from {file_path}: {str(e)}")
        raise

def validate_data_alignment(employee_df, reapp_df):
    """
    Validate that the two datasets can be properly aligned.
    
    Args:
        employee_df: Employee counts DataFrame
        reapp_df: Reappointment counts DataFrame
    
    Returns:
        dict: Validation results
    """
    validation = {
        'employee_orgs': set(employee_df['org'].unique()),
        'reapp_orgs': set(reapp_df['org'].unique()),
        'employee_years': set(employee_df['year'].unique()),
        'reapp_years': set(reapp_df['year'].unique()),
        'common_orgs': None,
        'common_years': None,
        'employee_records': len(employee_df),
        'reapp_records': len(reapp_df)
    }
    
    validation['common_orgs'] = validation['employee_orgs'].intersection(validation['reapp_orgs'])
    validation['common_years'] = validation['employee_years'].intersection(validation['reapp_years'])
    
    return validation

def main():
    """Main function to calculate reappointment rates."""
    
    # Define paths
    script_dir = Path(__file__).parent
    analysis_data_dir = script_dir / "analysis_data"
    employee_counts_file = analysis_data_dir / "step4_employee_counts.csv"
    reapp_counts_file = analysis_data_dir / "step5_reappointment_counts.csv"
    output_file = analysis_data_dir / "step6_reappointment_rates.csv"
    
    # Check if input files exist
    for file_path, file_desc in [(employee_counts_file, "employee counts"), 
                                 (reapp_counts_file, "reappointment counts")]:
        if not file_path.exists():
            print(f"✗ Error: {file_desc} file not found - {file_path}")
            sys.exit(1)
    
    try:
        # Load both datasets
        print("Loading datasets...")
        employee_df = load_pivot_table(employee_counts_file, "employee counts")
        reapp_df = load_pivot_table(reapp_counts_file, "reappointment counts")
        
        # Rename count columns for clarity
        employee_df = employee_df.rename(columns={'count': 'total_employees'})
        reapp_df = reapp_df.rename(columns={'count': 'reappointments'})
        
        # Validate data alignment
        print("\nValidating data alignment...")
        validation = validate_data_alignment(employee_df, reapp_df)
        
        print(f"  Employee data: {validation['employee_records']:,} records, {len(validation['employee_orgs'])} orgs, {len(validation['employee_years'])} years")
        print(f"  Reappointment data: {validation['reapp_records']:,} records, {len(validation['reapp_orgs'])} orgs, {len(validation['reapp_years'])} years")
        print(f"  Common organizations: {len(validation['common_orgs'])}")
        print(f"  Common years: {len(validation['common_years'])}")
        
        # Show organizations only in one dataset
        only_in_employee = validation['employee_orgs'] - validation['reapp_orgs']
        only_in_reapp = validation['reapp_orgs'] - validation['employee_orgs']
        
        if only_in_employee:
            print(f"  Organizations only in employee data: {len(only_in_employee)}")
            if len(only_in_employee) <= 5:
                for org in list(only_in_employee)[:5]:
                    print(f"    - {org}")
        
        if only_in_reapp:
            print(f"  Organizations only in reappointment data: {len(only_in_reapp)}")
            if len(only_in_reapp) <= 5:
                for org in list(only_in_reapp)[:5]:
                    print(f"    - {org}")
        
        # Merge the datasets
        print(f"\nMerging datasets...")
        merged_df = pd.merge(
            employee_df, 
            reapp_df, 
            on=['org', 'year'], 
            how='outer'  # Keep all combinations from both datasets
        )
        
        print(f"✓ Merged dataset: {len(merged_df):,} org-year combinations")
        
        # Handle missing data
        print(f"Handling missing data...")
        
        # Fill missing values with 0
        merged_df['total_employees'] = merged_df['total_employees'].fillna(0)
        merged_df['reappointments'] = merged_df['reappointments'].fillna(0)
        
        # Convert to integers
        merged_df['total_employees'] = merged_df['total_employees'].astype(int)
        merged_df['reappointments'] = merged_df['reappointments'].astype(int)
        
        # Calculate reappointment rates
        print(f"Calculating reappointment rates...")
        
        # Handle division by zero cases
        def calculate_rate(reapp, total):
            if total == 0:
                return np.nan  # Return NaN for division by zero
            return reapp / total
        
        merged_df['reappointment_rate'] = merged_df.apply(
            lambda row: calculate_rate(row['reappointments'], row['total_employees']), 
            axis=1
        )
        
        # Data validation and quality checks
        print(f"\nData quality checks...")
        
        # Check for invalid rates (should be between 0 and 1)
        invalid_rates = merged_df[merged_df['reappointment_rate'] > 1.0]
        if len(invalid_rates) > 0:
            print(f"⚠ Warning: {len(invalid_rates)} records with reappointment rate > 100%")
            print("Sample of problematic records:")
            print(invalid_rates[['org', 'year', 'total_employees', 'reappointments', 'reappointment_rate']].head())
        
        # Check for cases where reappointments > total employees
        problematic_cases = merged_df[merged_df['reappointments'] > merged_df['total_employees']]
        if len(problematic_cases) > 0:
            print(f"⚠ Warning: {len(problematic_cases)} cases where reappointments > total employees")
        
        # Statistics about the merged dataset
        total_combinations = len(merged_df)
        zero_employees = (merged_df['total_employees'] == 0).sum()
        zero_reapp = (merged_df['reappointments'] == 0).sum()
        valid_rates = merged_df['reappointment_rate'].notna().sum()
        
        print(f"  Total org-year combinations: {total_combinations:,}")
        print(f"  Combinations with zero employees: {zero_employees:,}")
        print(f"  Combinations with zero reappointments: {zero_reapp:,}")
        print(f"  Combinations with valid reappointment rates: {valid_rates:,}")
        
        # Sort the results
        merged_df = merged_df.sort_values(['org', 'year'])
        
        # Save the results
        merged_df.to_csv(output_file, index=False)
        print(f"✓ Saved reappointment rates to: {output_file}")
        
        # Print summary statistics
        print("\n" + "="*60)
        print("REAPPOINTMENT RATES SUMMARY")
        print("="*60)
        
        # Overall statistics
        print(f"Total org-year combinations: {len(merged_df):,}")
        print(f"Organizations: {merged_df['org'].nunique():,}")
        print(f"Years covered: {merged_df['year'].min()} - {merged_df['year'].max()}")
        
        # Rate statistics (excluding NaN values)
        valid_rates_data = merged_df['reappointment_rate'].dropna()
        if len(valid_rates_data) > 0:
            print(f"\nReappointment rate statistics:")
            print(f"  Records with valid rates: {len(valid_rates_data):,}")
            print(f"  Mean rate: {valid_rates_data.mean():.3f} ({valid_rates_data.mean()*100:.1f}%)")
            print(f"  Median rate: {valid_rates_data.median():.3f} ({valid_rates_data.median()*100:.1f}%)")
            print(f"  Standard deviation: {valid_rates_data.std():.3f}")
            print(f"  Min rate: {valid_rates_data.min():.3f} ({valid_rates_data.min()*100:.1f}%)")
            print(f"  Max rate: {valid_rates_data.max():.3f} ({valid_rates_data.max()*100:.1f}%)")
        
        # Organizations with highest average reappointment rates
        print(f"\nOrganizations with highest average reappointment rates:")
        
        # Calculate average rates per organization (excluding NaN values)
        org_avg_rates = merged_df.groupby('org').agg({
            'reappointment_rate': ['mean', 'count'],
            'total_employees': 'sum',
            'reappointments': 'sum'
        }).round(4)
        
        # Flatten column names
        org_avg_rates.columns = ['avg_rate', 'rate_count', 'total_employees', 'total_reappointments']
        
        # Filter organizations with at least 3 valid rate calculations and some employees
        qualified_orgs = org_avg_rates[
            (org_avg_rates['rate_count'] >= 3) & 
            (org_avg_rates['total_employees'] > 0) &
            (org_avg_rates['avg_rate'].notna())
        ].sort_values('avg_rate', ascending=False)
        
        print(f"Top 10 organizations by average reappointment rate (min 3 valid years):")
        for i, (org, row) in enumerate(qualified_orgs.head(10).iterrows(), 1):
            print(f"  {i:2d}. {org[:45]:<45} {row['avg_rate']:.3f} ({row['avg_rate']*100:.1f}%) [{row['rate_count']:.0f} years]")
        
        # Show organizations with highest total reappointments
        print(f"\nOrganizations with most total reappointments:")
        top_total_reapp = org_avg_rates[org_avg_rates['total_reappointments'] > 0].sort_values('total_reappointments', ascending=False)
        for i, (org, row) in enumerate(top_total_reapp.head(10).iterrows(), 1):
            avg_rate_pct = row['avg_rate'] * 100 if pd.notna(row['avg_rate']) else 0
            print(f"  {i:2d}. {org[:45]:<45} {row['total_reappointments']:3.0f} reapp ({avg_rate_pct:.1f}% avg rate)")
        
        # Sample of the final dataset
        print(f"\nSample of final dataset (first 10 rows):")
        sample_cols = ['org', 'year', 'total_employees', 'reappointments', 'reappointment_rate']
        sample_data = merged_df[sample_cols].head(10).copy()
        # Format reappointment rate as percentage for display
        sample_data['reappointment_rate'] = sample_data['reappointment_rate'].apply(
            lambda x: f"{x:.3f} ({x*100:.1f}%)" if pd.notna(x) else "N/A"
        )
        print(sample_data.to_string(index=False))
        
        print("\n✓ Reappointment rates calculation completed successfully!")
        
    except Exception as e:
        print(f"✗ Error processing datasets: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()