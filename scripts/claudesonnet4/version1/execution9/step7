#!/usr/bin/env python3
"""
New Brunswick Government Yearly Maximum Reappointment Rates
Identifies the organization with the highest reappointment rate for each year.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt

def handle_ties(group_df, tie_method='first_alphabetical'):
    """
    Handle ties when multiple organizations have the same maximum rate.
    
    Tie-breaking approach: Select the first organization alphabetically.
    This provides consistent, reproducible results.
    
    Args:
        group_df: DataFrame containing organizations with the maximum rate
        tie_method: Method for handling ties ('first_alphabetical')
    
    Returns:
        Single row DataFrame with the selected organization
    """
    if len(group_df) == 1:
        return group_df.iloc[0]
    
    if tie_method == 'first_alphabetical':
        # Sort alphabetically and take the first
        sorted_df = group_df.sort_values('org')
        return sorted_df.iloc[0]
    
    # Default fallback
    return group_df.iloc[0]

def main():
    """Main function to identify yearly maximum reappointment rates."""
    
    # Define paths
    script_dir = Path(__file__).parent
    analysis_data_dir = script_dir / "analysis_data"
    input_file = analysis_data_dir / "step6_reappointment_rates.csv"
    output_csv = analysis_data_dir / "step7_yearly_max_rates.csv"
    output_png = analysis_data_dir / "step7_yearly_max_rates.png"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"✗ Error: Input file not found - {input_file}")
        print("Please ensure step6_reappointment_rates.csv exists in the analysis_data directory")
        sys.exit(1)
    
    try:
        # Load the reappointment rates dataset
        print(f"Loading reappointment rates from: {input_file}")
        df = pd.read_csv(input_file)
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows, {df.shape[1]} columns")
        
        # Validate required columns
        required_columns = ['org', 'year', 'reappointment_rate', 'total_appointments']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"✗ Error: Missing required columns: {missing_columns}")
            sys.exit(1)
        
        # Data quality assessment
        print("\nData quality assessment:")
        print(f"  Total records: {len(df):,}")
        print(f"  Years covered: {df['year'].min()} to {df['year'].max()}")
        print(f"  Unique organizations: {df['org'].nunique():,}")
        
        # Filter out records with zero appointments to focus on meaningful rates
        # (avoids artificially high rates from very small sample sizes)
        min_appointments = 1
        df_filtered = df[df['total_appointments'] >= min_appointments].copy()
        
        removed_records = len(df) - len(df_filtered)
        if removed_records > 0:
            print(f"  Filtered out {removed_records:,} records with < {min_appointments} appointments")
        
        print(f"  Records for analysis: {len(df_filtered):,}")
        
        if len(df_filtered) == 0:
            print("✗ Error: No records remaining after filtering")
            sys.exit(1)
        
        # Group by year and find maximum reappointment rate
        print("\nIdentifying yearly maximum reappointment rates...")
        
        yearly_results = []
        tie_count = 0
        
        for year in sorted(df_filtered['year'].unique()):
            year_data = df_filtered[df_filtered['year'] == year]
            
            if len(year_data) == 0:
                print(f"  {year}: No data available")
                continue
            
            # Find maximum reappointment rate for this year
            max_rate = year_data['reappointment_rate'].max()
            
            # Get all organizations with the maximum rate (handles ties)
            max_orgs = year_data[year_data['reappointment_rate'] == max_rate]
            
            # Handle ties
            if len(max_orgs) > 1:
                tie_count += 1
                selected_org_data = handle_ties(max_orgs)
                print(f"  {year}: TIE - {len(max_orgs)} orgs with {max_rate:.1%} rate")
                print(f"         Selected: {selected_org_data['org']} (alphabetically first)")
            else:
                selected_org_data = max_orgs.iloc[0]
                print(f"  {year}: {selected_org_data['org']} - {max_rate:.1%}")
            
            # Store results
            yearly_results.append({
                'year': year,
                'top_org': selected_org_data['org'],
                'max_rate': max_rate,
                'total_appointments': selected_org_data['total_appointments'],
                'reappointments': selected_org_data['reappointments']
            })
        
        if not yearly_results:
            print("✗ Error: No yearly results generated")
            sys.exit(1)
        
        print(f"\n✓ Processed {len(yearly_results)} years")
        print(f"  Ties encountered: {tie_count}")
        
        # Create results DataFrame
        results_df = pd.DataFrame(yearly_results)
        
        # Save CSV with only the required columns
        output_df = results_df[['year', 'top_org', 'max_rate']].copy()
        output_df.to_csv(output_csv, index=False)
        print(f"✓ Saved yearly maximum rates to: {output_csv}")
        
        # Create visualization
        print("\nCreating visualization...")
        
        plt.figure(figsize=(12, 8))
        
        # Plot the time series
        plt.subplot(2, 1, 1)
        plt.plot(results_df['year'], results_df['max_rate'], 
                marker='o', linewidth=2, markersize=6, color='blue')
        plt.title('Maximum Reappointment Rate by Year', fontsize=14, fontweight='bold')
        plt.ylabel('Maximum Reappointment Rate', fontsize=12)
        plt.grid(True, alpha=0.3)
        
        # Format y-axis as percentage
        plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: f'{y:.0%}'))
        
        # Add data labels for key points
        for _, row in results_df.iterrows():
            plt.annotate(f"{row['max_rate']:.1%}", 
                        (row['year'], row['max_rate']),
                        textcoords="offset points", 
                        xytext=(0,10), 
                        ha='center',
                        fontsize=9)
        
        # Plot organization names
        plt.subplot(2, 1, 2)
        
        # Create a categorical plot showing which organization had the max rate each year
        org_names = results_df['top_org'].values
        years = results_df['year'].values
        
        # Truncate long organization names for readability
        short_names = [name[:30] + '...' if len(name) > 30 else name for name in org_names]
        
        plt.barh(range(len(years)), [1]*len(years), color='lightblue', alpha=0.7)
        
        # Add organization names as text
        for i, (year, org_name) in enumerate(zip(years, short_names)):
            plt.text(0.5, i, f"{year}: {org_name}", 
                    ha='center', va='center', fontsize=10, fontweight='bold')
        
        plt.yticks([])
        plt.xlim(0, 1)
        plt.title('Top Organization by Year', fontsize=14, fontweight='bold')
        plt.xlabel('Timeline', fontsize=12)
        
        plt.tight_layout()
        plt.savefig(output_png, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"✓ Saved visualization to: {output_png}")
        
        # Print summary statistics
        print("\n" + "="*70)
        print("YEARLY MAXIMUM REAPPOINTMENT RATES SUMMARY")
        print("="*70)
        
        print(f"Years analyzed: {len(results_df)}")
        print(f"Average maximum rate: {results_df['max_rate'].mean():.1%}")
        print(f"Highest maximum rate: {results_df['max_rate'].max():.1%} in {results_df.loc[results_df['max_rate'].idxmax(), 'year']}")
        print(f"Lowest maximum rate: {results_df['max_rate'].min():.1%} in {results_df.loc[results_df['max_rate'].idxmin(), 'year']}")
        
        # Show most frequent top organizations
        top_org_counts = results_df['top_org'].value_counts()
        print(f"\nOrganizations appearing as yearly maximum most often:")
        for i, (org, count) in enumerate(top_org_counts.head(5).items(), 1):
            years_list = results_df[results_df['top_org'] == org]['year'].tolist()
            years_str = ', '.join(map(str, sorted(years_list)))
            print(f"  {i}. {org}: {count} time(s) ({years_str})")
        
        # Show year-by-year results table
        print(f"\nYear-by-year results:")
        print(f"{'Year':<6} {'Organization':<40} {'Rate':<8} {'Details'}")
        print("-" * 70)
        
        for _, row in results_df.iterrows():
            rate_str = f"{row['max_rate']:.1%}"
            details = f"({row['reappointments']:.0f}/{row['total_appointments']:.0f})"
            org_name = row['top_org'][:35] + '...' if len(row['top_org']) > 35 else row['top_org']
            print(f"{row['year']:<6} {org_name:<40} {rate_str:<8} {details}")
        
        # Trend analysis
        print(f"\nTrend analysis:")
        if len(results_df) > 1:
            rate_change = results_df['max_rate'].iloc[-1] - results_df['max_rate'].iloc[0]
            if rate_change > 0:
                trend = "increasing"
            elif rate_change < 0:
                trend = "decreasing"
            else:
                trend = "stable"
            
            print(f"  Overall trend: {trend}")
            print(f"  Change from first to last year: {rate_change:+.1%}")
        
        print("\n✓ Yearly maximum reappointment rates analysis completed successfully!")
        
    except Exception as e:
        print(f"✗ Error processing dataset: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()