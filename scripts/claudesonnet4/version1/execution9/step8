#!/usr/bin/env python3
"""
New Brunswick Government Annual Reappointment Proportions
Calculates government-wide reappointment proportions for each year.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt

def main():
    """Main function to calculate annual reappointment proportions."""
    
    # Define paths
    script_dir = Path(__file__).parent
    analysis_data_dir = script_dir / "analysis_data"
    input_file = analysis_data_dir / "step3_repeats_marked.csv"
    output_csv = analysis_data_dir / "step8_annual_proportions.csv"
    output_png = analysis_data_dir / "step8_annual_reappointment_proportions.png"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"✗ Error: Input file not found - {input_file}")
        print("Please ensure step3_repeats_marked.csv exists in the analysis_data directory")
        sys.exit(1)
    
    try:
        # Load the dataset with reappointment flags
        print(f"Loading dataset from: {input_file}")
        df = pd.read_csv(input_file)
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows, {df.shape[1]} columns")
        
        # Validate required columns
        required_columns = ['year', 'reappointed']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"✗ Error: Missing required columns: {missing_columns}")
            sys.exit(1)
        
        # Data quality assessment
        print("\nData quality assessment:")
        print(f"  Total records: {len(df):,}")
        
        # Clean the data
        initial_rows = len(df)
        
        # Remove rows with missing year or reappointed values
        df_clean = df.dropna(subset=['year', 'reappointed']).copy()
        
        removed_rows = initial_rows - len(df_clean)
        if removed_rows > 0:
            print(f"  Removed {removed_rows:,} rows with missing year/reappointment data")
        
        # Validate year data type
        try:
            df_clean['year'] = pd.to_numeric(df_clean['year'], errors='coerce')
            df_clean = df_clean.dropna(subset=['year'])
            df_clean['year'] = df_clean['year'].astype(int)
        except Exception as e:
            print(f"✗ Error processing year column: {e}")
            sys.exit(1)
        
        # Validate reappointed column
        print(f"  Reappointed column type: {df_clean['reappointed'].dtype}")
        reapp_values = df_clean['reappointed'].value_counts()
        print(f"  Reappointed value distribution:")
        for value, count in reapp_values.items():
            print(f"    {value}: {count:,}")
        
        # Ensure reappointed is boolean
        if df_clean['reappointed'].dtype != 'bool':
            # Convert common representations to boolean
            df_clean['reappointed'] = df_clean['reappointed'].astype(str).str.lower()
            df_clean['reappointed'] = df_clean['reappointed'].isin(['true', '1', 'yes', 'y'])
        
        final_rows = len(df_clean)
        print(f"  Final dataset: {final_rows:,} rows ({(final_rows/initial_rows)*100:.1f}% of original)")
        
        # Show year range
        min_year = df_clean['year'].min()
        max_year = df_clean['year'].max()
        print(f"  Year range in data: {min_year} to {max_year}")
        
        # Calculate annual proportions for each year from 2013-2024
        print("\nCalculating annual reappointment proportions...")
        
        target_years = range(2013, 2025)  # 2013 through 2024
        annual_results = []
        
        for year in target_years:
            # Filter data for this year
            year_data = df_clean[df_clean['year'] == year]
            
            if len(year_data) == 0:
                print(f"  {year}: No appointments found")
                annual_results.append({
                    'year': year,
                    'total_appointments': 0,
                    'total_reappointments': 0,
                    'reappointment_proportion': 0.0
                })
                continue
            
            # Count total appointments and reappointments
            total_appointments = len(year_data)
            total_reappointments = year_data['reappointed'].sum()
            
            # Calculate proportion
            if total_appointments > 0:
                proportion = total_reappointments / total_appointments
            else:
                proportion = 0.0
            
            print(f"  {year}: {total_reappointments:,}/{total_appointments:,} = {proportion:.1%}")
            
            annual_results.append({
                'year': year,
                'total_appointments': total_appointments,
                'total_reappointments': total_reappointments,
                'reappointment_proportion': proportion
            })
        
        # Create results DataFrame
        results_df = pd.DataFrame(annual_results)
        
        # Save CSV
        results_df.to_csv(output_csv, index=False)
        print(f"\n✓ Saved annual proportions to: {output_csv}")
        
        # Create visualization
        print("Creating visualization...")
        
        # Filter out years with no data for cleaner visualization
        data_years = results_df[results_df['total_appointments'] > 0]
        
        if len(data_years) == 0:
            print("⚠ Warning: No years with appointment data found")
            return
        
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
        
        # Top plot: Reappointment proportion over time
        ax1.plot(data_years['year'], data_years['reappointment_proportion'], 
                marker='o', linewidth=3, markersize=8, color='darkblue', label='Reappointment Rate')
        ax1.fill_between(data_years['year'], data_years['reappointment_proportion'], 
                        alpha=0.3, color='lightblue')
        
        ax1.set_title('New Brunswick Government: Annual Reappointment Proportion Trend', 
                     fontsize=16, fontweight='bold', pad=20)
        ax1.set_ylabel('Reappointment Proportion', fontsize=12)
        ax1.grid(True, alpha=0.3)
        ax1.legend()
        
        # Format y-axis as percentage
        ax1.yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: f'{y:.0%}'))
        
        # Add data labels
        for _, row in data_years.iterrows():
            ax1.annotate(f"{row['reappointment_proportion']:.1%}", 
                        (row['year'], row['reappointment_proportion']),
                        textcoords="offset points", 
                        xytext=(0,15), 
                        ha='center',
                        fontsize=10,
                        fontweight='bold')
        
        # Bottom plot: Total appointments over time
        ax2.bar(data_years['year'], data_years['total_appointments'], 
               alpha=0.7, color='steelblue', label='Total Appointments')
        ax2.bar(data_years['year'], data_years['total_reappointments'], 
               alpha=0.9, color='darkred', label='Reappointments')
        
        ax2.set_title('Annual Appointment Volumes', fontsize=14, fontweight='bold')
        ax2.set_xlabel('Year', fontsize=12)
        ax2.set_ylabel('Number of Appointments', fontsize=12)
        ax2.grid(True, alpha=0.3, axis='y')
        ax2.legend()
        
        # Format y-axis with commas
        ax2.yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: f'{int(y):,}'))
        
        plt.tight_layout()
        plt.savefig(output_png, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"✓ Saved visualization to: {output_png}")
        
        # Print summary statistics
        print("\n" + "="*70)
        print("ANNUAL REAPPOINTMENT PROPORTIONS SUMMARY")
        print("="*70)
        
        # Overall statistics across all years
        total_all_appointments = results_df['total_appointments'].sum()
        total_all_reappointments = results_df['total_reappointments'].sum()
        
        if total_all_appointments > 0:
            overall_proportion = total_all_reappointments / total_all_appointments
            print(f"Overall statistics (2013-2024):")
            print(f"  Total appointments: {total_all_appointments:,}")
            print(f"  Total reappointments: {total_all_reappointments:,}")
            print(f"  Overall reappointment rate: {overall_proportion:.1%}")
        
        # Statistics for years with data
        data_results = results_df[results_df['total_appointments'] > 0]
        
        if len(data_results) > 0:
            print(f"\nYears with appointment data: {len(data_results)}")
            print(f"Average annual reappointment rate: {data_results['reappointment_proportion'].mean():.1%}")
            print(f"Highest annual rate: {data_results['reappointment_proportion'].max():.1%} in {data_results.loc[data_results['reappointment_proportion'].idxmax(), 'year']}")
            print(f"Lowest annual rate: {data_results['reappointment_proportion'].min():.1%} in {data_results.loc[data_results['reappointment_proportion'].idxmin(), 'year']}")
        
        # Year-by-year breakdown
        print(f"\nYear-by-year breakdown:")
        print(f"{'Year':<6} {'Appointments':<12} {'Reappointments':<14} {'Proportion':<10}")
        print("-" * 50)
        
        for _, row in results_df.iterrows():
            if row['total_appointments'] > 0:
                print(f"{int(row['year']):<6} {int(row['total_appointments']):<12,} {int(row['total_reappointments']):<14,} {row['reappointment_proportion']:<10.1%}")
            else:
                print(f"{int(row['year']):<6} {'No data':<12} {'No data':<14} {'No data':<10}")
        
        # Trend analysis
        if len(data_results) > 1:
            first_rate = data_results['reappointment_proportion'].iloc[0]
            last_rate = data_results['reappointment_proportion'].iloc[-1]
            rate_change = last_rate - first_rate
            
            print(f"\nTrend analysis:")
            print(f"  First year rate: {first_rate:.1%}")
            print(f"  Last year rate: {last_rate:.1%}")
            print(f"  Change over time: {rate_change:+.1%}")
            
            if rate_change > 0.01:  # More than 1 percentage point increase
                trend = "increasing"
            elif rate_change < -0.01:  # More than 1 percentage point decrease
                trend = "decreasing"
            else:
                trend = "relatively stable"
            
            print(f"  Overall trend: {trend}")
        
        print("\n✓ Annual reappointment proportions analysis completed successfully!")
        
    except Exception as e:
        print(f"✗ Error processing dataset: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()