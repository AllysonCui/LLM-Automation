#!/usr/bin/env python3
"""
New Brunswick Government Annual Reappointment Proportions
Calculates government-wide reappointment proportions for each year.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

def create_visualization(results_df, output_path):
    """
    Create a visualization of annual reappointment proportions.
    
    Args:
        results_df: DataFrame with annual results
        output_path: Path to save the visualization
    """
    try:
        # Create figure and axis
        fig, ax = plt.subplots(figsize=(12, 8))
        
        # Filter out years with missing data
        valid_data = results_df.dropna(subset=['reappointment_proportion'])
        
        if len(valid_data) == 0:
            print("⚠ Warning: No valid data for visualization")
            return
        
        # Create the main line plot
        ax.plot(valid_data['year'], valid_data['reappointment_proportion'] * 100, 
                marker='o', linewidth=3, markersize=10, color='#d62728', 
                markerfacecolor='white', markeredgewidth=2, markeredgecolor='#d62728')
        
        # Add data point labels showing exact percentages
        for _, row in valid_data.iterrows():
            percentage = row['reappointment_proportion'] * 100
            ax.annotate(f'{percentage:.1f}%', 
                       (row['year'], percentage),
                       textcoords="offset points", 
                       xytext=(0, 15), 
                       ha='center', 
                       fontsize=10,
                       fontweight='bold',
                       bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8))
        
        # Customize the plot
        ax.set_xlabel('Year', fontsize=14, fontweight='bold')
        ax.set_ylabel('Government-wide Reappointment Proportion (%)', fontsize=14, fontweight='bold')
        ax.set_title('New Brunswick Government\nAnnual Reappointment Proportions (2013-2024)', 
                    fontsize=16, fontweight='bold', pad=20)
        
        # Format y-axis as percentage
        ax.yaxis.set_major_formatter(ticker.PercentFormatter(decimals=1))
        
        # Set x-axis to show all years
        all_years = list(range(2013, 2025))
        ax.set_xlim(2012.5, 2024.5)
        ax.set_xticks(all_years)
        ax.tick_params(axis='x', rotation=45)
        
        # Add grid for better readability
        ax.grid(True, alpha=0.3, linestyle='--')
        
        # Add trend line if we have enough data points
        if len(valid_data) >= 3:
            z = np.polyfit(valid_data['year'], valid_data['reappointment_proportion'] * 100, 1)
            p = np.poly1d(z)
            ax.plot(valid_data['year'], p(valid_data['year']), 
                   linestyle='--', alpha=0.7, color='gray', 
                   label=f'Trend (slope: {z[0]:+.2f}% per year)')
            ax.legend(loc='upper left')
        
        # Set reasonable y-axis limits
        y_min = max(0, valid_data['reappointment_proportion'].min() * 100 - 2)
        y_max = valid_data['reappointment_proportion'].max() * 100 + 5
        ax.set_ylim(y_min, y_max)
        
        # Adjust layout
        plt.tight_layout()
        
        # Save the plot
        plt.savefig(output_path, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"✓ Saved visualization to: {output_path}")
        
    except Exception as e:
        print(f"⚠ Warning: Could not create visualization: {str(e)}")

def main():
    """Main function to calculate annual reappointment proportions."""
    
    # Define paths
    script_dir = Path(__file__).parent
    analysis_data_dir = script_dir / "analysis_data"
    input_file = analysis_data_dir / "step3_repeats_marked.csv"
    output_file = analysis_data_dir / "step8_annual_proportions.csv"
    plot_file = analysis_data_dir / "step8_annual_reappointment_proportions.png"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"✗ Error: Input file not found - {input_file}")
        print("Please ensure step3_repeats_marked.csv exists in the analysis_data directory")
        sys.exit(1)
    
    try:
        # Load the dataset with reappointment flags
        print(f"Loading dataset from: {input_file}")
        df = pd.read_csv(input_file)
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows, {df.shape[1]} columns")
        
        # Check required columns
        required_columns = ['year', 'reappointed']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"✗ Error: Missing required columns: {missing_columns}")
            sys.exit(1)
        
        print(f"\nDataset overview:")
        print(f"  Columns: {list(df.columns)}")
        print(f"  Years in data: {df['year'].min()} - {df['year'].max()}")
        print(f"  Total records: {len(df):,}")
        
        # Process reappointed column
        print(f"\nProcessing reappointed column...")
        print(f"  Original reappointed column type: {df['reappointed'].dtype}")
        print(f"  Original value counts:")
        original_counts = df['reappointed'].value_counts()
        for value, count in original_counts.items():
            print(f"    {value}: {count:,}")
        
        # Convert reappointed column to boolean
        df['reappointed'] = df['reappointed'].map({
            True: True, False: False, 'True': True, 'False': False,
            'true': True, 'false': False, 1: True, 0: False,
            'Yes': True, 'No': False, 'yes': True, 'no': False,
            'Y': True, 'N': False, 'y': True, 'n': False,
            1.0: True, 0.0: False
        })
        
        # Fill any remaining NaN values with False
        df['reappointed'] = df['reappointed'].fillna(False)
        
        print(f"  Processed value counts:")
        processed_counts = df['reappointed'].value_counts()
        for value, count in processed_counts.items():
            print(f"    {value}: {count:,}")
        
        # Handle missing years
        missing_years = df['year'].isna().sum()
        if missing_years > 0:
            print(f"\nHandling {missing_years} records with missing years...")
            median_year = df['year'].median()
            df['year'] = df['year'].fillna(median_year)
            print(f"  Filled missing years with median year: {median_year}")
        
        # Ensure year is integer
        df['year'] = df['year'].astype(int)
        
        # Calculate annual proportions for each year from 2013-2024
        print(f"\nCalculating annual reappointment proportions...")
        
        years = list(range(2013, 2025))  # 2013 through 2024
        annual_results = []
        
        for year in years:
            year_data = df[df['year'] == year]
            
            if len(year_data) == 0:
                # No data for this year
                annual_results.append({
                    'year': year,
                    'total_appointments': 0,
                    'total_reappointments': 0,
                    'reappointment_proportion': np.nan
                })
                print(f"  {year}: No data available")
                continue
            
            # Count total appointments and reappointments for the year
            total_appointments = len(year_data)
            total_reappointments = year_data['reappointed'].sum()
            
            # Calculate proportion
            if total_appointments > 0:
                proportion = total_reappointments / total_appointments
            else:
                proportion = np.nan
            
            annual_results.append({
                'year': year,
                'total_appointments': total_appointments,
                'total_reappointments': total_reappointments,
                'reappointment_proportion': proportion
            })
            
            print(f"  {year}: {total_reappointments:,}/{total_appointments:,} = {proportion:.3f} ({proportion*100:.1f}%)")
        
        # Create results DataFrame
        results_df = pd.DataFrame(annual_results)
        
        # Save results
        results_df.to_csv(output_file, index=False)
        print(f"\n✓ Saved annual proportions to: {output_file}")
        
        # Create visualization
        print(f"\nCreating visualization...")
        create_visualization(results_df, plot_file)
        
        # Print detailed year-by-year results
        print("\n" + "="*70)
        print("ANNUAL GOVERNMENT-WIDE REAPPOINTMENT PROPORTIONS")
        print("="*70)
        
        print(f"{'Year':<6} {'Total Appt':<12} {'Reappt':<8} {'Proportion':<12} {'Percentage'}")
        print("-" * 70)
        
        for _, row in results_df.iterrows():
            if pd.notna(row['reappointment_proportion']):
                proportion_str = f"{row['reappointment_proportion']:.4f}"
                percentage_str = f"{row['reappointment_proportion']*100:.2f}%"
            else:
                proportion_str = "N/A"
                percentage_str = "N/A"
            
            print(f"{row['year']:<6} {row['total_appointments']:<12,} {row['total_reappointments']:<8,} {proportion_str:<12} {percentage_str}")
        
        # Summary statistics
        print(f"\n" + "="*50)
        print("SUMMARY STATISTICS")
        print("="*50)
        
        valid_results = results_df.dropna(subset=['reappointment_proportion'])
        
        if len(valid_results) > 0:
            print(f"Years with data: {len(valid_results)}")
            print(f"Total appointments (all years): {valid_results['total_appointments'].sum():,}")
            print(f"Total reappointments (all years): {valid_results['total_reappointments'].sum():,}")
            
            overall_proportion = valid_results['total_reappointments'].sum() / valid_results['total_appointments'].sum()
            print(f"Overall proportion (all years): {overall_proportion:.4f} ({overall_proportion*100:.2f}%)")
            
            print(f"\nAnnual proportion statistics:")
            print(f"  Average annual proportion: {valid_results['reappointment_proportion'].mean():.4f} ({valid_results['reappointment_proportion'].mean()*100:.2f}%)")
            print(f"  Median annual proportion: {valid_results['reappointment_proportion'].median():.4f} ({valid_results['reappointment_proportion'].median()*100:.2f}%)")
            print(f"  Highest annual proportion: {valid_results['reappointment_proportion'].max():.4f} ({valid_results['reappointment_proportion'].max()*100:.2f}%)")
            print(f"  Lowest annual proportion: {valid_results['reappointment_proportion'].min():.4f} ({valid_results['reappointment_proportion'].min()*100:.2f}%)")
            print(f"  Standard deviation: {valid_results['reappointment_proportion'].std():.4f}")
            
            # Calculate trend
            if len(valid_results) >= 3:
                correlation = np.corrcoef(valid_results['year'], valid_results['reappointment_proportion'])[0, 1]
                slope = np.polyfit(valid_results['year'], valid_results['reappointment_proportion'], 1)[0]
                print(f"\nTrend analysis:")
                print(f"  Correlation with year: {correlation:.3f}")
                print(f"  Annual change rate: {slope*100:+.3f} percentage points per year")
                
                if slope > 0.001:
                    trend_desc = "increasing"
                elif slope < -0.001:
                    trend_desc = "decreasing"
                else:
                    trend_desc = "stable"
                print(f"  Overall trend: {trend_desc}")
            
            # Years with highest and lowest proportions
            max_year = valid_results.loc[valid_results['reappointment_proportion'].idxmax(), 'year']
            min_year = valid_results.loc[valid_results['reappointment_proportion'].idxmin(), 'year']
            
            print(f"\nExtreme years:")
            print(f"  Highest reappointment rate: {max_year} ({valid_results['reappointment_proportion'].max()*100:.2f}%)")
            print(f"  Lowest reappointment rate: {min_year} ({valid_results['reappointment_proportion'].min()*100:.2f}%)")
        
        else:
            print("No valid data found for analysis")
        
        print("\n✓ Annual reappointment proportions analysis completed successfully!")
        
    except Exception as e:
        print(f"✗ Error processing dataset: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()