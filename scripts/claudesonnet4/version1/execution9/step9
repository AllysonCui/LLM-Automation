#!/usr/bin/env python3
"""
New Brunswick Government Reappointment Trends Regression Analysis
Performs statistical analysis to determine if reappointment proportions are increasing or declining.
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
from scipy import stats
from scipy.stats import linregress
import warnings

def durbin_watson_test(residuals):
    """
    Calculate Durbin-Watson statistic for testing autocorrelation in residuals.
    
    Args:
        residuals: Array of regression residuals
    
    Returns:
        float: Durbin-Watson statistic (0-4, ~2 indicates no autocorrelation)
    """
    n = len(residuals)
    if n < 2:
        return np.nan
    
    diff_residuals = np.diff(residuals)
    sum_squared_diff = np.sum(diff_residuals**2)
    sum_squared_residuals = np.sum(residuals**2)
    
    if sum_squared_residuals == 0:
        return np.nan
    
    dw_stat = sum_squared_diff / sum_squared_residuals
    return dw_stat

def detect_outliers(x, y, residuals, threshold=2.0):
    """
    Detect outliers using standardized residuals.
    
    Args:
        x: Independent variable values
        y: Dependent variable values
        residuals: Regression residuals
        threshold: Standard deviation threshold for outlier detection
    
    Returns:
        tuple: (outlier_indices, outlier_data)
    """
    if len(residuals) == 0:
        return [], []
    
    std_residuals = residuals / np.std(residuals) if np.std(residuals) > 0 else residuals
    outlier_mask = np.abs(std_residuals) > threshold
    outlier_indices = np.where(outlier_mask)[0]
    
    outlier_data = []
    for idx in outlier_indices:
        outlier_data.append({
            'index': idx,
            'year': x[idx],
            'proportion': y[idx],
            'residual': residuals[idx],
            'std_residual': std_residuals[idx]
        })
    
    return outlier_indices, outlier_data

def calculate_confidence_intervals(x, y, slope, intercept, residuals, confidence=0.95):
    """
    Calculate confidence intervals for regression parameters.
    
    Args:
        x: Independent variable values
        y: Dependent variable values
        slope: Regression slope
        intercept: Regression intercept
        residuals: Regression residuals
        confidence: Confidence level (default 0.95 for 95% CI)
    
    Returns:
        dict: Confidence intervals for slope and intercept
    """
    n = len(x)
    if n <= 2:
        return {'slope_ci': (np.nan, np.nan), 'intercept_ci': (np.nan, np.nan)}
    
    # Calculate standard errors
    mse = np.sum(residuals**2) / (n - 2)  # Mean squared error
    x_mean = np.mean(x)
    sxx = np.sum((x - x_mean)**2)
    
    if sxx == 0:
        return {'slope_ci': (np.nan, np.nan), 'intercept_ci': (np.nan, np.nan)}
    
    se_slope = np.sqrt(mse / sxx)
    se_intercept = np.sqrt(mse * (1/n + x_mean**2/sxx))
    
    # t-statistic for confidence interval
    alpha = 1 - confidence
    t_val = stats.t.ppf(1 - alpha/2, n - 2)
    
    # Calculate confidence intervals
    slope_margin = t_val * se_slope
    intercept_margin = t_val * se_intercept
    
    return {
        'slope_ci': (slope - slope_margin, slope + slope_margin),
        'intercept_ci': (intercept - intercept_margin, intercept + intercept_margin),
        'se_slope': se_slope,
        'se_intercept': se_intercept
    }

def main():
    """Main function to perform regression analysis."""
    
    # Define paths
    script_dir = Path(__file__).parent
    analysis_data_dir = script_dir / "analysis_data"
    input_file = analysis_data_dir / "step8_annual_proportions.csv"
    output_file = analysis_data_dir / "step9_regression_results.txt"
    
    # Check if input file exists
    if not input_file.exists():
        print(f"✗ Error: Input file not found - {input_file}")
        print("Please ensure step8_annual_proportions.csv exists in the analysis_data directory")
        sys.exit(1)
    
    try:
        # Load the annual proportions dataset
        print(f"Loading annual proportions from: {input_file}")
        df = pd.read_csv(input_file)
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows, {df.shape[1]} columns")
        
        # Validate required columns
        required_columns = ['year', 'reappointment_proportion', 'total_appointments']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"✗ Error: Missing required columns: {missing_columns}")
            sys.exit(1)
        
        # Prepare data for regression analysis
        print("\nPreparing data for regression analysis...")
        
        # Filter out years with no appointments (avoid division by zero issues)
        regression_data = df[df['total_appointments'] > 0].copy()
        
        if len(regression_data) < 3:
            print(f"✗ Error: Insufficient data points for regression (need ≥3, have {len(regression_data)})")
            sys.exit(1)
        
        print(f"  Using {len(regression_data)} data points out of {len(df)} total years")
        
        # Extract X (year) and Y (reappointment proportion) variables
        x = regression_data['year'].values
        y = regression_data['reappointment_proportion'].values
        
        print(f"  Year range: {x.min()} to {x.max()}")
        print(f"  Proportion range: {y.min():.1%} to {y.max():.1%}")
        
        # Fit linear regression model
        print("\nFitting linear regression model...")
        
        try:
            slope, intercept, r_value, p_value, std_err = linregress(x, y)
            r_squared = r_value**2
            
            # Calculate predicted values and residuals
            y_pred = slope * x + intercept
            residuals = y - y_pred
            
            print(f"✓ Regression model fitted successfully")
            
        except Exception as e:
            print(f"✗ Error fitting regression model: {e}")
            sys.exit(1)
        
        # Calculate additional statistics
        print("Calculating comprehensive statistics...")
        
        # Confidence intervals
        ci_results = calculate_confidence_intervals(x, y, slope, intercept, residuals)
        
        # Durbin-Watson test for autocorrelation
        dw_stat = durbin_watson_test(residuals)
        
        # Outlier detection
        outlier_indices, outlier_data = detect_outliers(x, y, residuals)
        
        # Calculate practical significance metrics
        annual_change_pct_points = slope * 100  # Convert to percentage points
        total_period_change = slope * (x.max() - x.min()) * 100  # Change over entire period
        
        # Statistical significance test
        is_significant = p_value < 0.05
        trend_direction = "increasing" if slope > 0 else "decreasing"
        
        # Determine effect size (Cohen's conventions adapted for regression)
        if r_squared < 0.01:
            effect_size = "negligible"
        elif r_squared < 0.09:
            effect_size = "small"
        elif r_squared < 0.25:
            effect_size = "medium"
        else:
            effect_size = "large"
        
        # Print results
        print("\n" + "="*80)
        print("REGRESSION ANALYSIS RESULTS")
        print("="*80)
        
        print(f"Data Summary:")
        print(f"  Sample size: {len(regression_data)} years")
        print(f"  Year range: {x.min()} - {x.max()}")
        print(f"  Mean proportion: {np.mean(y):.1%}")
        print(f"  Standard deviation: {np.std(y):.1%}")
        
        print(f"\nRegression Equation:")
        print(f"  Reappointment Proportion = {intercept:.6f} + {slope:.6f} × Year")
        print(f"  Y = {intercept:.6f} + {slope:.6f}X")
        
        print(f"\nRegression Statistics:")
        print(f"  Slope (β₁): {slope:.6f}")
        print(f"  Intercept (β₀): {intercept:.6f}")
        print(f"  R-squared: {r_squared:.4f} ({effect_size} effect)")
        print(f"  Correlation coefficient (r): {r_value:.4f}")
        print(f"  P-value: {p_value:.6f}")
        print(f"  Standard error of slope: {std_err:.6f}")
        
        print(f"\nConfidence Intervals (95%):")
        if not np.isnan(ci_results['slope_ci'][0]):
            print(f"  Slope: ({ci_results['slope_ci'][0]:.6f}, {ci_results['slope_ci'][1]:.6f})")
            print(f"  Intercept: ({ci_results['intercept_ci'][0]:.6f}, {ci_results['intercept_ci'][1]:.6f})")
        else:
            print(f"  Unable to calculate confidence intervals")
        
        print(f"\nPractical Significance:")
        print(f"  Annual change: {annual_change_pct_points:+.2f} percentage points per year")
        print(f"  Total change over period: {total_period_change:+.2f} percentage points")
        
        print(f"\nRegression Diagnostics:")
        if not np.isnan(dw_stat):
            dw_interpretation = "no autocorrelation" if 1.5 <= dw_stat <= 2.5 else "possible autocorrelation"
            print(f"  Durbin-Watson statistic: {dw_stat:.3f} ({dw_interpretation})")
        else:
            print(f"  Durbin-Watson statistic: Unable to calculate")
        
        print(f"  Number of outliers (>2 SD): {len(outlier_data)}")
        if outlier_data:
            print(f"  Outlier years: {[d['year'] for d in outlier_data]}")
        
        print(f"\nStatistical Conclusion:")
        print(f"  Trend direction: {trend_direction.upper()}")
        print(f"  Statistical significance: {'YES' if is_significant else 'NO'} (p {'<' if is_significant else '≥'} 0.05)")
        print(f"  Effect size: {effect_size.upper()}")
        
        # Write detailed results to file
        print(f"\nSaving detailed results to: {output_file}")
        
        with open(output_file, 'w') as f:
            f.write("NEW BRUNSWICK GOVERNMENT REAPPOINTMENT TRENDS\n")
            f.write("REGRESSION ANALYSIS RESULTS\n")
            f.write("="*80 + "\n\n")
            
            f.write("DATA SUMMARY\n")
            f.write("-"*40 + "\n")
            f.write(f"Analysis Period: {x.min()} - {x.max()}\n")
            f.write(f"Sample Size: {len(regression_data)} years with appointment data\n")
            f.write(f"Total Years in Dataset: {len(df)} years\n")
            f.write(f"Years Excluded (no appointments): {len(df) - len(regression_data)}\n\n")
            
            f.write("DESCRIPTIVE STATISTICS\n")
            f.write("-"*40 + "\n")
            f.write(f"Mean Reappointment Proportion: {np.mean(y):.4f} ({np.mean(y)*100:.2f}%)\n")
            f.write(f"Standard Deviation: {np.std(y):.4f} ({np.std(y)*100:.2f} percentage points)\n")
            f.write(f"Minimum: {np.min(y):.4f} ({np.min(y)*100:.2f}%) in {x[np.argmin(y)]}\n")
            f.write(f"Maximum: {np.max(y):.4f} ({np.max(y)*100:.2f}%) in {x[np.argmax(y)]}\n\n")
            
            f.write("REGRESSION MODEL\n")
            f.write("-"*40 + "\n")
            f.write(f"Model: Linear Regression (Ordinary Least Squares)\n")
            f.write(f"Equation: Y = {intercept:.6f} + {slope:.6f}X\n")
            f.write(f"Where: Y = Reappointment Proportion, X = Year\n\n")
            
            f.write("REGRESSION COEFFICIENTS\n")
            f.write("-"*40 + "\n")
            f.write(f"Slope (β₁): {slope:.6f}\n")
            f.write(f"Intercept (β₀): {intercept:.6f}\n")
            f.write(f"Standard Error of Slope: {std_err:.6f}\n")
            if not np.isnan(ci_results['slope_ci'][0]):
                f.write(f"95% CI for Slope: ({ci_results['slope_ci'][0]:.6f}, {ci_results['slope_ci'][1]:.6f})\n")
                f.write(f"95% CI for Intercept: ({ci_results['intercept_ci'][0]:.6f}, {ci_results['intercept_ci'][1]:.6f})\n")
            f.write("\n")
            
            f.write("MODEL FIT STATISTICS\n")
            f.write("-"*40 + "\n")
            f.write(f"R-squared: {r_squared:.4f}\n")
            f.write(f"Correlation Coefficient (r): {r_value:.4f}\n")
            f.write(f"Explained Variance: {r_squared*100:.1f}%\n")
            f.write(f"Effect Size: {effect_size.title()}\n\n")
            
            f.write("STATISTICAL TESTS\n")
            f.write("-"*40 + "\n")
            f.write(f"Null Hypothesis: Slope = 0 (no trend)\n")
            f.write(f"Alternative Hypothesis: Slope ≠ 0 (trend exists)\n")
            f.write(f"P-value: {p_value:.6f}\n")
            f.write(f"Significance Level: α = 0.05\n")
            f.write(f"Result: {'REJECT' if is_significant else 'FAIL TO REJECT'} null hypothesis\n")
            f.write(f"Conclusion: Trend is {'STATISTICALLY SIGNIFICANT' if is_significant else 'NOT STATISTICALLY SIGNIFICANT'}\n\n")
            
            f.write("PRACTICAL SIGNIFICANCE\n")
            f.write("-"*40 + "\n")
            f.write(f"Annual Change: {annual_change_pct_points:+.3f} percentage points per year\n")
            f.write(f"Total Change ({x.min()}-{x.max()}): {total_period_change:+.2f} percentage points\n")
            f.write(f"Trend Direction: {trend_direction.title()}\n\n")
            
            f.write("REGRESSION DIAGNOSTICS\n")
            f.write("-"*40 + "\n")
            if not np.isnan(dw_stat):
                f.write(f"Durbin-Watson Statistic: {dw_stat:.3f}\n")
                f.write(f"Autocorrelation Assessment: {dw_interpretation.title()}\n")
            else:
                f.write(f"Durbin-Watson Statistic: Unable to calculate\n")
            f.write(f"Outliers Detected (>2 SD): {len(outlier_data)}\n")
            if outlier_data:
                f.write(f"Outlier Details:\n")
                for outlier in outlier_data:
                    f.write(f"  Year {outlier['year']}: {outlier['proportion']:.1%} (residual: {outlier['residual']:+.4f})\n")
            f.write("\n")
            
            f.write("DATA POINTS\n")
            f.write("-"*40 + "\n")
            f.write("Year    Observed    Predicted   Residual\n")
            f.write("-"*40 + "\n")
            for i in range(len(x)):
                f.write(f"{x[i]:<8}{y[i]:<12.4f}{y_pred[i]:<12.4f}{residuals[i]:+.4f}\n")
            f.write("\n")
            
            f.write("FINAL CONCLUSIONS\n")
            f.write("-"*40 + "\n")
            f.write(f"1. TREND DIRECTION: The government-wide reappointment proportion is {trend_direction.upper()} over time.\n")
            f.write(f"2. STATISTICAL SIGNIFICANCE: The trend is {'STATISTICALLY SIGNIFICANT' if is_significant else 'NOT STATISTICALLY SIGNIFICANT'} (p = {p_value:.3f}).\n")
            f.write(f"3. PRACTICAL IMPACT: Reappointment rates change by {annual_change_pct_points:+.2f} percentage points annually.\n")
            f.write(f"4. MODEL QUALITY: The model explains {r_squared*100:.1f}% of variance ({effect_size} effect size).\n")
        
        print("✓ Results saved successfully")
        
        # Final answer
        print("\n" + "="*80)
        print("FINAL ANSWER")
        print("="*80)
        
        significance_text = "IS" if is_significant else "IS NOT"
        direction_text = trend_direction.upper()
        
        print(f"The government-wide reappointment proportion trend is {direction_text} over the 12-year period")
        print(f"and {significance_text} statistically significant (p = {p_value:.3f}).")
        print(f"Annual change: {annual_change_pct_points:+.2f} percentage points per year.")
        print(f"Total change over period: {total_period_change:+.2f} percentage points.")
        
        print("\n✓ Regression analysis completed successfully!")
        
    except Exception as e:
        print(f"✗ Error during regression analysis: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()