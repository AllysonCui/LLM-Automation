#!/usr/bin/env python3
"""
Script to combine New Brunswick government appointment data from 2013-2024.

This script:
1. Loads all 12 CSV files (2013-2024) into pandas DataFrames
2. Adds a 'year' column to each dataset before combining
3. Combines all datasets into a single DataFrame
4. Saves the combined dataset as 'step1_combined_appointments.csv'
5. Prints shape and basic info about the combined dataset

Author: Claude
Date: 2025-06-11
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_and_combine_appointments():
    """
    Load and combine appointment data from 2013-2024.
    
    Returns:
        pd.DataFrame: Combined dataset with all years
    """
    # Define the years to process
    years = range(2013, 2025)  # 2013 through 2024
    
    # List to store individual DataFrames
    dataframes = []
    
    # Create output directory if it doesn't exist
    output_dir = Path("scripts/claudesonnet4/version1/analysis_data")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    print("Loading appointment data files...")
    
    for year in years:
        filename = f"raw_data/appointments_{year}.csv"
        
        try:
            # Load the CSV file
            df = pd.read_csv(filename)
            
            # Add year column
            df['year'] = year
            
            # Append to list
            dataframes.append(df)
            
            print(f"✓ Loaded {filename}: {df.shape[0]} rows, {df.shape[1]} columns")
            
        except FileNotFoundError:
            print(f"⚠ Warning: File {filename} not found. Skipping...")
            continue
        except pd.errors.EmptyDataError:
            print(f"⚠ Warning: File {filename} is empty. Skipping...")
            continue
        except Exception as e:
            print(f"⚠ Error loading {filename}: {str(e)}")
            continue
    
    # Check if we have any data to combine
    if not dataframes:
        raise ValueError("No data files were successfully loaded!")
    
    print(f"\nCombining {len(dataframes)} datasets...")
    
    # Combine all DataFrames
    combined_df = pd.concat(dataframes, ignore_index=True)
    
    return combined_df

def save_combined_data(df, output_path):
    """
    Save the combined DataFrame to CSV.
    
    Args:
        df (pd.DataFrame): Combined dataset
        output_path (str): Path to save the file
    """
    try:
        df.to_csv(output_path, index=False)
        print(f"✓ Combined dataset saved to: {output_path}")
    except Exception as e:
        print(f"✗ Error saving file: {str(e)}")
        raise

def print_dataset_info(df):
    """
    Print basic information about the combined dataset.
    
    Args:
        df (pd.DataFrame): Combined dataset
    """
    print("\n" + "="*60)
    print("COMBINED DATASET SUMMARY")
    print("="*60)
    
    # Basic shape information
    print(f"Dataset shape: {df.shape[0]:,} rows × {df.shape[1]} columns")
    
    # Year distribution
    if 'year' in df.columns:
        year_counts = df['year'].value_counts().sort_index()
        print(f"\nRecords by year:")
        for year, count in year_counts.items():
            print(f"  {year}: {count:,} appointments")
        print(f"  Total: {year_counts.sum():,} appointments")
    
    # Column information
    print(f"\nColumns in dataset:")
    for i, col in enumerate(df.columns, 1):
        print(f"  {i:2d}. {col}")
    
    # Data types
    print(f"\nData types:")
    dtype_counts = df.dtypes.value_counts()
    for dtype, count in dtype_counts.items():
        print(f"  {dtype}: {count} columns")
    
    # Missing values summary
    missing_counts = df.isnull().sum()
    if missing_counts.sum() > 0:
        print(f"\nMissing values:")
        for col, missing in missing_counts.items():
            if missing > 0:
                pct = (missing / len(df)) * 100
                print(f"  {col}: {missing:,} ({pct:.1f}%)")
    else:
        print(f"\nNo missing values detected.")

def main():
    """Main function to execute the data combination process."""
    try:
        print("New Brunswick Government Appointments Data Combiner")
        print("="*60)
        
        # Load and combine data
        combined_df = load_and_combine_appointments()
        
        # Define output path
        output_path = "scripts/claudesonnet4/version1/analysis_data/step1_combined_appointments.csv"
        
        # Save combined data
        save_combined_data(combined_df, output_path)
        
        # Print dataset information
        print_dataset_info(combined_df)
        
        print("\n✓ Script completed successfully!")
        
    except Exception as e:
        print(f"\n✗ Script failed with error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()