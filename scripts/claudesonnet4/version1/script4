#!/usr/bin/env python3
"""
Script to create appointment counts summary by organization and year.

This script:
1. Loads the dataset from step 3
2. Groups the data by "org" (organization) and "year"
3. Counts the total number of appointments for each organization in each year
4. Creates a summary table with organizations as rows, years as columns, and counts as values
5. Handles missing values appropriately
6. Saves the counts as 'step4_employee_counts.csv'
7. Prints the summary table and identifies organizations with the most appointments

Author: Claude
Date: 2025-06-11
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def load_dataset(input_path):
    """
    Load the dataset from step 3.
    
    Args:
        input_path (str): Path to the input CSV file
    
    Returns:
        pd.DataFrame: Loaded dataset
    """
    try:
        df = pd.read_csv(input_path)
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
        return df
    except FileNotFoundError:
        raise FileNotFoundError(f"Could not find input file: {input_path}")
    except Exception as e:
        raise Exception(f"Error loading dataset: {str(e)}")

def validate_data_quality(df):
    """
    Validate data quality and report any issues.
    
    Args:
        df (pd.DataFrame): Input dataset
        
    Returns:
        pd.DataFrame: Cleaned dataset
    """
    print("\nValidating data quality...")
    
    # Check required columns
    required_cols = ['org', 'year']
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        raise ValueError(f"Missing required columns: {missing_cols}")
    
    original_rows = len(df)
    
    # Report missing values
    print("Missing values analysis:")
    for col in required_cols:
        missing_count = df[col].isnull().sum()
        if missing_count > 0:
            missing_pct = (missing_count / original_rows) * 100
            print(f"  {col}: {missing_count:,} missing ({missing_pct:.1f}%)")
        else:
            print(f"  {col}: No missing values")
    
    # Handle missing organizations
    org_missing = df['org'].isnull().sum()
    if org_missing > 0:
        print(f"\nHandling {org_missing} records with missing organization...")
        df.loc[:, 'org'] = df['org'].fillna('Unknown Organization')
    
    # Handle missing years
    year_missing = df['year'].isnull().sum()
    if year_missing > 0:
        print(f"\nHandling {year_missing} records with missing year...")
        # For missing years, we'll exclude them from the analysis
        df_clean = df.dropna(subset=['year']).copy()
        print(f"Removed {year_missing} records with missing years")
    else:
        df_clean = df.copy()
    
    # Validate year values
    df_clean.loc[:, 'year'] = pd.to_numeric(df_clean['year'], errors='coerce')
    invalid_years = df_clean['year'].isnull().sum()
    if invalid_years > 0:
        print(f"Found {invalid_years} records with invalid year values - removing them")
        df_clean = df_clean.dropna(subset=['year'])
    
    # Convert year to integer
    df_clean.loc[:, 'year'] = df_clean['year'].astype(int)
    
    # Validate year range (should be reasonable appointment years)
    min_year = df_clean['year'].min()
    max_year = df_clean['year'].max()
    print(f"Year range: {min_year} to {max_year}")
    
    if min_year < 1900 or max_year > 2030:
        print(f"⚠ Warning: Unusual year range detected ({min_year}-{max_year})")
    
    final_rows = len(df_clean)
    if final_rows != original_rows:
        print(f"Data cleaning removed {original_rows - final_rows:,} records")
        print(f"Final dataset: {final_rows:,} records")
    
    return df_clean

def create_appointment_counts(df):
    """
    Create appointment counts by organization and year.
    
    Args:
        df (pd.DataFrame): Input dataset
        
    Returns:
        pd.DataFrame: Pivot table with organizations as rows, years as columns
        pd.DataFrame: Summary statistics
    """
    print("\nCreating appointment counts...")
    
    # Group by organization and year, count appointments
    counts_df = df.groupby(['org', 'year']).size().reset_index(name='appointment_count')
    
    print(f"Created {len(counts_df):,} organization-year combinations")
    
    # Create pivot table
    pivot_table = counts_df.pivot(index='org', columns='year', values='appointment_count')
    
    # Fill NaN values with 0 (no appointments that year)
    pivot_table = pivot_table.fillna(0).astype(int)
    
    # Sort columns (years) in ascending order
    pivot_table = pivot_table.sort_index(axis=1)
    
    # Sort rows by total appointments (descending)
    pivot_table['Total'] = pivot_table.sum(axis=1)
    pivot_table = pivot_table.sort_values('Total', ascending=False)
    
    # Create summary statistics
    summary_stats = {
        'total_organizations': len(pivot_table),
        'total_years': len(pivot_table.columns) - 1,  # Subtract 1 for 'Total' column
        'year_range': f"{pivot_table.columns[0]} to {pivot_table.columns[-2]}",  # Exclude 'Total'
        'total_appointments': pivot_table['Total'].sum(),
        'avg_appointments_per_org': pivot_table['Total'].mean(),
        'median_appointments_per_org': pivot_table['Total'].median()
    }
    
    return pivot_table, summary_stats

def analyze_appointment_patterns(pivot_table):
    """
    Analyze patterns in the appointment data.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with appointment counts
    """
    print("\n" + "="*60)
    print("APPOINTMENT PATTERNS ANALYSIS")
    print("="*60)
    
    # Top organizations by total appointments
    print("\nTop 10 organizations by total appointments:")
    top_orgs = pivot_table.head(10)
    for i, (org, row) in enumerate(top_orgs.iterrows(), 1):
        print(f"  {i:2d}. {org}: {row['Total']:,} appointments")
    
    # Year-by-year totals (excluding 'Total' column)
    year_columns = [col for col in pivot_table.columns if col != 'Total']
    year_totals = pivot_table[year_columns].sum()
    
    print(f"\nAppointments by year:")
    for year in sorted(year_totals.index):
        count = year_totals[year]
        print(f"  {year}: {count:,} appointments")
    
    # Identify years with highest/lowest activity
    if len(year_totals) > 0:
        max_year = year_totals.idxmax()
        min_year = year_totals.idxmin()
        print(f"\nHighest activity: {max_year} ({year_totals[max_year]:,} appointments)")
        print(f"Lowest activity: {min_year} ({year_totals[min_year]:,} appointments)")
    
    # Organizations active across multiple years
    years_active = (pivot_table[year_columns] > 0).sum(axis=1)
    print(f"\nOrganizations by years of activity:")
    activity_distribution = years_active.value_counts().sort_index()
    for num_years, count in activity_distribution.items():
        print(f"  Active in {num_years} year(s): {count} organizations")

def validate_counts(pivot_table, original_df):
    """
    Validate that the counts make sense.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table with counts
        original_df (pd.DataFrame): Original dataset
    """
    print("\nValidating counts...")
    
    # Check total count matches original data
    pivot_total = pivot_table['Total'].sum()
    original_total = len(original_df)
    
    print(f"Original dataset records: {original_total:,}")
    print(f"Pivot table total: {pivot_total:,}")
    
    if pivot_total == original_total:
        print("✓ Count validation passed - totals match")
    else:
        difference = abs(pivot_total - original_total)
        print(f"⚠ Count mismatch: difference of {difference:,} records")
        if difference / original_total > 0.01:  # More than 1% difference
            print("⚠ Warning: Significant count discrepancy detected")
    
    # Check for unreasonably high counts
    max_count = pivot_table['Total'].max()
    if max_count > 1000:
        print(f"⚠ Warning: Very high appointment count detected: {max_count:,}")
    
    # Check for organizations with appointments in every year
    year_columns = [col for col in pivot_table.columns if col != 'Total']
    if len(year_columns) > 1:
        always_active = (pivot_table[year_columns] > 0).all(axis=1).sum()
        print(f"Organizations active in all {len(year_columns)} years: {always_active}")

def print_summary_table(pivot_table, summary_stats, max_display_rows=20):
    """
    Print a formatted summary of the pivot table.
    
    Args:
        pivot_table (pd.DataFrame): Pivot table to display
        summary_stats (dict): Summary statistics
        max_display_rows (int): Maximum rows to display
    """
    print("\n" + "="*60)
    print("APPOINTMENT COUNTS SUMMARY")
    print("="*60)
    
    print(f"Total organizations: {summary_stats['total_organizations']:,}")
    print(f"Year range: {summary_stats['year_range']}")
    print(f"Total appointments: {summary_stats['total_appointments']:,}")
    print(f"Average appointments per organization: {summary_stats['avg_appointments_per_org']:.1f}")
    print(f"Median appointments per organization: {summary_stats['median_appointments_per_org']:.1f}")
    
    print(f"\nSummary table (top {min(max_display_rows, len(pivot_table))} organizations):")
    print("-" * 80)
    
    # Display the table with reasonable formatting
    display_table = pivot_table.head(max_display_rows)
    
    # Format for better readability
    pd.set_option('display.max_columns', None)
    pd.set_option('display.width', None)
    pd.set_option('display.max_colwidth', 30)
    
    print(display_table)
    
    if len(pivot_table) > max_display_rows:
        print(f"\n... and {len(pivot_table) - max_display_rows} more organizations")

def main():
    """Main function to execute the appointment counts creation process."""
    try:
        print("New Brunswick Appointments - Create Appointment Counts")
        print("="*60)
        
        # Define input and output paths
        input_path = "scripts/claudesonnet4/version1/analysis_data/step3_repeats_marked.csv"
        output_path = "scripts/claudesonnet4/version1/analysis_data/step4_employee_counts.csv"
        
        # Create output directory if it doesn't exist
        output_dir = Path(output_path).parent
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # Load the dataset
        print(f"Loading dataset from: {input_path}")
        df = load_dataset(input_path)
        
        # Validate and clean data
        df_clean = validate_data_quality(df)
        
        # Create appointment counts
        pivot_table, summary_stats = create_appointment_counts(df_clean)
        
        # Validate counts
        validate_counts(pivot_table, df_clean)
        
        # Analyze patterns
        analyze_appointment_patterns(pivot_table)
        
        # Print summary table
        print_summary_table(pivot_table, summary_stats)
        
        # Save the counts table
        print(f"\nSaving appointment counts to: {output_path}")
        try:
            pivot_table.to_csv(output_path)
            print(f"✓ Appointment counts saved successfully")
            print(f"Table dimensions: {pivot_table.shape[0]} organizations × {pivot_table.shape[1]} columns")
        except Exception as e:
            raise Exception(f"Error saving counts table: {str(e)}")
        
        print("\n✓ Script completed successfully!")
        
    except Exception as e:
        print(f"\n✗ Script failed with error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()