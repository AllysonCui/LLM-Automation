#!/usr/bin/env python3
"""
step to calculate government-wide annual reappointment proportions.

This step:
1. Loads the dataset from step 3 (with reappointment flags)
2. For each year (2013-2024), calculates the overall proportion of reappointments:
   - Count total appointments across all organizations for the year
   - Count total reappointments across all organizations for the year
   - Calculate proportion = total_reappointments / total_appointments
3. Creates a time series with columns: year, total_appointments, total_reappointments, reappointment_proportion
4. Saves the results as 'step8_annual_proportions.csv'
5. Creates a visualization showing the government-wide reappointment proportion trend
6. Prints the year-by-year proportions

Author: Claude
Date: 2025-06-11
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt

def load_dataset(input_path):
    """
    Load the dataset from step 4 with reappointment flags.
    
    Args:
        input_path (str): Path to the input CSV file
        
    Returns:
        pd.DataFrame: Loaded dataset
    """
    try:
        df = pd.read_csv(input_path)
        print(f"✓ Loaded dataset: {df.shape[0]:,} rows × {df.shape[1]} columns")
        return df
    except FileNotFoundError:
        raise FileNotFoundError(f"Could not find input file: {input_path}")
    except Exception as e:
        raise Exception(f"Error loading dataset: {str(e)}")

def validate_and_prepare_data(df):
    """
    Validate and prepare the dataset for analysis.
    
    Args:
        df (pd.DataFrame): Input dataset
        
    Returns:
        pd.DataFrame: Cleaned and validated dataset
    """
    print("\nValidating dataset...")
    
    # Check required columns
    required_cols = ['year', 'reappointed']
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        raise ValueError(f"Missing required columns: {missing_cols}")
    
    print(f"Required columns present: {required_cols}")
    
    # Report data quality
    total_rows = len(df)
    print(f"Total records: {total_rows:,}")
    
    # Handle missing years
    year_missing = df['year'].isnull().sum()
    if year_missing > 0:
        print(f"Removing {year_missing} records with missing years")
        df = df.dropna(subset=['year'])
    
    # Convert year to integer
    df.loc[:, 'year'] = pd.to_numeric(df['year'], errors='coerce')
    invalid_years = df['year'].isnull().sum()
    if invalid_years > 0:
        print(f"Removing {invalid_years} records with invalid years")
        df = df.dropna(subset=['year'])
    
    df.loc[:, 'year'] = df['year'].astype(int)
    
    # Handle reappointed column - ensure boolean
    def convert_reappointed(value):
        if pd.isna(value):
            return False
        if isinstance(value, bool):
            return value
        if isinstance(value, (int, float)):
            return bool(value)
        if isinstance(value, str):
            return value.lower() in ['true', '1', 'yes', 't', 'y']
        return False
    
    df.loc[:, 'reappointed'] = df['reappointed'].apply(convert_reappointed)
    
    # Report year range
    min_year = df['year'].min()
    max_year = df['year'].max()
    unique_years = df['year'].nunique()
    
    print(f"Year range: {min_year} to {max_year} ({unique_years} years)")
    
    # Report reappointment distribution
    reappointment_counts = df['reappointed'].value_counts()
    print(f"Reappointment distribution:")
    for value, count in reappointment_counts.items():
        pct = (count / len(df)) * 100
        print(f"  {value}: {count:,} ({pct:.1f}%)")
    
    print(f"Final dataset: {len(df):,} records")
    
    return df

def calculate_annual_proportions(df):
    """
    Calculate annual reappointment proportions for the entire government.
    
    Args:
        df (pd.DataFrame): Dataset with year and reappointment flags
        
    Returns:
        pd.DataFrame: Annual proportions with year, totals, and proportions
    """
    print("\nCalculating annual reappointment proportions...")
    
    # Group by year and calculate totals
    annual_stats = df.groupby('year').agg({
        'reappointed': ['count', 'sum']
    }).reset_index()
    
    # Flatten column names
    annual_stats.columns = ['year', 'total_appointments', 'total_reappointments']
    
    # Calculate reappointment proportion
    annual_stats['reappointment_proportion'] = (
        annual_stats['total_reappointments'] / annual_stats['total_appointments']
    )
    
    # Ensure year is integer
    annual_stats['year'] = annual_stats['year'].astype(int)
    
    # Sort by year
    annual_stats = annual_stats.sort_values('year')
    
    print(f"Calculated proportions for {len(annual_stats)} years")
    
    return annual_stats

def analyze_trends(annual_stats):
    """
    Analyze trends in the annual reappointment proportions.
    
    Args:
        annual_stats (pd.DataFrame): Annual proportions dataset
    """
    print("\n" + "="*60)
    print("ANNUAL REAPPOINTMENT PROPORTIONS ANALYSIS")
    print("="*60)
    
    if len(annual_stats) == 0:
        print("No data to analyze.")
        return
    
    # Basic statistics
    print(f"Years analyzed: {len(annual_stats)}")
    print(f"Year range: {annual_stats['year'].min()} to {annual_stats['year'].max()}")
    
    # Overall totals
    total_appointments = annual_stats['total_appointments'].sum()
    total_reappointments = annual_stats['total_reappointments'].sum()
    overall_proportion = total_reappointments / total_appointments
    
    print(f"\nOverall government statistics (2013-2024):")
    print(f"  Total appointments: {total_appointments:,}")
    print(f"  Total reappointments: {total_reappointments:,}")
    print(f"  Overall reappointment proportion: {overall_proportion:.3f} ({overall_proportion*100:.1f}%)")
    
    # Annual proportion statistics
    proportions = annual_stats['reappointment_proportion']
    print(f"\nAnnual proportion statistics:")
    print(f"  Highest: {proportions.max():.3f} ({proportions.max()*100:.1f}%)")
    print(f"  Lowest: {proportions.min():.3f} ({proportions.min()*100:.1f}%)")
    print(f"  Average: {proportions.mean():.3f} ({proportions.mean()*100:.1f}%)")
    print(f"  Median: {proportions.median():.3f} ({proportions.median()*100:.1f}%)")
    print(f"  Standard deviation: {proportions.std():.3f}")
    
    # Find extreme years
    max_year = annual_stats.loc[proportions.idxmax()]
    min_year = annual_stats.loc[proportions.idxmin()]
    
    print(f"\nExtreme years:")
    print(f"  Highest proportion: {max_year['year']} - {max_year['reappointment_proportion']:.3f} ({max_year['reappointment_proportion']*100:.1f}%)")
    print(f"    {max_year['total_reappointments']:,} reappointments out of {max_year['total_appointments']:,} total appointments")
    
    print(f"  Lowest proportion: {min_year['year']} - {min_year['reappointment_proportion']:.3f} ({min_year['reappointment_proportion']*100:.1f}%)")
    print(f"    {min_year['total_reappointments']:,} reappointments out of {min_year['total_appointments']:,} total appointments")
    
    # Trend analysis
    if len(annual_stats) > 1:
        # Calculate year-over-year changes
        annual_stats_copy = annual_stats.copy()
        annual_stats_copy['proportion_change'] = annual_stats_copy['reappointment_proportion'].diff()
        
        # Find largest increases and decreases
        largest_increase = annual_stats_copy.loc[annual_stats_copy['proportion_change'].idxmax()]
        largest_decrease = annual_stats_copy.loc[annual_stats_copy['proportion_change'].idxmin()]
        
        if not pd.isna(largest_increase['proportion_change']):
            print(f"\nYear-over-year changes:")
            print(f"  Largest increase: {largest_increase['year']} (+{largest_increase['proportion_change']:.3f} or +{largest_increase['proportion_change']*100:.1f} percentage points)")
            print(f"  Largest decrease: {largest_decrease['year']} ({largest_decrease['proportion_change']:.3f} or {largest_decrease['proportion_change']*100:.1f} percentage points)")

def print_yearly_results(annual_stats):
    """
    Print year-by-year results in a formatted table.
    
    Args:
        annual_stats (pd.DataFrame): Annual proportions dataset
    """
    print("\n" + "="*60)
    print("YEAR-BY-YEAR REAPPOINTMENT PROPORTIONS")
    print("="*60)
    
    if len(annual_stats) == 0:
        print("No results to display.")
        return
    
    print(f"{'Year':<6} {'Total Appts':<12} {'Reappointments':<14} {'Proportion':<12} {'Percentage':<10}")
    print("-" * 64)
    
    for _, row in annual_stats.iterrows():
        year = int(row['year'])
        total = int(row['total_appointments'])
        reapps = int(row['total_reappointments'])
        proportion = row['reappointment_proportion']
        percentage = proportion * 100
        
        print(f"{year:<6} {total:<12,} {reapps:<14,} {proportion:<12.3f} {percentage:<10.1f}%")

def create_visualization(annual_stats, output_dir):
    """
    Create a visualization showing the trend of reappointment proportions over time.
    
    Args:
        annual_stats (pd.DataFrame): Annual proportions dataset
        output_dir (Path): Directory to save the visualization
    """
    print("\nCreating visualization...")
    
    if len(annual_stats) == 0:
        print("No data to visualize.")
        return
    
    try:
        # Create the plot
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
        
        # Plot 1: Reappointment proportion trend
        ax1.plot(annual_stats['year'], annual_stats['reappointment_proportion'], 
                marker='o', linewidth=2, markersize=8, color='darkred', markerfacecolor='red')
        
        ax1.set_title('Government-wide Reappointment Proportion Trend\nNew Brunswick Government Appointments (2013-2024)', 
                     fontsize=14, fontweight='bold', pad=15)
        ax1.set_xlabel('Year', fontsize=12)
        ax1.set_ylabel('Reappointment Proportion', fontsize=12)
        
        # Format y-axis as percentages
        ax1.yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: f'{y:.1%}'))
        
        # Add grid
        ax1.grid(True, alpha=0.3)
        
        # Add trend line
        z = np.polyfit(annual_stats['year'], annual_stats['reappointment_proportion'], 1)
        p = np.poly1d(z)
        ax1.plot(annual_stats['year'], p(annual_stats['year']), "--", alpha=0.8, color='gray', 
                label=f'Trend line (slope: {z[0]*100:.2f}% per year)')
        ax1.legend()
        
        # Plot 2: Total appointments and reappointments
        ax2.bar(annual_stats['year'] - 0.2, annual_stats['total_appointments'], 
               width=0.4, label='Total Appointments', color='lightblue', alpha=0.7)
        ax2.bar(annual_stats['year'] + 0.2, annual_stats['total_reappointments'], 
               width=0.4, label='Reappointments', color='orange', alpha=0.7)
        
        ax2.set_title('Annual Appointment Counts', fontsize=12, fontweight='bold')
        ax2.set_xlabel('Year', fontsize=12)
        ax2.set_ylabel('Number of Appointments', fontsize=12)
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        # Format x-axis for both plots
        for ax in [ax1, ax2]:
            ax.set_xticks(annual_stats['year'])
            ax.tick_params(axis='x', rotation=45)
        
        # Adjust layout
        plt.tight_layout()
        
        # Save the plot
        plot_path = output_dir / 'step8_annual_reappointment_proportions.png'
        plt.savefig(plot_path, dpi=300, bbox_inches='tight')
        print(f"✓ Visualization saved to: {plot_path}")
        
        plt.close()
        
    except Exception as e:
        print(f"⚠ Warning: Could not create visualization: {str(e)}")
        print("Continuing without visualization...")

def main():
    """Main function to execute the annual proportions analysis."""
    try:
        print("New Brunswick Appointments - Annual Reappointment Proportions")
        print("="*60)
        
        # Define input and output paths
        input_path = "steps/claudesonnet4/version1/analysis_data/step3_repeats_marked.csv"
        output_path = "steps/claudesonnet4/version1/analysis_data/step8_annual_proportions.csv"
        
        # Create output directory if it doesn't exist
        output_dir = Path(output_path).parent
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # Load dataset
        print(f"Loading dataset from: {input_path}")
        df = load_dataset(input_path)
        
        # Validate and prepare data
        df_clean = validate_and_prepare_data(df)
        
        # Calculate annual proportions
        annual_stats = calculate_annual_proportions(df_clean)
        
        # Analyze trends
        analyze_trends(annual_stats)
        
        # Print year-by-year results
        print_yearly_results(annual_stats)
        
        # Create visualization
        create_visualization(annual_stats, output_dir)
        
        # Save results
        print(f"\nSaving annual proportions to: {output_path}")
        try:
            annual_stats.to_csv(output_path, index=False)
            print(f"✓ Annual proportions saved successfully")
            print(f"Dataset dimensions: {annual_stats.shape[0]} rows × {annual_stats.shape[1]} columns")
        except Exception as e:
            raise Exception(f"Error saving annual proportions: {str(e)}")
        
        print("\n✓ step completed successfully!")
        
    except Exception as e:
        print(f"\n✗ step failed with error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()