#!/usr/bin/env python3
"""
step to perform regression analysis on government-wide reappointment proportion trends.

This step:
1. Loads the annual government-wide proportions from step 9
2. Prepares the data for regression analysis (year as X, proportion as Y)
3. Fits a linear regression model using scipy.stats.linregress
4. Calculates comprehensive statistics including slope, intercept, R-squared, p-value, etc.
5. Performs regression diagnostics including Durbin-Watson test and outlier detection
6. Tests whether the trend coefficient is statistically significant (p < 0.05)
7. Determines if the trend is increasing or decreasing
8. Calculates annual change in percentage points and total change over 12 years
9. Saves detailed statistical results to 'step10_regression_results.txt'
10. Prints the final answer about trend direction and statistical significance

Author: Claude
Date: 2025-06-11
"""

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
from scipy import stats
from scipy.stats import linregress
import warnings

def load_annual_proportions(input_path):
    """
    Load the annual government-wide proportions from step 9.
    
    Args:
        input_path (str): Path to the annual proportions CSV file
        
    Returns:
        pd.DataFrame: Loaded annual proportions dataset
    """
    try:
        df = pd.read_csv(input_path)
        print(f"✓ Loaded annual proportions: {df.shape[0]} years × {df.shape[1]} columns")
        return df
    except FileNotFoundError:
        raise FileNotFoundError(f"Could not find annual proportions file: {input_path}")
    except Exception as e:
        raise Exception(f"Error loading annual proportions: {str(e)}")

def validate_and_prepare_data(df):
    """
    Validate and prepare the data for regression analysis.
    
    Args:
        df (pd.DataFrame): Input annual proportions dataset
        
    Returns:
        tuple: (years_array, proportions_array, df_clean)
    """
    print("\nValidating data for regression analysis...")
    
    # Check required columns
    required_cols = ['year', 'reappointment_proportion']
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        raise ValueError(f"Missing required columns: {missing_cols}")
    
    # Remove any rows with missing data
    df_clean = df.dropna(subset=required_cols).copy()
    
    if len(df_clean) == 0:
        raise ValueError("No valid data rows found for regression analysis")
    
    print(f"Valid data points: {len(df_clean)}")
    print(f"Year range: {df_clean['year'].min()} to {df_clean['year'].max()}")
    
    # Prepare arrays for regression
    years = df_clean['year'].values.astype(float)
    proportions = df_clean['reappointment_proportion'].values.astype(float)
    
    # Check for minimum data requirements
    if len(years) < 3:
        raise ValueError("Insufficient data points for meaningful regression analysis (need at least 3)")
    
    print(f"Proportion range: {proportions.min():.4f} to {proportions.max():.4f}")
    print(f"Mean proportion: {proportions.mean():.4f}")
    
    return years, proportions, df_clean

def fit_linear_regression(years, proportions):
    """
    Fit a linear regression model and calculate comprehensive statistics.
    
    Args:
        years (np.array): Year values (X variable)
        proportions (np.array): Reappointment proportions (Y variable)
        
    Returns:
        dict: Comprehensive regression statistics
    """
    print("\nFitting linear regression model...")
    
    try:
        # Fit linear regression using scipy.stats.linregress
        slope, intercept, r_value, p_value, std_err = linregress(years, proportions)
        
        # Calculate additional statistics
        n = len(years)
        r_squared = r_value ** 2
        
        # Calculate degrees of freedom
        df_regression = 1  # Number of predictors
        df_residual = n - 2  # n - (number of predictors + 1)
        df_total = n - 1
        
        # Calculate predicted values and residuals
        predicted = slope * years + intercept
        residuals = proportions - predicted
        
        # Calculate sum of squares
        ss_total = np.sum((proportions - np.mean(proportions)) ** 2)
        ss_residual = np.sum(residuals ** 2)
        ss_regression = ss_total - ss_residual
        
        # Calculate mean squared error and root mean squared error
        mse = ss_residual / df_residual
        rmse = np.sqrt(mse)
        
        # Calculate F-statistic and its p-value
        f_statistic = (ss_regression / df_regression) / (ss_residual / df_residual)
        f_p_value = 1 - stats.f.cdf(f_statistic, df_regression, df_residual)
        
        # Calculate 95% confidence intervals for slope
        t_critical = stats.t.ppf(0.975, df_residual)  # Two-tailed, 95% confidence
        slope_ci_lower = slope - t_critical * std_err
        slope_ci_upper = slope + t_critical * std_err
        
        # Calculate confidence intervals for intercept
        x_mean = np.mean(years)
        sum_x_squared = np.sum((years - x_mean) ** 2)
        intercept_std_err = std_err * np.sqrt(1/n + (x_mean**2) / sum_x_squared)
        intercept_ci_lower = intercept - t_critical * intercept_std_err
        intercept_ci_upper = intercept + t_critical * intercept_std_err
        
        # Package results
        results = {
            'slope': slope,
            'intercept': intercept,
            'r_value': r_value,
            'r_squared': r_squared,
            'p_value': p_value,
            'std_err': std_err,
            'n': n,
            'df_regression': df_regression,
            'df_residual': df_residual,
            'df_total': df_total,
            'f_statistic': f_statistic,
            'f_p_value': f_p_value,
            'mse': mse,
            'rmse': rmse,
            'ss_total': ss_total,
            'ss_regression': ss_regression,
            'ss_residual': ss_residual,
            'slope_ci_lower': slope_ci_lower,
            'slope_ci_upper': slope_ci_upper,
            'intercept_ci_lower': intercept_ci_lower,
            'intercept_ci_upper': intercept_ci_upper,
            'predicted': predicted,
            'residuals': residuals,
            't_critical': t_critical
        }
        
        print(f"✓ Regression model fitted successfully")
        print(f"  Slope: {slope:.6f}")
        print(f"  R-squared: {r_squared:.4f}")
        print(f"  P-value: {p_value:.6f}")
        
        return results
        
    except Exception as e:
        raise Exception(f"Error fitting regression model: {str(e)}")

def perform_diagnostics(years, proportions, results):
    """
    Perform regression diagnostics including Durbin-Watson test and outlier detection.
    
    Args:
        years (np.array): Year values
        proportions (np.array): Reappointment proportions
        results (dict): Regression results
        
    Returns:
        dict: Diagnostic test results
    """
    print("\nPerforming regression diagnostics...")
    
    diagnostics = {}
    
    try:
        # Durbin-Watson test for autocorrelation
        residuals = results['residuals']
        n = len(residuals)
        
        # Calculate Durbin-Watson statistic
        dw_numerator = np.sum(np.diff(residuals) ** 2)
        dw_denominator = np.sum(residuals ** 2)
        durbin_watson = dw_numerator / dw_denominator
        
        # Interpret Durbin-Watson statistic
        # Values around 2 indicate no autocorrelation
        # Values < 1.5 or > 2.5 may indicate autocorrelation
        if durbin_watson < 1.5:
            dw_interpretation = "Positive autocorrelation detected"
        elif durbin_watson > 2.5:
            dw_interpretation = "Negative autocorrelation detected"
        else:
            dw_interpretation = "No significant autocorrelation"
        
        diagnostics['durbin_watson'] = durbin_watson
        diagnostics['dw_interpretation'] = dw_interpretation
        
        # Outlier detection using standardized residuals
        residual_std = np.std(residuals)
        standardized_residuals = residuals / residual_std
        
        # Identify potential outliers (|standardized residual| > 2)
        outlier_threshold = 2.0
        outlier_mask = np.abs(standardized_residuals) > outlier_threshold
        outlier_indices = np.where(outlier_mask)[0]
        
        diagnostics['standardized_residuals'] = standardized_residuals
        diagnostics['outlier_indices'] = outlier_indices
        diagnostics['outlier_years'] = years[outlier_indices] if len(outlier_indices) > 0 else []
        diagnostics['outlier_threshold'] = outlier_threshold
        
        # Normality test of residuals (Shapiro-Wilk)
        if len(residuals) >= 3:
            shapiro_stat, shapiro_p = stats.shapiro(residuals)
            diagnostics['shapiro_stat'] = shapiro_stat
            diagnostics['shapiro_p'] = shapiro_p
            diagnostics['normality_assumption'] = "Satisfied" if shapiro_p > 0.05 else "Violated"
        else:
            diagnostics['shapiro_stat'] = None
            diagnostics['shapiro_p'] = None
            diagnostics['normality_assumption'] = "Cannot test (insufficient data)"
        
        print(f"✓ Diagnostics completed")
        print(f"  Durbin-Watson: {durbin_watson:.4f} ({dw_interpretation})")
        print(f"  Outliers detected: {len(outlier_indices)}")
        if diagnostics['shapiro_p'] is not None:
            print(f"  Normality test p-value: {diagnostics['shapiro_p']:.4f}")
        
        return diagnostics
        
    except Exception as e:
        print(f"⚠ Warning: Error in diagnostics: {str(e)}")
        return {'error': str(e)}

def calculate_trend_metrics(results, years):
    """
    Calculate trend metrics including annual change and total change.
    
    Args:
        results (dict): Regression results
        years (np.array): Year values
        
    Returns:
        dict: Trend metrics
    """
    print("\nCalculating trend metrics...")
    
    slope = results['slope']
    
    # Annual change in percentage points
    annual_change_pp = slope * 100  # Convert to percentage points
    
    # Total change over the period
    year_span = years.max() - years.min()
    total_change_pp = slope * year_span * 100
    
    # Calculate change from first to last year predictions
    first_year = years.min()
    last_year = years.max()
    first_year_prediction = slope * first_year + results['intercept']
    last_year_prediction = slope * last_year + results['intercept']
    
    predicted_change_pp = (last_year_prediction - first_year_prediction) * 100
    
    # Relative change
    if first_year_prediction != 0:
        relative_change_pct = ((last_year_prediction - first_year_prediction) / first_year_prediction) * 100
    else:
        relative_change_pct = None
    
    metrics = {
        'annual_change_pp': annual_change_pp,
        'total_change_pp': total_change_pp,
        'predicted_change_pp': predicted_change_pp,
        'relative_change_pct': relative_change_pct,
        'year_span': year_span,
        'first_year_prediction': first_year_prediction,
        'last_year_prediction': last_year_prediction
    }
    
    print(f"✓ Trend metrics calculated")
    print(f"  Annual change: {annual_change_pp:+.4f} percentage points per year")
    print(f"  Total change: {total_change_pp:+.4f} percentage points over {year_span:.0f} years")
    
    return metrics

def determine_trend_significance(results, alpha=0.05):
    """
    Determine if the trend is statistically significant and its direction.
    
    Args:
        results (dict): Regression results
        alpha (float): Significance level (default 0.05)
        
    Returns:
        dict: Trend significance and direction
    """
    slope = results['slope']
    p_value = results['p_value']
    
    # Statistical significance
    is_significant = p_value < alpha
    
    # Trend direction
    if slope > 0:
        direction = "increasing"
    elif slope < 0:
        direction = "decreasing"
    else:
        direction = "no change"
    
    # Confidence in direction
    ci_lower = results['slope_ci_lower']
    ci_upper = results['slope_ci_upper']
    
    direction_certain = not (ci_lower < 0 < ci_upper)  # CI doesn't contain zero
    
    significance = {
        'is_significant': is_significant,
        'direction': direction,
        'direction_certain': direction_certain,
        'alpha': alpha,
        'confidence_level': (1 - alpha) * 100
    }
    
    return significance

def save_results(results, diagnostics, metrics, significance, df_clean, output_path):
    """
    Save detailed statistical results to a text file.
    
    Args:
        results (dict): Regression results
        diagnostics (dict): Diagnostic test results
        metrics (dict): Trend metrics
        significance (dict): Trend significance results
        df_clean (pd.DataFrame): Clean data used for analysis
        output_path (str): Path to save results
    """
    print(f"\nSaving detailed results to: {output_path}")
    
    try:
        with open(output_path, 'w') as f:
            f.write("="*80 + "\n")
            f.write("NEW BRUNSWICK GOVERNMENT REAPPOINTMENT TREND ANALYSIS\n")
            f.write("Linear Regression Analysis Results\n")
            f.write("="*80 + "\n\n")
            
            # Data Summary
            f.write("DATA SUMMARY\n")
            f.write("-"*40 + "\n")
            f.write(f"Analysis period: {df_clean['year'].min():.0f} to {df_clean['year'].max():.0f}\n")
            f.write(f"Number of data points: {results['n']}\n")
            f.write(f"Reappointment proportion range: {df_clean['reappointment_proportion'].min():.4f} to {df_clean['reappointment_proportion'].max():.4f}\n")
            f.write(f"Mean reappointment proportion: {df_clean['reappointment_proportion'].mean():.4f}\n\n")
            
            # Year-by-year data
            f.write("Year-by-year data:\n")
            for _, row in df_clean.iterrows():
                f.write(f"  {row['year']:.0f}: {row['reappointment_proportion']:.4f} ({row['reappointment_proportion']*100:.2f}%)\n")
            f.write("\n")
            
            # Regression Results
            f.write("REGRESSION ANALYSIS RESULTS\n")
            f.write("-"*40 + "\n")
            f.write(f"Regression equation: Y = {results['slope']:.6f} * Year + {results['intercept']:.6f}\n")
            f.write(f"Where Y = reappointment proportion, Year = calendar year\n\n")
            
            f.write("Model Statistics:\n")
            f.write(f"  Slope (β₁): {results['slope']:.6f}\n")
            f.write(f"  Intercept (β₀): {results['intercept']:.6f}\n")
            f.write(f"  Correlation coefficient (r): {results['r_value']:.4f}\n")
            f.write(f"  R-squared (R²): {results['r_squared']:.4f}\n")
            f.write(f"  Standard error of slope: {results['std_err']:.6f}\n")
            f.write(f"  F-statistic: {results['f_statistic']:.4f}\n")
            f.write(f"  F-test p-value: {results['f_p_value']:.6f}\n")
            f.write(f"  Root Mean Square Error (RMSE): {results['rmse']:.6f}\n\n")
            
            # Confidence Intervals
            f.write("95% Confidence Intervals:\n")
            f.write(f"  Slope: [{results['slope_ci_lower']:.6f}, {results['slope_ci_upper']:.6f}]\n")
            f.write(f"  Intercept: [{results['intercept_ci_lower']:.6f}, {results['intercept_ci_upper']:.6f}]\n\n")
            
            # Statistical Significance
            f.write("STATISTICAL SIGNIFICANCE TEST\n")
            f.write("-"*40 + "\n")
            f.write(f"Null hypothesis (H₀): No linear trend (slope = 0)\n")
            f.write(f"Alternative hypothesis (H₁): Linear trend exists (slope ≠ 0)\n")
            f.write(f"Significance level (α): {significance['alpha']}\n")
            f.write(f"P-value: {results['p_value']:.6f}\n")
            f.write(f"Result: {'REJECT H₀' if significance['is_significant'] else 'FAIL TO REJECT H₀'}\n")
            f.write(f"Conclusion: Trend is {'STATISTICALLY SIGNIFICANT' if significance['is_significant'] else 'NOT STATISTICALLY SIGNIFICANT'}\n\n")
            
            # Trend Direction and Magnitude
            f.write("TREND DIRECTION AND MAGNITUDE\n")
            f.write("-"*40 + "\n")
            f.write(f"Trend direction: {significance['direction'].upper()}\n")
            f.write(f"Annual change: {metrics['annual_change_pp']:+.4f} percentage points per year\n")
            f.write(f"Total change over {metrics['year_span']:.0f} years: {metrics['total_change_pp']:+.4f} percentage points\n")
            if metrics['relative_change_pct'] is not None:
                f.write(f"Relative change: {metrics['relative_change_pct']:+.2f}%\n")
            f.write(f"\nPredicted values:\n")
            f.write(f"  {df_clean['year'].min():.0f}: {metrics['first_year_prediction']:.4f} ({metrics['first_year_prediction']*100:.2f}%)\n")
            f.write(f"  {df_clean['year'].max():.0f}: {metrics['last_year_prediction']:.4f} ({metrics['last_year_prediction']*100:.2f}%)\n\n")
            
            # Regression Diagnostics
            f.write("REGRESSION DIAGNOSTICS\n")
            f.write("-"*40 + "\n")
            if 'error' not in diagnostics:
                f.write(f"Durbin-Watson test: {diagnostics['durbin_watson']:.4f}\n")
                f.write(f"  Interpretation: {diagnostics['dw_interpretation']}\n")
                f.write(f"Outlier detection (threshold = {diagnostics['outlier_threshold']}):\n")
                if len(diagnostics['outlier_indices']) > 0:
                    f.write(f"  Outlier years: {[int(year) for year in diagnostics['outlier_years']]}\n")
                else:
                    f.write(f"  No outliers detected\n")
                if diagnostics['shapiro_p'] is not None:
                    f.write(f"Shapiro-Wilk normality test: p = {diagnostics['shapiro_p']:.4f}\n")
                    f.write(f"  Normality assumption: {diagnostics['normality_assumption']}\n")
            else:
                f.write(f"Diagnostic tests failed: {diagnostics['error']}\n")
            f.write("\n")
            
            # Final Conclusion
            f.write("FINAL CONCLUSION\n")
            f.write("-"*40 + "\n")
            if significance['is_significant']:
                f.write(f"The government-wide reappointment proportion shows a STATISTICALLY SIGNIFICANT ")
                f.write(f"{significance['direction'].upper()} trend over the 12-year period (2013-2024).\n\n")
                f.write(f"Key findings:\n")
                f.write(f"• The reappointment proportion is {significance['direction']} by ")
                f.write(f"{abs(metrics['annual_change_pp']):.4f} percentage points per year on average\n")
                f.write(f"• Over the entire {metrics['year_span']:.0f}-year period, the proportion ")
                f.write(f"{'increased' if metrics['total_change_pp'] > 0 else 'decreased'} by ")
                f.write(f"{abs(metrics['total_change_pp']):.4f} percentage points\n")
                f.write(f"• This trend is statistically significant (p = {results['p_value']:.6f} < 0.05)\n")
                f.write(f"• The model explains {results['r_squared']*100:.1f}% of the variance in reappointment proportions\n")
            else:
                f.write(f"The government-wide reappointment proportion shows NO STATISTICALLY SIGNIFICANT ")
                f.write(f"linear trend over the 12-year period (2013-2024).\n\n")
                f.write(f"Key findings:\n")
                f.write(f"• While the data suggests a {significance['direction']} pattern, ")
                f.write(f"it is not statistically significant (p = {results['p_value']:.6f} ≥ 0.05)\n")
                f.write(f"• The apparent annual change of {metrics['annual_change_pp']:+.4f} percentage points ")
                f.write(f"per year could be due to random variation\n")
                f.write(f"• Cannot conclude that there is a systematic trend in reappointment proportions\n")
            
            f.write("\n" + "="*80 + "\n")
            f.write(f"Analysis completed on: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write("="*80 + "\n")
        
        print("✓ Results saved successfully")
        
    except Exception as e:
        raise Exception(f"Error saving results: {str(e)}")

def print_final_answer(significance, metrics, results):
    """
    Print the final answer about trend direction and statistical significance.
    
    Args:
        significance (dict): Trend significance results
        metrics (dict): Trend metrics
        results (dict): Regression results
    """
    print("\n" + "="*80)
    print("FINAL ANSWER")
    print("="*80)
    
    if significance['is_significant']:
        print(f"The government-wide reappointment proportion trend is {significance['direction'].upper()} ")
        print(f"over the 12-year period and IS STATISTICALLY SIGNIFICANT.")
        print(f"\nKey details:")
        print(f"• Trend direction: {significance['direction'].upper()}")
        print(f"• Annual change: {metrics['annual_change_pp']:+.4f} percentage points per year")
        print(f"• Total change: {metrics['total_change_pp']:+.4f} percentage points over {metrics['year_span']:.0f} years")
        print(f"• Statistical significance: p = {results['p_value']:.6f} < 0.05 ✓")
        print(f"• R-squared: {results['r_squared']:.4f} ({results['r_squared']*100:.1f}% of variance explained)")
    else:
        print(f"The government-wide reappointment proportion trend is NOT STATISTICALLY SIGNIFICANT ")
        print(f"over the 12-year period.")
        print(f"\nKey details:")
        print(f"• Apparent direction: {significance['direction']}")
        print(f"• Annual change: {metrics['annual_change_pp']:+.4f} percentage points per year (not significant)")
        print(f"• Statistical significance: p = {results['p_value']:.6f} ≥ 0.05 ✗")
        print(f"• Conclusion: Cannot confirm a systematic trend")
    
    print("="*80)

def main():
    """Main function to execute the regression analysis."""
    try:
        print("New Brunswick Appointments - Regression Analysis of Reappointment Trends")
        print("="*80)
        
        # Define input and output paths
        input_path = "steps/claudesonnet4/version1/analysis_data/step8_annual_proportions.csv"
        output_path = "steps/claudesonnet4/version1/analysis_data/step9_regression_results.txt"
        
        # Create output directory if it doesn't exist
        output_dir = Path(output_path).parent
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # Load annual proportions
        print(f"Loading annual proportions from: {input_path}")
        df = load_annual_proportions(input_path)
        
        # Validate and prepare data
        years, proportions, df_clean = validate_and_prepare_data(df)
        
        # Fit linear regression
        results = fit_linear_regression(years, proportions)
        
        # Perform diagnostics
        diagnostics = perform_diagnostics(years, proportions, results)
        
        # Calculate trend metrics
        metrics = calculate_trend_metrics(results, years)
        
        # Determine trend significance
        significance = determine_trend_significance(results)
        
        # Save detailed results
        save_results(results, diagnostics, metrics, significance, df_clean, output_path)
        
        # Print final answer
        print_final_answer(significance, metrics, results)
        
        print(f"\n✓ Regression analysis completed successfully!")
        print(f"Detailed results saved to: {output_path}")
        
    except Exception as e:
        print(f"\n✗ Analysis failed with error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()