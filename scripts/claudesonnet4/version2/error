jiaxincui@Jiaxins-MacBook-Pro-2 LLM-Automation % /usr/local/bin/python3.10 /Users/jiaxincui/
VSCode/LLM-Automation/scripts/claudesonnet4/version2/script7
=== Step 7: Finding Organization with Maximum Reappointment Rate Each Year ===
Reading from: scripts/claudesonnet4/version2/analysis_data/step6_reappointment_rates.csv
Saving to: scripts/claudesonnet4/version2/analysis_data/step7_yearly_max_rates.csv
Loading reappointment rates dataset...
Loaded 203 org-year reappointment rate records
Year range: 2013-2024
Organizations: 43 unique

=== Data Quality Assessment ===
Total org-year records: 203
Records with appointments: 203
Records with reappointments: 88
Active records (with appointments): 203

=== Analysis with Minimum 1 Appointments ===
Qualified records: 203
Organizations meeting threshold: 43
Years with qualified organizations: 12

Yearly maximum reappointment rates (min 1 appointments):
Year | Organization | Rate | Appointments (Reapp/Total)
-----|--------------|------|---------------------------
2013 | Justice and Attorney General                       |   6.7% | 2/30
2014 | Agriculture, Aquaculture and Fisheries             |  26.9% | 7/26
2015 | Office of the Premier                              |  60.0% | 3/5
2016 | Energy and Resource Development                    |  75.0% | 3/4
2017 | Office of the Premier                              |  63.6% | 14/22
2018 | Education and Early Childhood Development          | 100.0% | 1/1
2019 | Education and Early Childhood Development          | 100.0% | 1/1
2020 | Office of the Premier                              | 100.0% | 1/1
2021 | Agriculture, Aquaculture and Fisheries             |  53.9% | 14/26
2022 | Health                                             |  35.0% | 7/20
2023 | Office of the Premier                              |  66.7% | 2/3
2024 | Agriculture, Aquaculture and Fisheries             | 100.0% | 11/11

=== Analysis with Minimum 5 Appointments ===
Qualified records: 151
Organizations meeting threshold: 34
Years with qualified organizations: 12

Yearly maximum reappointment rates (min 5 appointments):
Year | Organization | Rate | Appointments (Reapp/Total)
-----|--------------|------|---------------------------
2013 | Justice and Attorney General                       |   6.7% | 2/30
2014 | Agriculture, Aquaculture and Fisheries             |  26.9% | 7/26
2015 | Office of the Premier                              |  60.0% | 3/5
2016 | Health                                             |  10.3% | 4/39
2017 | Office of the Premier                              |  63.6% | 14/22
2018 | Health                                             |  45.5% | 10/22
2019 | Office of the Premier                              |  41.7% | 5/12
2020 | Tourism, Heritage and Culture                      |  60.0% | 3/5
2021 | Agriculture, Aquaculture and Fisheries             |  53.9% | 14/26
2022 | Health                                             |  35.0% | 7/20
2023 | Finance and Treasury Board                         |  46.7% | 7/15
2024 | Agriculture, Aquaculture and Fisheries             | 100.0% | 11/11

=== Analysis with Minimum 10 Appointments ===
Qualified records: 113
Organizations meeting threshold: 26
Years with qualified organizations: 12

Yearly maximum reappointment rates (min 10 appointments):
Year | Organization | Rate | Appointments (Reapp/Total)
-----|--------------|------|---------------------------
2013 | Justice and Attorney General                       |   6.7% | 2/30
2014 | Agriculture, Aquaculture and Fisheries             |  26.9% | 7/26
2015 | Justice                                            |  24.6% | 15/61
2016 | Health                                             |  10.3% | 4/39
2017 | Office of the Premier                              |  63.6% | 14/22
2018 | Health                                             |  45.5% | 10/22
2019 | Office of the Premier                              |  41.7% | 5/12
2020 | Public Safety                                      |  36.0% | 9/25
2021 | Agriculture, Aquaculture and Fisheries             |  53.9% | 14/26
2022 | Health                                             |  35.0% | 7/20
2023 | Finance and Treasury Board                         |  46.7% | 7/15
2024 | Agriculture, Aquaculture and Fisheries             | 100.0% | 11/11

=== Analysis with Minimum 20 Appointments ===
Qualified records: 60
Organizations meeting threshold: 13
Years with qualified organizations: 12

Yearly maximum reappointment rates (min 20 appointments):
Year | Organization | Rate | Appointments (Reapp/Total)
-----|--------------|------|---------------------------
2013 | Justice and Attorney General                       |   6.7% | 2/30
2014 | Agriculture, Aquaculture and Fisheries             |  26.9% | 7/26
2015 | Justice                                            |  24.6% | 15/61
2016 | Health                                             |  10.3% | 4/39
2017 | Office of the Premier                              |  63.6% | 14/22
2018 | Health                                             |  45.5% | 10/22
2019 | Health                                             |  25.0% | 8/32
2020 | Public Safety                                      |  36.0% | 9/25
2021 | Agriculture, Aquaculture and Fisheries             |  53.9% | 14/26
2022 | Health                                             |  35.0% | 7/20
2023 | Executive Council Office                           |  32.8% | 19/58
2024 | Health                                             |  45.5% | 10/22

=== Detailed Analysis (Minimum 10 Appointments) ===

=== Organizations Leading in Reappointment Rates ===
Organizations that led in reappointment rates most frequently:
 1. Agriculture, Aquaculture and Fisheries: 3 year(s) - [2014, 2021, 2024]
 2. Health: 3 year(s) - [2016, 2018, 2022]
 3. Office of the Premier: 2 year(s) - [2017, 2019]
 4. Justice and Attorney General: 1 year(s) - [2013]
 5. Justice: 1 year(s) - [2015]
 6. Public Safety: 1 year(s) - [2020]
 7. Finance and Treasury Board: 1 year(s) - [2023]

=== Reappointment Rate Trends Over Time ===
Year-over-year changes in maximum reappointment rates:
Year | Max Rate | YoY Change | Leading Organization
-----|----------|------------|---------------------
2013 |     6.7% |        N/A | Justice and Attorney General
2014 |    26.9% |     +20.2% | Agriculture, Aquaculture and Fisheries
2015 |    24.6% |      -2.3% | Justice
2016 |    10.3% |     -14.3% | Health
2017 |    63.6% |     +53.4% | Office of the Premier
2018 |    45.5% |     -18.2% | Health
2019 |    41.7% |      -3.8% | Office of the Premier
2020 |    36.0% |      -5.7% | Public Safety
2021 |    53.9% |     +17.9% | Agriculture, Aquaculture and Fisheries
2022 |    35.0% |     -18.9% | Health
2023 |    46.7% |     +11.7% | Finance and Treasury Board
2024 |   100.0% |     +53.3% | Agriculture, Aquaculture and Fisheries

=== Statistical Summary of Maximum Rates ===
Maximum reappointment rates across all years:
  - Mean: 40.89%
  - Median: 38.84%
  - Min: 6.67%
  - Max: 100.00%
  - Standard deviation: 24.98%

=== Overall Trend Analysis ===
Early years average (first 3): 19.39%
Recent years average (last 3): 60.56%
Overall trend: +41.16%
Trend direction: increasing

=== Organizations with Highest Peak Reappointment Rates ===
CRITICAL ERROR in Step 7: attempt to get argmax of an empty sequence
Traceback (most recent call last):
  File "/Users/jiaxincui/VSCode/LLM-Automation/scripts/claudesonnet4/version2/script7", line 267, in <module>
    yearly_max_data = find_yearly_max_reappointment_rates()
  File "/Users/jiaxincui/VSCode/LLM-Automation/scripts/claudesonnet4/version2/script7", line 192, in find_yearly_max_reappointment_rates
    org_peak_rates = main_analysis_df.groupby('org').agg({
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/groupby/generic.py", line 895, in aggregate
    result = op.agg()
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/apply.py", line 172, in agg
    return self.agg_dict_like()
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/apply.py", line 504, in agg_dict_like
    results = {
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/apply.py", line 505, in <dictcomp>
    key: obj._gotitem(key, ndim=1).agg(how) for key, how in arg.items()
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/groupby/generic.py", line 297, in aggregate
    return self._python_agg_general(func, *args, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/groupby/groupby.py", line 1682, in _python_agg_general
    result = self.grouper.agg_series(obj, f)
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/groupby/ops.py", line 1081, in agg_series
    result = self._aggregate_series_pure_python(obj, func)
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/groupby/ops.py", line 1104, in _aggregate_series_pure_python
    res = func(group)
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/groupby/groupby.py", line 1668, in <lambda>
    f = lambda x: func(x, *args, **kwargs)
  File "/Users/jiaxincui/VSCode/LLM-Automation/scripts/claudesonnet4/version2/script7", line 194, in <lambda>
    'year': lambda x: main_analysis_df[main_analysis_df['org'] == x.iloc[0]]['year'][main_analysis_df[main_analysis_df['org'] == x.iloc[0]]['reappointment_rate'].idxmax()],
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/series.py", line 2564, in idxmax
    i = self.argmax(axis, skipna, *args, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/base.py", line 655, in argmax
    return nanops.nanargmax(  # type: ignore[return-value]
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/nanops.py", line 93, in _f
    return f(*args, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/nanops.py", line 1104, in nanargmax
    result = values.argmax(axis)  # type: ignore[var-annotated]
ValueError: attempt to get argmax of an empty sequence








import pandas as pd
import numpy as np
from pathlib import Path

def find_yearly_max_reappointment_rates():
    """
    Step 7: Find the organization with the maximum reappointment proportion for each year
    
    This function:
    1. Reads the reappointment rates dataset from Step 6
    2. For each year, identifies the organization with the highest reappointment rate
    3. Applies minimum appointment thresholds to ensure statistical significance
    4. Analyzes patterns in which organizations lead each year
    5. Tracks changes in leadership over time
    6. Saves the yearly maximum rates dataset for trend analysis
    """
    
    # Define paths
    input_dir = Path("scripts/claudesonnet4/version2/analysis_data")
    input_file = input_dir / "step6_reappointment_rates.csv"
    output_file = input_dir / "step7_yearly_max_rates.csv"
    
    print("=== Step 7: Finding Organization with Maximum Reappointment Rate Each Year ===")
    print(f"Reading from: {input_file}")
    print(f"Saving to: {output_file}")
    
    # Check if input file exists
    if not input_file.exists():
        raise FileNotFoundError(f"Input file not found: {input_file}. Please run Step 6 first.")
    
    # Read the reappointment rates dataset
    print("Loading reappointment rates dataset...")
    rates_df = pd.read_csv(input_file)
    original_rows = len(rates_df)
    print(f"Loaded {original_rows:,} org-year reappointment rate records")
    
    # Validate required columns
    required_columns = ['org', 'year', 'total_appointments', 'reappointments', 'reappointment_rate']
    missing_columns = [col for col in required_columns if col not in rates_df.columns]
    if missing_columns:
        raise ValueError(f"Missing required columns: {missing_columns}")
    
    print(f"Year range: {rates_df['year'].min()}-{rates_df['year'].max()}")
    print(f"Organizations: {rates_df['org'].nunique()} unique")
    
    # Data quality assessment
    print(f"\n=== Data Quality Assessment ===")
    total_records = len(rates_df)
    records_with_appointments = (rates_df['total_appointments'] > 0).sum()
    records_with_reappointments = (rates_df['reappointments'] > 0).sum()
    
    print(f"Total org-year records: {total_records:,}")
    print(f"Records with appointments: {records_with_appointments:,}")
    print(f"Records with reappointments: {records_with_reappointments:,}")
    
    # Filter for records with appointments (can't have reappointment rate without appointments)
    active_records = rates_df[rates_df['total_appointments'] > 0].copy()
    print(f"Active records (with appointments): {len(active_records):,}")
    
    # Define minimum appointment thresholds for statistical significance
    min_thresholds = [1, 5, 10, 20]
    
    yearly_max_results = {}
    
    # Analyze with different minimum thresholds
    for min_appointments in min_thresholds:
        print(f"\n=== Analysis with Minimum {min_appointments} Appointments ===")
        
        # Filter for records meeting the minimum threshold
        qualified_records = active_records[active_records['total_appointments'] >= min_appointments].copy()
        
        years_covered = sorted(qualified_records['year'].unique())
        orgs_qualified = qualified_records['org'].nunique()
        
        print(f"Qualified records: {len(qualified_records):,}")
        print(f"Organizations meeting threshold: {orgs_qualified}")
        print(f"Years with qualified organizations: {len(years_covered)}")
        
        if len(qualified_records) == 0:
            print(f"No organizations meet minimum threshold of {min_appointments} appointments")
            continue
        
        # Find organization with maximum rate for each year
        yearly_max = []
        
        for year in years_covered:
            year_data = qualified_records[qualified_records['year'] == year]
            
            if len(year_data) == 0:
                continue
            
            # Find the organization with the highest reappointment rate
            max_rate_org = year_data.loc[year_data['reappointment_rate'].idxmax()]
            
            yearly_max.append({
                'year': int(year),
                'org': max_rate_org['org'],
                'reappointment_rate': max_rate_org['reappointment_rate'],
                'total_appointments': max_rate_org['total_appointments'],
                'reappointments': max_rate_org['reappointments'],
                'new_appointments': max_rate_org['total_appointments'] - max_rate_org['reappointments'],
                'min_threshold': min_appointments
            })
        
        yearly_max_df = pd.DataFrame(yearly_max)
        yearly_max_results[min_appointments] = yearly_max_df
        
        if len(yearly_max_df) > 0:
            print(f"\nYearly maximum reappointment rates (min {min_appointments} appointments):")
            print(f"Year | Organization | Rate | Appointments (Reapp/Total)")
            print(f"-----|--------------|------|---------------------------")
            
            for _, row in yearly_max_df.iterrows():
                org_short = row['org'][:50] + "..." if len(row['org']) > 50 else row['org']
                print(f"{row['year']} | {org_short:<50} | {row['reappointment_rate']:5.1f}% | {row['reappointments']}/{row['total_appointments']}")
    
    # Use the most appropriate threshold (10 appointments) for detailed analysis
    main_threshold = 10
    if main_threshold in yearly_max_results and len(yearly_max_results[main_threshold]) > 0:
        main_analysis_df = yearly_max_results[main_threshold].copy()
        print(f"\n=== Detailed Analysis (Minimum {main_threshold} Appointments) ===")
    else:
        # Fall back to lower threshold if needed
        available_thresholds = [t for t in min_thresholds if t in yearly_max_results and len(yearly_max_results[t]) > 0]
        if available_thresholds:
            main_threshold = min(available_thresholds)
            main_analysis_df = yearly_max_results[main_threshold].copy()
            print(f"\n=== Detailed Analysis (Minimum {main_threshold} Appointments - Fallback) ===")
        else:
            print(f"\n=== No Valid Data for Detailed Analysis ===")
            main_analysis_df = pd.DataFrame()
    
    if len(main_analysis_df) > 0:
        # Organization frequency analysis
        print(f"\n=== Organizations Leading in Reappointment Rates ===")
        org_frequency = main_analysis_df['org'].value_counts()
        
        print(f"Organizations that led in reappointment rates most frequently:")
        for i, (org, count) in enumerate(org_frequency.head(10).items(), 1):
            years_led = main_analysis_df[main_analysis_df['org'] == org]['year'].tolist()
            print(f"{i:2d}. {org}: {count} year(s) - {years_led}")
        
        # Rate trend analysis
        print(f"\n=== Reappointment Rate Trends Over Time ===")
        
        # Calculate year-over-year changes in maximum rates
        main_analysis_df_sorted = main_analysis_df.sort_values('year')
        main_analysis_df_sorted['prev_rate'] = main_analysis_df_sorted['reappointment_rate'].shift(1)
        main_analysis_df_sorted['rate_change'] = main_analysis_df_sorted['reappointment_rate'] - main_analysis_df_sorted['prev_rate']
        
        print(f"Year-over-year changes in maximum reappointment rates:")
        print(f"Year | Max Rate | YoY Change | Leading Organization")
        print(f"-----|----------|------------|---------------------")
        
        for _, row in main_analysis_df_sorted.iterrows():
            rate_change = f"{row['rate_change']:+.1f}%" if pd.notna(row['rate_change']) else "N/A"
            org_short = row['org'][:40] + "..." if len(row['org']) > 40 else row['org']
            print(f"{row['year']} | {row['reappointment_rate']:7.1f}% | {rate_change:>10} | {org_short}")
        
        # Statistical summary of maximum rates
        print(f"\n=== Statistical Summary of Maximum Rates ===")
        max_rates = main_analysis_df['reappointment_rate']
        print(f"Maximum reappointment rates across all years:")
        print(f"  - Mean: {max_rates.mean():.2f}%")
        print(f"  - Median: {max_rates.median():.2f}%")
        print(f"  - Min: {max_rates.min():.2f}%")
        print(f"  - Max: {max_rates.max():.2f}%")
        print(f"  - Standard deviation: {max_rates.std():.2f}%")
        
        # Trend direction analysis
        if len(main_analysis_df_sorted) >= 3:
            early_years = main_analysis_df_sorted.head(3)['reappointment_rate'].mean()
            recent_years = main_analysis_df_sorted.tail(3)['reappointment_rate'].mean()
            overall_trend = recent_years - early_years
            
            print(f"\n=== Overall Trend Analysis ===")
            print(f"Early years average (first 3): {early_years:.2f}%")
            print(f"Recent years average (last 3): {recent_years:.2f}%")
            print(f"Overall trend: {overall_trend:+.2f}%")
            
            if overall_trend > 2:
                trend_direction = "increasing"
            elif overall_trend < -2:
                trend_direction = "decreasing"
            else:
                trend_direction = "stable"
            
            print(f"Trend direction: {trend_direction}")
        
        # Organizations with highest peak rates
        print(f"\n=== Organizations with Highest Peak Reappointment Rates ===")
        org_peak_rates = main_analysis_df.groupby('org').agg({
            'reappointment_rate': 'max',
            'year': lambda x: main_analysis_df[main_analysis_df['org'] == x.iloc[0]]['year'][main_analysis_df[main_analysis_df['org'] == x.iloc[0]]['reappointment_rate'].idxmax()],
            'total_appointments': lambda x: main_analysis_df[main_analysis_df['org'] == x.iloc[0]]['total_appointments'][main_analysis_df[main_analysis_df['org'] == x.iloc[0]]['reappointment_rate'].idxmax()],
            'reappointments': lambda x: main_analysis_df[main_analysis_df['org'] == x.iloc[0]]['reappointments'][main_analysis_df[main_analysis_df['org'] == x.iloc[0]]['reappointment_rate'].idxmax()]
        }).reset_index()
        
        org_peak_rates.columns = ['org', 'peak_rate', 'peak_year', 'peak_appointments', 'peak_reappointments']
        org_peak_rates_sorted = org_peak_rates.sort_values('peak_rate', ascending=False)
        
        print(f"Top 10 organizations by peak reappointment rate:")
        for i, (_, row) in enumerate(org_peak_rates_sorted.head(10).iterrows(), 1):
            print(f"{i:2d}. {row['org']}")
            print(f"    Peak: {row['peak_rate']:.1f}% in {int(row['peak_year'])} ({row['peak_reappointments']}/{row['peak_appointments']})")
    
    # Prepare output dataset
    print(f"\n=== Preparing Output Dataset ===")
    
    # Use the most comprehensive threshold that has data
    if main_threshold in yearly_max_results and len(yearly_max_results[main_threshold]) > 0:
        output_df = yearly_max_results[main_threshold].copy()
        threshold_used = main_threshold
    else:
        # Use the best available threshold
        available_thresholds = [t for t in min_thresholds if t in yearly_max_results and len(yearly_max_results[t]) > 0]
        if available_thresholds:
            threshold_used = min(available_thresholds)
            output_df = yearly_max_results[threshold_used].copy()
        else:
            # Create empty dataset if no valid data
            output_df = pd.DataFrame(columns=['year', 'org', 'reappointment_rate', 'total_appointments', 'reappointments', 'new_appointments', 'min_threshold'])
            threshold_used = 0
    
    print(f"Output dataset: {len(output_df):,} yearly maximum records")
    print(f"Minimum threshold used: {threshold_used} appointments")
    
    # Sample of the output data
    if len(output_df) > 0:
        print(f"\n=== Sample Yearly Maximum Rates ===")
        sample_data = output_df.head(10)
        for _, row in sample_data.iterrows():
            print(f"{row['year']}: {row['org']} - {row['reappointment_rate']:.1f}% ({row['reappointments']}/{row['total_appointments']})")
    
    # Save the yearly maximum rates dataset
    print(f"\n=== Saving Yearly Maximum Rates Dataset ===")
    output_df.to_csv(output_file, index=False)
    print(f"Yearly maximum rates dataset saved to: {output_file}")
    
    # Validation check
    validation_df = pd.read_csv(output_file)
    if len(validation_df) == len(output_df):
        print(f"✓ Validation successful: {len(validation_df):,} yearly maximum records saved correctly")
        
        if len(validation_df) > 0:
            # Verify key statistics
            validation_years = sorted(validation_df['year'].unique())
            validation_max_rate = validation_df['reappointment_rate'].max()
            validation_orgs = validation_df['org'].nunique()
            
            print(f"✓ Years covered: {validation_years[0]}-{validation_years[-1]} ({len(validation_years)} years)")
            print(f"✓ Highest rate found: {validation_max_rate:.1f}%")
            print(f"✓ Organizations represented: {validation_orgs}")
    else:
        print(f"⚠ Validation warning: Expected {len(output_df):,}, found {len(validation_df):,}")
    
    print(f"\n=== Step 7 Complete ===")
    print(f"Yearly maximum reappointment rates identified successfully")
    print(f"Dataset contains {len(output_df):,} yearly records")
    print(f"Ready for Step 8: Annual proportion analysis")
    
    return output_df

# Execute the function
if __name__ == "__main__":
    try:
        yearly_max_data = find_yearly_max_reappointment_rates()
        print(f"\nStep 7 successful! Identified yearly maximum rates for {len(yearly_max_data):,} years.")
        print("Ready for annual proportion analysis.")
    except Exception as e:
        print(f"CRITICAL ERROR in Step 7: {str(e)}")
        raise