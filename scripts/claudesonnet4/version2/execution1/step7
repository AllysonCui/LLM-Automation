#!/usr/bin/env python3
"""
Step 7: Identify Yearly Maximum Reappointment Rates
New Brunswick Government Appointments Analysis

This script identifies the organization with the highest reappointment rate 
for each year and creates a visualization of the trends.

Research Question: Which government branch in New Brunswick most frequently 
reappoints past appointees, and is this trend increasing or declining over the past 12 years?
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import sys
import warnings
warnings.filterwarnings('ignore')

# Set up plotting style
plt.style.use('default')
sns.set_palette("husl")

def create_output_directories():
    """Create necessary output directories if they don't exist."""
    output_dir = Path("scripts/claudesonnet4/version2/execution1/analysis_data")
    output_dir.mkdir(parents=True, exist_ok=True)
    print(f"✓ Created output directory: {output_dir}")
    return output_dir

def load_reappointment_rates():
    """
    Load the reappointment rates from step 6.
    
    Returns:
        pd.DataFrame: Reappointment rates by org and year
    """
    input_paths = [
        Path("scripts/claudesonnet4/version2/execution1/analysis_data/step6_reappointment_rates.csv"),
        Path("scripts/gpt4o/version2/execution4/analysis_data/step6_reappointment_rates.csv"),
        Path("step6_reappointment_rates.csv")
    ]
    
    for input_path in input_paths:
        if input_path.exists():
            try:
                df = pd.read_csv(input_path, encoding='utf-8')
                print(f"✓ Loaded reappointment rates from: {input_path}")
                print(f"   Dataset shape: {df.shape[0]:,} rows, {df.shape[1]} columns")
                return df
            except Exception as e:
                print(f"❌ Error loading {input_path}: {e}")
                continue
    
    print("❌ Error: Could not find step6_reappointment_rates.csv")
    print("   Please ensure Step 6 has been completed successfully")
    sys.exit(1)

def validate_reappointment_rates(rates_df):
    """
    Validate the reappointment rates dataset.
    
    Args:
        rates_df (pd.DataFrame): Reappointment rates dataset
    
    Returns:
        bool: True if validation passes
    """
    print(f"\n🔍 Validating reappointment rates dataset...")
    
    # Check required columns
    required_columns = ['org', 'year', 'appointment_count', 'reappointment_count', 'reappointment_rate']
    missing_columns = [col for col in required_columns if col not in rates_df.columns]
    
    if missing_columns:
        print(f"❌ Error: Missing required columns: {missing_columns}")
        print(f"   Available columns: {list(rates_df.columns)}")
        return False
    
    print(f"✓ All required columns present")
    
    # Check data types
    if not pd.api.types.is_numeric_dtype(rates_df['year']):
        print(f"❌ Error: year column is not numeric")
        return False
    if not pd.api.types.is_numeric_dtype(rates_df['reappointment_rate']):
        print(f"❌ Error: reappointment_rate column is not numeric")
        return False
    
    print(f"✓ Data types validated")
    
    # Check for null values in key columns
    null_counts = {
        'org': rates_df['org'].isna().sum(),
        'year': rates_df['year'].isna().sum(),
        'reappointment_rate': rates_df['reappointment_rate'].isna().sum()
    }
    
    for col, null_count in null_counts.items():
        if null_count > 0:
            print(f"⚠️  Warning: {null_count:,} null values in {col}")
    
    # Summary statistics
    print(f"\n📊 Dataset Summary:")
    print(f"   Total org-year pairs: {len(rates_df):,}")
    print(f"   Organizations: {rates_df['org'].nunique():,}")
    print(f"   Years: {sorted(rates_df['year'].unique())}")
    print(f"   Rate range: {rates_df['reappointment_rate'].min():.2f}% - {rates_df['reappointment_rate'].max():.2f}%")
    
    return True

def apply_minimum_thresholds(rates_df, min_appointments=5):
    """
    Apply minimum thresholds to filter for meaningful reappointment rates.
    
    Args:
        rates_df (pd.DataFrame): Reappointment rates dataset
        min_appointments (int): Minimum number of appointments required
    
    Returns:
        pd.DataFrame: Filtered dataset
    """
    print(f"\n🔧 Applying minimum thresholds for meaningful analysis...")
    print(f"   Minimum appointments required: {min_appointments}")
    
    original_count = len(rates_df)
    
    # Filter for organizations with minimum appointment count
    filtered_df = rates_df[rates_df['appointment_count'] >= min_appointments].copy()
    
    filtered_count = len(filtered_df)
    removed_count = original_count - filtered_count
    
    print(f"✓ Applied thresholds")
    print(f"   Original org-year pairs: {original_count:,}")
    print(f"   After filtering: {filtered_count:,}")
    print(f"   Removed: {removed_count:,} pairs ({(removed_count/original_count)*100:.1f}%)")
    
    if filtered_count == 0:
        print("❌ Error: No org-year pairs remain after filtering")
        return rates_df  # Return original if filtering is too restrictive
    
    # Show impact on organizations and years
    print(f"   Organizations remaining: {filtered_df['org'].nunique():,}")
    print(f"   Years remaining: {sorted(filtered_df['year'].unique())}")
    
    return filtered_df

def identify_yearly_maximum_rates(rates_df):
    """
    Identify the organization with the highest reappointment rate for each year.
    
    Args:
        rates_df (pd.DataFrame): Reappointment rates dataset
    
    Returns:
        pd.DataFrame: Yearly maximum rates with organization details
    """
    print(f"\n📊 Identifying yearly maximum reappointment rates...")
    
    # Group by year and find the maximum rate for each year
    yearly_max = []
    
    for year in sorted(rates_df['year'].unique()):
        year_data = rates_df[rates_df['year'] == year].copy()
        
        if len(year_data) == 0:
            continue
        
        # Find the organization(s) with the maximum rate for this year
        max_rate = year_data['reappointment_rate'].max()
        max_orgs = year_data[year_data['reappointment_rate'] == max_rate]
        
        # If there are ties, select the organization with more appointments
        if len(max_orgs) > 1:
            max_org = max_orgs.loc[max_orgs['appointment_count'].idxmax()]
            print(f"   {int(year)}: Tie at {max_rate:.1f}%, selected org with most appointments")
        else:
            max_org = max_orgs.iloc[0]
        
        yearly_max.append({
            'year': int(year),
            'org': max_org['org'],
            'reappointment_rate': max_org['reappointment_rate'],
            'appointment_count': max_org['appointment_count'],
            'reappointment_count': max_org['reappointment_count'],
            'total_orgs_year': len(year_data)
        })
    
    yearly_max_df = pd.DataFrame(yearly_max)
    
    print(f"✓ Yearly maximum rates identified")
    print(f"   Years analyzed: {len(yearly_max_df)}")
    print(f"   Rate range: {yearly_max_df['reappointment_rate'].min():.1f}% - {yearly_max_df['reappointment_rate'].max():.1f}%")
    
    return yearly_max_df

def analyze_yearly_patterns(yearly_max_df):
    """
    Analyze patterns in yearly maximum reappointment rates.
    
    Args:
        yearly_max_df (pd.DataFrame): Yearly maximum rates dataset
    """
    print(f"\n📈 Analyzing Yearly Maximum Rate Patterns:")
    
    if len(yearly_max_df) == 0:
        print("   No data to analyze")
        return
    
    # Overall statistics
    avg_max_rate = yearly_max_df['reappointment_rate'].mean()
    median_max_rate = yearly_max_df['reappointment_rate'].median()
    std_max_rate = yearly_max_df['reappointment_rate'].std()
    
    print(f"   Average yearly maximum rate: {avg_max_rate:.1f}%")
    print(f"   Median yearly maximum rate: {median_max_rate:.1f}%")
    print(f"   Standard deviation: {std_max_rate:.1f}%")
    
    # Year-by-year analysis
    print(f"\n📊 Year-by-Year Maximum Rates:")
    for _, row in yearly_max_df.iterrows():
        print(f"   {row['year']}: {row['reappointment_rate']:.1f}% - {row['org']} "
              f"({row['reappointment_count']}/{row['appointment_count']} appointments)")
    
    # Trend analysis
    print(f"\n📊 Year-over-Year Changes in Maximum Rates:")
    for i in range(1, len(yearly_max_df)):
        current = yearly_max_df.iloc[i]
        previous = yearly_max_df.iloc[i-1]
        
        change = current['reappointment_rate'] - previous['reappointment_rate']
        change_direction = "↗️" if change > 1 else "↘️" if change < -1 else "→"
        
        print(f"   {previous['year']} → {current['year']}: "
              f"{previous['reappointment_rate']:.1f}% → {current['reappointment_rate']:.1f}% "
              f"({change:+.1f} pp) {change_direction}")
    
    # Organization frequency analysis
    org_frequency = yearly_max_df['org'].value_counts()
    
    print(f"\n📊 Organizations with Most Yearly Maximums:")
    for org, count in org_frequency.items():
        years = yearly_max_df[yearly_max_df['org'] == org]['year'].tolist()
        percentage = (count / len(yearly_max_df)) * 100
        print(f"   {org}: {count} year(s) ({percentage:.1f}%) - Years: {years}")
    
    # Trend direction analysis
    first_half = yearly_max_df.iloc[:len(yearly_max_df)//2]['reappointment_rate'].mean()
    second_half = yearly_max_df.iloc[len(yearly_max_df)//2:]['reappointment_rate'].mean()
    overall_trend = "increasing" if second_half > first_half else "decreasing" if second_half < first_half else "stable"
    
    print(f"\n📊 Overall Trend Analysis:")
    print(f"   First half average: {first_half:.1f}%")
    print(f"   Second half average: {second_half:.1f}%")
    print(f"   Overall trend: {overall_trend} ({second_half - first_half:+.1f} pp)")

def create_visualization(yearly_max_df, output_dir):
    """
    Create visualization of yearly maximum reappointment rates.
    
    Args:
        yearly_max_df (pd.DataFrame): Yearly maximum rates dataset
        output_dir (Path): Output directory for saving the plot
    """
    print(f"\n📊 Creating visualization...")
    
    if len(yearly_max_df) == 0:
        print("   No data to visualize")
        return
    
    # Set up the plot
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 12))
    fig.suptitle('New Brunswick Government Appointments:\nYearly Maximum Reappointment Rates (2013-2024)', 
                 fontsize=16, fontweight='bold', y=0.95)
    
    # Plot 1: Line chart of maximum rates over time
    ax1.plot(yearly_max_df['year'], yearly_max_df['reappointment_rate'], 
             marker='o', linewidth=2.5, markersize=8, color='#2E8B57')
    
    # Add data labels
    for _, row in yearly_max_df.iterrows():
        ax1.annotate(f"{row['reappointment_rate']:.1f}%", 
                    (row['year'], row['reappointment_rate']),
                    textcoords="offset points", xytext=(0,10), ha='center',
                    fontsize=9, fontweight='bold')
    
    ax1.set_title('Maximum Reappointment Rate by Year', fontsize=14, fontweight='bold', pad=20)
    ax1.set_xlabel('Year', fontsize=12)
    ax1.set_ylabel('Reappointment Rate (%)', fontsize=12)
    ax1.grid(True, alpha=0.3)
    ax1.set_ylim(0, max(yearly_max_df['reappointment_rate']) * 1.1)
    
    # Add trend line
    z = np.polyfit(yearly_max_df['year'], yearly_max_df['reappointment_rate'], 1)
    p = np.poly1d(z)
    ax1.plot(yearly_max_df['year'], p(yearly_max_df['year']), 
             "--", alpha=0.7, color='red', linewidth=2, 
             label=f'Trend: {z[0]:+.1f}% per year')
    ax1.legend()
    
    # Plot 2: Bar chart showing which organization had the maximum each year
    # Create color map for organizations
    unique_orgs = yearly_max_df['org'].unique()
    colors = plt.cm.Set3(np.linspace(0, 1, len(unique_orgs)))
    org_color_map = dict(zip(unique_orgs, colors))
    
    bar_colors = [org_color_map[org] for org in yearly_max_df['org']]
    
    bars = ax2.bar(yearly_max_df['year'], yearly_max_df['reappointment_rate'], 
                   color=bar_colors, alpha=0.8, edgecolor='black', linewidth=0.5)
    
    # Add value labels on bars
    for bar, rate in zip(bars, yearly_max_df['reappointment_rate']):
        height = bar.get_height()
        ax2.annotate(f'{rate:.1f}%',
                    xy=(bar.get_x() + bar.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom', fontsize=9, fontweight='bold')
    
    ax2.set_title('Maximum Rate by Organization and Year', fontsize=14, fontweight='bold', pad=20)
    ax2.set_xlabel('Year', fontsize=12)
    ax2.set_ylabel('Reappointment Rate (%)', fontsize=12)
    ax2.grid(True, alpha=0.3, axis='y')
    ax2.set_ylim(0, max(yearly_max_df['reappointment_rate']) * 1.15)
    
    # Create legend for organizations
    legend_elements = [plt.Rectangle((0,0),1,1, color=org_color_map[org], alpha=0.8, label=org) 
                      for org in unique_orgs]
    ax2.legend(handles=legend_elements, loc='upper left', bbox_to_anchor=(1.02, 1), 
               borderaxespad=0, fontsize=10)
    
    # Adjust layout to prevent legend cutoff
    plt.tight_layout()
    plt.subplots_adjust(right=0.75)
    
    # Save the plot
    try:
        output_file = output_dir / "step7_yearly_max_reappointment_rates.png"
        plt.savefig(output_file, dpi=300, bbox_inches='tight', 
                   facecolor='white', edgecolor='none')
        print(f"✓ Visualization saved to: {output_file}")
        print(f"   File size: {output_file.stat().st_size / 1024:.1f} KB")
        
        # Also save as high-quality PDF
        pdf_file = output_dir / "step7_yearly_max_reappointment_rates.pdf"
        plt.savefig(pdf_file, bbox_inches='tight', 
                   facecolor='white', edgecolor='none')
        print(f"✓ PDF version saved to: {pdf_file}")
        
    except Exception as e:
        print(f"❌ Error saving visualization: {e}")
    
    # Show plot if in interactive environment
    try:
        plt.show()
    except:
        pass  # Silent fail if not in interactive environment
    
    plt.close()

def identify_yearly_maximums():
    """
    Main function to identify yearly maximum reappointment rates.
    
    Returns:
        pd.DataFrame: Yearly maximum rates dataset
    """
    print("=" * 60)
    print("STEP 7: IDENTIFYING YEARLY MAXIMUM REAPPOINTMENT RATES")
    print("=" * 60)
    
    # Create output directory
    output_dir = create_output_directories()
    
    # Load reappointment rates
    print(f"\n📁 Loading reappointment rates...")
    rates_df = load_reappointment_rates()
    
    # Validate data
    if not validate_reappointment_rates(rates_df):
        sys.exit(1)
    
    # Apply minimum thresholds for meaningful analysis
    filtered_rates = apply_minimum_thresholds(rates_df, min_appointments=5)
    
    # Identify yearly maximum rates
    yearly_max_df = identify_yearly_maximum_rates(filtered_rates)
    
    # Analyze patterns
    analyze_yearly_patterns(yearly_max_df)
    
    # Create visualization
    create_visualization(yearly_max_df, output_dir)
    
    return yearly_max_df

def save_yearly_maximums(yearly_max_df, output_dir):
    """
    Save the yearly maximum rates to CSV file.
    
    Args:
        yearly_max_df (pd.DataFrame): Yearly maximum rates dataset
        output_dir (Path): Output directory
    """
    try:
        output_file = output_dir / "step7_yearly_max_rates.csv"
        yearly_max_df.to_csv(output_file, index=False, encoding='utf-8')
        print(f"✓ Saved yearly maximum rates to: {output_file}")
        print(f"   File size: {output_file.stat().st_size / 1024:.1f} KB")
        
        # Verify the saved file
        verification_df = pd.read_csv(output_file)
        if len(verification_df) == len(yearly_max_df):
            print(f"✓ File verification successful: {len(verification_df):,} rows")
        else:
            print(f"⚠️  Warning: Row count mismatch in saved file")
            
    except Exception as e:
        print(f"❌ Error saving yearly maximums: {e}")
        sys.exit(1)

def main():
    """Main execution function."""
    try:
        # Identify yearly maximum reappointment rates
        yearly_max_df = identify_yearly_maximums()
        
        # Create output directory
        output_dir = Path("scripts/claudesonnet4/version2/execution1/analysis_data")
        
        # Save results
        save_yearly_maximums(yearly_max_df, output_dir)
        
        # Summary statistics
        if len(yearly_max_df) > 0:
            avg_max_rate = yearly_max_df['reappointment_rate'].mean()
            top_org = yearly_max_df['org'].value_counts().index[0]
            top_org_count = yearly_max_df['org'].value_counts().iloc[0]
        else:
            avg_max_rate = 0
            top_org = "None"
            top_org_count = 0
        
        print("\n" + "=" * 60)
        print("STEP 7 COMPLETED SUCCESSFULLY")
        print("=" * 60)
        print(f"✅ Identified maximum reappointment rates for {len(yearly_max_df):,} years")
        print(f"✅ Average yearly maximum rate: {avg_max_rate:.1f}%")
        print(f"✅ Most frequent top organization: {top_org} ({top_org_count} years)")
        print(f"✅ Data saved to: step7_yearly_max_rates.csv")
        print(f"✅ Visualization saved to: step7_yearly_max_reappointment_rates.png")
        print(f"✅ Ready for Step 8: Annual proportion analysis")
        
    except KeyboardInterrupt:
        print(f"\n❌ Process interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Unexpected error in main execution: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()