#!/usr/bin/env python3
"""
Step 4: Count appointments by organization and year
Research Question: Which government branch in New Brunswick most frequently reappoints 
past appointees, and is this trend increasing or declining over the past 12 years?

This script counts the total number of appointments for each "org" in each year.
"""

import pandas as pd
import numpy as np
from pathlib import Path
import sys

def setup_directories():
    """Create necessary directories for the analysis."""
    base_dir = Path("scripts/claudesonnet4/version2/execution10")
    analysis_dir = base_dir / "analysis_data"
    
    # Create directories if they don't exist
    base_dir.mkdir(parents=True, exist_ok=True)
    analysis_dir.mkdir(parents=True, exist_ok=True)
    
    return base_dir, analysis_dir

def validate_input_file(file_path):
    """Check if input file exists and provide informative error message."""
    if not file_path.exists():
        print(f"ERROR: Input file not found: {file_path}")
        print("Please ensure Step 3 has been completed successfully.")
        return False
    return True

def load_repeats_marked_data(file_path):
    """Load the dataset with repeated appointees marked from Step 3."""
    try:
        print(f"Loading repeats marked dataset from: {file_path}")
        df = pd.read_csv(file_path)
        
        print(f"  - Loaded {len(df)} rows with {len(df.columns)} columns")
        print(f"  - Available columns: {list(df.columns)}")
        
        # Validate required columns are present
        required_columns = ['name', 'position', 'org', 'year', 'reappointed']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"ERROR: Missing required columns: {missing_columns}")
            return None
        
        return df
        
    except Exception as e:
        print(f"ERROR loading repeats marked dataset: {str(e)}")
        return None

def analyze_data_structure(df):
    """Analyze the structure of the data for appointment counting."""
    print("\n" + "=" * 50)
    print("DATA STRUCTURE ANALYSIS")
    print("=" * 50)
    
    # Basic statistics
    total_records = len(df)
    unique_people = df['name'].nunique()
    unique_orgs = df['org'].nunique()
    year_range = f"{df['year'].min():.0f} - {df['year'].max():.0f}"
    
    print(f"Dataset overview:")
    print(f"  - Total appointment records: {total_records:,}")
    print(f"  - Unique individuals: {unique_people:,}")
    print(f"  - Unique organizations: {unique_orgs:,}")
    print(f"  - Year range: {year_range}")
    
    # Check for potential duplicates that might affect counting
    # Same person, same org, same year (but potentially different positions)
    duplicate_check = df.groupby(['name', 'org', 'year']).size()
    duplicates = duplicate_check[duplicate_check > 1]
    
    if len(duplicates) > 0:
        print(f"\nPotential counting considerations:")
        print(f"  - Found {len(duplicates)} cases where same person appears multiple times")
        print(f"    in same organization in same year (possibly different positions)")
        
        # Show examples
        print("  - Sample cases:")
        for (name, org, year), count in duplicates.head(5).items():
            positions = df[(df['name'] == name) & (df['org'] == org) & (df['year'] == year)]['position'].unique()
            print(f"    {name} in {org} ({year:.0f}): {count} appointments")
            print(f"      Positions: {', '.join(positions[:3])}{'...' if len(positions) > 3 else ''}")
    
    # Year distribution
    print(f"\nAppointments by year:")
    year_counts = df['year'].value_counts().sort_index()
    for year, count in year_counts.items():
        print(f"  {year:.0f}: {count:,} appointments")
    
    return df

def count_appointments_by_org_year(df):
    """Count unique appointments per organization per year."""
    print("\n" + "=" * 50)
    print("COUNTING EMPLOYEES BY ORGANIZATION AND YEAR")
    print("=" * 50)
    
    # Method 1: Count unique individuals per org per year
    # This counts each person only once per organization per year, regardless of multiple positions
    appointment_counts = df.groupby(['org', 'year'])['name'].nunique().reset_index()
    appointment_counts.columns = ['org', 'year', 'appointment_count']
    
    print(f"Appointment counting methodology:")
    print(f"  - Counting unique individuals per organization per year")
    print(f"  - Each person counted once per org per year (regardless of multiple positions)")
    print(f"  - Result: {len(appointment_counts)} org-year combinations")
    
    # Sort by organization and year for readability
    appointment_counts = appointment_counts.sort_values(['org', 'year'])
    
    # Add total appointments per org per year for context
    appointment_counts = df.groupby(['org', 'year']).size().reset_index(name='total_appointments')
    appointment_counts = appointment_counts.merge(appointment_counts, on=['org', 'year'], how='left')
    
    # Calculate appointments per appointment ratio
    appointment_counts['appointments_per_appointment'] = (
        appointment_counts['total_appointments'] / appointment_counts['appointment_count']
    ).round(2)
    
    print(f"\nSample of appointment counts:")
    print(appointment_counts.head(10).to_string(index=False))
    
    return appointment_counts

def analyze_appointment_count_patterns(appointment_counts):
    """Analyze patterns in appointment counts across organizations and years."""
    print("\n" + "=" * 50)
    print("EMPLOYEE COUNT PATTERN ANALYSIS")
    print("=" * 50)
    
    # Summary statistics
    total_org_years = len(appointment_counts)
    avg_appointments_per_org_year = appointment_counts['appointment_count'].mean()
    median_appointments_per_org_year = appointment_counts['appointment_count'].median()
    
    print(f"Summary statistics:")
    print(f"  - Total org-year combinations: {total_org_years:,}")
    print(f"  - Average appointments per org per year: {avg_appointments_per_org_year:.1f}")
    print(f"  - Median appointments per org per year: {median_appointments_per_org_year:.1f}")
    
    # Distribution of appointment counts
    print(f"\nDistribution of appointment counts:")
    count_distribution = appointment_counts['appointment_count'].value_counts().sort_index()
    
    # Show distribution in ranges for better readability
    ranges = [(1, 1), (2, 5), (6, 10), (11, 20), (21, 50), (51, 100), (101, float('inf'))]
    for low, high in ranges:
        if high == float('inf'):
            mask = appointment_counts['appointment_count'] >= low
            range_label = f"{low}+"
        else:
            mask = (appointment_counts['appointment_count'] >= low) & (appointment_counts['appointment_count'] <= high)
            range_label = f"{low}-{high}" if low != high else f"{low}"
        
        count = mask.sum()
        percentage = (count / total_org_years) * 100
        print(f"  {range_label} appointments: {count:,} org-years ({percentage:.1f}%)")
    
    # Top organizations by average appointment count
    org_avg_appointments = appointment_counts.groupby('org').agg({
        'appointment_count': ['mean', 'median', 'sum', 'count'],
        'total_appointments': 'sum'
    }).round(2)
    
    # Flatten column names
    org_avg_appointments.columns = ['avg_appointments', 'median_appointments', 'total_appointments', 'years_active', 'total_appointments']
    org_avg_appointments = org_avg_appointments.sort_values('avg_appointments', ascending=False)
    
    print(f"\nTop 10 organizations by average appointment count per year:")
    for org, row in org_avg_appointments.head(10).iterrows():
        print(f"  {org}")
        print(f"    Avg: {row['avg_appointments']:.1f}, Median: {row['median_appointments']:.1f}, Total: {row['total_appointments']:.0f}")
        print(f"    Years active: {row['years_active']:.0f}, Total appointments: {row['total_appointments']:.0f}")
    
    # Organizations with most total appointments across all years
    print(f"\nTop 10 organizations by total appointments across all years:")
    for org, row in org_avg_appointments.sort_values('total_appointments', ascending=False).head(10).iterrows():
        print(f"  {org}: {row['total_appointments']:.0f} total appointments")
    
    # Year-over-year trends
    yearly_totals = appointment_counts.groupby('year').agg({
        'appointment_count': ['sum', 'mean', 'count'],
        'total_appointments': 'sum'
    }).round(2)
    
    yearly_totals.columns = ['total_appointments', 'avg_appointments_per_org', 'active_orgs', 'total_appointments']
    
    print(f"\nYear-over-year appointment trends:")
    for year, row in yearly_totals.iterrows():
        print(f"  {year:.0f}: {row['total_appointments']:.0f} appointments across {row['active_orgs']:.0f} orgs")
        print(f"        Avg per org: {row['avg_appointments_per_org']:.1f}, Total appointments: {row['total_appointments']:.0f}")
    
    return org_avg_appointments, yearly_totals

def validate_appointment_counts(df, appointment_counts):
    """Validate the appointment counting results."""
    print("\n" + "=" * 50)
    print("VALIDATION OF EMPLOYEE COUNTS")
    print("=" * 50)
    
    # Check 1: Total unique individuals in dataset
    total_unique_individuals = df['name'].nunique()
    print(f"Validation checks:")
    print(f"  - Total unique individuals in dataset: {total_unique_individuals:,}")
    
    # Check 2: Sum of appointment counts should be >= unique individuals
    # (because same person can work in multiple orgs or years)
    sum_appointment_counts = appointment_counts['appointment_count'].sum()
    print(f"  - Sum of all appointment counts: {sum_appointment_counts:,}")
    
    # Check 3: Verify some specific cases
    print(f"\nSpot checks:")
    
    # Find an organization with data in multiple years
    org_with_multiple_years = appointment_counts.groupby('org')['year'].count()
    sample_org = org_with_multiple_years[org_with_multiple_years > 1].index[0]
    
    sample_org_data = appointment_counts[appointment_counts['org'] == sample_org].sort_values('year')
    print(f"  - Sample organization: {sample_org}")
    for _, row in sample_org_data.iterrows():
        print(f"    {row['year']:.0f}: {row['appointment_count']:.0f} appointments, {row['total_appointments']:.0f} appointments")
    
    # Manually verify the first row
    first_row = appointment_counts.iloc[0]
    manual_count = df[(df['org'] == first_row['org']) & (df['year'] == first_row['year'])]['name'].nunique()
    print(f"\nManual verification of first row:")
    print(f"  - {first_row['org']} in {first_row['year']:.0f}")
    print(f"  - Computed count: {first_row['appointment_count']}")
    print(f"  - Manual count: {manual_count}")
    print(f"  - Match: {'✓' if first_row['appointment_count'] == manual_count else '✗'}")
    
    return True

def generate_summary_statistics(appointment_counts):
    """Generate final summary statistics."""
    print("\n" + "=" * 60)
    print("EMPLOYEE COUNT SUMMARY STATISTICS")
    print("=" * 60)
    
    # Overall statistics
    total_org_year_combinations = len(appointment_counts)
    total_organizations = appointment_counts['org'].nunique()
    total_years = appointment_counts['year'].nunique()
    
    print(f"Dataset summary:")
    print(f"  - Total org-year combinations: {total_org_year_combinations:,}")
    print(f"  - Unique organizations: {total_organizations:,}")
    print(f"  - Years covered: {total_years:,}")
    
    # Appointment count statistics
    appointment_stats = appointment_counts['appointment_count'].describe()
    print(f"\nAppointment count statistics:")
    print(f"  - Mean: {appointment_stats['mean']:.1f}")
    print(f"  - Median: {appointment_stats['50%']:.1f}")
    print(f"  - Min: {appointment_stats['min']:.0f}")
    print(f"  - Max: {appointment_stats['max']:.0f}")
    print(f"  - Std Dev: {appointment_stats['std']:.1f}")
    
    # Appointments per appointment statistics
    app_per_emp_stats = appointment_counts['appointments_per_appointment'].describe()
    print(f"\nAppointments per appointment statistics:")
    print(f"  - Mean: {app_per_emp_stats['mean']:.2f}")
    print(f"  - Median: {app_per_emp_stats['50%']:.2f}")
    print(f"  - Min: {app_per_emp_stats['min']:.2f}")
    print(f"  - Max: {app_per_emp_stats['max']:.2f}")
    
    # Year range
    year_range = f"{appointment_counts['year'].min():.0f} - {appointment_counts['year'].max():.0f}"
    print(f"\nYear range: {year_range}")

def count_appointments_main():
    """Main function to count appointments by organization and year."""
    print("=" * 60)
    print("STEP 4: COUNTING EMPLOYEES BY ORGANIZATION AND YEAR")
    print("=" * 60)
    
    # Setup directories
    base_dir, analysis_dir = setup_directories()
    
    # Define input and output files
    input_file = analysis_dir / "step3_repeats_marked.csv"
    output_file = analysis_dir / "step4_appointment_counts.csv"
    
    # Validate input file exists
    if not validate_input_file(input_file):
        print("Cannot proceed without input file from Step 3.")
        return False
    
    # Load repeats marked data
    df = load_repeats_marked_data(input_file)
    if df is None:
        print("Failed to load repeats marked data.")
        return False
    
    # Analyze data structure
    df = analyze_data_structure(df)
    
    # Count appointments by organization and year
    appointment_counts = count_appointments_by_org_year(df)
    
    # Analyze appointment count patterns
    org_analysis, yearly_analysis = analyze_appointment_count_patterns(appointment_counts)
    
    # Validate the counting results
    validate_appointment_counts(df, appointment_counts)
    
    # Generate summary statistics
    generate_summary_statistics(appointment_counts)
    
    # Save the appointment counts dataset
    try:
        appointment_counts.to_csv(output_file, index=False)
        
        print(f"\n" + "=" * 60)
        print("STEP 4 COMPLETED SUCCESSFULLY")
        print("=" * 60)
        print(f"Output file: {output_file}")
        print(f"Records created: {len(appointment_counts):,}")
        print(f"Columns: {list(appointment_counts.columns)}")
        
        # Save additional analysis files
        org_analysis.to_csv(analysis_dir / "step4_org_analysis.csv")
        yearly_analysis.to_csv(analysis_dir / "step4_yearly_analysis.csv")
        
        print(f"\nAdditional analysis files saved:")
        print(f"  - step4_org_analysis.csv (organization-level statistics)")
        print(f"  - step4_yearly_analysis.csv (year-over-year trends)")
        
        return True
        
    except Exception as e:
        print(f"ERROR saving appointment counts dataset: {str(e)}")
        return False

if __name__ == "__main__":
    success = count_appointments_main()
    if not success:
        sys.exit(1)
    
    print("\nReady for Step 5: Count reappointments by organization and year")