#!/usr/bin/env python3
"""
Step 4: Count total appointments by organization and year
Research Question: Which government branch in New Brunswick most frequently reappoints 
past appointees, and is this trend increasing or declining over the past 12 years?

This script counts the total number of appointments for each "org" in each year.
"""

import pandas as pd
import numpy as np
from pathlib import Path
import sys

def setup_directories():
    """Create necessary directories for the analysis."""
    base_dir = Path("scripts/claudesonnet4/version2/execution10")
    analysis_dir = base_dir / "analysis_data"
    
    # Create directories if they don't exist
    base_dir.mkdir(parents=True, exist_ok=True)
    analysis_dir.mkdir(parents=True, exist_ok=True)
    
    return base_dir, analysis_dir

def validate_input_file(file_path):
    """Check if input file exists and provide informative error message."""
    if not file_path.exists():
        print(f"ERROR: Input file not found: {file_path}")
        print("Please ensure Step 3 has been completed successfully.")
        return False
    return True

def load_repeats_marked_data(file_path):
    """Load the dataset with repeated appointees marked from Step 3."""
    try:
        print(f"Loading repeats marked dataset from: {file_path}")
        df = pd.read_csv(file_path)
        
        print(f"  - Loaded {len(df)} rows with {len(df.columns)} columns")
        print(f"  - Available columns: {list(df.columns)}")
        
        # Validate required columns are present
        required_columns = ['org', 'year']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"ERROR: Missing required columns: {missing_columns}")
            return None
        
        # Convert year to numeric if needed
        df['year'] = pd.to_numeric(df['year'], errors='coerce')
        
        # Check for any invalid years
        invalid_years = df['year'].isna().sum()
        if invalid_years > 0:
            print(f"WARNING: Found {invalid_years} invalid year values, removing...")
            df = df[df['year'].notna()]
        
        return df
        
    except Exception as e:
        print(f"ERROR loading repeats marked dataset: {str(e)}")
        return None

def analyze_data_structure(df):
    """Analyze the structure of the data before counting."""
    print("\n" + "=" * 50)
    print("DATA STRUCTURE ANALYSIS")
    print("=" * 50)
    
    # Basic statistics
    total_records = len(df)
    year_range = f"{df['year'].min():.0f} - {df['year'].max():.0f}"
    unique_orgs = df['org'].nunique()
    unique_years = df['year'].nunique()
    
    print(f"Total records: {total_records:,}")
    print(f"Year range: {year_range}")
    print(f"Unique organizations: {unique_orgs:,}")
    print(f"Unique years: {unique_years:,}")
    
    # Check for missing values
    missing_org = df['org'].isna().sum()
    missing_year = df['year'].isna().sum()
    
    if missing_org > 0 or missing_year > 0:
        print(f"\nMissing values:")
        print(f"  - Missing organizations: {missing_org:,}")
        print(f"  - Missing years: {missing_year:,}")
    
    # Show year distribution
    print(f"\nAppointments by year:")
    year_counts = df['year'].value_counts().sort_index()
    for year, count in year_counts.items():
        print(f"  {year:.0f}: {count:,}")
    
    # Show top organizations by total appointments
    print(f"\nTop 10 organizations by total appointments:")
    org_counts = df['org'].value_counts().head(10)
    for org, count in org_counts.items():
        print(f"  {org}: {count:,}")
    
    return df

def count_appointments_by_org_year(df):
    """Count total appointments for each organization in each year."""
    print("\n" + "=" * 50)
    print("COUNTING APPOINTMENTS BY ORGANIZATION AND YEAR")
    print("=" * 50)
    
    # Group by organization and year, count total appointments
    appointment_counts = df.groupby(['org', 'year']).size().reset_index(name='total_appointments')
    
    print(f"Organization-year combinations: {len(appointment_counts):,}")
    
    # Summary statistics
    total_combinations = len(appointment_counts)
    min_appointments = appointment_counts['total_appointments'].min()
    max_appointments = appointment_counts['total_appointments'].max()
    mean_appointments = appointment_counts['total_appointments'].mean()
    median_appointments = appointment_counts['total_appointments'].median()
    
    print(f"\nAppointment count statistics:")
    print(f"  - Minimum appointments per org-year: {min_appointments}")
    print(f"  - Maximum appointments per org-year: {max_appointments}")
    print(f"  - Mean appointments per org-year: {mean_appointments:.1f}")
    print(f"  - Median appointments per org-year: {median_appointments:.1f}")
    
    # Distribution of appointment counts
    count_distribution = appointment_counts['total_appointments'].value_counts().sort_index()
    
    print(f"\nDistribution of appointment counts:")
    for count, frequency in count_distribution.head(10).items():
        percentage = (frequency / total_combinations) * 100
        print(f"  {count} appointment(s): {frequency:,} org-year combinations ({percentage:.1f}%)")
    
    if len(count_distribution) > 10:
        remaining = len(count_distribution) - 10
        print(f"  ... and {remaining} more count levels")
    
    return appointment_counts

def analyze_organizational_patterns(appointment_counts):
    """Analyze patterns in organizational appointments over time."""
    print("\n" + "=" * 50)
    print("ORGANIZATIONAL APPOINTMENT PATTERNS")
    print("=" * 50)
    
    # Calculate total appointments per organization across all years
    org_totals = appointment_counts.groupby('org')['total_appointments'].agg([
        'sum', 'mean', 'std', 'min', 'max', 'count'
    ]).round(2)
    org_totals.columns = ['total_all_years', 'mean_per_year', 'std_per_year', 
                         'min_year', 'max_year', 'years_active']
    
    # Sort by total appointments
    org_totals = org_totals.sort_values('total_all_years', ascending=False)
    
    print(f"Top 15 organizations by total appointments (2013-2024):")
    for org, row in org_totals.head(15).iterrows():
        print(f"  {org}")
        print(f"    Total: {row['total_all_years']:.0f}, Avg/year: {row['mean_per_year']:.1f}, "
              f"Active years: {row['years_active']:.0f}")
    
    # Organizations with highest annual activity
    print(f"\nOrganizations with highest single-year appointment counts:")
    highest_annual = appointment_counts.nlargest(10, 'total_appointments')
    for idx, row in highest_annual.iterrows():
        print(f"  {row['org']} ({row['year']:.0f}): {row['total_appointments']} appointments")
    
    # Organizations active in all years
    all_years = appointment_counts['year'].unique()
    consistently_active = org_totals[org_totals['years_active'] == len(all_years)]
    
    print(f"\nOrganizations active in all {len(all_years)} years ({len(consistently_active)} total):")
    if len(consistently_active) > 0:
        for org, row in consistently_active.head(10).iterrows():
            print(f"  {org}: {row['total_all_years']:.0f} total appointments")
    
    return org_totals

def analyze_temporal_trends(appointment_counts):
    """Analyze temporal trends in appointments."""
    print("\n" + "=" * 50)
    print("TEMPORAL TRENDS ANALYSIS")
    print("=" * 50)
    
    # Year-over-year totals
    yearly_totals = appointment_counts.groupby('year')['total_appointments'].agg([
        'sum', 'mean', 'count'
    ]).round(2)
    yearly_totals.columns = ['total_appointments', 'avg_per_org', 'active_orgs']
    
    print("Annual appointment summary:")
    for year, row in yearly_totals.iterrows():
        print(f"  {year:.0f}: {row['total_appointments']:.0f} total, "
              f"{row['avg_per_org']:.1f} avg/org, {row['active_orgs']:.0f} active orgs")
    
    # Calculate year-over-year growth
    yearly_totals['yoy_growth'] = yearly_totals['total_appointments'].pct_change() * 100
    yearly_totals['yoy_growth_orgs'] = yearly_totals['active_orgs'].pct_change() * 100
    
    print(f"\nYear-over-year growth rates:")
    for year, row in yearly_totals.iterrows():
        if not pd.isna(row['yoy_growth']):
            print(f"  {year:.0f}: {row['yoy_growth']:+.1f}% appointments, "
                  f"{row['yoy_growth_orgs']:+.1f}% active orgs")
    
    # Identify trends
    first_year_total = yearly_totals['total_appointments'].iloc[0]
    last_year_total = yearly_totals['total_appointments'].iloc[-1]
    overall_growth = ((last_year_total - first_year_total) / first_year_total) * 100
    
    print(f"\nOverall trend (2013-2024):")
    print(f"  - 2013 total: {first_year_total:.0f}")
    print(f"  - 2024 total: {last_year_total:.0f}")
    print(f"  - Overall growth: {overall_growth:+.1f}%")
    
    return yearly_totals

def create_pivot_table(appointment_counts):
    """Create a pivot table for easy analysis."""
    print("\n" + "=" * 50)
    print("CREATING PIVOT TABLE")
    print("=" * 50)
    
    # Create pivot table with organizations as rows and years as columns
    pivot_table = appointment_counts.pivot(index='org', columns='year', values='total_appointments')
    
    # Fill NaN values with 0 (organizations not active in certain years)
    pivot_table = pivot_table.fillna(0).astype(int)
    
    print(f"Pivot table dimensions: {pivot_table.shape[0]} organizations Ã— {pivot_table.shape[1]} years")
    
    # Add summary columns
    pivot_table['Total'] = pivot_table.sum(axis=1)
    pivot_table['Mean'] = pivot_table.iloc[:, :-1].mean(axis=1).round(1)
    pivot_table['Active_Years'] = (pivot_table.iloc[:, :-2] > 0).sum(axis=1)
    
    # Sort by total appointments
    pivot_table = pivot_table.sort_values('Total', ascending=False)
    
    # Display top organizations
    print(f"\nTop 10 organizations (full appointment matrix):")
    top_orgs = pivot_table.head(10)
    
    # Create a readable display
    year_columns = [col for col in pivot_table.columns if isinstance(col, (int, float)) and col >= 2013]
    
    print(f"{'Organization':<40} ", end="")
    for year in sorted(year_columns):
        print(f"{year:.0f}".rjust(5), end=" ")
    print(f"{'Total'.rjust(6)} {'Mean'.rjust(6)} {'Years'.rjust(6)}")
    print("-" * (40 + len(year_columns) * 6 + 18))
    
    for org, row in top_orgs.iterrows():
        org_display = org[:37] + "..." if len(org) > 40 else org
        print(f"{org_display:<40} ", end="")
        for year in sorted(year_columns):
            count = row[year] if year in row.index else 0
            if count > 0:
                print(f"{count:4.0f}".rjust(5), end=" ")
            else:
                print("    -", end=" ")
        print(f"{row['Total']:5.0f} {row['Mean']:5.1f} {row['Active_Years']:5.0f}")
    
    return pivot_table

def validate_counts(df, appointment_counts):
    """Validate that our counts match the original data."""
    print("\n" + "=" * 50)
    print("VALIDATION CHECKS")
    print("=" * 50)
    
    # Check total count matches
    original_total = len(df)
    counted_total = appointment_counts['total_appointments'].sum()
    
    print(f"Validation results:")
    print(f"  - Original dataset records: {original_total:,}")
    print(f"  - Sum of counted appointments: {counted_total:,}")
    print(f"  - Counts match: {original_total == counted_total}")
    
    if original_total != counted_total:
        print("  WARNING: Count mismatch detected!")
        return False
    
    # Spot check: verify a few specific org-year combinations
    print(f"\nSpot checks (sampling 3 org-year combinations):")
    sample_combinations = appointment_counts.sample(min(3, len(appointment_counts)))
    
    for idx, row in sample_combinations.iterrows():
        org = row['org']
        year = row['year']
        expected_count = row['total_appointments']
        
        # Count manually from original data
        actual_count = len(df[(df['org'] == org) & (df['year'] == year)])
        
        match = expected_count == actual_count
        print(f"  - {org} ({year:.0f}): Expected {expected_count}, Actual {actual_count} âœ“" if match 
              else f"  - {org} ({year:.0f}): Expected {expected_count}, Actual {actual_count} âœ—")
    
    return True

def count_appointments_main():
    """Main function to count appointments by organization and year."""
    print("=" * 60)
    print("STEP 4: COUNTING APPOINTMENTS BY ORGANIZATION AND YEAR")
    print("=" * 60)
    
    # Setup directories
    base_dir, analysis_dir = setup_directories()
    
    # Define input and output files
    input_file = analysis_dir / "step3_repeats_marked.csv"
    output_file = analysis_dir / "step4_employee_counts.csv"
    
    # Validate input file exists
    if not validate_input_file(input_file):
        print("Cannot proceed without input file from Step 3.")
        return False
    
    # Load repeats marked data
    df = load_repeats_marked_data(input_file)
    if df is None:
        print("Failed to load repeats marked data.")
        return False
    
    # Analyze data structure
    df = analyze_data_structure(df)
    
    # Count appointments by organization and year
    appointment_counts = count_appointments_by_org_year(df)
    
    # Analyze organizational patterns
    org_totals = analyze_organizational_patterns(appointment_counts)
    
    # Analyze temporal trends
    yearly_totals = analyze_temporal_trends(appointment_counts)
    
    # Create pivot table for comprehensive view
    pivot_table = create_pivot_table(appointment_counts)
    
    # Validate our counts
    validation_passed = validate_counts(df, appointment_counts)
    
    if not validation_passed:
        print("ERROR: Validation failed. Please check the counting logic.")
        return False
    
    # Save the appointment counts
    try:
        appointment_counts.to_csv(output_file, index=False)
        
        # Save additional analysis files
        org_totals.to_csv(analysis_dir / "step4_organizational_totals.csv")
        yearly_totals.to_csv(analysis_dir / "step4_yearly_trends.csv")
        pivot_table.to_csv(analysis_dir / "step4_appointment_matrix.csv")
        
        print(f"\n" + "=" * 60)
        print("STEP 4 COMPLETED SUCCESSFULLY")
        print("=" * 60)
        print(f"Main output file: {output_file}")
        print(f"Records: {len(appointment_counts):,} org-year combinations")
        print(f"Columns: {list(appointment_counts.columns)}")
        
        print(f"\nAdditional analysis files saved:")
        print(f"  - step4_organizational_totals.csv (summary by organization)")
        print(f"  - step4_yearly_trends.csv (annual trends)")
        print(f"  - step4_appointment_matrix.csv (pivot table format)")
        
        # Summary statistics
        total_appointments = appointment_counts['total_appointments'].sum()
        unique_orgs = appointment_counts['org'].nunique()
        unique_years = appointment_counts['year'].nunique()
        
        print(f"\nSummary statistics:")
        print(f"  - Total appointments counted: {total_appointments:,}")
        print(f"  - Unique organizations: {unique_orgs:,}")
        print(f"  - Years covered: {unique_years} ({appointment_counts['year'].min():.0f}-{appointment_counts['year'].max():.0f})")
        
        return True
        
    except Exception as e:
        print(f"ERROR saving appointment counts: {str(e)}")
        return False

if __name__ == "__main__":
    success = count_appointments_main()
    if not success:
        sys.exit(1)
    
    print("\nReady for Step 5: Count reappointments by organization and year")