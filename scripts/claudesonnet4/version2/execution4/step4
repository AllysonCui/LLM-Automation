#!/usr/bin/env python3
"""
Step 4: Count Appointments by Organization and Year
Research Question: Which government branch in New Brunswick most frequently reappoints 
past appointees, and is this trend increasing or declining over the past 12 years?

This script counts the total number of appointments for each "org" in each year,
creating a comprehensive matrix for further analysis.
"""

import pandas as pd
import numpy as np
from pathlib import Path
import sys
import os

def validate_input_file(input_file):
    """Validate that the input file exists and has required columns."""
    if not input_file.exists():
        print(f"‚úó Input file not found: {input_file}")
        print("Please run Step 3 first to create the repeats marked dataset.")
        return False
    
    try:
        # Read and validate required columns
        df = pd.read_csv(input_file)
        required_columns = ['org', 'year']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"‚úó Missing required columns: {missing_columns}")
            print(f"Available columns: {list(df.columns)}")
            return False
        
        print(f"‚úì Input file validated: {input_file}")
        print(f"  Records: {len(df):,}")
        print(f"  Required columns present: {required_columns}")
        return True
        
    except Exception as e:
        print(f"‚úó Error reading input file: {e}")
        return False

def clean_organization_data(df):
    """Clean and standardize organization names for consistent counting."""
    print("üßπ Cleaning organization data:")
    
    df_cleaned = df.copy()
    
    # Clean organization field
    original_orgs = df_cleaned['org'].nunique()
    print(f"  Original unique organizations: {original_orgs:,}")
    
    # Standardize organization names
    df_cleaned['org_clean'] = (df_cleaned['org']
                              .astype(str)
                              .str.strip()
                              .str.title()
                              .replace('', np.nan))
    
    # Handle missing organizations
    missing_org_count = df_cleaned['org_clean'].isna().sum()
    if missing_org_count > 0:
        print(f"  ‚ö† Warning: {missing_org_count:,} records have missing organization data")
        df_cleaned['org_clean'] = df_cleaned['org_clean'].fillna('Unknown Organization')
    
    cleaned_orgs = df_cleaned['org_clean'].nunique()
    print(f"  Cleaned unique organizations: {cleaned_orgs:,}")
    
    # Show most common organizations
    print(f"  Top 10 organizations by appointment volume:")
    top_orgs = df_cleaned['org_clean'].value_counts().head(10)
    for i, (org, count) in enumerate(top_orgs.items(), 1):
        print(f"    {i:2d}. {org}: {count:,} appointments")
    
    return df_cleaned

def validate_year_data(df):
    """Validate and clean year data."""
    print("\nüóìÔ∏è Validating year data:")
    
    # Check year range
    year_min = df['year'].min()
    year_max = df['year'].max()
    unique_years = sorted(df['year'].unique())
    
    print(f"  Year range: {year_min} - {year_max}")
    print(f"  Years present: {unique_years}")
    print(f"  Total years: {len(unique_years)}")
    
    # Check for missing years in expected range
    expected_years = list(range(2013, 2025))  # 2013-2024
    missing_years = [year for year in expected_years if year not in unique_years]
    if missing_years:
        print(f"  ‚ö† Missing years from expected range: {missing_years}")
    
    # Check for unexpected years
    unexpected_years = [year for year in unique_years if year not in expected_years]
    if unexpected_years:
        print(f"  ‚ö† Unexpected years found: {unexpected_years}")
    
    # Show appointment distribution by year
    print(f"  Appointments per year:")
    yearly_counts = df['year'].value_counts().sort_index()
    for year, count in yearly_counts.items():
        print(f"    {year}: {count:,} appointments")
    
    return df

def create_appointment_counts(df):
    """Create appointment counts matrix by organization and year."""
    print("\nüìä Creating appointment counts matrix:")
    
    # Count appointments by organization and year
    counts_matrix = df.groupby(['org_clean', 'year']).size().reset_index(name='appointment_count')
    
    print(f"  Created counts for {len(counts_matrix):,} org-year combinations")
    
    # Create pivot table for better visualization
    pivot_table = counts_matrix.pivot(index='org_clean', columns='year', values='appointment_count').fillna(0)
    
    print(f"  Pivot table dimensions: {len(pivot_table)} organizations √ó {len(pivot_table.columns)} years")
    
    # Add total columns for summary statistics
    counts_matrix_with_totals = counts_matrix.copy()
    
    # Calculate organization totals
    org_totals = counts_matrix.groupby('org_clean')['appointment_count'].sum().reset_index()
    org_totals.columns = ['org_clean', 'total_appointments']
    
    # Calculate year totals
    year_totals = counts_matrix.groupby('year')['appointment_count'].sum().reset_index()
    year_totals.columns = ['year', 'total_appointments']
    
    return counts_matrix, pivot_table, org_totals, year_totals

def analyze_appointment_patterns(counts_matrix, pivot_table, org_totals, year_totals):
    """Analyze patterns in appointment counts."""
    print("\nüîç Analyzing appointment patterns:")
    
    # Overall statistics
    total_appointments = counts_matrix['appointment_count'].sum()
    total_org_year_combinations = len(counts_matrix)
    avg_appointments_per_combo = total_appointments / total_org_year_combinations
    
    print(f"  Total appointments across all org-year combinations: {total_appointments:,}")
    print(f"  Total org-year combinations: {total_org_year_combinations:,}")
    print(f"  Average appointments per combination: {avg_appointments_per_combo:.1f}")
    
    # Top organizations by total appointments
    print(f"\nüèÜ Top 15 organizations by total appointments (2013-2024):")
    top_orgs_total = org_totals.sort_values('total_appointments', ascending=False).head(15)
    for i, (_, row) in enumerate(top_orgs_total.iterrows(), 1):
        percentage = (row['total_appointments'] / total_appointments) * 100
        print(f"    {i:2d}. {row['org_clean']}: {row['total_appointments']:,} ({percentage:.1f}%)")
    
    # Year-over-year trends
    print(f"\nüìà Year-over-year appointment trends:")
    year_trends = year_totals.sort_values('year')
    for _, row in year_trends.iterrows():
        print(f"    {int(row['year'])}: {row['total_appointments']:,} total appointments")
    
    # Calculate year-over-year change
    if len(year_trends) > 1:
        print(f"\nüìä Year-over-year percentage changes:")
        for i in range(1, len(year_trends)):
            current_year = year_trends.iloc[i]
            previous_year = year_trends.iloc[i-1]
            change = ((current_year['total_appointments'] - previous_year['total_appointments']) / 
                     previous_year['total_appointments']) * 100
            direction = "‚ÜóÔ∏è" if change > 0 else "‚ÜòÔ∏è" if change < 0 else "‚û°Ô∏è"
            print(f"    {int(previous_year['year'])} ‚Üí {int(current_year['year'])}: {change:+.1f}% {direction}")
    
    # Organizations with highest appointment activity per year
    print(f"\nüéØ Organizations with highest average appointments per active year:")
    # Calculate average appointments per year for organizations that were active
    org_activity = []
    for org in pivot_table.index:
        org_row = pivot_table.loc[org]
        active_years = (org_row > 0).sum()  # Count years with appointments
        total_appointments = org_row.sum()
        if active_years > 0:
            avg_per_active_year = total_appointments / active_years
            org_activity.append({
                'organization': org,
                'total_appointments': total_appointments,
                'active_years': active_years,
                'avg_per_active_year': avg_per_active_year
            })
    
    org_activity_df = pd.DataFrame(org_activity).sort_values('avg_per_active_year', ascending=False)
    for i, (_, row) in enumerate(org_activity_df.head(10).iterrows(), 1):
        print(f"    {i:2d}. {row['organization']}: {row['avg_per_active_year']:.1f} avg/year "
              f"({int(row['total_appointments'])} total, {int(row['active_years'])} active years)")
    
    # Most consistent organizations (active in most years)
    print(f"\nüîÑ Most consistent organizations (active in most years):")
    years_active = (pivot_table > 0).sum(axis=1).sort_values(ascending=False)
    max_possible_years = len(pivot_table.columns)
    for i, (org, years_count) in enumerate(years_active.head(10).items(), 1):
        percentage = (years_count / max_possible_years) * 100
        total_appointments = pivot_table.loc[org].sum()
        print(f"    {i:2d}. {org}: {years_count}/{max_possible_years} years ({percentage:.0f}%) "
              f"- {int(total_appointments)} total appointments")

def export_detailed_analysis(counts_matrix, pivot_table, output_path):
    """Export detailed analysis including pivot table view."""
    print(f"\nüíæ Exporting detailed analysis:")
    
    # Save the main counts matrix
    main_output = output_path / "step4_appointment_counts.csv"
    counts_matrix.to_csv(main_output, index=False)
    print(f"  ‚úì Saved appointment counts: {main_output}")
    
    # Save pivot table for easy viewing
    pivot_output = output_path / "step4_appointment_counts_pivot.csv"
    pivot_table.to_csv(pivot_output)
    print(f"  ‚úì Saved pivot table: {pivot_output}")
    
    # Save summary statistics
    summary_output = output_path / "step4_appointment_summary.txt"
    with open(summary_output, 'w') as f:
        f.write("STEP 4: APPOINTMENT COUNTS SUMMARY\n")
        f.write("="*50 + "\n\n")
        f.write(f"Total appointments: {counts_matrix['appointment_count'].sum():,}\n")
        f.write(f"Unique organizations: {counts_matrix['org_clean'].nunique():,}\n")
        f.write(f"Years covered: {counts_matrix['year'].min()}-{counts_matrix['year'].max()}\n")
        f.write(f"Org-year combinations: {len(counts_matrix):,}\n")
    print(f"  ‚úì Saved summary: {summary_output}")

def count_appointments():
    """Main function to count appointments by organization and year."""
    print("="*60)
    print("STEP 4: COUNTING APPOINTMENTS BY ORGANIZATION AND YEAR")
    print("="*60)
    
    # Define paths
    input_path = Path("scripts/claudesonnet4/version2/execution4/analysis_data")
    input_file = input_path / "step3_repeats_marked.csv"
    output_file = input_path / "step4_appointment_counts.csv"
    
    # Validate input file
    if not validate_input_file(input_file):
        return False
    
    try:
        # Load the repeats marked dataset
        print(f"\nüìÇ Loading repeats marked dataset...")
        df = pd.read_csv(input_file)
        print(f"‚úì Loaded dataset: {len(df):,} rows, {len(df.columns)} columns")
        
        # Clean organization data
        print(f"\nüîß Preparing data for counting:")
        df_cleaned = clean_organization_data(df)
        
        # Validate year data
        df_validated = validate_year_data(df_cleaned)
        
        # Create appointment counts
        print(f"\nüî¢ Creating appointment counts matrix:")
        counts_matrix, pivot_table, org_totals, year_totals = create_appointment_counts(df_validated)
        
        # Analyze patterns
        analyze_appointment_patterns(counts_matrix, pivot_table, org_totals, year_totals)
        
        # Display sample of results
        print(f"\nüìã Sample of appointment counts (first 10 rows):")
        sample_data = counts_matrix.head(10)
        print(sample_data.to_string(index=False))
        
        # Export detailed analysis
        export_detailed_analysis(counts_matrix, pivot_table, input_path)
        
        # Save the main output file
        print(f"\nüíæ Saving main output file: {output_file}")
        counts_matrix.to_csv(output_file, index=False)
        print(f"‚úì Successfully saved: {len(counts_matrix):,} org-year combinations")
        
        # Final validation
        try:
            verification_df = pd.read_csv(output_file)
            if len(verification_df) == len(counts_matrix) and len(verification_df.columns) == len(counts_matrix.columns):
                print("‚úì File save verification successful")
                
                # Verify total counts match
                original_total = counts_matrix['appointment_count'].sum()
                saved_total = verification_df['appointment_count'].sum()
                if original_total == saved_total:
                    print(f"‚úì Total appointment count verification successful: {saved_total:,}")
                else:
                    print("‚ö† Warning: Saved file total doesn't match original")
            else:
                print("‚ö† Warning: Saved file dimensions don't match processed data")
        except Exception as e:
            print(f"‚ö† Warning: Could not verify saved file: {e}")
        
        print("\n" + "="*60)
        print("STEP 4 COMPLETED SUCCESSFULLY")
        print("="*60)
        print(f"Main Output: {output_file}")
        print(f"Created appointment counts for {len(counts_matrix):,} org-year combinations")
        print(f"Covering {counts_matrix['org_clean'].nunique():,} organizations over {counts_matrix['year'].nunique()} years")
        print("Ready for Step 5: Reappointment counts analysis")
        
        return True
        
    except Exception as e:
        print(f"‚úó Error counting appointments: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = count_appointments()
    if not success:
        print("\n‚ùå Step 4 failed. Please check the errors above and retry.")
        sys.exit(1)
    else:
        print("\n‚úÖ Step 4 completed successfully!")