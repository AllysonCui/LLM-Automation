#!/usr/bin/env python3
"""
Step 5: Count Reappointments by Organization and Year
Research Question: Which government branch in New Brunswick most frequently reappoints 
past appointees, and is this trend increasing or declining over the past 12 years?

This script counts how many times each "org" appears with "reappointed" marked as 
true for each year, creating a comprehensive reappointment matrix.
"""

import pandas as pd
import numpy as np
from pathlib import Path
import sys
import os

def validate_input_file(input_file):
    """Validate that the input file exists and has required columns."""
    if not input_file.exists():
        print(f"✗ Input file not found: {input_file}")
        print("Please run Step 3 first to create the repeats marked dataset.")
        return False
    
    try:
        # Read and validate required columns
        df = pd.read_csv(input_file)
        required_columns = ['org', 'year', 'reappointed']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"✗ Missing required columns: {missing_columns}")
            print(f"Available columns: {list(df.columns)}")
            return False
        
        print(f"✓ Input file validated: {input_file}")
        print(f"  Records: {len(df):,}")
        print(f"  Required columns present: {required_columns}")
        return True
        
    except Exception as e:
        print(f"✗ Error reading input file: {e}")
        return False

def analyze_reappointment_data(df):
    """Analyze the reappointment data quality and distribution."""
    print("🔍 Analyzing reappointment data:")
    
    # Overall reappointment distribution
    reapp_counts = df['reappointed'].value_counts(dropna=False)
    total_records = len(df)
    
    print(f"  Total records: {total_records:,}")
    print(f"  Reappointment distribution:")
    for status, count in reapp_counts.items():
        percentage = (count / total_records) * 100
        print(f"    {repr(status)}: {count:,} ({percentage:.1f}%)")
    
    # Check for missing values in key fields
    missing_org = df['org'].isna().sum()
    missing_year = df['year'].isna().sum()
    missing_reapp = df['reappointed'].isna().sum()
    
    if missing_org > 0 or missing_year > 0 or missing_reapp > 0:
        print(f"  ⚠ Missing data:")
        if missing_org > 0:
            print(f"    Organization: {missing_org:,} records")
        if missing_year > 0:
            print(f"    Year: {missing_year:,} records")
        if missing_reapp > 0:
            print(f"    Reappointed: {missing_reapp:,} records")
    else:
        print(f"  ✓ No missing data in key fields")
    
    return df

def prepare_reappointment_data(df):
    """Prepare data for reappointment counting."""
    print("\n🧹 Preparing reappointment data:")
    
    df_prep = df.copy()
    
    # Clean organization names (consistent with Step 4)
    df_prep['org_clean'] = (df_prep['org']
                           .astype(str)
                           .str.strip()
                           .str.title()
                           .replace('', np.nan))
    
    # Handle missing organizations
    missing_org_count = df_prep['org_clean'].isna().sum()
    if missing_org_count > 0:
        print(f"  ⚠ Warning: {missing_org_count:,} records have missing organization data")
        df_prep['org_clean'] = df_prep['org_clean'].fillna('Unknown Organization')
    
    # Ensure reappointed is boolean
    if df_prep['reappointed'].dtype != 'bool':
        print(f"  Converting reappointed column to boolean...")
        # Handle various representations
        df_prep['reappointed'] = df_prep['reappointed'].astype(str).str.lower()
        df_prep['reappointed'] = df_prep['reappointed'].map({
            'true': True, '1': True, 'yes': True, 'y': True,
            'false': False, '0': False, 'no': False, 'n': False
        })
        
        # Check for unmapped values
        unmapped_mask = df_prep['reappointed'].isna()
        if unmapped_mask.any():
            unmapped_count = unmapped_mask.sum()
            print(f"    ⚠ Warning: {unmapped_count:,} records have unmapped reappointed values")
            # Treat unmapped as False (not reappointed)
            df_prep.loc[unmapped_mask, 'reappointed'] = False
    
    print(f"  Cleaned organizations: {df_prep['org_clean'].nunique():,} unique")
    print(f"  Year range: {df_prep['year'].min()}-{df_prep['year'].max()}")
    
    # Filter to only reappointed records for counting
    reappointed_only = df_prep[df_prep['reappointed'] == True].copy()
    print(f"  Records with reappointed=True: {len(reappointed_only):,}")
    
    return df_prep, reappointed_only

def create_reappointment_counts(reappointed_df):
    """Create reappointment counts matrix by organization and year."""
    print("\n📊 Creating reappointment counts matrix:")
    
    # Count reappointments by organization and year
    reapp_counts = reappointed_df.groupby(['org_clean', 'year']).size().reset_index(name='reappointment_count')
    
    print(f"  Created reappointment counts for {len(reapp_counts):,} org-year combinations")
    
    # Create pivot table for visualization
    pivot_table = reapp_counts.pivot(index='org_clean', columns='year', values='reappointment_count').fillna(0)
    
    print(f"  Pivot table dimensions: {len(pivot_table)} organizations × {len(pivot_table.columns)} years")
    
    # Calculate organization totals
    org_totals = reapp_counts.groupby('org_clean')['reappointment_count'].sum().reset_index()
    org_totals.columns = ['org_clean', 'total_reappointments']
    
    # Calculate year totals
    year_totals = reapp_counts.groupby('year')['reappointment_count'].sum().reset_index()
    year_totals.columns = ['year', 'total_reappointments']
    
    return reapp_counts, pivot_table, org_totals, year_totals

def analyze_reappointment_patterns(reapp_counts, pivot_table, org_totals, year_totals, full_df):
    """Analyze patterns in reappointment counts."""
    print("\n🔍 Analyzing reappointment patterns:")
    
    # Overall statistics
    total_reappointments = reapp_counts['reappointment_count'].sum()
    total_appointments = len(full_df)
    overall_reapp_rate = (total_reappointments / total_appointments) * 100
    
    print(f"  Total reappointments: {total_reappointments:,}")
    print(f"  Total appointments: {total_appointments:,}")
    print(f"  Overall reappointment rate: {overall_reapp_rate:.1f}%")
    
    # Top organizations by total reappointments
    print(f"\n🏆 Top 15 organizations by total reappointments (2013-2024):")
    top_reapp_orgs = org_totals.sort_values('total_reappointments', ascending=False).head(15)
    for i, (_, row) in enumerate(top_reapp_orgs.iterrows(), 1):
        percentage = (row['total_reappointments'] / total_reappointments) * 100
        print(f"    {i:2d}. {row['org_clean']}: {row['total_reappointments']:,} ({percentage:.1f}%)")
    
    # Year-over-year reappointment trends
    print(f"\n📈 Year-over-year reappointment trends:")
    year_trends = year_totals.sort_values('year')
    for _, row in year_trends.iterrows():
        # Calculate yearly reappointment rate
        year_total_appointments = full_df[full_df['year'] == row['year']].shape[0]
        yearly_rate = (row['total_reappointments'] / year_total_appointments * 100) if year_total_appointments > 0 else 0
        print(f"    {int(row['year'])}: {row['total_reappointments']:,} reappointments "
              f"({yearly_rate:.1f}% of {year_total_appointments:,} total)")
    
    # Calculate year-over-year change in reappointments
    if len(year_trends) > 1:
        print(f"\n📊 Year-over-year reappointment changes:")
        for i in range(1, len(year_trends)):
            current_year = year_trends.iloc[i]
            previous_year = year_trends.iloc[i-1]
            change = ((current_year['total_reappointments'] - previous_year['total_reappointments']) / 
                     previous_year['total_reappointments']) * 100 if previous_year['total_reappointments'] > 0 else 0
            direction = "↗️" if change > 0 else "↘️" if change < 0 else "➡️"
            print(f"    {int(previous_year['year'])} → {int(current_year['year'])}: {change:+.1f}% {direction}")
    
    # Most active reappointing organizations per year
    print(f"\n🎯 Organizations with highest average reappointments per active year:")
    reapp_activity = []
    for org in pivot_table.index:
        org_row = pivot_table.loc[org]
        active_years = (org_row > 0).sum()
        total_reappointments = org_row.sum()
        if active_years > 0:
            avg_per_active_year = total_reappointments / active_years
            reapp_activity.append({
                'organization': org,
                'total_reappointments': total_reappointments,
                'active_years': active_years,
                'avg_per_active_year': avg_per_active_year
            })
    
    reapp_activity_df = pd.DataFrame(reapp_activity).sort_values('avg_per_active_year', ascending=False)
    for i, (_, row) in enumerate(reapp_activity_df.head(10).iterrows(), 1):
        print(f"    {i:2d}. {row['organization']}: {row['avg_per_active_year']:.1f} avg/year "
              f"({int(row['total_reappointments'])} total, {int(row['active_years'])} active years)")
    
    # Organizations with most consistent reappointment activity
    print(f"\n🔄 Most consistent reappointing organizations (active in most years):")
    years_active_reapp = (pivot_table > 0).sum(axis=1).sort_values(ascending=False)
    max_possible_years = len(pivot_table.columns)
    for i, (org, years_count) in enumerate(years_active_reapp.head(10).items(), 1):
        percentage = (years_count / max_possible_years) * 100
        total_reappointments = pivot_table.loc[org].sum()
        print(f"    {i:2d}. {org}: {years_count}/{max_possible_years} years ({percentage:.0f}%) "
              f"- {int(total_reappointments)} total reappointments")

def compare_with_total_appointments(reapp_counts, input_path):
    """Compare reappointment counts with total appointment counts from Step 4."""
    print(f"\n🔗 Comparing with total appointment counts:")
    
    try:
        # Load Step 4 results
        step4_file = input_path / "step4_appointment_counts.csv"
        if step4_file.exists():
            total_counts = pd.read_csv(step4_file)
            print(f"  ✓ Loaded total appointment counts from Step 4")
            
            # Merge with reappointment counts
            merged = pd.merge(
                total_counts[['org_clean', 'year', 'appointment_count']], 
                reapp_counts[['org_clean', 'year', 'reappointment_count']], 
                on=['org_clean', 'year'], 
                how='left'
            )
            merged['reappointment_count'] = merged['reappointment_count'].fillna(0)
            
            # Calculate reappointment rates
            merged['reappointment_rate'] = (merged['reappointment_count'] / merged['appointment_count'] * 100).round(2)
            
            # Show top organizations by reappointment rate (min 20 total appointments)
            high_activity_orgs = merged.groupby('org_clean').agg({
                'appointment_count': 'sum',
                'reappointment_count': 'sum'
            }).reset_index()
            high_activity_orgs = high_activity_orgs[high_activity_orgs['appointment_count'] >= 20]
            high_activity_orgs['overall_rate'] = (high_activity_orgs['reappointment_count'] / 
                                                 high_activity_orgs['appointment_count'] * 100).round(2)
            high_activity_orgs = high_activity_orgs.sort_values('overall_rate', ascending=False)
            
            print(f"  Top 10 organizations by reappointment rate (≥20 total appointments):")
            for i, (_, row) in enumerate(high_activity_orgs.head(10).iterrows(), 1):
                print(f"    {i:2d}. {row['org_clean']}: {row['overall_rate']:.1f}% "
                      f"({int(row['reappointment_count'])}/{int(row['appointment_count'])})")
            
            return merged
        else:
            print(f"  ⚠ Step 4 results not found. Skipping rate comparison.")
            return None
            
    except Exception as e:
        print(f"  ⚠ Error comparing with Step 4 results: {e}")
        return None

def export_detailed_analysis(reapp_counts, pivot_table, output_path, merged_data=None):
    """Export detailed reappointment analysis."""
    print(f"\n💾 Exporting detailed reappointment analysis:")
    
    # Save main reappointment counts
    main_output = output_path / "step5_reappointment_counts.csv"
    reapp_counts.to_csv(main_output, index=False)
    print(f"  ✓ Saved reappointment counts: {main_output}")
    
    # Save pivot table
    pivot_output = output_path / "step5_reappointment_counts_pivot.csv"
    pivot_table.to_csv(pivot_output)
    print(f"  ✓ Saved pivot table: {pivot_output}")
    
    # Save merged data with rates if available
    if merged_data is not None:
        rates_output = output_path / "step5_appointment_and_reappointment_rates.csv"
        merged_data.to_csv(rates_output, index=False)
        print(f"  ✓ Saved rates analysis: {rates_output}")
    
    # Save summary statistics
    summary_output = output_path / "step5_reappointment_summary.txt"
    with open(summary_output, 'w') as f:
        f.write("STEP 5: REAPPOINTMENT COUNTS SUMMARY\n")
        f.write("="*50 + "\n\n")
        f.write(f"Total reappointments: {reapp_counts['reappointment_count'].sum():,}\n")
        f.write(f"Unique organizations with reappointments: {reapp_counts['org_clean'].nunique():,}\n")
        f.write(f"Years covered: {reapp_counts['year'].min()}-{reapp_counts['year'].max()}\n")
        f.write(f"Org-year combinations with reappointments: {len(reapp_counts):,}\n")
    print(f"  ✓ Saved summary: {summary_output}")

def count_reappointments():
    """Main function to count reappointments by organization and year."""
    print("="*60)
    print("STEP 5: COUNTING REAPPOINTMENTS BY ORGANIZATION AND YEAR")
    print("="*60)
    
    # Define paths
    input_path = Path("scripts/claudesonnet4/version2/execution4/analysis_data")
    input_file = input_path / "step3_repeats_marked.csv"
    output_file = input_path / "step5_reappointment_counts.csv"
    
    # Validate input file
    if not validate_input_file(input_file):
        return False
    
    try:
        # Load the repeats marked dataset
        print(f"\n📂 Loading repeats marked dataset...")
        df = pd.read_csv(input_file)
        print(f"✓ Loaded dataset: {len(df):,} rows, {len(df.columns)} columns")
        
        # Analyze reappointment data
        df_analyzed = analyze_reappointment_data(df)
        
        # Prepare data for reappointment counting
        print(f"\n🔧 Preparing data for reappointment counting:")
        df_prepared, reappointed_only = prepare_reappointment_data(df_analyzed)
        
        # Create reappointment counts
        print(f"\n🔢 Creating reappointment counts matrix:")
        reapp_counts, pivot_table, org_totals, year_totals = create_reappointment_counts(reappointed_only)
        
        # Analyze patterns
        analyze_reappointment_patterns(reapp_counts, pivot_table, org_totals, year_totals, df_prepared)
        
        # Compare with total appointments from Step 4
        merged_data = compare_with_total_appointments(reapp_counts, input_path)
        
        # Display sample of results
        print(f"\n📋 Sample of reappointment counts (first 10 rows):")
        sample_data = reapp_counts.head(10)
        print(sample_data.to_string(index=False))
        
        # Export detailed analysis
        export_detailed_analysis(reapp_counts, pivot_table, input_path, merged_data)
        
        # Save main output file
        print(f"\n💾 Saving main output file: {output_file}")
        reapp_counts.to_csv(output_file, index=False)
        print(f"✓ Successfully saved: {len(reapp_counts):,} org-year combinations with reappointments")
        
        # Final validation
        try:
            verification_df = pd.read_csv(output_file)
            if len(verification_df) == len(reapp_counts) and len(verification_df.columns) == len(reapp_counts.columns):
                print("✓ File save verification successful")
                
                # Verify total reappointment counts
                original_total = reapp_counts['reappointment_count'].sum()
                saved_total = verification_df['reappointment_count'].sum()
                if original_total == saved_total:
                    print(f"✓ Total reappointment count verification successful: {saved_total:,}")
                else:
                    print("⚠ Warning: Saved file total doesn't match original")
            else:
                print("⚠ Warning: Saved file dimensions don't match processed data")
        except Exception as e:
            print(f"⚠ Warning: Could not verify saved file: {e}")
        
        print("\n" + "="*60)
        print("STEP 5 COMPLETED SUCCESSFULLY")
        print("="*60)
        print(f"Main Output: {output_file}")
        print(f"Created reappointment counts for {len(reapp_counts):,} org-year combinations")
        print(f"Total reappointments tracked: {reapp_counts['reappointment_count'].sum():,}")
        print("Ready for Step 6: Reappointment rates calculation")
        
        return True
        
    except Exception as e:
        print(f"✗ Error counting reappointments: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = count_reappointments()
    if not success:
        print("\n❌ Step 5 failed. Please check the errors above and retry.")
        sys.exit(1)
    else:
        print("\n✅ Step 5 completed successfully!")