#!/usr/bin/env python3
"""
Step 7: Identify Yearly Maximum Reappointment Rates
Research Question: Which government branch in New Brunswick most frequently reappoints 
past appointees, and is this trend increasing or declining over the past 12 years?

This script identifies the organization with the highest reappointment rate for each 
year and creates visualizations to analyze trends.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from pathlib import Path
import sys
import os

def validate_input_file(input_file):
    """Validate that the Step 6 input file exists and has required columns."""
    if not input_file.exists():
        print(f"✗ Input file not found: {input_file}")
        print("Please run Step 6 first to create reappointment rates.")
        return False
    
    try:
        # Read and validate required columns
        df = pd.read_csv(input_file)
        required_columns = ['org_clean', 'year', 'appointment_count', 'reappointment_count', 'reappointment_rate']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"✗ Missing required columns: {missing_columns}")
            print(f"Available columns: {list(df.columns)}")
            return False
        
        print(f"✓ Input file validated: {input_file}")
        print(f"  Records: {len(df):,}")
        print(f"  Required columns present: {required_columns}")
        return True
        
    except Exception as e:
        print(f"✗ Error reading input file: {e}")
        return False

def filter_significant_organizations(df, min_appointments=5):
    """Filter for organizations with statistically significant appointment counts."""
    print(f"\n🔍 Filtering for statistically significant organizations (≥{min_appointments} appointments):")
    
    original_combinations = len(df)
    
    # Filter org-year combinations with sufficient appointments for meaningful rates
    df_filtered = df[df['appointment_count'] >= min_appointments].copy()
    
    filtered_combinations = len(df_filtered)
    removed_combinations = original_combinations - filtered_combinations
    
    print(f"  Original org-year combinations: {original_combinations:,}")
    print(f"  Combinations with ≥{min_appointments} appointments: {filtered_combinations:,}")
    print(f"  Combinations filtered out: {removed_combinations:,} ({removed_combinations/original_combinations*100:.1f}%)")
    
    # Show distribution by year after filtering
    yearly_orgs = df_filtered.groupby('year')['org_clean'].nunique().reset_index()
    yearly_orgs.columns = ['year', 'eligible_organizations']
    
    print(f"  Eligible organizations per year:")
    for _, row in yearly_orgs.iterrows():
        print(f"    {int(row['year'])}: {row['eligible_organizations']:,} organizations")
    
    return df_filtered

def identify_yearly_max_rates(df_filtered):
    """Identify the organization with the highest reappointment rate for each year."""
    print(f"\n🏆 Identifying yearly maximum reappointment rates:")
    
    yearly_max_rates = []
    
    # Process each year
    for year in sorted(df_filtered['year'].unique()):
        year_data = df_filtered[df_filtered['year'] == year].copy()
        
        # Find the organization with the highest reappointment rate
        max_rate_row = year_data.loc[year_data['reappointment_rate'].idxmax()]
        
        # Check for ties (organizations with the same max rate)
        max_rate = max_rate_row['reappointment_rate']
        tied_organizations = year_data[year_data['reappointment_rate'] == max_rate]
        
        yearly_max_rates.append({
            'year': int(year),
            'max_organization': max_rate_row['org_clean'],
            'max_reappointment_rate': max_rate,
            'total_appointments': int(max_rate_row['appointment_count']),
            'total_reappointments': int(max_rate_row['reappointment_count']),
            'tied_organizations_count': len(tied_organizations),
            'tied_organizations': list(tied_organizations['org_clean'].values) if len(tied_organizations) > 1 else None
        })
        
        # Display results for this year
        tie_info = f" (tied with {len(tied_organizations)-1} other{'s' if len(tied_organizations) > 2 else ''})" if len(tied_organizations) > 1 else ""
        print(f"  {year}: {max_rate_row['org_clean']} - {max_rate:.1f}% "
              f"({int(max_rate_row['reappointment_count'])}/{int(max_rate_row['appointment_count'])}){tie_info}")
    
    yearly_max_df = pd.DataFrame(yearly_max_rates)
    
    # Summary statistics
    print(f"\n📊 Summary of yearly maximums:")
    print(f"  Years analyzed: {len(yearly_max_df)}")
    print(f"  Highest rate overall: {yearly_max_df['max_reappointment_rate'].max():.1f}% "
          f"({yearly_max_df.loc[yearly_max_df['max_reappointment_rate'].idxmax(), 'max_organization']} "
          f"in {yearly_max_df.loc[yearly_max_df['max_reappointment_rate'].idxmax(), 'year']})")
    print(f"  Lowest yearly maximum: {yearly_max_df['max_reappointment_rate'].min():.1f}% "
          f"({yearly_max_df.loc[yearly_max_df['max_reappointment_rate'].idxmin(), 'max_organization']} "
          f"in {yearly_max_df.loc[yearly_max_df['max_reappointment_rate'].idxmin(), 'year']})")
    print(f"  Average yearly maximum: {yearly_max_df['max_reappointment_rate'].mean():.1f}%")
    
    return yearly_max_df

def analyze_dominant_organizations(yearly_max_df):
    """Analyze which organizations appear most frequently as top reappointers."""
    print(f"\n🔍 Analyzing dominant organizations:")
    
    # Count appearances as yearly maximum
    max_appearances = yearly_max_df['max_organization'].value_counts()
    
    print(f"  Organizations appearing as yearly maximum:")
    for org, count in max_appearances.items():
        percentage = count / len(yearly_max_df) * 100
        years = yearly_max_df[yearly_max_df['max_organization'] == org]['year'].tolist()
        years_str = ', '.join(map(str, sorted(years)))
        print(f"    {org}: {count} time{'s' if count != 1 else ''} ({percentage:.1f}%) - Years: {years_str}")
    
    # Analyze trends
    print(f"\n📈 Trend analysis:")
    
    # Most dominant organization overall
    most_dominant = max_appearances.index[0]
    most_dominant_count = max_appearances.iloc[0]
    print(f"  Most dominant organization: {most_dominant} ({most_dominant_count} years)")
    
    # Check if any organization is consistently dominant
    total_years = len(yearly_max_df)
    consistency_threshold = total_years * 0.3  # 30% of years
    consistent_orgs = max_appearances[max_appearances >= consistency_threshold]
    
    if len(consistent_orgs) > 0:
        print(f"  Consistently dominant organizations (≥30% of years):")
        for org, count in consistent_orgs.items():
            print(f"    {org}: {count}/{total_years} years ({count/total_years*100:.1f}%)")
    else:
        print(f"  No organizations consistently dominant (≥30% of years)")
    
    return max_appearances

def analyze_rate_trends(yearly_max_df):
    """Analyze trends in the maximum reappointment rates over time."""
    print(f"\n📈 Analyzing maximum rate trends over time:")
    
    # Basic trend statistics
    years = yearly_max_df['year'].values
    rates = yearly_max_df['max_reappointment_rate'].values
    
    # Calculate linear trend
    if len(years) > 1:
        trend_slope, trend_intercept = np.polyfit(years, rates, 1)
        
        # Calculate correlation coefficient
        correlation = np.corrcoef(years, rates)[0, 1]
        
        print(f"  Trend analysis (2013-2024):")
        print(f"    Linear trend slope: {trend_slope:+.2f} percentage points per year")
        print(f"    Correlation coefficient: {correlation:.3f}")
        
        if abs(correlation) >= 0.7:
            trend_strength = "strong"
        elif abs(correlation) >= 0.5:
            trend_strength = "moderate"
        elif abs(correlation) >= 0.3:
            trend_strength = "weak"
        else:
            trend_strength = "negligible"
        
        if trend_slope > 0.1:
            trend_direction = "increasing"
            trend_emoji = "📈"
        elif trend_slope < -0.1:
            trend_direction = "decreasing"
            trend_emoji = "📉"
        else:
            trend_direction = "stable"
            trend_emoji = "➡️"
        
        print(f"    Overall trend: {trend_strength} {trend_direction} trend {trend_emoji}")
        
        # Calculate rate change from first to last year
        first_year_rate = yearly_max_df.iloc[0]['max_reappointment_rate']
        last_year_rate = yearly_max_df.iloc[-1]['max_reappointment_rate']
        total_change = last_year_rate - first_year_rate
        
        print(f"    Change from {yearly_max_df.iloc[0]['year']} to {yearly_max_df.iloc[-1]['year']}: "
              f"{total_change:+.1f} percentage points")
    
    # Year-over-year changes
    print(f"\n  Year-over-year changes:")
    for i in range(1, len(yearly_max_df)):
        current = yearly_max_df.iloc[i]
        previous = yearly_max_df.iloc[i-1]
        
        change = current['max_reappointment_rate'] - previous['max_reappointment_rate']
        direction = "↗️" if change > 0 else "↘️" if change < 0 else "➡️"
        
        print(f"    {previous['year']} → {current['year']}: {change:+.1f} percentage points {direction}")
        print(f"      {previous['max_organization']} ({previous['max_reappointment_rate']:.1f}%) → "
              f"{current['max_organization']} ({current['max_reappointment_rate']:.1f}%)")

def create_visualization(yearly_max_df, output_path):
    """Create visualization of yearly maximum reappointment rates."""
    print(f"\n📊 Creating visualization:")
    
    # Set up the plot style
    plt.style.use('default')
    plt.rcParams['figure.figsize'] = (12, 8)
    plt.rcParams['font.size'] = 10
    
    # Create the plot with proper gridspec_kw
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10), gridspec_kw={'height_ratios': [3, 1]})
    
    # Main plot: Maximum reappointment rates over time
    years = yearly_max_df['year']
    rates = yearly_max_df['max_reappointment_rate']
    organizations = yearly_max_df['max_organization']
    
    # Create color map for organizations
    unique_orgs = organizations.unique()
    colors = plt.cm.tab20(np.linspace(0, 1, len(unique_orgs)))
    org_colors = dict(zip(unique_orgs, colors))
    
    # Plot points
    for i, (year, rate, org) in enumerate(zip(years, rates, organizations)):
        ax1.scatter(year, rate, color=org_colors[org], s=100, alpha=0.8, edgecolors='black', linewidth=1)
        
        # Add organization labels
        ax1.annotate(org, (year, rate), xytext=(5, 5), textcoords='offset points', 
                    fontsize=8, alpha=0.8, ha='left')
    
    # Add trend line
    if len(years) > 1:
        z = np.polyfit(years, rates, 1)
        p = np.poly1d(z)
        ax1.plot(years, p(years), "r--", alpha=0.7, linewidth=2, label=f'Trend: {z[0]:+.2f} pp/year')
        ax1.legend()
    
    # Formatting for main plot
    ax1.set_xlabel('Year', fontweight='bold')
    ax1.set_ylabel('Maximum Reappointment Rate (%)', fontweight='bold')
    ax1.set_title('Yearly Maximum Reappointment Rates by Organization\n(Organizations with ≥5 appointments)', 
                  fontsize=14, fontweight='bold', pad=20)
    ax1.grid(True, alpha=0.3)
    ax1.set_ylim(0, max(rates) * 1.1)
    
    # Set x-axis to show all years
    ax1.set_xticks(sorted(years))
    ax1.set_xticklabels(sorted(years), rotation=45)
    
    # Secondary plot: Organization frequency
    org_counts = organizations.value_counts()
    bars = ax2.bar(range(len(org_counts)), org_counts.values, 
                   color=[org_colors[org] for org in org_counts.index], alpha=0.7)
    
    ax2.set_xlabel('Organization', fontweight='bold')
    ax2.set_ylabel('Years as\nTop Reappointer', fontweight='bold')
    ax2.set_title('Frequency of Organizations as Yearly Maximum', fontweight='bold')
    ax2.set_xticks(range(len(org_counts)))
    ax2.set_xticklabels(org_counts.index, rotation=45, ha='right')
    ax2.grid(True, alpha=0.3, axis='y')
    
    # Add value labels on bars
    for bar, count in zip(bars, org_counts.values):
        ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.05, 
                str(count), ha='center', va='bottom', fontweight='bold')
    
    # Adjust layout
    plt.tight_layout()
    
    # Save the plot
    output_file = output_path / "step7_yearly_max_reappointment_rates.png"
    plt.savefig(output_file, dpi=300, bbox_inches='tight', facecolor='white')
    print(f"  ✓ Saved visualization: {output_file}")
    
    # Display summary statistics on the plot
    fig.text(0.02, 0.02, f"Analysis Period: {min(years)}-{max(years)} | "
                          f"Avg Max Rate: {rates.mean():.1f}% | "
                          f"Peak Rate: {max(rates):.1f}% | "
                          f"Organizations: {len(unique_orgs)}", 
             fontsize=9, alpha=0.7)
    
    plt.show()
    plt.close()

def export_detailed_results(yearly_max_df, max_appearances, output_path):
    """Export detailed results and analysis."""
    print(f"\n💾 Exporting detailed results:")
    
    # Main results file
    main_output = output_path / "step7_yearly_max_rates.csv"
    yearly_max_df.to_csv(main_output, index=False)
    print(f"  ✓ Saved yearly maximums: {main_output}")
    
    # Organization frequency analysis
    org_freq_df = pd.DataFrame({
        'organization': max_appearances.index,
        'years_as_maximum': max_appearances.values,
        'percentage_of_years': (max_appearances.values / len(yearly_max_df) * 100).round(2)
    })
    freq_output = output_path / "step7_organization_dominance.csv"
    org_freq_df.to_csv(freq_output, index=False)
    print(f"  ✓ Saved organization dominance: {freq_output}")
    
    # Summary analysis file
    summary_output = output_path / "step7_analysis_summary.txt"
    with open(summary_output, 'w') as f:
        f.write("STEP 7: YEARLY MAXIMUM REAPPOINTMENT RATES ANALYSIS\n")
        f.write("="*60 + "\n\n")
        
        f.write("RESEARCH QUESTION FINDINGS:\n")
        f.write("-"*30 + "\n")
        
        # Most dominant organization
        most_dominant_org = max_appearances.index[0]
        most_dominant_count = max_appearances.iloc[0]
        f.write(f"Most frequent top reappointer: {most_dominant_org}\n")
        f.write(f"Years as top reappointer: {most_dominant_count}/{len(yearly_max_df)} "
                f"({most_dominant_count/len(yearly_max_df)*100:.1f}%)\n\n")
        
        # Trend analysis
        years = yearly_max_df['year'].values
        rates = yearly_max_df['max_reappointment_rate'].values
        trend_slope = np.polyfit(years, rates, 1)[0]
        
        f.write("TREND ANALYSIS:\n")
        f.write("-"*15 + "\n")
        f.write(f"Overall trend: {trend_slope:+.2f} percentage points per year\n")
        
        trend_direction = "increasing" if trend_slope > 0.1 else "decreasing" if trend_slope < -0.1 else "stable"
        f.write(f"Trend direction: {trend_direction}\n")
        
        first_year_rate = yearly_max_df.iloc[0]['max_reappointment_rate']
        last_year_rate = yearly_max_df.iloc[-1]['max_reappointment_rate']
        total_change = last_year_rate - first_year_rate
        f.write(f"Change from {yearly_max_df.iloc[0]['year']} to {yearly_max_df.iloc[-1]['year']}: "
                f"{total_change:+.1f} percentage points\n\n")
        
        # Statistics
        f.write("SUMMARY STATISTICS:\n")
        f.write("-"*20 + "\n")
        f.write(f"Years analyzed: {len(yearly_max_df)}\n")
        f.write(f"Average yearly maximum: {yearly_max_df['max_reappointment_rate'].mean():.2f}%\n")
        f.write(f"Highest rate achieved: {yearly_max_df['max_reappointment_rate'].max():.2f}%\n")
        f.write(f"Lowest yearly maximum: {yearly_max_df['max_reappointment_rate'].min():.2f}%\n")
        f.write(f"Organizations appearing as maximum: {len(max_appearances)}\n")
    
    print(f"  ✓ Saved analysis summary: {summary_output}")

def identify_yearly_maximums():
    """Main function to identify yearly maximum reappointment rates."""
    print("="*60)
    print("STEP 7: IDENTIFYING YEARLY MAXIMUM REAPPOINTMENT RATES")
    print("="*60)
    
    # Define paths
    input_path = Path("scripts/claudesonnet4/version2/execution4/analysis_data")
    input_file = input_path / "step6_reappointment_rates.csv"
    output_file = input_path / "step7_yearly_max_rates.csv"
    
    # Validate input file
    if not validate_input_file(input_file):
        return False
    
    try:
        # Load reappointment rates data
        print(f"\n📂 Loading reappointment rates data...")
        df = pd.read_csv(input_file)
        print(f"✓ Loaded dataset: {len(df):,} org-year combinations")
        
        # Filter for statistically significant organizations
        df_filtered = filter_significant_organizations(df, min_appointments=5)
        
        if len(df_filtered) == 0:
            print("✗ No organizations meet the minimum appointment threshold.")
            return False
        
        # Identify yearly maximum reappointment rates
        yearly_max_df = identify_yearly_max_rates(df_filtered)
        
        # Analyze dominant organizations
        max_appearances = analyze_dominant_organizations(yearly_max_df)
        
        # Analyze rate trends over time
        analyze_rate_trends(yearly_max_df)
        
        # Create visualization
        create_visualization(yearly_max_df, input_path)
        
        # Export detailed results
        export_detailed_results(yearly_max_df, max_appearances, input_path)
        
        # Display final summary
        print(f"\n" + "="*60)
        print("RESEARCH QUESTION SUMMARY")
        print("="*60)
        
        most_dominant_org = max_appearances.index[0]
        most_dominant_count = max_appearances.iloc[0]
        
        print(f"🏆 WHICH GOVERNMENT BRANCH REAPPOINTS MOST FREQUENTLY?")
        print(f"   Answer: {most_dominant_org}")
        print(f"   Evidence: Top reappointer in {most_dominant_count}/{len(yearly_max_df)} years "
              f"({most_dominant_count/len(yearly_max_df)*100:.1f}%)")
        
        # Trend analysis
        years = yearly_max_df['year'].values
        rates = yearly_max_df['max_reappointment_rate'].values
        trend_slope = np.polyfit(years, rates, 1)[0]
        
        print(f"\n📈 IS THIS TREND INCREASING OR DECLINING?")
        if trend_slope > 0.1:
            trend_answer = "INCREASING"
            trend_emoji = "📈"
        elif trend_slope < -0.1:
            trend_answer = "DECLINING"  
            trend_emoji = "📉"
        else:
            trend_answer = "STABLE"
            trend_emoji = "➡️"
        
        print(f"   Answer: {trend_answer} {trend_emoji}")
        print(f"   Evidence: {trend_slope:+.2f} percentage points per year")
        
        first_year_rate = yearly_max_df.iloc[0]['max_reappointment_rate']
        last_year_rate = yearly_max_df.iloc[-1]['max_reappointment_rate']
        total_change = last_year_rate - first_year_rate
        print(f"   Change 2013→2024: {total_change:+.1f} percentage points")
        
        print("\n" + "="*60)
        print("STEP 7 COMPLETED SUCCESSFULLY")
        print("="*60)
        print(f"Output: {output_file}")
        print("Ready for Step 8: Annual reappointment proportions analysis")
        
        return True
        
    except Exception as e:
        print(f"✗ Error identifying yearly maximums: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = identify_yearly_maximums()
    if not success:
        print("\n❌ Step 7 failed. Please check the errors above and retry.")
        sys.exit(1)
    else:
        print("\n✅ Step 7 completed successfully!")