#!/usr/bin/env python3
"""
Step 8: Compute Government-wide Annual Reappointment Proportions
Research Question: Which government branch in New Brunswick most frequently reappoints 
past appointees, and is this trend increasing or declining over the past 12 years?

This script computes the government-wide reappointment proportion for each year,
showing the overall trend across all organizations combined.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import sys
import os

def validate_input_file(input_file):
    """Validate that the Step 6 input file exists and has required columns."""
    if not input_file.exists():
        print(f"‚úó Input file not found: {input_file}")
        print("Please run Step 6 first to create reappointment rates.")
        return False
    
    try:
        # Read and validate required columns
        df = pd.read_csv(input_file)
        required_columns = ['org_clean', 'year', 'appointment_count', 'reappointment_count', 'reappointment_rate']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"‚úó Missing required columns: {missing_columns}")
            print(f"Available columns: {list(df.columns)}")
            return False
        
        print(f"‚úì Input file validated: {input_file}")
        print(f"  Records: {len(df):,}")
        print(f"  Required columns present: {required_columns}")
        return True
        
    except Exception as e:
        print(f"‚úó Error reading input file: {e}")
        return False

def compute_annual_proportions(df):
    """Compute government-wide reappointment proportions for each year."""
    print("\nüìä Computing government-wide annual reappointment proportions:")
    
    # Aggregate by year across all organizations
    annual_summary = df.groupby('year').agg({
        'appointment_count': 'sum',      # Total appointments government-wide
        'reappointment_count': 'sum'     # Total reappointments government-wide
    }).reset_index()
    
    # Calculate government-wide reappointment proportion
    annual_summary['reappointment_proportion'] = (
        annual_summary['reappointment_count'] / annual_summary['appointment_count'] * 100
    ).round(2)
    
    # Add additional metrics
    annual_summary['new_appointments'] = (
        annual_summary['appointment_count'] - annual_summary['reappointment_count']
    )
    annual_summary['new_appointment_proportion'] = (
        annual_summary['new_appointments'] / annual_summary['appointment_count'] * 100
    ).round(2)
    
    print(f"  Computed proportions for {len(annual_summary)} years")
    
    # Display year-by-year breakdown
    print(f"\n  Annual government-wide reappointment proportions:")
    print(f"  {'Year':<6} {'Total':<8} {'Reapp':<8} {'New':<8} {'Reapp %':<10} {'New %':<8}")
    print(f"  {'-'*6} {'-'*8} {'-'*8} {'-'*8} {'-'*10} {'-'*8}")
    
    for _, row in annual_summary.iterrows():
        print(f"  {int(row['year']):<6} "
              f"{int(row['appointment_count']):<8} "
              f"{int(row['reappointment_count']):<8} "
              f"{int(row['new_appointments']):<8} "
              f"{row['reappointment_proportion']:<10.1f} "
              f"{row['new_appointment_proportion']:<8.1f}")
    
    return annual_summary

def analyze_overall_trends(annual_summary):
    """Analyze overall trends in government-wide reappointment proportions."""
    print(f"\nüìà Analyzing overall government-wide trends:")
    
    # Basic statistics
    total_years = len(annual_summary)
    avg_proportion = annual_summary['reappointment_proportion'].mean()
    median_proportion = annual_summary['reappointment_proportion'].median()
    min_proportion = annual_summary['reappointment_proportion'].min()
    max_proportion = annual_summary['reappointment_proportion'].max()
    
    min_year = annual_summary.loc[annual_summary['reappointment_proportion'].idxmin(), 'year']
    max_year = annual_summary.loc[annual_summary['reappointment_proportion'].idxmax(), 'year']
    
    print(f"  Overall statistics (2013-2024):")
    print(f"    Average reappointment proportion: {avg_proportion:.1f}%")
    print(f"    Median reappointment proportion: {median_proportion:.1f}%")
    print(f"    Minimum proportion: {min_proportion:.1f}% (in {int(min_year)})")
    print(f"    Maximum proportion: {max_proportion:.1f}% (in {int(max_year)})")
    print(f"    Range: {max_proportion - min_proportion:.1f} percentage points")
    
    # Trend analysis
    years = annual_summary['year'].values
    proportions = annual_summary['reappointment_proportion'].values
    
    if len(years) > 1:
        # Linear trend calculation
        trend_slope, trend_intercept = np.polyfit(years, proportions, 1)
        correlation = np.corrcoef(years, proportions)[0, 1]
        
        print(f"\n  Trend analysis:")
        print(f"    Linear trend slope: {trend_slope:+.2f} percentage points per year")
        print(f"    Correlation coefficient: {correlation:.3f}")
        
        # Trend strength and direction
        if abs(correlation) >= 0.7:
            trend_strength = "strong"
        elif abs(correlation) >= 0.5:
            trend_strength = "moderate"
        elif abs(correlation) >= 0.3:
            trend_strength = "weak"
        else:
            trend_strength = "negligible"
        
        if trend_slope > 0.1:
            trend_direction = "increasing"
            trend_emoji = "üìà"
        elif trend_slope < -0.1:
            trend_direction = "decreasing"
            trend_emoji = "üìâ"
        else:
            trend_direction = "stable"
            trend_emoji = "‚û°Ô∏è"
        
        print(f"    Overall trend: {trend_strength} {trend_direction} trend {trend_emoji}")
        
        # Calculate total change
        first_year_prop = annual_summary.iloc[0]['reappointment_proportion']
        last_year_prop = annual_summary.iloc[-1]['reappointment_proportion']
        total_change = last_year_prop - first_year_prop
        
        print(f"    Change from {int(annual_summary.iloc[0]['year'])} to {int(annual_summary.iloc[-1]['year'])}: "
              f"{total_change:+.1f} percentage points")
        
        # Projected trend (if current trend continues)
        future_year = 2030
        projected_proportion = trend_slope * future_year + trend_intercept
        print(f"    Projected proportion for {future_year} (if trend continues): {projected_proportion:.1f}%")
    
    return trend_slope, correlation

def analyze_year_over_year_changes(annual_summary):
    """Analyze year-over-year changes in government-wide proportions."""
    print(f"\nüìä Year-over-year changes in government-wide proportions:")
    
    changes_analysis = []
    
    for i in range(1, len(annual_summary)):
        current = annual_summary.iloc[i]
        previous = annual_summary.iloc[i-1]
        
        prop_change = current['reappointment_proportion'] - previous['reappointment_proportion']
        appointments_change = current['appointment_count'] - previous['appointment_count']
        reapp_change = current['reappointment_count'] - previous['reappointment_count']
        
        direction = "‚ÜóÔ∏è" if prop_change > 0 else "‚ÜòÔ∏è" if prop_change < 0 else "‚û°Ô∏è"
        
        print(f"  {int(previous['year'])} ‚Üí {int(current['year'])}: "
              f"{prop_change:+.1f} percentage points {direction}")
        print(f"    Proportions: {previous['reappointment_proportion']:.1f}% ‚Üí "
              f"{current['reappointment_proportion']:.1f}%")
        print(f"    Total appointments: {int(previous['appointment_count']):,} ‚Üí "
              f"{int(current['appointment_count']):,} ({appointments_change:+,})")
        print(f"    Reappointments: {int(previous['reappointment_count']):,} ‚Üí "
              f"{int(current['reappointment_count']):,} ({reapp_change:+,})")
        print()
        
        changes_analysis.append({
            'year_from': int(previous['year']),
            'year_to': int(current['year']),
            'proportion_change': prop_change,
            'appointments_change': appointments_change,
            'reappointments_change': reapp_change
        })
    
    # Identify largest changes
    changes_df = pd.DataFrame(changes_analysis)
    
    if len(changes_df) > 0:
        largest_increase = changes_df.loc[changes_df['proportion_change'].idxmax()]
        largest_decrease = changes_df.loc[changes_df['proportion_change'].idxmin()]
        
        print(f"  Largest year-over-year changes:")
        print(f"    Largest increase: {largest_increase['year_from']} ‚Üí {largest_increase['year_to']} "
              f"({largest_increase['proportion_change']:+.1f} pp)")
        print(f"    Largest decrease: {largest_decrease['year_from']} ‚Üí {largest_decrease['year_to']} "
              f"({largest_decrease['proportion_change']:+.1f} pp)")
    
    return changes_df

def compare_with_organizational_maximums(annual_summary, input_path):
    """Compare government-wide proportions with organizational maximums from Step 7."""
    print(f"\nüîó Comparing with organizational maximums:")
    
    try:
        # Load Step 7 results
        step7_file = input_path / "step7_yearly_max_rates.csv"
        if step7_file.exists():
            max_rates = pd.read_csv(step7_file)
            print(f"  ‚úì Loaded yearly maximum rates from Step 7")
            
            # Merge with annual summary
            comparison = pd.merge(
                annual_summary[['year', 'reappointment_proportion']], 
                max_rates[['year', 'max_reappointment_rate', 'max_organization']], 
                on='year', 
                how='inner'
            )
            
            # Calculate gap between government-wide and maximum organizational rates
            comparison['rate_gap'] = (
                comparison['max_reappointment_rate'] - comparison['reappointment_proportion']
            ).round(2)
            
            print(f"  Comparison of government-wide vs. organizational maximum rates:")
            print(f"  {'Year':<6} {'Gov-wide':<10} {'Org Max':<10} {'Gap':<8} {'Top Organization'}")
            print(f"  {'-'*6} {'-'*10} {'-'*10} {'-'*8} {'-'*30}")
            
            for _, row in comparison.iterrows():
                print(f"  {int(row['year']):<6} "
                      f"{row['reappointment_proportion']:<10.1f} "
                      f"{row['max_reappointment_rate']:<10.1f} "
                      f"{row['rate_gap']:<8.1f} "
                      f"{row['max_organization']}")
            
            # Analysis of the gap
            avg_gap = comparison['rate_gap'].mean()
            min_gap = comparison['rate_gap'].min()
            max_gap = comparison['rate_gap'].max()
            
            print(f"\n  Gap analysis:")
            print(f"    Average gap (org max - gov-wide): {avg_gap:.1f} percentage points")
            print(f"    Minimum gap: {min_gap:.1f} pp")
            print(f"    Maximum gap: {max_gap:.1f} pp")
            print(f"    This shows how much higher the top-performing organization")
            print(f"    is compared to the government-wide average each year.")
            
            return comparison
        else:
            print(f"  ‚ö† Step 7 results not found. Skipping comparison.")
            return None
            
    except Exception as e:
        print(f"  ‚ö† Error comparing with Step 7 results: {e}")
        return None

def create_government_wide_visualization(annual_summary, comparison_data, output_path):
    """Create visualization of government-wide reappointment proportions."""
    print(f"\nüìä Creating government-wide visualization:")
    
    # Set up the plot
    plt.style.use('default')
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10), gridspec_kw={'height_ratios': [3, 1]})
    
    years = annual_summary['year']
    gov_proportions = annual_summary['reappointment_proportion']
    total_appointments = annual_summary['appointment_count']
    
    # Main plot: Government-wide proportions over time
    line1 = ax1.plot(years, gov_proportions, 'o-', linewidth=3, markersize=8, 
                     color='#2E86C1', alpha=0.8, label='Government-wide Proportion')
    
    # Add organizational maximums if available
    if comparison_data is not None:
        max_rates = comparison_data['max_reappointment_rate']
        line2 = ax1.plot(comparison_data['year'], max_rates, 's--', linewidth=2, markersize=6,
                         color='#E74C3C', alpha=0.8, label='Organizational Maximum')
        
        # Fill area between the lines to show the gap
        ax1.fill_between(comparison_data['year'], gov_proportions, max_rates, 
                         alpha=0.2, color='#F39C12', label='Performance Gap')
    
    # Add trend line for government-wide proportions
    if len(years) > 1:
        z = np.polyfit(years, gov_proportions, 1)
        p = np.poly1d(z)
        ax1.plot(years, p(years), "r--", alpha=0.7, linewidth=2, 
                 label=f'Gov-wide Trend: {z[0]:+.2f} pp/year')
    
    # Formatting for main plot
    ax1.set_xlabel('Year', fontweight='bold')
    ax1.set_ylabel('Reappointment Proportion (%)', fontweight='bold')
    ax1.set_title('New Brunswick Government-wide Reappointment Proportions\n(2013-2024)', 
                  fontsize=14, fontweight='bold', pad=20)
    ax1.grid(True, alpha=0.3)
    ax1.legend(loc='upper left')
    ax1.set_ylim(0, max(gov_proportions) * 1.2)
    
    # Set x-axis to show all years
    ax1.set_xticks(sorted(years))
    ax1.set_xticklabels(sorted(years), rotation=45)
    
    # Add data point labels
    for i, (year, prop) in enumerate(zip(years, gov_proportions)):
        ax1.annotate(f'{prop:.1f}%', (year, prop), xytext=(0, 10), 
                    textcoords='offset points', ha='center', fontsize=9, alpha=0.8)
    
    # Secondary plot: Total appointments per year
    bars = ax2.bar(years, total_appointments, alpha=0.7, color='#28B463')
    
    ax2.set_xlabel('Year', fontweight='bold')
    ax2.set_ylabel('Total\nAppointments', fontweight='bold')
    ax2.set_title('Annual Government-wide Appointment Volume', fontweight='bold')
    ax2.grid(True, alpha=0.3, axis='y')
    ax2.set_xticks(sorted(years))
    ax2.set_xticklabels(sorted(years), rotation=45)
    
    # Add value labels on bars
    for bar, count in zip(bars, total_appointments):
        ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(total_appointments)*0.01, 
                str(int(count)), ha='center', va='bottom', fontweight='bold', fontsize=9)
    
    # Adjust layout
    plt.tight_layout()
    
    # Add summary statistics
    avg_prop = gov_proportions.mean()
    trend_slope = np.polyfit(years, gov_proportions, 1)[0]
    total_change = gov_proportions.iloc[-1] - gov_proportions.iloc[0]
    
    fig.text(0.02, 0.02, f"Period: {min(years):.0f}-{max(years):.0f} | "
                          f"Avg Proportion: {avg_prop:.1f}% | "
                          f"Trend: {trend_slope:+.2f} pp/year | "
                          f"Total Change: {total_change:+.1f} pp", 
             fontsize=10, alpha=0.7)
    
    # Save the plot
    output_file = output_path / "step8_annual_reappointment_proportions.png"
    plt.savefig(output_file, dpi=300, bbox_inches='tight', facecolor='white')
    print(f"  ‚úì Saved visualization: {output_file}")
    
    plt.show()
    plt.close()

def export_comprehensive_results(annual_summary, comparison_data, changes_df, output_path):
    """Export comprehensive annual proportions analysis."""
    print(f"\nüíæ Exporting comprehensive results:")
    
    # Main annual proportions file
    main_output = output_path / "step8_annual_proportions.csv"
    annual_summary.to_csv(main_output, index=False)
    print(f"  ‚úì Saved annual proportions: {main_output}")
    
    # Comparison with organizational maximums if available
    if comparison_data is not None:
        comparison_output = output_path / "step8_comparison_gov_vs_org_max.csv"
        comparison_data.to_csv(comparison_output, index=False)
        print(f"  ‚úì Saved gov vs org max comparison: {comparison_output}")
    
    # Year-over-year changes
    if len(changes_df) > 0:
        changes_output = output_path / "step8_year_over_year_changes.csv"
        changes_df.to_csv(changes_output, index=False)
        print(f"  ‚úì Saved year-over-year changes: {changes_output}")
    
    # Summary statistics file
    summary_output = output_path / "step8_analysis_summary.txt"
    with open(summary_output, 'w') as f:
        f.write("STEP 8: GOVERNMENT-WIDE ANNUAL REAPPOINTMENT PROPORTIONS\n")
        f.write("="*60 + "\n\n")
        
        f.write("GOVERNMENT-WIDE TREND ANALYSIS:\n")
        f.write("-"*35 + "\n")
        avg_prop = annual_summary['reappointment_proportion'].mean()
        trend_slope = np.polyfit(annual_summary['year'], annual_summary['reappointment_proportion'], 1)[0]
        total_change = (annual_summary.iloc[-1]['reappointment_proportion'] - 
                       annual_summary.iloc[0]['reappointment_proportion'])
        
        f.write(f"Average government-wide proportion: {avg_prop:.2f}%\n")
        f.write(f"Trend slope: {trend_slope:+.2f} percentage points per year\n")
        f.write(f"Total change (2013-2024): {total_change:+.1f} percentage points\n")
        f.write(f"Years analyzed: {len(annual_summary)}\n\n")
        
        if comparison_data is not None:
            avg_gap = comparison_data['rate_gap'].mean()
            f.write("COMPARISON WITH ORGANIZATIONAL MAXIMUMS:\n")
            f.write("-"*40 + "\n")
            f.write(f"Average gap (org max - gov-wide): {avg_gap:.2f} percentage points\n")
            f.write("This shows the difference between top-performing organizations\n")
            f.write("and the government-wide average each year.\n")
    
    print(f"  ‚úì Saved analysis summary: {summary_output}")

def compute_annual_proportions():
    """Main function to compute government-wide annual reappointment proportions."""
    print("="*60)
    print("STEP 8: COMPUTING GOVERNMENT-WIDE ANNUAL REAPPOINTMENT PROPORTIONS")
    print("="*60)
    
    # Define paths
    input_path = Path("scripts/claudesonnet4/version2/execution4/analysis_data")
    input_file = input_path / "step6_reappointment_rates.csv"
    output_file = input_path / "step8_annual_proportions.csv"
    
    # Validate input file
    if not validate_input_file(input_file):
        return False
    
    try:
        # Load reappointment rates data
        print(f"\nüìÇ Loading reappointment rates data...")
        df = pd.read_csv(input_file)
        print(f"‚úì Loaded dataset: {len(df):,} org-year combinations")
        
        # Compute annual government-wide proportions
        annual_summary = compute_annual_proportions(df)
        
        # Analyze overall trends
        trend_slope, correlation = analyze_overall_trends(annual_summary)
        
        # Analyze year-over-year changes
        changes_df = analyze_year_over_year_changes(annual_summary)
        
        # Compare with organizational maximums from Step 7
        comparison_data = compare_with_organizational_maximums(annual_summary, input_path)
        
        # Create visualization
        create_government_wide_visualization(annual_summary, comparison_data, input_path)
        
        # Export comprehensive results
        export_comprehensive_results(annual_summary, comparison_data, changes_df, input_path)
        
        # Display final summary
        print(f"\n" + "="*60)
        print("GOVERNMENT-WIDE TREND SUMMARY")
        print("="*60)
        
        avg_proportion = annual_summary['reappointment_proportion'].mean()
        first_year_prop = annual_summary.iloc[0]['reappointment_proportion']
        last_year_prop = annual_summary.iloc[-1]['reappointment_proportion']
        total_change = last_year_prop - first_year_prop
        
        print(f"üìä GOVERNMENT-WIDE REAPPOINTMENT TREND:")
        print(f"   Average proportion (2013-2024): {avg_proportion:.1f}%")
        print(f"   Starting proportion (2013): {first_year_prop:.1f}%")
        print(f"   Ending proportion (2024): {last_year_prop:.1f}%")
        print(f"   Total change: {total_change:+.1f} percentage points")
        print(f"   Annual trend: {trend_slope:+.2f} percentage points per year")
        
        if trend_slope > 0.1:
            trend_direction = "INCREASING üìà"
        elif trend_slope < -0.1:
            trend_direction = "DECREASING üìâ"
        else:
            trend_direction = "STABLE ‚û°Ô∏è"
        
        print(f"   Overall trend: {trend_direction}")
        
        print("\n" + "="*60)
        print("STEP 8 COMPLETED SUCCESSFULLY")
        print("="*60)
        print(f"Output: {output_file}")
        print(f"Government-wide analysis complete for {len(annual_summary)} years")
        print("Ready for Step 9: Regression analysis")
        
        return True
        
    except Exception as e:
        print(f"‚úó Error computing annual proportions: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = compute_annual_proportions()
    if not success:
        print("\n‚ùå Step 8 failed. Please check the errors above and retry.")
        sys.exit(1)
    else:
        print("\n‚úÖ Step 8 completed successfully!")