"""
Step 9: Run a linear regression on the annual reappointment proportions to assess trend direction and significance
New Brunswick Government Appointments Analysis

This script performs comprehensive linear regression analysis on annual reappointment proportions
to determine if there is a statistically significant trend over the 12-year period (2013-2024).
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import sys
import warnings
from scipy import stats
from scipy.stats import normaltest, shapiro
import statsmodels.api as sm
from statsmodels.stats.diagnostic import het_breuschpagan, het_white
from statsmodels.stats.stattools import durbin_watson

# Suppress warnings
warnings.filterwarnings('ignore', category=UserWarning)
warnings.filterwarnings('ignore', category=FutureWarning)

def validate_input_file():
    """Validate that the input file from Step 8 exists."""
    input_file = Path("scripts/claudesonnet4/version2/execution4/analysis_data/step8_annual_proportions.csv")
    
    if not input_file.exists():
        raise FileNotFoundError(f"Input file not found: {input_file}")
    
    print(f"✓ Input file found: {input_file}")
    return input_file

def load_annual_proportions(input_file):
    """Load the annual proportions dataset from Step 8."""
    try:
        df = pd.read_csv(input_file)
        print(f"✓ Loaded annual proportions with {len(df)} records and {len(df.columns)} columns")
        
        # Display available columns
        print(f"Available columns: {list(df.columns)}")
        
        # Validate required columns
        required_columns = ['year', 'reappointment_proportion']
        
        # Check for alternative column names
        if 'reappointment_proportion' not in df.columns:
            if 'reappointment_proportion_percent' in df.columns:
                df['reappointment_proportion'] = df['reappointment_proportion_percent'] / 100
                print("  Converted percentage to proportion format")
            else:
                raise ValueError("Could not find reappointment proportion column")
        
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        return df
        
    except Exception as e:
        print(f"✗ Error loading annual proportions dataset: {str(e)}")
        raise

def prepare_regression_data(df):
    """Prepare data for regression analysis."""
    print("\nPreparing data for regression analysis...")
    
    # Create a copy to work with
    df_regression = df.copy()
    
    # Ensure year is numeric
    df_regression['year_numeric'] = pd.to_numeric(df_regression['year'])
    
    # Ensure proportion is numeric
    df_regression['proportion'] = pd.to_numeric(df_regression['reappointment_proportion'])
    
    # Create percentage version for easier interpretation
    if 'reappointment_proportion_percent' in df_regression.columns:
        df_regression['proportion_percent'] = pd.to_numeric(df_regression['reappointment_proportion_percent'])
    else:
        df_regression['proportion_percent'] = df_regression['proportion'] * 100
    
    # Sort by year
    df_regression = df_regression.sort_values('year_numeric').reset_index(drop=True)
    
    # Remove any missing values
    before_drop = len(df_regression)
    df_regression = df_regression.dropna(subset=['year_numeric', 'proportion'])
    after_drop = len(df_regression)
    
    if before_drop != after_drop:
        print(f"  Removed {before_drop - after_drop} records with missing values")
    
    # Create time variable (years since start)
    min_year = df_regression['year_numeric'].min()
    df_regression['time'] = df_regression['year_numeric'] - min_year
    
    print(f"✓ Prepared {len(df_regression)} data points for regression")
    print(f"  Time period: {df_regression['year_numeric'].min()} - {df_regression['year_numeric'].max()}")
    print(f"  Proportion range: {df_regression['proportion_percent'].min():.2f}% - {df_regression['proportion_percent'].max():.2f}%")
    
    return df_regression

def perform_basic_regression(df):
    """Perform basic linear regression analysis."""
    print("\nPerforming basic linear regression analysis...")
    
    # Extract variables
    X = df['time'].values
    y = df['proportion_percent'].values
    n = len(df)
    
    # Perform linear regression using scipy.stats
    slope, intercept, r_value, p_value, std_err = stats.linregress(X, y)
    
    # Calculate additional statistics
    y_pred = slope * X + intercept
    residuals = y - y_pred
    ss_res = np.sum(residuals ** 2)
    ss_tot = np.sum((y - np.mean(y)) ** 2)
    r_squared = 1 - (ss_res / ss_tot)
    
    # Standard error of regression
    mse = ss_res / (n - 2)
    se_regression = np.sqrt(mse)
    
    # Confidence intervals for slope
    t_critical = stats.t.ppf(0.975, n - 2)  # 95% confidence interval
    slope_ci_lower = slope - t_critical * std_err
    slope_ci_upper = slope + t_critical * std_err
    
    print(f"Basic Linear Regression Results:")
    print(f"  Equation: Proportion = {intercept:.3f} + {slope:.3f} × Time")
    print(f"  Slope: {slope:.4f} percentage points per year")
    print(f"  Slope 95% CI: [{slope_ci_lower:.4f}, {slope_ci_upper:.4f}]")
    print(f"  Intercept: {intercept:.3f}%")
    print(f"  R-squared: {r_squared:.4f}")
    print(f"  Correlation coefficient: {r_value:.4f}")
    print(f"  P-value: {p_value:.6f}")
    print(f"  Standard error of slope: {std_err:.4f}")
    print(f"  Standard error of regression: {se_regression:.3f}")
    
    # Interpret significance
    alpha = 0.05
    if p_value < alpha:
        significance = f"statistically significant at α = {alpha}"
        direction = "increasing" if slope > 0 else "decreasing"
    else:
        significance = f"not statistically significant at α = {alpha}"
        direction = "no clear trend"
    
    print(f"  Statistical significance: {significance}")
    print(f"  Trend direction: {direction}")
    
    return {
        'slope': slope,
        'intercept': intercept,
        'r_value': r_value,
        'r_squared': r_squared,
        'p_value': p_value,
        'std_err': std_err,
        'se_regression': se_regression,
        'slope_ci_lower': slope_ci_lower,
        'slope_ci_upper': slope_ci_upper,
        'y_pred': y_pred,
        'residuals': residuals,
        'n': n
    }

def perform_advanced_regression(df):
    """Perform advanced regression analysis using statsmodels."""
    print("\nPerforming advanced regression analysis...")
    
    # Prepare data
    X = df['time']
    y = df['proportion_percent']
    
    # Add constant for intercept
    X_with_const = sm.add_constant(X)
    
    # Fit the model
    model = sm.OLS(y, X_with_const).fit()
    
    print(f"Advanced Regression Results (OLS):")
    print(f"  R-squared: {model.rsquared:.4f}")
    print(f"  Adjusted R-squared: {model.rsquared_adj:.4f}")
    print(f"  F-statistic: {model.fvalue:.4f}")
    print(f"  F-statistic p-value: {model.f_pvalue:.6f}")
    print(f"  AIC: {model.aic:.2f}")
    print(f"  BIC: {model.bic:.2f}")
    print(f"  Log-likelihood: {model.llf:.2f}")
    
    # Parameter estimates
    print(f"\nParameter Estimates:")
    print(f"  Intercept: {model.params[0]:.4f} (SE: {model.bse[0]:.4f}, p: {model.pvalues[0]:.6f})")
    print(f"  Slope: {model.params[1]:.4f} (SE: {model.bse[1]:.4f}, p: {model.pvalues[1]:.6f})")
    
    # Confidence intervals
    conf_int = model.conf_int()
    print(f"\n95% Confidence Intervals:")
    print(f"  Intercept: [{conf_int.iloc[0, 0]:.4f}, {conf_int.iloc[0, 1]:.4f}]")
    print(f"  Slope: [{conf_int.iloc[1, 0]:.4f}, {conf_int.iloc[1, 1]:.4f}]")
    
    return model

def test_regression_assumptions(df, basic_results, model):
    """Test regression assumptions."""
    print("\nTesting regression assumptions...")
    
    residuals = basic_results['residuals']
    y_pred = basic_results['y_pred']
    n = basic_results['n']
    
    # 1. Linearity (visual inspection)
    print(f"1. Linearity assumption:")
    print(f"   - R-squared: {basic_results['r_squared']:.4f} (higher values suggest linear relationship)")
    
    # 2. Independence (Durbin-Watson test)
    print(f"2. Independence assumption (Durbin-Watson test):")
    dw_stat = durbin_watson(residuals)
    print(f"   - Durbin-Watson statistic: {dw_stat:.4f}")
    print(f"   - Interpretation: {interpret_durbin_watson(dw_stat)}")
    
    # 3. Homoscedasticity (Breusch-Pagan test)
    print(f"3. Homoscedasticity assumption:")
    try:
        bp_stat, bp_pvalue, _, _ = het_breuschpagan(residuals, model.model.exog)
        print(f"   - Breusch-Pagan test statistic: {bp_stat:.4f}")
        print(f"   - Breusch-Pagan p-value: {bp_pvalue:.6f}")
        if bp_pvalue > 0.05:
            print(f"   - Conclusion: Homoscedasticity assumption satisfied (p > 0.05)")
        else:
            print(f"   - Conclusion: Heteroscedasticity detected (p ≤ 0.05)")
    except Exception as e:
        print(f"   - Could not perform Breusch-Pagan test: {e}")
    
    # 4. Normality of residuals
    print(f"4. Normality of residuals:")
    
    # Shapiro-Wilk test (better for small samples)
    if n <= 50:
        shapiro_stat, shapiro_pvalue = shapiro(residuals)
        print(f"   - Shapiro-Wilk test statistic: {shapiro_stat:.4f}")
        print(f"   - Shapiro-Wilk p-value: {shapiro_pvalue:.6f}")
        if shapiro_pvalue > 0.05:
            print(f"   - Conclusion: Residuals are normally distributed (p > 0.05)")
        else:
            print(f"   - Conclusion: Residuals may not be normally distributed (p ≤ 0.05)")
    
    # D'Agostino and Pearson test
    try:
        dagostino_stat, dagostino_pvalue = normaltest(residuals)
        print(f"   - D'Agostino normality test statistic: {dagostino_stat:.4f}")
        print(f"   - D'Agostino p-value: {dagostino_pvalue:.6f}")
        if dagostino_pvalue > 0.05:
            print(f"   - Conclusion: Residuals are normally distributed (p > 0.05)")
        else:
            print(f"   - Conclusion: Residuals may not be normally distributed (p ≤ 0.05)")
    except Exception as e:
        print(f"   - Could not perform D'Agostino test: {e}")
    
    # Summary statistics of residuals
    print(f"\nResidual statistics:")
    print(f"   - Mean: {np.mean(residuals):.6f} (should be close to 0)")
    print(f"   - Standard deviation: {np.std(residuals):.4f}")
    print(f"   - Min: {np.min(residuals):.4f}")
    print(f"   - Max: {np.max(residuals):.4f}")
    print(f"   - Skewness: {stats.skew(residuals):.4f}")
    print(f"   - Kurtosis: {stats.kurtosis(residuals):.4f}")

def interpret_durbin_watson(dw_stat):
    """Interpret Durbin-Watson statistic."""
    if 1.5 <= dw_stat <= 2.5:
        return "No autocorrelation (independence assumption satisfied)"
    elif dw_stat < 1.5:
        return "Positive autocorrelation detected"
    else:
        return "Negative autocorrelation detected"

def create_regression_visualization(df, basic_results, output_dir):
    """Create comprehensive regression analysis visualization."""
    print("\nCreating regression analysis visualization...")
    
    try:
        # Set up the plotting style
        plt.style.use('default')
        sns.set_palette("husl")
        
        # Create figure with subplots
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle('Linear Regression Analysis: Annual Reappointment Proportions (2013-2024)', 
                     fontsize=16, fontweight='bold', y=0.98)
        
        # Plot 1: Scatter plot with regression line
        X = df['time']
        y = df['proportion_percent']
        y_pred = basic_results['y_pred']
        
        ax1.scatter(df['year_numeric'], y, color='blue', s=80, alpha=0.7, edgecolors='black', label='Observed Data')
        ax1.plot(df['year_numeric'], y_pred, color='red', linewidth=2, label=f'Regression Line (R² = {basic_results["r_squared"]:.3f})')
        
        # Add confidence interval
        X_matrix = np.column_stack([np.ones(len(X)), X])
        mse = np.sum(basic_results['residuals']**2) / (len(X) - 2)
        var_pred = mse * (1 + np.diag(X_matrix @ np.linalg.inv(X_matrix.T @ X_matrix) @ X_matrix.T))
        se_pred = np.sqrt(var_pred)
        ci_upper = y_pred + 1.96 * se_pred
        ci_lower = y_pred - 1.96 * se_pred
        
        ax1.fill_between(df['year_numeric'], ci_lower, ci_upper, alpha=0.3, color='red', label='95% Confidence Interval')
        
        ax1.set_xlabel('Year', fontweight='bold')
        ax1.set_ylabel('Reappointment Proportion (%)', fontweight='bold')
        ax1.set_title('Regression Analysis: Proportion vs Time', fontweight='bold')
        ax1.grid(True, alpha=0.3)
        ax1.legend()
        
        # Add regression equation
        equation = f'y = {basic_results["intercept"]:.3f} + {basic_results["slope"]:.4f}x'
        p_text = f'p = {basic_results["p_value"]:.4f}' if basic_results["p_value"] >= 0.001 else 'p < 0.001'
        ax1.text(0.05, 0.95, f'{equation}\n{p_text}', transform=ax1.transAxes, 
                bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8),
                verticalalignment='top', fontsize=10)
        
        # Plot 2: Residuals vs Fitted
        ax2.scatter(y_pred, basic_results['residuals'], color='green', s=60, alpha=0.7, edgecolors='black')
        ax2.axhline(y=0, color='red', linestyle='--', alpha=0.8)
        ax2.set_xlabel('Fitted Values (%)', fontweight='bold')
        ax2.set_ylabel('Residuals (%)', fontweight='bold')
        ax2.set_title('Residuals vs Fitted Values', fontweight='bold')
        ax2.grid(True, alpha=0.3)
        
        # Add trend line to residuals
        res_slope, res_intercept, _, _, _ = stats.linregress(y_pred, basic_results['residuals'])
        res_line = res_slope * y_pred + res_intercept
        ax2.plot(y_pred, res_line, color='orange', linewidth=2, alpha=0.7, label='Residual Trend')
        ax2.legend()
        
        # Plot 3: Q-Q plot for normality
        stats.probplot(basic_results['residuals'], dist="norm", plot=ax3)
        ax3.set_title('Q-Q Plot: Residual Normality Check', fontweight='bold')
        ax3.grid(True, alpha=0.3)
        
        # Plot 4: Residuals histogram
        ax4.hist(basic_results['residuals'], bins=max(3, len(basic_results['residuals'])//3), 
                alpha=0.7, color='purple', edgecolor='black', density=True)
        
        # Overlay normal distribution
        mu, std = stats.norm.fit(basic_results['residuals'])
        xmin, xmax = ax4.get_xlim()
        x = np.linspace(xmin, xmax, 100)
        p = stats.norm.pdf(x, mu, std)
        ax4.plot(x, p, 'k', linewidth=2, label=f'Normal fit (μ={mu:.3f}, σ={std:.3f})')
        
        ax4.set_xlabel('Residuals (%)', fontweight='bold')
        ax4.set_ylabel('Density', fontweight='bold')
        ax4.set_title('Residuals Distribution', fontweight='bold')
        ax4.legend()
        ax4.grid(True, alpha=0.3)
        
        # Adjust layout
        plt.tight_layout()
        
        # Save the plot
        output_file = output_dir / "step9_regression_analysis.png"
        plt.savefig(output_file, dpi=300, bbox_inches='tight', facecolor='white')
        plt.close()
        
        print(f"✓ Regression visualization saved to: {output_file}")
        
        return output_file
        
    except Exception as e:
        print(f"✗ Error creating regression visualization: {str(e)}")
        print("  Continuing without visualization...")
        return None

def create_comprehensive_regression_report(df, basic_results, model):
    """Create a comprehensive regression analysis report."""
    print("\nCreating comprehensive regression analysis report...")
    
    report = []
    report.append("="*80)
    report.append("COMPREHENSIVE LINEAR REGRESSION ANALYSIS")
    report.append("Annual Reappointment Proportions (2013-2024)")
    report.append("="*80)
    report.append("")
    
    # Executive Summary
    report.append("EXECUTIVE SUMMARY:")
    report.append("-" * 20)
    
    # Interpret the main findings
    slope = basic_results['slope']
    p_value = basic_results['p_value']
    r_squared = basic_results['r_squared']
    
    if p_value < 0.001:
        significance = "highly significant (p < 0.001)"
    elif p_value < 0.01:
        significance = "very significant (p < 0.01)"
    elif p_value < 0.05:
        significance = "significant (p < 0.05)"
    elif p_value < 0.10:
        significance = "marginally significant (p < 0.10)"
    else:
        significance = "not significant (p ≥ 0.10)"
    
    if slope > 0:
        direction = "increasing"
        change_description = f"increase of {abs(slope):.4f} percentage points per year"
    else:
        direction = "decreasing"
        change_description = f"decrease of {abs(slope):.4f} percentage points per year"
    
    report.append(f"• Research Question: Is there a significant trend in government-wide reappointment")
    report.append(f"  proportions over the 12-year period from 2013 to 2024?")
    report.append("")
    report.append(f"• Key Finding: The analysis reveals a {direction} trend that is {significance}.")
    report.append(f"• Trend Magnitude: Annual reappointment proportions show a {change_description}")
    report.append(f"• Model Fit: The linear model explains {r_squared*100:.1f}% of the variance in annual proportions")
    report.append("")
    
    # Data Summary
    report.append("DATA SUMMARY:")
    report.append("-" * 15)
    min_year = df['year_numeric'].min()
    max_year = df['year_numeric'].max()
    n_years = len(df)
    min_prop = df['proportion_percent'].min()
    max_prop = df['proportion_percent'].max()
    mean_prop = df['proportion_percent'].mean()
    
    report.append(f"• Time Period: {min_year} - {max_year} ({n_years} years)")
    report.append(f"• Proportion Range: {min_prop:.2f}% - {max_prop:.2f}%")
    report.append(f"• Average Proportion: {mean_prop:.2f}%")
    report.append(f"• Total Change: {max_prop - min_prop:+.2f} percentage points over {n_years-1} years")
    report.append("")
    
    # Regression Results
    report.append("REGRESSION RESULTS:")
    report.append("-" * 20)
    
    report.append(f"Basic Linear Regression (Y = α + βX + ε):")
    report.append(f"• Equation: Proportion = {basic_results['intercept']:.4f} + {basic_results['slope']:.4f} × Time")
    report.append(f"• Slope (β): {basic_results['slope']:.6f} percentage points per year")
    report.append(f"• Intercept (α): {basic_results['intercept']:.4f}%")
    report.append(f"• R-squared: {basic_results['r_squared']:.6f}")
    report.append(f"• Correlation: {basic_results['r_value']:.6f}")
    report.append(f"• Standard Error of Slope: {basic_results['std_err']:.6f}")
    report.append(f"• Standard Error of Regression: {basic_results['se_regression']:.4f}")
    report.append("")
    
    # Statistical Significance
    report.append("STATISTICAL SIGNIFICANCE:")
    report.append("-" * 25)
    
    report.append(f"• P-value: {basic_results['p_value']:.8f}")
    report.append(f"• Significance Level: {significance}")
    report.append(f"• 95% Confidence Interval for Slope: [{basic_results['slope_ci_lower']:.6f}, {basic_results['slope_ci_upper']:.6f}]")
    
    if basic_results['p_value'] < 0.05:
        report.append(f"• Conclusion: We reject the null hypothesis (β = 0) at α = 0.05")
        report.append(f"• Interpretation: There IS sufficient evidence of a significant linear trend")
    else:
        report.append(f"• Conclusion: We fail to reject the null hypothesis (β = 0) at α = 0.05")
        report.append(f"• Interpretation: There is NOT sufficient evidence of a significant linear trend")
    
    report.append("")
    
    # Advanced Statistics
    if model is not None:
        report.append("ADVANCED STATISTICS (OLS):")
        report.append("-" * 25)
        
        report.append(f"• Adjusted R-squared: {model.rsquared_adj:.6f}")
        report.append(f"• F-statistic: {model.fvalue:.4f}")
        report.append(f"• F-statistic p-value: {model.f_pvalue:.8f}")
        report.append(f"• Akaike Information Criterion (AIC): {model.aic:.2f}")
        report.append(f"• Bayesian Information Criterion (BIC): {model.bic:.2f}")
        report.append(f"• Log-likelihood: {model.llf:.4f}")
        report.append("")
    
    # Practical Interpretation
    report.append("PRACTICAL INTERPRETATION:")
    report.append("-" * 25)
    
    # Calculate projected change over the full period
    total_projected_change = slope * (n_years - 1)
    
    if abs(slope) < 0.001:
        practical_significance = "negligible"
    elif abs(slope) < 0.01:
        practical_significance = "small"
    elif abs(slope) < 0.05:
        practical_significance = "moderate"
    else:
        practical_significance = "large"
    
    report.append(f"• Annual Rate of Change: {abs(slope):.4f} percentage points per year ({direction})")
    report.append(f"• Practical Significance: {practical_significance}")
    report.append(f"• Projected Total Change (2013-2024): {total_projected_change:+.2f} percentage points")
    
    if basic_results['p_value'] < 0.05:
        report.append(f"• Policy Implication: The {direction} trend is statistically significant and may")
        report.append(f"  indicate systematic changes in government reappointment practices")
    else:
        report.append(f"• Policy Implication: No statistically significant trend detected; variations")
        report.append(f"  may be due to random fluctuations or other factors")
    
    report.append("")
    
    # Model Diagnostics Summary
    report.append("MODEL DIAGNOSTICS SUMMARY:")
    report.append("-" * 28)
    
    residuals = basic_results['residuals']
    
    # Durbin-Watson
    try:
        from statsmodels.stats.stattools import durbin_watson
        dw_stat = durbin_watson(residuals)
        report.append(f"• Independence (Durbin-Watson): {dw_stat:.4f} ({interpret_durbin_watson(dw_stat)})")
    except:
        report.append(f"• Independence: Could not calculate Durbin-Watson statistic")
    
    # Normality
    try:
        shapiro_stat, shapiro_pvalue = stats.shapiro(residuals)
        normality_result = "satisfied" if shapiro_pvalue > 0.05 else "violated"
        report.append(f"• Normality (Shapiro-Wilk): W = {shapiro_stat:.4f}, p = {shapiro_pvalue:.4f} ({normality_result})")
    except:
        report.append(f"• Normality: Could not perform test")
    
    # Residual statistics
    report.append(f"• Residual Mean: {np.mean(residuals):.6f} (should be ≈ 0)")
    report.append(f"• Residual Std Dev: {np.std(residuals):.4f}")
    
    report.append("")
    
    # Conclusions
    report.append("FINAL CONCLUSIONS:")
    report.append("-" * 20)
    
    report.append(f"1. Statistical Conclusion:")
    if basic_results['p_value'] < 0.05:
        report.append(f"   There IS a statistically significant {direction} trend in annual")
        report.append(f"   reappointment proportions (p = {basic_results['p_value']:.6f} < 0.05)")
    else:
        report.append(f"   There is NO statistically significant trend in annual")
        report.append(f"   reappointment proportions (p = {basic_results['p_value']:.6f} ≥ 0.05)")
    
    report.append(f"")
    report.append(f"2. Effect Size:")
    report.append(f"   The linear model explains {r_squared*100:.1f}% of the variance,")
    report.append(f"   suggesting {'a strong' if r_squared > 0.7 else 'a moderate' if r_squared > 0.3 else 'a weak'} linear relationship")
    
    report.append(f"")
    report.append(f"3. Research Question Answer:")
    if basic_results['p_value'] < 0.05:
        report.append(f"   YES - New Brunswick government reappointment proportions show")
        report.append(f"   a statistically significant {direction} trend over 2013-2024")
    else:
        report.append(f"   NO - New Brunswick government reappointment proportions do not show")
        report.append(f"   a statistically significant trend over 2013-2024")
    
    report.append("")
    report.append("="*80)
    
    return "\n".join(report)

def save_regression_results(basic_results, model, output_dir):
    """Save regression results to a text file."""
    output_file = output_dir / "step9_regression_results.txt"
    
    try:
        results_text = []
        results_text.append("LINEAR REGRESSION RESULTS")
        results_text.append("="*40)
        results_text.append("")
        
        # Basic results
        results_text.append("BASIC REGRESSION STATISTICS:")
        results_text.append(f"Slope: {basic_results['slope']:.8f}")
        results_text.append(f"Intercept: {basic_results['intercept']:.8f}")
        results_text.append(f"R-squared: {basic_results['r_squared']:.8f}")
        results_text.append(f"Correlation: {basic_results['r_value']:.8f}")
        results_text.append(f"P-value: {basic_results['p_value']:.8f}")
        results_text.append(f"Standard Error of Slope: {basic_results['std_err']:.8f}")
        results_text.append(f"Standard Error of Regression: {basic_results['se_regression']:.8f}")
        results_text.append(f"Slope 95% CI Lower: {basic_results['slope_ci_lower']:.8f}")
        results_text.append(f"Slope 95% CI Upper: {basic_results['slope_ci_upper']:.8f}")
        results_text.append(f"Sample Size: {basic_results['n']}")
        results_text.append("")
        
        # Advanced results if available
        if model is not None:
            results_text.append("ADVANCED REGRESSION STATISTICS:")
            results_text.append(f"Adjusted R-squared: {model.rsquared_adj:.8f}")
            results_text.append(f"F-statistic: {model.fvalue:.8f}")
            results_text.append(f"F-statistic p-value: {model.f_pvalue:.8f}")
            results_text.append(f"AIC: {model.aic:.8f}")
            results_text.append(f"BIC: {model.bic:.8f}")
            results_text.append(f"Log-likelihood: {model.llf:.8f}")
            results_text.append("")
        
        # Statistical interpretation
        results_text.append("STATISTICAL INTERPRETATION:")
        if basic_results['p_value'] < 0.05:
            significance = "SIGNIFICANT"
            trend = "INCREASING" if basic_results['slope'] > 0 else "DECREASING"
        else:
            significance = "NOT SIGNIFICANT"
            trend = "NO CLEAR TREND"
        
        results_text.append(f"Statistical Significance: {significance}")
        results_text.append(f"Trend Direction: {trend}")
        results_text.append(f"Annual Change: {abs(basic_results['slope']):.6f} percentage points per year")
        
        # Write to file
        with open(output_file, 'w') as f:
            f.write('\n'.join(results_text))
        
        print(f"✓ Regression results saved to: {output_file}")
        return output_file
        
    except Exception as e:
        print(f"✗ Error saving regression results: {str(e)}")
        raise

def main():
    """Main execution function."""
    print("="*60)
    print("Step 9: Linear Regression Analysis of Annual Reappointment Trends")
    print("="*60)
    
    try:
        # Validate input file
        input_file = validate_input_file()
        
        # Load annual proportions data
        df = load_annual_proportions(input_file)
        
        # Prepare data for regression
        df_regression = prepare_regression_data(df)
        
        # Perform basic regression analysis
        basic_results = perform_basic_regression(df_regression)
        
        # Perform advanced regression analysis
        model = perform_advanced_regression(df_regression)
        
        # Test regression assumptions
        test_regression_assumptions(df_regression, basic_results, model)
        
        # Create visualization
        output_dir = Path("scripts/claudesonnet4/version2/execution4/analysis_data")
        visualization_file = create_regression_visualization(df_regression, basic_results, output_dir)
        
        # Create comprehensive report
        analysis_report = create_comprehensive_regression_report(df_regression, basic_results, model)
        
        # Save results
        results_file = save_regression_results(basic_results, model, output_dir)
        
        # Save comprehensive report
        report_file = output_dir / "step9_comprehensive_regression_report.txt"
        with open(report_file, 'w') as f:
            f.write(analysis_report)
        print(f"✓ Comprehensive regression report saved to: {report_file}")
        
        print("\n" + "="*60)
        print("STEP 9 COMPLETED SUCCESSFULLY")
        print("="*60)
        print(f"Regression results: {results_file}")
        print(f"Comprehensive report: {report_file}")
        if visualization_file:
            print(f"Visualization: {visualization_file}")
        
        # Display key findings
        print("\nKEY FINDINGS:")
        slope = basic_results['slope']
        p_value = basic_results['p_value']
        r_squared = basic_results['r_squared']
        
        print(f"• Trend: {'INCREASING' if slope > 0 else 'DECREASING'} by {abs(slope):.4f} percentage points per year")
        print(f"• Statistical significance: {'SIGNIFICANT' if p_value < 0.05 else 'NOT SIGNIFICANT'} (p = {p_value:.6f})")
        print(f"• Model explains {r_squared*100:.1f}% of variance (R² = {r_squared:.4f})")
        
        if p_value < 0.05:
            print(f"• CONCLUSION: There IS a statistically significant trend in reappointment proportions")
        else:
            print(f"• CONCLUSION: There is NO statistically significant trend in reappointment proportions")
        
        print("="*60)
        
    except Exception as e:
        print(f"\n✗ STEP 9 FAILED: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()