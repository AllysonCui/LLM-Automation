#!/usr/bin/env python3

import pandas as pd
import numpy as np
from pathlib import Path
import sys

def main():
    counts_file = Path("scripts/gpt4o/version1/execution1/analysis_data/step4_appointment_counts.csv")
    reapps_file = Path("scripts/gpt4o/version1/execution1/analysis_data/step5_reappointment_counts.csv")
    output_file = Path("scripts/gpt4o/version1/execution1/analysis_data/step6_reappointment_rates.csv")

    try:
        counts_df = pd.read_csv(counts_file, index_col=0)
        reapps_df = pd.read_csv(reapps_file, index_col=0)
    except FileNotFoundError as e:
        print(f"Error: File not found: {e.filename}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Error loading input files: {e}", file=sys.stderr)
        sys.exit(1)

    # Unpivot both tables to long format
    try:
        counts_long = counts_df.reset_index().melt(id_vars='org', var_name='year', value_name='total_appointments')
        reapps_long = reapps_df.reset_index().melt(id_vars='org', var_name='year', value_name='reappointments')
    except Exception as e:
        print(f"Error transforming data to long format: {e}", file=sys.stderr)
        sys.exit(1)

    # Merge the two datasets
    merged_df = pd.merge(counts_long, reapps_long, how='outer', on=['org', 'year'])

    # Clean and prepare for rate calculation
    merged_df['year'] = pd.to_numeric(merged_df['year'], errors='coerce')
    merged_df['total_appointments'] = pd.to_numeric(merged_df['total_appointments'], errors='coerce').fillna(0).astype(int)
    merged_df['reappointments'] = pd.to_numeric(merged_df['reappointments'], errors='coerce').fillna(0).astype(int)

    # Avoid division by zero
    merged_df['reappointment_rate'] = merged_df.apply(
        lambda row: row['reappointments'] / row['total_appointments'] if row['total_appointments'] > 0 else 0.0,
        axis=1
    )

    # Reorder and save
    final_df = merged_df[['org', 'year', 'total_appointments', 'reappointments', 'reappointment_rate']]
    try:
        final_df.to_csv(output_file, index=False)
        print(f"Reappointment rates saved to {output_file}")
    except Exception as e:
        print(f"Error saving output file: {e}", file=sys.stderr)
        sys.exit(1)

    # Print top organizations by average reappointment rate
    avg_rates = final_df.groupby('org')['reappointment_rate'].mean().sort_values(ascending=False)
    print("Top 5 organizations by average reappointment rate:")
    print(avg_rates.head(5))

if __name__ == "__main__":
    main()
