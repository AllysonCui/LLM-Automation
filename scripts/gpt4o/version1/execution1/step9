#!/usr/bin/env python3

import pandas as pd
import numpy as np
from pathlib import Path
import sys
from scipy.stats import linregress
from statsmodels.stats.stattools import durbin_watson
import statsmodels.api as sm


def main():
    input_csv = Path("scripts/gpt4o/version1/execution1/analysis_data/step8_annual_proportions.csv")
    output_txt = Path("scripts/gpt4o/version1/execution1/analysis_data/step9_regression_results.txt")

    try:
        df = pd.read_csv(input_csv)
    except FileNotFoundError:
        print(f"Error: File not found: {input_csv}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Error loading CSV file: {e}", file=sys.stderr)
        sys.exit(1)

    if 'year' not in df.columns or 'reappointment_proportion' not in df.columns:
        print("Error: Required columns are missing from the dataset.", file=sys.stderr)
        sys.exit(1)

    df.dropna(subset=['year', 'reappointment_proportion'], inplace=True)

    X = df['year'].to_numpy()
    Y = df['reappointment_proportion'].to_numpy()

    try:
        regression = linregress(X, Y)
    except Exception as e:
        print(f"Error performing regression: {e}", file=sys.stderr)
        sys.exit(1)

    slope = regression.slope
    intercept = regression.intercept
    r_value = regression.rvalue
    r_squared = r_value**2
    p_value = regression.pvalue
    stderr = regression.stderr

    # 95% confidence interval
    from scipy.stats import t
    dof = len(X) - 2
    t_crit = t.ppf(1 - 0.025, dof)
    ci_low = slope - t_crit * stderr
    ci_high = slope + t_crit * stderr

    # Durbin-Watson test
    X_const = sm.add_constant(X)
    model = sm.OLS(Y, X_const).fit()
    dw_stat = durbin_watson(model.resid)

    # Outlier detection (standardized residuals > 2)
    influence = model.get_influence()
    standardized_residuals = influence.resid_studentized_internal
    outliers = df[np.abs(standardized_residuals) > 2]

    # Trend interpretation
    trend_direction = "increasing" if slope > 0 else "decreasing"
    significant = p_value < 0.05

    # Change calculations
    annual_change_pct_points = slope * 100
    total_change_pct_points = (X[-1] - X[0]) * slope * 100

    try:
        with open(output_txt, "w") as f:
            f.write("Government-Wide Reappointment Rate Regression Analysis\n")
            f.write("====================================================\n\n")
            f.write(f"Years: {X[0]} to {X[-1]}\n")
            f.write(f"Slope: {slope:.6f}\n")
            f.write(f"Intercept: {intercept:.6f}\n")
            f.write(f"R-squared: {r_squared:.4f}\n")
            f.write(f"P-value: {p_value:.4f}\n")
            f.write(f"Standard Error: {stderr:.6f}\n")
            f.write(f"95% Confidence Interval for Slope: ({ci_low:.6f}, {ci_high:.6f})\n")
            f.write(f"Durbin-Watson Statistic: {dw_stat:.4f}\n")
            f.write(f"Outliers Detected: {len(outliers)}\n")
            if not outliers.empty:
                f.write(f"Outlier Years: {outliers['year'].tolist()}\n")
            f.write("\n")
            f.write(f"Conclusion:\n")
            f.write(f"The trend in reappointment proportion is {trend_direction}.\n")
            if significant:
                f.write("This trend is statistically significant (p < 0.05).\n")
            else:
                f.write("This trend is NOT statistically significant (p >= 0.05).\n")
            f.write(f"Annual Change: {annual_change_pct_points:.2f} percentage points\n")
            f.write(f"Total Change (2013â€“2024): {total_change_pct_points:.2f} percentage points\n")

        print(f"Regression analysis saved to {output_txt}")
        print(f"Final conclusion: The trend is {trend_direction} and it is{' ' if significant else ' not '}statistically significant.")

    except Exception as e:
        print(f"Error writing output file: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()