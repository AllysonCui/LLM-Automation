#!/usr/bin/env python3

import pandas as pd
import numpy as np
from pathlib import Path
import sys
import os

def main():
    emp_file = Path("scripts/gpt4o/version1/execution10/analysis_data/step4_employee_counts.csv")
    reapp_file = Path("scripts/gpt4o/version1/execution10/analysis_data/step5_reappointment_counts.csv")
    output_file = Path("scripts/gpt4o/version1/execution10/analysis_data/step6_reappointment_rates.csv")

    try:
        emp_df = pd.read_csv(emp_file, index_col=0)
        reapp_df = pd.read_csv(reapp_file, index_col=0)
    except FileNotFoundError as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)
    except pd.errors.ParserError as e:
        print(f"Error parsing input files: {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Unexpected error: {e}", file=sys.stderr)
        sys.exit(1)

    # Ensure year columns are integers
    emp_df.columns = emp_df.columns.astype(int)
    reapp_df.columns = reapp_df.columns.astype(int)

    # Combine data into long format
    emp_long = emp_df.stack().reset_index()
    emp_long.columns = ["org", "year", "total_employees"]

    reapp_long = reapp_df.stack().reset_index()
    reapp_long.columns = ["org", "year", "reappointments"]

    # Merge the two
    merged = pd.merge(emp_long, reapp_long, on=["org", "year"], how="left")
    merged["reappointments"] = merged["reappointments"].fillna(0).astype(int)
    merged["total_employees"] = merged["total_employees"].fillna(0).astype(int)

    # Avoid division by zero
    merged["reappointment_rate"] = merged.apply(
        lambda row: row["reappointments"] / row["total_employees"] if row["total_employees"] > 0 else 0,
        axis=1
    )

    output_file.parent.mkdir(parents=True, exist_ok=True)
    merged.to_csv(output_file, index=False)

    print("Reappointment rates saved to:", output_file)
    print("\nTop 5 organizations by average reappointment rate:")
    top_avg = (
        merged.groupby("org")["reappointment_rate"]
        .mean()
        .sort_values(ascending=False)
        .head(5)
    )
    print(top_avg)

if __name__ == "__main__":
    main()
