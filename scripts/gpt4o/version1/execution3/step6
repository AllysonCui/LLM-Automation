#!/usr/bin/env python3

import pandas as pd
import numpy as np
from pathlib import Path
import sys

def main():
    emp_file = Path("scripts/gpt4o/version1/execution3/analysis_data/step4_employee_counts.csv")
    reapp_file = Path("scripts/gpt4o/version1/execution3/analysis_data/step5_reappointment_counts.csv")
    output_file = Path("scripts/gpt4o/version1/execution3/analysis_data/step6_reappointment_rates.csv")

    try:
        emp_df = pd.read_csv(emp_file, index_col=0)
        reapp_df = pd.read_csv(reapp_file, index_col=0)
    except Exception as e:
        print(f"Failed to load input files: {e}", file=sys.stderr)
        return

    # Unpivot both tables to long format
    emp_long = emp_df.reset_index().melt(id_vars='org', var_name='year', value_name='total_employees')
    reapp_long = reapp_df.reset_index().melt(id_vars='org', var_name='year', value_name='reappointments')

    # Merge on org and year
    merged = pd.merge(emp_long, reapp_long, on=['org', 'year'], how='outer')

    # Clean and validate
    merged['year'] = pd.to_numeric(merged['year'], errors='coerce').astype('Int64')
    merged['total_employees'] = pd.to_numeric(merged['total_employees'], errors='coerce').fillna(0).astype(int)
    merged['reappointments'] = pd.to_numeric(merged['reappointments'], errors='coerce').fillna(0).astype(int)

    # Calculate reappointment rate
    merged['reappointment_rate'] = merged.apply(
        lambda row: row['reappointments'] / row['total_employees'] if row['total_employees'] > 0 else np.nan,
        axis=1
    )

    # Save result
    try:
        merged.to_csv(output_file, index=False)
        print(f"Reappointment rates saved to: {output_file}")
    except Exception as e:
        print(f"Failed to save output file: {e}", file=sys.stderr)
        return

    # Print organizations with highest average reappointment rates
    avg_rates = merged.groupby('org')['reappointment_rate'].mean().dropna()
    top_orgs = avg_rates.sort_values(ascending=False).head(5)
    print("\nTop Organizations by Average Reappointment Rate:")
    print(top_orgs)

if __name__ == "__main__":
    main()
