#!/usr/bin/env python3

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def main():
    # Define file paths for the input and output files
    employee_counts_file = Path("scripts/gpt4o/version1/execution4/analysis_data/step4_employee_counts.csv")
    reappointment_counts_file = Path("scripts/gpt4o/version1/execution4/analysis_data/step5_reappointment_counts.csv")
    output_file = Path("scripts/gpt4o/version1/execution4/analysis_data/step6_reappointment_rates.csv")
    
    try:
        # Load the employee counts and reappointment counts
        employee_counts_df = pd.read_csv(employee_counts_file)
        reappointment_counts_df = pd.read_csv(reappointment_counts_file)
    except FileNotFoundError:
        print(f"Error: File not found.", file=sys.stderr)
        return
    except pd.errors.EmptyDataError:
        print(f"Error: One of the files is empty or corrupted.", file=sys.stderr)
        return
    except Exception as e:
        print(f"Error loading data: {e}", file=sys.stderr)
        return

    # Melt both dataframes to long format
    employee_counts_long = employee_counts_df.melt(id_vars=['org'], var_name='year', value_name='employee_count')
    reappointment_counts_long = reappointment_counts_df.melt(id_vars=['org'], var_name='year', value_name='reappointment_count')

    # Convert 'year' column to numeric values for consistency
    employee_counts_long['year'] = pd.to_numeric(employee_counts_long['year'], errors='coerce')
    reappointment_counts_long['year'] = pd.to_numeric(reappointment_counts_long['year'], errors='coerce')

    # Merge the datasets on 'org' and 'year'
    merged_df = pd.merge(employee_counts_long, reappointment_counts_long, how='outer', on=['org', 'year'])

    # Handle division by zero by filling NaN reappointment_rate with 0 when total employees is 0
    merged_df['reappointment_rate'] = merged_df['reappointment_count'] / merged_df['employee_count']
    merged_df['reappointment_rate'] = merged_df['reappointment_rate'].fillna(0)

    # Create the final table with the required columns: org, year, total_employees, reappointments, reappointment_rate
    final_df = merged_df[['org', 'year', 'employee_count', 'reappointment_count', 'reappointment_rate']]

    # Save the final dataset to a CSV file
    try:
        final_df.to_csv(output_file, index=False)
        print(f"Reappointment rates saved to: {output_file}")
    except Exception as e:
        print(f"Error saving reappointment rates CSV: {e}", file=sys.stderr)

    # Print organizations with the highest average reappointment rates
    avg_reappointment_rates = final_df.groupby('org')['reappointment_rate'].mean().sort_values(ascending=False)
    
    print("\nOrganizations with the highest average reappointment rates:")
    print(avg_reappointment_rates)

if __name__ == "__main__":
    main()
