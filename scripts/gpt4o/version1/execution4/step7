#!/usr/bin/env python3

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt

def main():
    # Define file paths for input and output
    input_file = Path("scripts/gpt4o/version1/execution4/analysis_data/step6_reappointment_rates.csv")
    output_csv = Path("scripts/gpt4o/version1/execution4/analysis_data/step7_yearly_max_rates.csv")
    output_png = Path("scripts/gpt4o/version1/execution4/analysis_data/step7_yearly_max_rates.png")

    try:
        # Load the reappointment rates dataset
        df = pd.read_csv(input_file)
    except FileNotFoundError:
        print(f"Error: File not found: {input_file}", file=sys.stderr)
        return
    except pd.errors.EmptyDataError:
        print(f"Error: File is empty or corrupted: {input_file}", file=sys.stderr)
        return
    except Exception as e:
        print(f"Error loading data: {e}", file=sys.stderr)
        return

    # Group by year and find the top organization (with highest reappointment rate) for each year
    top_org_per_year = df.groupby('year').apply(
        lambda group: group.loc[group['reappointment_rate'].idxmax()]
    )

    # Handle ties by taking all organizations with the same maximum rate for each year
    top_orgs = df.groupby('year').apply(
        lambda group: group[group['reappointment_rate'] == group['reappointment_rate'].max()]
    )
    
    # Reset index to avoid ambiguity between index and columns
    top_orgs = top_orgs.reset_index(drop=True)

    # If there are ties, we need to choose one organization per year. For simplicity, we'll choose the first one.
    top_orgs = top_orgs.groupby('year').first().reset_index()

    # Save the results to a CSV file
    try:
        top_orgs.to_csv(output_csv, index=False)
        print(f"Yearly top organization rates saved to: {output_csv}")
    except Exception as e:
        print(f"Error saving CSV: {e}", file=sys.stderr)

    # Print year-by-year results
    print("\nYear-by-year results:")
    print(top_orgs)

    # Plot the trend over time
    plt.figure(figsize=(10, 6))
    plt.plot(top_orgs['year'], top_orgs['reappointment_rate'], marker='o', linestyle='-', color='b')
    plt.title("Top Organization Reappointment Rates Over Time")
    plt.xlabel("Year")
    plt.ylabel("Reappointment Rate")
    plt.grid(True)

    # Save the plot to a PNG file
    try:
        plt.savefig(output_png)
        print(f"Visualization saved to: {output_png}")
    except Exception as e:
        print(f"Error saving PNG: {e}", file=sys.stderr)

if __name__ == "__main__":
    main()
