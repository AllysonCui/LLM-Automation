#!/usr/bin/env python3

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys
import matplotlib.pyplot as plt

def main():
    # Define file paths for input and output
    input_file = Path("scripts/gpt4o/version1/execution4/analysis_data/step3_repeats_marked.csv")
    output_csv = Path("scripts/gpt4o/version1/execution4/analysis_data/step8_annual_proportions.csv")
    output_png = Path("scripts/gpt4o/version1/execution4/analysis_data/step8_annual_reappointment_proportions.png")
    
    try:
        # Load the dataset
        df = pd.read_csv(input_file)
    except FileNotFoundError:
        print(f"Error: File not found: {input_file}", file=sys.stderr)
        return
    except pd.errors.EmptyDataError:
        print(f"Error: File is empty or corrupted: {input_file}", file=sys.stderr)
        return
    except Exception as e:
        print(f"Error loading data: {e}", file=sys.stderr)
        return

    # Create an empty list to store the results for each year
    yearly_proportions = []

    # Loop through each year from 2013 to 2024
    for year in range(2013, 2025):
        # Filter the data for the given year
        year_data = df[df['year'] == year]
        
        # Count total appointments and reappointments for the year
        total_appointments = len(year_data)
        total_reappointments = year_data['reappointed'].sum()
        
        # Calculate reappointment proportion
        if total_appointments > 0:
            reappointment_proportion = total_reappointments / total_appointments
        else:
            reappointment_proportion = np.nan  # Handle division by zero if no appointments

        # Append the results for this year
        yearly_proportions.append({
            'year': year,
            'total_appointments': total_appointments,
            'total_reappointments': total_reappointments,
            'reappointment_proportion': reappointment_proportion
        })
    
    # Create a DataFrame from the list of results
    proportions_df = pd.DataFrame(yearly_proportions)

    # Save the results to a CSV file
    try:
        proportions_df.to_csv(output_csv, index=False)
        print(f"Annual reappointment proportions saved to: {output_csv}")
    except Exception as e:
        print(f"Error saving CSV: {e}", file=sys.stderr)

    # Print the year-by-year proportions
    print("\nYear-by-year proportions:")
    print(proportions_df)

    # Plot the reappointment proportion trend over time
    plt.figure(figsize=(10, 6))
    plt.plot(proportions_df['year'], proportions_df['reappointment_proportion'], marker='o', linestyle='-', color='b')
    plt.title("Government-wide Reappointment Proportions Over Time")
    plt.xlabel("Year")
    plt.ylabel("Reappointment Proportion")
    plt.grid(True)

    # Save the plot to a PNG file
    try:
        plt.savefig(output_png)
        print(f"Visualization saved to: {output_png}")
    except Exception as e:
        print(f"Error saving PNG: {e}", file=sys.stderr)

if __name__ == "__main__":
    main()
