#!/usr/bin/env python3

import pandas as pd
from pathlib import Path

# Define the path to the input and output directories
input_file_path = Path("scripts/gpt4o/version1/execution5/analysis_data/step2_key_columns_data.csv")
output_dir = Path("scripts/gpt4o/version1/execution5/analysis_data")

# Create output directory if it doesn't exist
output_dir.mkdir(parents=True, exist_ok=True)

try:
    # Load the dataset from step 2
    df = pd.read_csv(input_file_path)

    # Check for missing 'year' or other essential columns
    if 'year' not in df.columns or 'name' not in df.columns or 'position' not in df.columns or 'org' not in df.columns:
        raise ValueError("Missing one of the essential columns ('year', 'name', 'position', 'org')")

    # Sort the DataFrame by year to ensure chronological ordering
    df.sort_values(by='year', kind='stable', inplace=True)

    # Initialize a 'reappointed' column if it doesn't exist
    if 'reappointed' not in df.columns:
        df['reappointed'] = False

    # Iterate over each unique combination of name, position, and organization
    reappointments = 0  # To count how many additional reappointments were identified
    for (name, position, org), group in df.groupby(['name', 'position', 'org']):
        
        # Skip groups with only one row (no reappointments possible)
        if len(group) < 2:
            continue

        # Check if the group is sorted by year
        group_sorted = group.sort_values(by='year', kind='stable')
        
        # For each entry except the first, mark it as a reappointment
        for idx in group_sorted.iloc[1:].index:
            df.loc[idx, 'reappointed'] = True
            reappointments += 1

    # Print the number of additional reappointments identified
    print(f"Additional reappointments identified: {reappointments}")

    # Save the updated dataset as 'step3_repeats_marked.csv'
    updated_file_path = output_dir / "step3_repeats_marked.csv"
    df.to_csv(updated_file_path, index=False)

    # Print the basic information about the updated dataset
    print("\nUpdated dataset info:")
    df.info()

except FileNotFoundError:
    print(f"Error: File {input_file_path} not found.")
except pd.errors.EmptyDataError:
    print(f"Error: The file {input_file_path} is empty.")
except ValueError as e:
    print(f"ValueError: {e}")
except Exception as e:
    print(f"An error occurred: {e}")
