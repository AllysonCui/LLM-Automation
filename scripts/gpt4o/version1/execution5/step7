#!/usr/bin/env python3

import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path

# Define the path to the input and output directories
input_file_path = Path("scripts/gpt4o/version1/execution5/analysis_data/step6_reappointment_rates.csv")
output_dir = Path("scripts/gpt4o/version1/execution5/analysis_data")

# Create output directory if it doesn't exist
output_dir.mkdir(parents=True, exist_ok=True)

try:
    # Load the reappointment rates from step 6
    df = pd.read_csv(input_file_path)

    # Debugging output: Print the columns to check the structure
    print("\nColumns in the loaded dataset:")
    print(df.columns)

    # Check if 'org' is in the columns (the 'year' will be dynamically handled)
    if 'org' not in df.columns:
        raise ValueError("Missing 'org' column in the dataset.")

    # Initialize an empty list to store the results
    yearly_max_rates = []

    # Iterate through the years dynamically by using columns that start with 'reappointment_rate_'
    rate_columns = [col for col in df.columns if col.startswith('reappointment_rate_')]

    for rate_column in rate_columns:
        # Extract the year from the rate column name (e.g., 'reappointment_rate_2014' -> 2014)
        year = int(rate_column.split('_')[-1])

        # Find the organization(s) with the highest reappointment rate for this year
        max_rate = df[rate_column].max()

        # Find all organizations with the max rate (handling ties)
        top_orgs = df[df[rate_column] == max_rate]['org'].tolist()

        # If there are ties, handle them by joining the organizations with a comma
        top_org = ", ".join(top_orgs)

        # Append the result for the current year
        yearly_max_rates.append({'year': year, 'top_org': top_org, 'max_rate': max_rate})

    # Create a DataFrame from the results
    max_rates_df = pd.DataFrame(yearly_max_rates)

    # Save the results as 'step7_yearly_max_rates.csv'
    output_file_path = output_dir / "step7_yearly_max_rates.csv"
    max_rates_df.to_csv(output_file_path, index=False)

    # Print the year-by-year results
    print("\nYear-by-year results (top organization and reappointment rate):")
    print(max_rates_df)

    # Plot the trend over time (for the top organization with the highest rate each year)
    plt.figure(figsize=(10, 6))
    plt.plot(max_rates_df['year'], max_rates_df['max_rate'], 'bo-', label='Max Reappointment Rate')

    plt.title("Yearly Maximum Reappointment Rates")
    plt.xlabel("Year")
    plt.ylabel("Reappointment Rate")
    plt.grid(True)

    # Save the plot as 'step7_yearly_max_rates.png'
    plot_file_path = output_dir / "step7_yearly_max_rates.png"
    plt.savefig(plot_file_path)

    # Display the plot
    plt.show()

except FileNotFoundError:
    print(f"Error: File {input_file_path} not found.")
except pd.errors.EmptyDataError:
    print(f"Error: The file {input_file_path} is empty.")
except ValueError as e:
    print(f"ValueError: {e}")
except Exception as e:
    print(f"An error occurred: {e}")
