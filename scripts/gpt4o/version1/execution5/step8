#!/usr/bin/env python3

import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path

# Define the path to the input and output directories
input_file_path = Path("scripts/gpt4o/version1/execution5/analysis_data/step3_repeats_marked.csv")
output_dir = Path("scripts/gpt4o/version1/execution5/analysis_data")

# Create output directory if it doesn't exist
output_dir.mkdir(parents=True, exist_ok=True)

try:
    # Load the dataset from step 3 (with reappointment flags)
    df = pd.read_csv(input_file_path)

    # Check if 'year', 'reappointed', and 'org' columns are present
    if 'year' not in df.columns or 'reappointed' not in df.columns or 'org' not in df.columns:
        raise ValueError("Missing 'year', 'reappointed', or 'org' columns in the dataset.")

    # Initialize an empty list to store the results
    yearly_proportions = []

    # Iterate through each year (2013-2024)
    for year in range(2013, 2025):
        # Filter the data for the current year
        year_data = df[df['year'] == year]

        # Count total appointments and total reappointments for the current year
        total_appointments = len(year_data)
        total_reappointments = year_data['reappointed'].sum()  # Sum of True values in 'reappointed'

        # Calculate the reappointment proportion
        if total_appointments > 0:
            reappointment_proportion = total_reappointments / total_appointments
        else:
            reappointment_proportion = 0  # Avoid division by zero if no appointments in that year

        # Append the results for the current year
        yearly_proportions.append({
            'year': year,
            'total_appointments': total_appointments,
            'total_reappointments': total_reappointments,
            'reappointment_proportion': reappointment_proportion
        })

    # Create a DataFrame from the results
    proportions_df = pd.DataFrame(yearly_proportions)

    # Save the results as 'step8_annual_proportions.csv'
    output_file_path = output_dir / "step8_annual_proportions.csv"
    proportions_df.to_csv(output_file_path, index=False)

    # Print the year-by-year proportions
    print("\nYear-by-year reappointment proportions:")
    print(proportions_df)

    # Plot the trend of reappointment proportions over time
    plt.figure(figsize=(10, 6))
    plt.plot(proportions_df['year'], proportions_df['reappointment_proportion'], marker='o', color='b', label="Reappointment Proportion")
    plt.title("Government-wide Reappointment Proportions (2013-2024)")
    plt.xlabel("Year")
    plt.ylabel("Reappointment Proportion")
    plt.grid(True)

    # Save the plot as 'step8_annual_reappointment_proportions.png'
    plot_file_path = output_dir / "step8_annual_reappointment_proportions.png"
    plt.savefig(plot_file_path)

    # Display the plot
    plt.show()

except FileNotFoundError:
    print(f"Error: File {input_file_path} not found.")
except pd.errors.EmptyDataError:
    print(f"Error: The file {input_file_path} is empty.")
except ValueError as e:
    print(f"ValueError: {e}")
except Exception as e:
    print(f"An error occurred: {e}")
