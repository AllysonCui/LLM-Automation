#!/usr/bin/env python3

import pandas as pd
import numpy as np
import os
import sys
from pathlib import Path

# File paths
input_file = Path("scripts/gpt4o/version1/execution6/analysis_data/step2_key_columns_data.csv")
output_file = Path("scripts/gpt4o/version1/execution6/analysis_data/step3_repeats_marked.csv")

# Load data
try:
    df = pd.read_csv(input_file)
except FileNotFoundError:
    print(f"Error: Input file not found at {input_file}")
    sys.exit(1)
except pd.errors.EmptyDataError:
    print(f"Error: Input file {input_file} is empty.")
    sys.exit(1)
except Exception as e:
    print(f"Unexpected error while loading {input_file}: {e}")
    sys.exit(1)

# Validate required columns and data types
expected_columns = ["reappointed", "name", "position", "org", "year"]
for col in expected_columns:
    if col not in df.columns:
        print(f"Error: Required column '{col}' not found in dataset.")
        sys.exit(1)

# Ensure 'year' is numeric
try:
    df["year"] = pd.to_numeric(df["year"], errors='coerce')
except Exception as e:
    print(f"Error converting 'year' to numeric: {e}")
    sys.exit(1)

# Drop rows with missing critical fields
df = df.dropna(subset=["name", "position", "org", "year"])

# Normalize names: strip whitespace, lower case
df["name"] = df["name"].astype(str).str.strip().str.lower()
df["position"] = df["position"].astype(str).str.strip().str.lower()
df["org"] = df["org"].astype(str).str.strip().str.lower()

# Copy original reappointment column
df["reappointed"] = df["reappointed"].fillna(False).astype(bool)
original_reappointed_count = df["reappointed"].sum()

# Mark reappointments: all but the first chronological appearance for each (name, position, org)
df = df.sort_values(by=["name", "position", "org", "year"], kind="stable")

# Generate a group ID
group_cols = ["name", "position", "org"]
df["is_first_appointment"] = df.groupby(group_cols)["year"].transform('min') == df["year"]

# Update reappointed column using .loc[]
# Set reappointed=True where not first occurrence in group
df.loc[~df["is_first_appointment"], "reappointed"] = True

# Drop helper column
df = df.drop(columns=["is_first_appointment"])

# Count total reappointments after update
updated_reappointed_count = df["reappointed"].sum()
additional_reappointments = updated_reappointed_count - original_reappointed_count

# Print summary statistics
print(f"Original reappointments: {original_reappointed_count}")
print(f"Updated reappointments: {updated_reappointed_count}")
print(f"Additional reappointments identified: {additional_reappointments}")

# Save updated dataset
try:
    df.to_csv(output_file, index=False)
    print(f"Updated dataset saved to: {output_file}")
except Exception as e:
    print(f"Error saving updated dataset: {e}")
    sys.exit(1)
