#!/usr/bin/env python3

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import sys
from pathlib import Path

# File paths
input_file = Path("scripts/gpt4o/version1/execution6/analysis_data/step6_reappointment_rates.csv")
output_csv = Path("scripts/gpt4o/version1/execution6/analysis_data/step7_yearly_max_rates.csv")
output_png = Path("scripts/gpt4o/version1/execution6/analysis_data/step7_yearly_max_rates.png")

# Load data
try:
    df = pd.read_csv(input_file)
except FileNotFoundError:
    print(f"Error: File not found: {input_file}")
    sys.exit(1)
except pd.errors.EmptyDataError:
    print(f"Error: File is empty: {input_file}")
    sys.exit(1)
except Exception as e:
    print(f"Unexpected error loading file: {e}")
    sys.exit(1)

# Validate columns
required_cols = ["org", "year", "reappointment_rate"]
missing = [col for col in required_cols if col not in df.columns]
if missing:
    print(f"Error: Missing required columns: {missing}")
    sys.exit(1)

# Drop rows with missing year or rate
df = df.dropna(subset=["year", "reappointment_rate"])
df["year"] = df["year"].astype(int)

# Identify top org per year
def get_top_orgs(group):
    max_rate = group["reappointment_rate"].max()
    top_orgs = group[group["reappointment_rate"] == max_rate]
    # Tie-handling: sort alphabetically, pick first
    top_org = top_orgs.sort_values("org", kind="stable").iloc[0]
    return pd.Series({
        "top_org": top_org["org"],
        "max_rate": max_rate
    })

try:
    top_by_year = df.groupby("year").apply(get_top_orgs).reset_index()
except Exception as e:
    print(f"Error during group operation: {e}")
    sys.exit(1)

# Save CSV
try:
    top_by_year.to_csv(output_csv, index=False)
    print(f"Saved yearly top reappointment rates to: {output_csv}")
except Exception as e:
    print(f"Error saving CSV: {e}")
    sys.exit(1)

# Visualization
try:
    plt.figure(figsize=(10, 6))
    plt.plot(top_by_year["year"], top_by_year["max_rate"], marker='o')
    plt.title("Top Organization Reappointment Rates by Year")
    plt.xlabel("Year")
    plt.ylabel("Reappointment Rate")
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(output_png)
    print(f"Saved plot to: {output_png}")
except Exception as e:
    print(f"Error creating or saving plot: {e}")
    sys.exit(1)

# Print results
print("\nTop organizations by year:")
print(top_by_year.to_string(index=False))
