#!/usr/bin/env python3

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def normalize_text(text):
    if pd.isna(text):
        return ''
    return str(text).strip().lower()

def main():
    input_file = Path("scripts/gpt4o/version1/execution7/analysis_data/step2_key_columns_data.csv")
    output_file = Path("scripts/gpt4o/version1/execution7/analysis_data/step3_repeats_marked.csv")

    try:
        df = pd.read_csv(input_file)
    except Exception as e:
        print(f"Error loading input file: {e}", file=sys.stderr)
        sys.exit(1)

    required_columns = ['name', 'position', 'org', 'year', 'reappointed']
    for col in required_columns:
        if col not in df.columns:
            print(f"Error: Missing required column '{col}'", file=sys.stderr)
            sys.exit(1)

    # Normalize text for grouping
    df['name_norm'] = df['name'].apply(normalize_text)
    df['position_norm'] = df['position'].apply(normalize_text)
    df['org_norm'] = df['org'].apply(normalize_text)

    # Ensure correct dtype
    df['year'] = pd.to_numeric(df['year'], errors='coerce')
    df = df.dropna(subset=['year'])
    df['year'] = df['year'].astype(int)

    df.sort_values(by=['name_norm', 'position_norm', 'org_norm', 'year'], kind='stable', inplace=True)
    df['reappointed'] = df['reappointed'].fillna(False)

    reappoint_updates = 0

    # Group and update reappointments
    group_cols = ['name_norm', 'position_norm', 'org_norm']
    for _, group in df.groupby(group_cols):
        if group.empty:
            continue
        sorted_idx = group.index.tolist()
        if len(sorted_idx) > 1:
            # Mark all except first as reappointments
            for idx in sorted_idx[1:]:
                if not df.loc[idx, 'reappointed']:
                    df.loc[idx, 'reappointed'] = True
                    reappoint_updates += 1

    # Drop normalization columns
    df.drop(columns=['name_norm', 'position_norm', 'org_norm'], inplace=True)

    try:
        df.to_csv(output_file, index=False)
        print(f"Updated dataset saved to {output_file}")
    except Exception as e:
        print(f"Error saving output file: {e}", file=sys.stderr)
        sys.exit(1)

    print(f"\nTotal additional reappointments marked: {reappoint_updates}")

if __name__ == "__main__":
    main()
