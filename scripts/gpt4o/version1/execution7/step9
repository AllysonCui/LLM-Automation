#!/usr/bin/env python3

import pandas as pd
import numpy as np
from scipy import stats
import statsmodels.api as sm
from pathlib import Path
import sys

def main():
    input_file = Path("scripts/gpt4o/version1/execution7/analysis_data/step8_annual_proportions.csv")
    output_file = Path("scripts/gpt4o/version1/execution7/analysis_data/step9_regression_results.txt")

    try:
        df = pd.read_csv(input_file)
    except Exception as e:
        print(f"Error loading input file: {e}", file=sys.stderr)
        sys.exit(1)

    if 'year' not in df.columns or 'reappointment_proportion' not in df.columns:
        print("Missing required columns.", file=sys.stderr)
        sys.exit(1)

    # Prepare data for regression
    df = df.dropna(subset=['year', 'reappointment_proportion'])
    x = df['year']
    y = df['reappointment_proportion']

    # Fit regression model
    try:
        result = stats.linregress(x, y)
    except Exception as e:
        print(f"Error performing linear regression: {e}", file=sys.stderr)
        sys.exit(1)

    # Regression statistics
    slope = result.slope
    intercept = result.intercept
    r_value = result.rvalue
    r_squared = r_value**2
    p_value = result.pvalue
    std_err = result.stderr

    # 95% confidence interval
    df_n = len(x) - 2
    t_val = stats.t.ppf(1 - 0.025, df_n)
    ci_low = slope - t_val * std_err
    ci_high = slope + t_val * std_err

    # Durbin-Watson test
    X = sm.add_constant(x)
    model = sm.OLS(y, X).fit()
    dw_stat = sm.stats.stattools.durbin_watson(model.resid)

    # Outlier detection using standardized residuals
    influence = model.get_influence()
    standardized_residuals = influence.resid_studentized_internal
    outliers = np.where(np.abs(standardized_residuals) > 2)[0]

    # Determine trend direction and significance
    is_significant = p_value < 0.05
    trend_direction = "increasing" if slope > 0 else "decreasing"
    annual_change_pct_pts = slope * 100
    total_change = annual_change_pct_pts * (x.max() - x.min())

    # Save results to text file
    try:
        with open(output_file, "w") as f:
            f.write("Government-Wide Reappointment Proportion Trend Analysis\n")
            f.write("====================================================\n")
            f.write(f"Years: {x.min()} - {x.max()}\n")
            f.write(f"Slope: {slope:.6f}\n")
            f.write(f"Intercept: {intercept:.6f}\n")
            f.write(f"R-squared: {r_squared:.4f}\n")
            f.write(f"p-value: {p_value:.4f}\n")
            f.write(f"Standard error: {std_err:.6f}\n")
            f.write(f"95% CI for slope: ({ci_low:.6f}, {ci_high:.6f})\n")
            f.write(f"Durbin-Watson statistic: {dw_stat:.4f}\n")
            f.write(f"Outlier indices (std. residuals > 2): {outliers.tolist()}\n")
            f.write("\n")
            f.write(f"Conclusion:\n")
            if is_significant:
                f.write(f"There is a statistically significant ({'p < 0.05'}) {trend_direction} trend in reappointment proportions.\n")
            else:
                f.write("The trend in reappointment proportions is not statistically significant.\n")
            f.write(f"Annual change: {annual_change_pct_pts:.3f} percentage points\n")
            f.write(f"Total change over {x.max() - x.min()} years: {total_change:.3f} percentage points\n")
        print(f"Regression results saved to {output_file}")
    except Exception as e:
        print(f"Error writing results: {e}", file=sys.stderr)
        sys.exit(1)

    # Final answer output
    if is_significant:
        print(f"The government-wide reappointment proportion trend is {trend_direction} and statistically significant (p = {p_value:.4f}).")
    else:
        print(f"The government-wide reappointment proportion trend is {trend_direction}, but NOT statistically significant (p = {p_value:.4f}).")

if __name__ == "__main__":
    main()
