#!/usr/bin/env python3

import pandas as pd
import numpy as np
import os
from pathlib import Path
import sys

def normalize_column_name(name):
    return name.strip().lower().replace(" ", "").replace("_", "")

def map_columns(actual_columns, desired_mappings):
    normalized_actual = {normalize_column_name(col): col for col in actual_columns}
    mapped = {}

    for key, variants in desired_mappings.items():
        for variant in variants:
            norm_variant = normalize_column_name(variant)
            if norm_variant in normalized_actual:
                mapped[key] = normalized_actual[norm_variant]
                break
        if key not in mapped:
            print(f"[WARNING] Could not find a matching column for '{key}'", file=sys.stderr)
            mapped[key] = None
    return mapped

def main():
    input_file = Path("scripts/gpt4o/version1/execution8/analysis_data/step1_combined_appointments.csv")
    output_file = Path("scripts/gpt4o/version1/execution8/analysis_data/step2_key_columns_data.csv")

    try:
        df = pd.read_csv(input_file)
    except Exception as e:
        print(f"[ERROR] Failed to read input file: {e}", file=sys.stderr)
        sys.exit(1)

    # Define acceptable variants for each desired column
    desired_columns = {
        "reappointed": ["reappointed"],
        "name": ["name", "full_name"],
        "position": ["position", "appointment", "role"],
        "org": ["org", "organization", "agency", "department"],
        "year": ["year"]
    }

    column_map = map_columns(df.columns, desired_columns)

    selected_columns = [col for col in column_map.values() if col is not None]

    if not selected_columns:
        print("[ERROR] No matching columns found. Exiting.", file=sys.stderr)
        sys.exit(1)

    filtered_df = df[selected_columns]

    try:
        filtered_df.to_csv(output_file, index=False)
        print(f"[INFO] Filtered dataset saved to {output_file}")
    except Exception as e:
        print(f"[ERROR] Failed to save filtered dataset: {e}", file=sys.stderr)
        sys.exit(1)

    print("[INFO] Extracted columns:", list(filtered_df.columns))
    print("[INFO] Missing values per column:\n", filtered_df.isnull().sum())

if __name__ == "__main__":
    main()
