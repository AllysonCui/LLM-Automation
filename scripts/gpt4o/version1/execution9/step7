#!/usr/bin/env python3

import pandas as pd
import numpy as np
import os
from pathlib import Path
import matplotlib.pyplot as plt
import sys

# Define paths
base_dir = Path("scripts/gpt4o/version1/execution9")
data_path = base_dir / "analysis_data" / "step6_reappointment_rates.csv"
output_csv = base_dir / "analysis_data" / "step7_yearly_max_rates.csv"
output_plot = base_dir / "analysis_data" / "step7_yearly_max_rates.png"

try:
    # Load the data
    df = pd.read_csv(data_path)
except FileNotFoundError:
    print(f"Error: File not found - {data_path}", file=sys.stderr)
    sys.exit(1)
except pd.errors.EmptyDataError:
    print(f"Error: Empty data file - {data_path}", file=sys.stderr)
    sys.exit(1)

# Validate required columns
required_cols = ["org", "year", "reappointment_rate"]
missing_cols = [col for col in required_cols if col not in df.columns]
if missing_cols:
    print(f"Error: Missing required columns {missing_cols} in data", file=sys.stderr)
    sys.exit(1)

# Ensure year is int and reappointment_rate is float
df["year"] = pd.to_numeric(df["year"], errors='coerce').astype('Int64')
df["reappointment_rate"] = pd.to_numeric(df["reappointment_rate"], errors='coerce')

# Drop rows with missing year or rate
df = df.dropna(subset=["year", "reappointment_rate"])

# Find max per year (handling ties by selecting the first org)
top_orgs = (
    df.sort_values(["year", "reappointment_rate", "org"], ascending=[True, False, True], kind="stable")
      .dropna(subset=["reappointment_rate"])
      .groupby("year")
      .first()
      .reset_index()
      .rename(columns={"org": "top_org", "reappointment_rate": "max_rate"})
)

# Save to CSV
top_orgs.to_csv(output_csv, index=False)

# Drop rows with missing or invalid years before plotting
plot_df = top_orgs.dropna(subset=["year", "max_rate"]).copy()
plot_df["year"] = plot_df["year"].astype(int)

plt.figure(figsize=(10, 6))
plt.plot(plot_df["year"], plot_df["max_rate"], marker='o', linestyle='-')
plt.title("Top Organization Reappointment Rates by Year")
plt.xlabel("Year")
plt.ylabel("Max Reappointment Rate")
plt.grid(True)
plt.xticks(plot_df["year"].tolist())
plt.tight_layout()
plt.savefig(output_plot)

# Print the year-by-year results
print("Top organizations by year based on reappointment rate:")
print(top_orgs)

