#!/usr/bin/env python3

import pandas as pd
import numpy as np
import sys
from pathlib import Path
from scipy.stats import linregress
from statsmodels.stats.stattools import durbin_watson

# Define file paths
base_dir = Path("scripts/gpt4o/version1/execution9")
input_csv = base_dir / "analysis_data" / "step8_annual_proportions.csv"
output_txt = base_dir / "analysis_data" / "step9_regression_results.txt"

try:
    # Step 1: Load the data
    df = pd.read_csv(input_csv)
except FileNotFoundError:
    print(f"Error: File not found - {input_csv}", file=sys.stderr)
    sys.exit(1)

# Step 2: Validate and prepare data
required_cols = ["year", "reappointment_proportion"]
if not all(col in df.columns for col in required_cols):
    print(f"Error: Required columns not found in {input_csv}", file=sys.stderr)
    sys.exit(1)

df = df.dropna(subset=["year", "reappointment_proportion"])
df["year"] = df["year"].astype(int)
df = df.sort_values("year")

X = df["year"].values
Y = df["reappointment_proportion"].values

if len(X) < 2:
    print("Error: Not enough data points for regression.", file=sys.stderr)
    sys.exit(1)

# Step 3: Linear regression
reg = linregress(X, Y)
slope = reg.slope
intercept = reg.intercept
r_value = reg.rvalue
r_squared = r_value**2
p_value = reg.pvalue
std_err = reg.stderr

# Step 4: Confidence intervals (approximate, normal distribution)
from scipy.stats import t
n = len(X)
df_resid = n - 2
t_crit = t.ppf(0.975, df_resid)
ci_lower = slope - t_crit * std_err
ci_upper = slope + t_crit * std_err

# Step 5: Regression diagnostics
from statsmodels.api import add_constant, OLS
X_const = add_constant(X)
model = OLS(Y, X_const).fit()
dw_stat = durbin_watson(model.resid)
outliers = df[np.abs(model.get_influence().resid_studentized_internal) > 3]

# Step 6–8: Significance and trend interpretation
trend_direction = "increasing" if slope > 0 else "decreasing"
is_significant = p_value < 0.05
annual_change_pct = slope * 100
total_change_pct = (X[-1] - X[0]) * annual_change_pct

# Step 9: Save detailed results
with open(output_txt, "w") as f:
    f.write("=== Government-wide Reappointment Proportion Trend Analysis ===\n\n")
    f.write("Linear Regression Summary:\n")
    f.write(f"  Slope: {slope:.6f} ({annual_change_pct:.2f} percentage points/year)\n")
    f.write(f"  Intercept: {intercept:.6f}\n")
    f.write(f"  R-squared: {r_squared:.4f}\n")
    f.write(f"  p-value: {p_value:.4f} {'(significant)' if is_significant else '(not significant)'}\n")
    f.write(f"  Std. Error: {std_err:.6f}\n")
    f.write(f"  95% CI for slope: [{ci_lower:.6f}, {ci_upper:.6f}]\n")
    f.write(f"  Durbin-Watson statistic: {dw_stat:.3f}\n\n")

    f.write("Trend Interpretation:\n")
    f.write(f"  Trend direction: {trend_direction}\n")
    f.write(f"  Statistically significant: {'Yes' if is_significant else 'No'}\n")
    f.write(f"  Total change over period: {total_change_pct:.2f} percentage points\n\n")

    if not outliers.empty:
        f.write("Potential outliers (studentized residual > 3):\n")
        f.write(outliers[["year", "reappointment_proportion"]].to_string(index=False))
    else:
        f.write("No significant outliers detected.\n")

# Step 10: Print final conclusion
print("Government-wide reappointment trend analysis (2013–2024):")
print(f"→ Trend is {trend_direction} and is {'statistically significant' if is_significant else 'not statistically significant'}.")
