#!/usr/bin/env python3
"""
Script to identify repeat appointments based on name, position, and org.

Steps:
1. Load 'step2_key_columns_data.csv'
2. Group by name-position-org and mark all but first year as reappointments
3. Handle possible name variations and missing data
4. Print number of new reappointments identified
5. Save updated dataset as 'step3_repeats_marked.csv'

Author: GPT-4o
Date: 2025-06-11
"""

import pandas as pd
from pathlib import Path
import sys

def main():
    input_path = Path("scripts/gpt4o/version1/analysis_data/step2_key_columns_data.csv")
    output_path = Path("scripts/gpt4o/version1/analysis_data/step3_repeats_marked.csv")

    try:
        df = pd.read_csv(input_path)
    except FileNotFoundError:
        print(f"✗ File not found: {input_path}")
        sys.exit(1)
    except Exception as e:
        print(f"✗ Error loading data: {e}")
        sys.exit(1)

    required_columns = {"name", "position", "org", "year", "reappointed"}
    if not required_columns.issubset(df.columns):
        print(f"✗ Dataset must contain columns: {required_columns}")
        sys.exit(1)

    # Ensure data types are correct
    try:
        df["year"] = pd.to_numeric(df["year"], errors="coerce")
        df["reappointed"] = df["reappointed"].astype(bool)
    except Exception as e:
        print(f"✗ Error converting data types: {e}")
        sys.exit(1)

    # Track original reappointment count
    original_reappointed_count = df["reappointed"].sum()

    # Normalize name/position/org to reduce variation issues
    df["__name_norm"] = df["name"].astype(str).str.strip().str.lower()
    df["__position_norm"] = df["position"].astype(str).str.strip().str.lower()
    df["__org_norm"] = df["org"].astype(str).str.strip().str.lower()

    # Sort chronologically using stable sort
    df = df.sort_values(by=["__name_norm", "__position_norm", "__org_norm", "year"], kind="stable")

    # Initialize mask for new reappointments
    new_reappointed_mask = pd.Series(False, index=df.index)

    # Group and mark repeats
    group_cols = ["__name_norm", "__position_norm", "__org_norm"]
    grouped = df.groupby(group_cols)

    for group_key, group_df in grouped:
        if group_df.empty or group_df["year"].isnull().all():
            continue

        sorted_group = group_df.sort_values(by="year", kind="stable")
        idx_to_mark = sorted_group.iloc[1:].index.tolist()  # all but first
        new_reappointed_mask.loc[idx_to_mark] = True

    # Combine with existing reappointment info
    updates_to_apply = new_reappointed_mask & (~df["reappointed"])
    df.loc[updates_to_apply, "reappointed"] = True

    # Final reappointed count
    final_reappointed_count = df["reappointed"].sum()
    additional_marked = final_reappointed_count - original_reappointed_count

    # Drop helper columns
    df.drop(columns=["__name_norm", "__position_norm", "__org_norm"], inplace=True)

    # Save result
    df.to_csv(output_path, index=False)
    print(f"✓ Saved updated dataset to {output_path}")

    # Summary
    print(f"\n→ Original reappointments: {original_reappointed_count:,}")
    print(f"→ Additional marked as reappointments: {additional_marked:,}")
    print(f"→ Total reappointments after update: {final_reappointed_count:,}")

if __name__ == "__main__":
    main()
