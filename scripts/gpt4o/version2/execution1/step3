# File: scripts/gpt4o/version2/execution1/step3_mark_reappointments.py

import pandas as pd
from pathlib import Path

# Define input/output paths
INPUT_FILE = Path("scripts/gpt4o/version2/execution1/analysis_data/step2_key_columns_data.csv")
OUTPUT_DIR = Path("scripts/gpt4o/version2/execution1/analysis_data")
OUTPUT_FILE = OUTPUT_DIR / "step3_repeats_marked.csv"

def mark_reappointments():
    try:
        if not INPUT_FILE.exists():
            raise FileNotFoundError(f"Input file not found: {INPUT_FILE}")

        df = pd.read_csv(INPUT_FILE)
        print(f"Loaded dataset with {len(df)} records.")

        # Normalize relevant fields
        df["name"] = df["name"].astype(str).str.strip().str.lower()
        df["position"] = df["position"].astype(str).str.strip().str.lower()
        df["org"] = df["org"].astype(str).str.strip().str.lower()

        # Sort data to ensure first appearance comes first
        df = df.sort_values(by=["name", "position", "org", "year"])

        # Mark reappointments based on repeat appearances
        df["reappointed"] = df.duplicated(subset=["name", "position", "org"], keep="first")

        # Summary statistics
        reappointed_count = df["reappointed"].sum()
        total = len(df)
        print(f"Marked {reappointed_count} reappointments out of {total} records ({(reappointed_count/total):.2%}).")

        # Save output
        OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
        df.to_csv(OUTPUT_FILE, index=False)
        print(f"Saved result to {OUTPUT_FILE}")

    except Exception as e:
        print(f"Error during reappointment marking: {e}")

if __name__ == "__main__":
    mark_reappointments()
