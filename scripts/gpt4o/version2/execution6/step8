# File: scripts/gpt4o/version2/execution6/step8_annual_reappointment_proportion.py

import pandas as pd
from pathlib import Path

# Define paths
INPUT_FILE = Path("scripts/gpt4o/version2/execution6/analysis_data/step3_repeats_marked.csv")
OUTPUT_DIR = Path("scripts/gpt4o/version2/execution6/analysis_data")
OUTPUT_FILE = OUTPUT_DIR / "step8_annual_proportions.csv"

# Ensure output directory exists
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

print("Starting Step 8: Calculating government-wide reappointment proportions by year...")

# Load repeat-marked data
try:
    df = pd.read_csv(INPUT_FILE)
    print(f"Loaded repeat-marked data: {df.shape}")
except Exception as e:
    raise RuntimeError(f"Failed to load input file: {e}")

# Ensure reappointed is boolean
if df['reappointed'].dtype != 'bool':
    df['reappointed'] = df['reappointed'].astype(bool)

# Check source_year column
if 'source_year' not in df.columns:
    raise ValueError("Missing required column: 'source_year'")

# Group by year and calculate proportion
yearly_proportions = (
    df.groupby('source_year')['reappointed']
    .agg(['sum', 'count'])
    .rename(columns={'sum': 'reappointment_count', 'count': 'total_count'})
    .reset_index()
)

yearly_proportions['reappointment_proportion'] = (
    yearly_proportions['reappointment_count'] / yearly_proportions['total_count']
)

print(f"Computed proportions for {len(yearly_proportions)} years.")

# Save result
yearly_proportions.to_csv(OUTPUT_FILE, index=False)
print(f"Step 8 complete: Annual reappointment proportions saved to {OUTPUT_FILE}")
