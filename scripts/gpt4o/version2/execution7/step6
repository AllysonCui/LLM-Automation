import pandas as pd
from pathlib import Path

# Define file paths
employee_counts_file = Path("scripts/gpt4o/version2/execution7/analysis_data/step4_employee_counts.csv")
reappointment_counts_file = Path("scripts/gpt4o/version2/execution7/analysis_data/step5_reappointment_counts.csv")
output_dir = Path("scripts/gpt4o/version2/execution7/analysis_data")
output_file = output_dir / "step6_reappointment_rates.csv"

# Ensure output directory exists
output_dir.mkdir(parents=True, exist_ok=True)

print("Starting Step 6: Calculating reappointment rates for each org-year...")

# Check files exist
if not employee_counts_file.exists():
    raise FileNotFoundError(f"[ERROR] Missing employee counts file: {employee_counts_file}")
if not reappointment_counts_file.exists():
    raise FileNotFoundError(f"[ERROR] Missing reappointment counts file: {reappointment_counts_file}")

# Load data
employees_df = pd.read_csv(employee_counts_file)
reappointments_df = pd.read_csv(reappointment_counts_file)

print(f"[INFO] Loaded {len(employees_df)} employee records and {len(reappointments_df)} reappointment records.")

# Merge both datasets on org and source_year
merged_df = pd.merge(
    employees_df,
    reappointments_df,
    on=["org", "source_year"],
    how="left"  # keep all org-year combinations from employee data
)

# Fill missing reappointments with 0 (i.e., no reappointments)
merged_df["reappointments"] = merged_df["reappointments"].fillna(0)

# Avoid division by zero
merged_df["reappointment_rate"] = merged_df.apply(
    lambda row: row["reappointments"] / row["total_appointments"]
    if row["total_appointments"] > 0 else 0,
    axis=1
)

# Save output
merged_df.to_csv(output_file, index=False)
print(f"[SUCCESS] Saved reappointment rates to {output_file} with {len(merged_df)} records.")
