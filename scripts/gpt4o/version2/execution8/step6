# scripts/gpt4o/version2/execution8/step6_reappointment_rates.py

import pandas as pd
from pathlib import Path

# Define input/output paths
emp_count_path = Path("scripts/gpt4o/version2/execution8/analysis_data/step4_employee_counts.csv")
reappt_count_path = Path("scripts/gpt4o/version2/execution8/analysis_data/step5_reappointment_counts.csv")
output_path = Path("scripts/gpt4o/version2/execution8/analysis_data/step6_reappointment_rates.csv")
output_path.parent.mkdir(parents=True, exist_ok=True)

def main():
    print("Step 6: Calculating reappointment rates per org-year...")

    # Validate input files
    if not emp_count_path.exists():
        print(f"‚ùå Missing file: {emp_count_path}")
        return
    if not reappt_count_path.exists():
        print(f"‚ùå Missing file: {reappt_count_path}")
        return

    try:
        # Load data
        emp_df = pd.read_csv(emp_count_path)
        reappt_df = pd.read_csv(reappt_count_path)

        # Merge on org and source_year
        merged_df = pd.merge(
            emp_df, reappt_df,
            on=["org", "source_year"],
            how="left"
        )

        # Fill missing reappointment counts with 0
        merged_df["reappointment_count"] = merged_df["reappointment_count"].fillna(0)

        # Calculate reappointment rate
        merged_df["reappointment_rate"] = (
            merged_df["reappointment_count"] / merged_df["appointment_count"]
        ).round(4)


        # Save result
        merged_df.to_csv(output_path, index=False)
        print(f"‚úÖ Reappointment rates saved to {output_path}")
        print(f"üî¢ Total rows: {len(merged_df)}")
    except Exception as e:
        print(f"‚ùå Error during processing: {e}")

if __name__ == "__main__":
    main()
