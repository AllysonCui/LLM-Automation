import pandas as pd
import numpy as np
from pathlib import Path
from scipy import stats
from statsmodels.stats.stattools import durbin_watson
import statsmodels.api as sm

# Input and output files
input_file = Path("scripts/gpt4o/version2/analysis_data/step8_annual_proportions.csv")
output_file = Path("scripts/gpt4o/version2/analysis_data/step9_regression_results.txt")

if not input_file.exists():
    print(f"[Error] Input file not found: {input_file}")
else:
    try:
        df = pd.read_csv(input_file)
        print(f"[✓] Loaded annual proportions: {len(df)} rows")

        # Independent (X) and dependent (Y) variables
        X = df['source_year']
        Y = df['reappointment_proportion']

        # Run regression
        slope, intercept, r_value, p_value, std_err = stats.linregress(X, Y)

        # Calculate predictions and residuals
        y_pred = intercept + slope * X
        residuals = Y - y_pred

        # Durbin-Watson test for autocorrelation
        dw_stat = durbin_watson(residuals)

        # 95% confidence interval for slope
        n = len(X)
        t_crit = stats.t.ppf(0.975, df=n - 2)
        ci_margin = t_crit * std_err
        slope_ci_lower = slope - ci_margin
        slope_ci_upper = slope + ci_margin

        # Outlier detection (standardized residuals > 2)
        std_residuals = (residuals - residuals.mean()) / residuals.std()
        outliers = df[np.abs(std_residuals) > 2]

        # Save results
        with open(output_file, "w") as f:
            f.write("=== Linear Regression: Reappointment Proportion ~ Year ===\n")
            f.write(f"Intercept: {intercept:.6f}\n")
            f.write(f"Slope: {slope:.6f} ({'Positive' if slope > 0 else 'Negative'})\n")
            f.write(f"R-squared: {r_value**2:.4f}\n")
            f.write(f"p-value: {p_value:.4f} {'(Significant)' if p_value < 0.05 else '(Not Significant)'}\n")
            f.write(f"Standard Error: {std_err:.6f}\n")
            f.write(f"95% CI for Slope: [{slope_ci_lower:.6f}, {slope_ci_upper:.6f}]\n")
            f.write(f"Durbin-Watson Statistic: {dw_stat:.4f}\n")
            f.write(f"Total change over period: {slope * (X.max() - X.min()):.4f} points\n")
            f.write(f"Annual change: {slope * 100:.4f} percentage points per year\n")
            f.write(f"\nOutlier years (std residual > 2):\n")
            f.write(outliers.to_string(index=False))

        print(f"[✓] Regression results saved to: {output_file}")
        print(f"[✓] Final Answer: Trend is {'increasing' if slope > 0 else 'decreasing'}, "
              f"{'statistically significant' if p_value < 0.05 else 'not significant'}.")

    except Exception as e:
        print(f"[Error] Step 9 failed: {e}")
