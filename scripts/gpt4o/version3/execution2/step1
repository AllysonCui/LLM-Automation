import os
import pandas as pd
from pathlib import Path
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import numpy as np

# Define paths
raw_data_path = Path("raw_data")
analysis_data_path = Path("scripts/gpt4o/version3/execution2/analysis_data")
analysis_data_path.mkdir(parents=True, exist_ok=True)

# Step 1: Combine all datasets
combined = pd.concat([
    pd.read_csv(raw_data_path / f"appointments_{year}.csv").assign(year=year)
    for year in range(2013, 2025)
], ignore_index=True)
combined.to_csv(analysis_data_path / "step1_combined_appointments.csv", index=False)

# Step 2: Extract key columns
key_cols = ["reappointed", "name", "position", "org", "year"]
df = combined[key_cols].copy()
df.to_csv(analysis_data_path / "step2_key_columns_data.csv", index=False)

# Step 3: Mark reappointments
df["reappointed"] = False
df.sort_values(by=["name", "position", "org", "year"], inplace=True)
df["reappointed"] = df.duplicated(subset=["name", "position", "org"], keep="first")
df.to_csv(analysis_data_path / "step3_repeats_marked.csv", index=False)

# Step 4: Count total appointments per org-year
total_counts = df.groupby(["org", "year"]).size().reset_index(name="total_appointments")
total_counts.to_csv(analysis_data_path / "step4_appointment_counts.csv", index=False)

# Step 5: Count reappointments per org-year
reappointment_counts = df[df["reappointed"]].groupby(["org", "year"]).size().reset_index(name="reappointment_count")
reappointment_counts.to_csv(analysis_data_path / "step5_reappointment_counts.csv", index=False)

# Step 6: Calculate reappointment rates
merged = pd.merge(total_counts, reappointment_counts, on=["org", "year"], how="left")
merged["reappointment_count"].fillna(0, inplace=True)
merged["reappointment_rate"] = merged["reappointment_count"] / merged["total_appointments"]
merged.to_csv(analysis_data_path / "step6_reappointment_rates.csv", index=False)

# Step 7: Identify org with highest reappointment rate per year
max_rate_per_year = merged.loc[merged.groupby("year")["reappointment_rate"].idxmax()].reset_index(drop=True)
max_rate_per_year.to_csv(analysis_data_path / "step7_yearly_max_rates.csv", index=False)

# Plot max org reappointment rates per year
plt.figure(figsize=(10, 6))
plt.plot(max_rate_per_year["year"], max_rate_per_year["reappointment_rate"], marker='o')
plt.title("Yearly Maximum Reappointment Rates by Organization")
plt.xlabel("Year")
plt.ylabel("Reappointment Rate")
plt.grid(True)
plt.tight_layout()
plt.savefig(analysis_data_path / "step7_yearly_max_reappointment_rates.png")
plt.close()

# Step 8: Compute government-wide annual reappointment proportion
annual_reappointments = df.groupby("year")["reappointed"].mean().reset_index(name="gov_reappointment_rate")
annual_reappointments.to_csv(analysis_data_path / "step8_annual_proportions.csv", index=False)

# Plot government-wide reappointment rate
plt.figure(figsize=(10, 6))
plt.plot(annual_reappointments["year"], annual_reappointments["gov_reappointment_rate"], marker='o')
plt.title("Government-Wide Annual Reappointment Proportion")
plt.xlabel("Year")
plt.ylabel("Reappointment Proportion")
plt.grid(True)
plt.tight_layout()
plt.savefig(analysis_data_path / "step8_annual_reappointment_proportions.png")
plt.close()

# Step 9: Linear regression on annual proportions
X = annual_reappointments["year"].values.reshape(-1, 1)
y = annual_reappointments["gov_reappointment_rate"].values
model = LinearRegression().fit(X, y)
slope = model.coef_[0]
intercept = model.intercept_
r_squared = model.score(X, y)

with open(analysis_data_path / "step9_regression_results.txt", "w") as f:
    f.write(f"Slope: {slope:.6f}\n")
    f.write(f"Intercept: {intercept:.6f}\n")
    f.write(f"R-squared: {r_squared:.6f}\n")

print("Analysis complete. Results saved in:", analysis_data_path)
