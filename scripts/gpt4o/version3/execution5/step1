import os
import pandas as pd
from pathlib import Path
import matplotlib.pyplot as plt
import statsmodels.api as sm

# Paths
raw_data_dir = Path("raw_data")
output_dir = Path("scripts/gpt4o/version3/execution5/analysis_data")
output_dir.mkdir(parents=True, exist_ok=True)

# Step 1: Combine 12 CSV files
all_years = []
for year in range(2013, 2025):
    file_path = raw_data_dir / f"appointments_{year}.csv"
    df = pd.read_csv(file_path)
    df['year'] = year
    all_years.append(df)

combined = pd.concat(all_years, ignore_index=True)
combined.to_csv(output_dir / "step1_combined_appointments.csv", index=False)

# Step 2: Extract key columns
key_cols = ["reappointed", "name", "position", "org", "year"]
df_key = combined[key_cols].copy()
df_key.to_csv(output_dir / "step2_key_columns_data.csv", index=False)

# Step 3: Mark reappointments by combination of name-position-org
df_key["reappointed"] = False
df_key.sort_values(by="year", inplace=True)
seen = set()

def mark_reappointed(row):
    key = (row["name"], row["position"], row["org"])
    if key in seen:
        return True
    seen.add(key)
    return False

df_key["reappointed"] = df_key.apply(mark_reappointed, axis=1)
df_key.to_csv(output_dir / "step3_repeats_marked.csv", index=False)

# Step 4: Count total number of appointments per org per year
appointment_counts = df_key.groupby(["org", "year"]).size().reset_index(name="total_appointments")
appointment_counts.to_csv(output_dir / "step4_appointment_counts.csv", index=False)

# Step 5: Count reappointments per org per year
reappoint_counts = df_key[df_key["reappointed"]].groupby(["org", "year"]).size().reset_index(name="reappointments")
reappoint_counts.to_csv(output_dir / "step5_reappointment_counts.csv", index=False)

# Step 6: Calculate reappointment rate
merged = pd.merge(appointment_counts, reappoint_counts, on=["org", "year"], how="left").fillna(0)
merged["reappointment_rate"] = merged["reappointments"] / merged["total_appointments"]
merged.to_csv(output_dir / "step6_reappointment_rates.csv", index=False)

# Step 7: Org with highest reappointment rate per year
idx = merged.groupby("year")["reappointment_rate"].idxmax()
yearly_max = merged.loc[idx].sort_values("year")
yearly_max.to_csv(output_dir / "step7_yearly_max_rates.csv", index=False)

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(yearly_max["year"], yearly_max["reappointment_rate"], marker='o')
plt.title("Highest Organizational Reappointment Rates by Year")
plt.xlabel("Year")
plt.ylabel("Reappointment Rate")
plt.grid(True)
plt.savefig(output_dir / "step7_yearly_max_reappointment_rates.png")
plt.close()

# Step 8: Government-wide reappointment proportions per year
annual_totals = df_key.groupby("year").size()
annual_reappts = df_key[df_key["reappointed"]].groupby("year").size()
annual_proportion = (annual_reappts / annual_totals).reset_index(name="govt_reappointment_proportion")
annual_proportion.to_csv(output_dir / "step8_annual_proportions.csv", index=False)

# Plot proportions
plt.figure(figsize=(10, 6))
plt.plot(annual_proportion["year"], annual_proportion["govt_reappointment_proportion"], marker='o')
plt.title("Government-wide Annual Reappointment Proportion")
plt.xlabel("Year")
plt.ylabel("Proportion")
plt.grid(True)
plt.savefig(output_dir / "step8_annual_reappointment_proportions.png")
plt.close()

# Step 9: Linear regression to assess trend
X = sm.add_constant(annual_proportion["year"])
y = annual_proportion["govt_reappointment_proportion"]
model = sm.OLS(y, X).fit()
with open(output_dir / "step9_regression_results.txt", "w") as f:
    f.write(model.summary().as_text())

# Save summary and slope
output_path = os.path.join(output_dir, 'step9_regression_results.txt')
with open(output_path, 'w') as f:
    f.write(model.summary().as_text())
    slope = model.params['year']
    f.write(f"\n\nSlope: {slope:.6f}\n")
