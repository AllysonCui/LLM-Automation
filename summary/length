#!/usr/bin/env python3

import os
from pathlib import Path
from collections import defaultdict

# Define base directories
base_dirs = [
    "scripts/gpt4o/version1",
    "scripts/gpt4o/version2",
    "scripts/gpt4o/version3",
    "scripts/claudeopus4/version1",
    "scripts/claudesonnet4/version1"
]

# Store total lines and counts
results = defaultdict(lambda: {"total_lines": 0, "script_count": 0})

for base_dir in base_dirs:
    model = Path(base_dir).parts[1]
    version = Path(base_dir).parts[2]
    key = (model, version)

    if not os.path.isdir(base_dir):
        continue

    for item in os.listdir(base_dir):
        if not item.startswith("execution"):
            continue
        exec_path = os.path.join(base_dir, item)
        if not os.path.isdir(exec_path):
            continue

        for file in os.listdir(exec_path):
            if file.startswith("step"):
                script_path = os.path.join(exec_path, file)
                try:
                    with open(script_path, "r", encoding="utf-8") as f:
                        line_count = sum(1 for _ in f)
                        results[key]["total_lines"] += line_count
                        results[key]["script_count"] += 1
                except Exception as e:
                    print(f"Failed to read {script_path}: {e}")

# Print markdown table
print("| Model         | Version   | Average Script Length |")
print("|---------------|-----------|------------------------|")
for (model, version), data in sorted(results.items()):
    if data["script_count"] == 0:
        avg_length = "N/A"
    else:
        avg_length = round(data["total_lines"] / data["script_count"], 2)
    print(f"| {model:<13} | {version:<9} | {avg_length:<22} |")
