import os
import pandas as pd

# Columns to compare
key_columns = ["reappointed", "name", "position", "org", "year"]

def normalize_cell(value):
    if pd.isna(value):
        return "nan"
    if isinstance(value, str):
        normalized = value.strip().lower()
        if normalized in ["nan", "unknown", "missing", "unknown_org"]:
            return "nan"
        return normalized
    if isinstance(value, float) and value.is_integer():
        return str(int(value))  # e.g., 2024.0 → '2024'
    return str(value).lower()

sort_priority = ["name", "position", "org", "reappointed", "year"]

def create_sort_key(df):
    normalized_df = df[sort_priority].applymap(normalize_cell)
    return normalized_df.apply(lambda row: tuple(row), axis=1)

def safe_rename_columns(df):
    rename_dict = {
        "organization": "org",
        "source_year": "year",
        "data_year": "year"
    }
    return df.rename(columns={col: rename_dict[col] for col in rename_dict if col in df.columns})

# Load correct answer
correct_path = "summary/step_specific/step3/correct_answer/answer1.csv"
try:
    correct_df = pd.read_csv(correct_path)
    correct_df = safe_rename_columns(correct_df)
    correct_df = correct_df[key_columns].copy()
except Exception as e:
    print(f"Failed to read correct answer file: {e}")
    exit(1)

# Normalize and sort correct answer
sort_key = create_sort_key(correct_df)
correct_df = correct_df.iloc[sort_key.argsort()].reset_index(drop=True)
normalized_correct_df = correct_df[key_columns].applymap(normalize_cell)

# Load step3 skip list
skip_step3_path = "summary/step_specific/step3/executions_to_skip.csv"
skip_step3_set = set()
if os.path.exists(skip_step3_path):
    try:
        skip_df = pd.read_csv(skip_step3_path)
        skip_step3_set = set(skip_df["execution"].astype(str))
        print(f"🔁 Skipping {len(skip_step3_set)} executions listed in step3 skip file")
    except Exception as e:
        print(f"⚠️ Failed to load step3 skip list: {e}")

# Prepare expected executions
expected_branches = [
    ("gpt4o", "version1"),
    ("gpt4o", "version2"),
    ("gpt4o", "version3"),
    ("claudeopus4", "version1"),
    ("claudeopus4", "version2"),
    ("claudeopus4", "version3"),
    ("claudesonnet4", "version1"),
    ("claudesonnet4", "version2"),
    ("claudesonnet4", "version3")
]

expected_executions = {
    f"scripts/{model}/{version}/execution{n}"
    for model, version in expected_branches
    for n in range(1, 11)
}

found_executions = set()
current_step_failures = []  # step 4 specific issues

root_dir = "scripts"

for model in os.listdir(root_dir):
    model_path = os.path.join(root_dir, model)
    if not os.path.isdir(model_path):
        continue

    for version in os.listdir(model_path):
        version_path = os.path.join(model_path, version)
        if not os.path.isdir(version_path):
            continue

        for folder in os.listdir(version_path):
            if not folder.startswith("execution"):
                continue

            execution_dir = f"{model}/{version}/{folder}"
            if execution_dir in skip_step3_set:
                print(f"⏩ Skipping {execution_dir} (previously failed in step 3)")
                continue

            found_executions.add(f"scripts/{execution_dir}")
            step3_file = os.path.join(version_path, folder, "analysis_data", "step3_repeats_marked.csv")

            if not os.path.exists(step3_file):
                continue

            try:
                df = pd.read_csv(step3_file)
                df = safe_rename_columns(df)

                if not all(col in df.columns for col in key_columns):
                    print(f"{step3_file}: Missing columns")
                    continue

                df = df[key_columns].copy()
                sort_key = create_sort_key(df)
                df = df.iloc[sort_key.argsort()].reset_index(drop=True)
                normalized_df = df[key_columns].applymap(normalize_cell)

                if len(df) != len(correct_df):
                    print(f"{step3_file}: Row count mismatch ({len(df)} vs {len(correct_df)})")
                    current_step_failures.append(execution_dir)
                    continue

                mismatches = (normalized_df != normalized_correct_df)
                if mismatches.any().any():
                    print(f"{step3_file}: Value mismatch found")
                    current_step_failures.append(execution_dir)

                    mismatch_count = 0
                    for idx in mismatches.index:
                        for col in key_columns:
                            if mismatches.at[idx, col]:
                                found_val = normalize_cell(df.at[idx, col])
                                expected_val = normalize_cell(correct_df.at[idx, col])
                                if found_val != expected_val:
                                    print(f"  Row {idx}, Column '{col}': found = '{df.at[idx, col]}', expected = '{correct_df.at[idx, col]}'")
                                    mismatch_count += 1
                                    if mismatch_count >= 5:
                                        break
                        if mismatch_count >= 5:
                            break

            except Exception as e:
                print(f"{step3_file}: Failed to read/compare ({e})")

# Report missing executions (excluding skipped ones)
missing = expected_executions - found_executions - {f"scripts/{e}" for e in skip_step3_set}
if missing:
    print(f"\nMissing {len(missing)} executions (excluding skipped):")
    for m in sorted(missing):
        print(f"  {m}/analysis_data/step3_repeats_marked.csv")
else:
    print(f"\n✓ All expected executions were found or skipped")

# Combine and save total skip list for step 4
all_skips_step4_8 = sorted(set(current_step_failures).union(skip_step3_set))

output_dir1 = "summary/step_specific/step4"
output_dir2 = "summary/step_specific/step8"
os.makedirs(output_dir1, exist_ok=True)
os.makedirs(output_dir2, exist_ok=True)
skip_path1 = os.path.join(output_dir1, "executions_to_skip.csv")
skip_path2 = os.path.join(output_dir2, "executions_to_skip.csv")

pd.DataFrame({"execution": all_skips_step4_8}).to_csv(skip_path1, index=False)
pd.DataFrame({"execution": all_skips_step4_8}).to_csv(skip_path2, index=False)
print(f"\n🚫 Saved {len(all_skips_step4_8)} total skipped executions to: {skip_path1}")
print(f"\n🚫 Saved {len(all_skips_step4_8)} total skipped executions to: {skip_path2}")