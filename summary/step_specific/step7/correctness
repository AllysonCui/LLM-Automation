import os
import pandas as pd

# Canonical columns to check
expected_columns = ["top_org", "year", "max_rate"]

def normalize_cell(value):
    if pd.isna(value):
        return "nan"
    if isinstance(value, str):
        normalized = value.strip().lower()
        if normalized in ["nan", "unknown", "missing", "unknown_org", "unknown organization"]:
            return "nan"
        return normalized
    if isinstance(value, float) and value.is_integer():
        return str(int(value))
    return str(value).lower()

def normalize_columns(df):
    rename_dict = {
        "top_organization": "top_org",
        "source_year": "year",
        "appointment_count": "total_appointments",
        "data_year": "year"
    }
    return df.rename(columns={col: rename_dict[col] for col in rename_dict if col in df.columns})

def clean_rate(value):
    try:
        if pd.isna(value) or str(value).strip() == "":
            return 0.0
        val = float(value)
        if 0 <= val <= 1:
            return round(val, 6)
        elif 0 < val <= 100:
            return round(val / 100.0, 6)
    except:
        return 0.0
    return 0.0

# Load correct answer
try:
    answer1 = pd.read_csv("summary/step_specific/step7/correct_answer/answer1.csv")
    answer1 = normalize_columns(answer1)
except Exception as e:
    print(f"‚ùå Failed to load answer1: {e}")
    exit(1)

# Load skip list
skip_step7_path = "summary/step_specific/step7/executions_to_skip.csv"
skip_step7_set = set()
if os.path.exists(skip_step7_path):
    try:
        skip_df = pd.read_csv(skip_step7_path)
        skip_step7_set = set(skip_df["execution"].astype(str))
        print(f"üîÅ Skipping {len(skip_step7_set)} executions listed in step7 skip file")
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to load step7 skip list: {e}")

# Expected executions
expected_branches = [
    ("gpt4o", "version1"), ("gpt4o", "version2"), ("gpt4o", "version3"),
    ("claudeopus4", "version1"), ("claudeopus4", "version2"), ("claudeopus4", "version3"),
    ("claudesonnet4", "version1"), ("claudesonnet4", "version2"), ("claudesonnet4", "version3")
]
expected_executions = {
    f"scripts/{model}/{version}/execution{n}"
    for model, version in expected_branches for n in range(1, 11)
}

found_executions = set()
current_step_failures = []
root_dir = "scripts"

for model in os.listdir(root_dir):
    model_path = os.path.join(root_dir, model)
    if not os.path.isdir(model_path): continue

    for version in os.listdir(model_path):
        version_path = os.path.join(model_path, version)
        if not os.path.isdir(version_path): continue

        for folder in os.listdir(version_path):
            if not folder.startswith("execution"): continue

            execution_dir = f"{model}/{version}/{folder}"
            if execution_dir in skip_step7_set:
                print(f"‚è© Skipping {execution_dir}")
                continue

            found_executions.add(f"scripts/{execution_dir}")
            step7_file = os.path.join(version_path, folder, "analysis_data", "step7_yearly_max_rates.csv")
            if not os.path.exists(step7_file): continue

            try:
                df = pd.read_csv(step7_file)
                df = normalize_columns(df)

                if len(df) != 528:
                    continue

                # Normalize both answer and df
                df_sub = df[expected_columns].copy()
                expected_sub = answer1[expected_columns].copy()

                for col in ["top_org", "year"]:
                    df_sub[col] = df_sub[col].map(normalize_cell)
                    expected_sub[col] = expected_sub[col].map(normalize_cell)

                df_sub["max_rate"] = df_sub["max_rate"].map(clean_rate)
                expected_sub["max_rate"] = expected_sub["max_rate"].map(clean_rate)

                df_sub = df_sub[df_sub["top_org"] != "nan"]
                expected_sub = expected_sub[expected_sub["top_org"] != "nan"]

                df_set = set(map(tuple, df_sub.values.tolist()))
                expected_set = set(map(tuple, expected_sub.values.tolist()))

                if df_set != expected_set:
                    print(f"{step7_file}: ‚ùå Mismatch in max_rate rows")
                    current_step_failures.append(execution_dir)

                    extra_rows = df_set - expected_set
                    missing_rows = expected_set - df_set

                    for i, row in enumerate(sorted(extra_rows)):
                        print(f"   ‚úñ Unexpected row: {row}")
                        if i >= 2: break

                    for i, row in enumerate(sorted(missing_rows)):
                        print(f"   ‚úîÔ∏è Expected row not found: {row}")
                        if i >= 2: break

            except Exception as e:
                print(f"{step7_file}: ‚ùå Failed to read/compare ({e})")
                current_step_failures.append(execution_dir)

# Report missing executions
missing = expected_executions - found_executions - {f"scripts/{e}" for e in skip_step7_set}
if missing:
    print(f"\nMissing {len(missing)} executions (excluding skipped):")
    for m in sorted(missing):
        print(f"  {m}/analysis_data/step7_yearly_max_rates.csv")
else:
    print(f"\n‚úì All expected executions were found or skipped")

# Save step8 skip list
all_skips_step8 = sorted(set(current_step_failures).union(skip_step7_set))
output_dir = "summary/step_specific/step8"
os.makedirs(output_dir, exist_ok=True)
skip_path = os.path.join(output_dir, "executions_to_skip.csv")

pd.DataFrame({"execution": all_skips_step8}).to_csv(skip_path, index=False)
print(f"\nüö´ Saved {len(all_skips_step8)} total skipped executions to: {skip_path}")
